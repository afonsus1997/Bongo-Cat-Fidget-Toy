
Bongo-cat-fidget-toy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b8  080000b8  080000b8  000010b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035f0  08004770  08004770  00005770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d60  08007d60  000090f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007d60  08007d60  000090f8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007d60  08007d60  000090f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d60  08007d60  00008d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d64  08007d64  00008d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  08007d68  00009000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000674  200000f8  08007e60  000090f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08007e60  0000976c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000090f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f490  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac1  00000000  00000000  000185b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0001b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c55  00000000  00000000  0001c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162bf  00000000  00000000  0001ccbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cf1  00000000  00000000  00032f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089025  00000000  00000000  00046c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfc92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e48  00000000  00000000  000cfcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d3b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000f8 	.word	0x200000f8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004744 	.word	0x08004744

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000fc 	.word	0x200000fc
 80000fc:	08004744 	.word	0x08004744

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <toggle_display_invert>:
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

// timer value = desired_sec * 64e6/prescaler

void toggle_display_invert(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
    display_inverted = !display_inverted;
 8000406:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <toggle_display_invert+0x64>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	425a      	negs	r2, r3
 800040c:	4153      	adcs	r3, r2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	001a      	movs	r2, r3
 8000412:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <toggle_display_invert+0x64>)
 8000414:	701a      	strb	r2, [r3, #0]
    ssd1306_InvertDisplay(display_inverted);
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <toggle_display_invert+0x64>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	0018      	movs	r0, r3
 800041c:	f001 f950 	bl	80016c0 <ssd1306_InvertDisplay>

    // Mark data as changed
    data_changed = 1;
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <toggle_display_invert+0x68>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]

    // Visual feedback
    for(int i = 0; i < 2; i++) {
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	e012      	b.n	8000452 <toggle_display_invert+0x52>
        ssd1306_Fill(White);
 800042c:	2001      	movs	r0, #1
 800042e:	f000 fed9 	bl	80011e4 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000432:	f000 fef1 	bl	8001218 <ssd1306_UpdateScreen>
        HAL_Delay(50);
 8000436:	2032      	movs	r0, #50	@ 0x32
 8000438:	f001 fb3a 	bl	8001ab0 <HAL_Delay>
        ssd1306_Fill(Black);
 800043c:	2000      	movs	r0, #0
 800043e:	f000 fed1 	bl	80011e4 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000442:	f000 fee9 	bl	8001218 <ssd1306_UpdateScreen>
        HAL_Delay(50);
 8000446:	2032      	movs	r0, #50	@ 0x32
 8000448:	f001 fb32 	bl	8001ab0 <HAL_Delay>
    for(int i = 0; i < 2; i++) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3301      	adds	r3, #1
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b01      	cmp	r3, #1
 8000456:	dde9      	ble.n	800042c <toggle_display_invert+0x2c>
    }
}
 8000458:	46c0      	nop			@ (mov r8, r8)
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	200001bd 	.word	0x200001bd
 8000468:	200001dc 	.word	0x200001dc

0800046c <draw_animation>:

void draw_animation(char* frame){
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af02      	add	r7, sp, #8
 8000472:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 8000474:	2000      	movs	r0, #0
 8000476:	f000 feb5 	bl	80011e4 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,frame,128,64,White);
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	2301      	movs	r3, #1
 800047e:	9301      	str	r3, [sp, #4]
 8000480:	2340      	movs	r3, #64	@ 0x40
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	2380      	movs	r3, #128	@ 0x80
 8000486:	2100      	movs	r1, #0
 8000488:	2000      	movs	r0, #0
 800048a:	f001 f84d 	bl	8001528 <ssd1306_DrawBitmap>
}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}

08000496 <draw_animation_erase>:

void draw_animation_erase(char* frame){
 8000496:	b580      	push	{r7, lr}
 8000498:	b084      	sub	sp, #16
 800049a:	af02      	add	r7, sp, #8
 800049c:	6078      	str	r0, [r7, #4]
    ssd1306_DrawBitmap(0,0,frame,128,64,Black);
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	2300      	movs	r3, #0
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	2340      	movs	r3, #64	@ 0x40
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2380      	movs	r3, #128	@ 0x80
 80004aa:	2100      	movs	r1, #0
 80004ac:	2000      	movs	r0, #0
 80004ae:	f001 f83b 	bl	8001528 <ssd1306_DrawBitmap>
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}

080004ba <draw_animation_transparent>:

void draw_animation_transparent(char* frame){
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b084      	sub	sp, #16
 80004be:	af02      	add	r7, sp, #8
 80004c0:	6078      	str	r0, [r7, #4]
    ssd1306_DrawBitmap(0,0,frame,128,64,White);
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	2301      	movs	r3, #1
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2340      	movs	r3, #64	@ 0x40
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	2100      	movs	r1, #0
 80004d0:	2000      	movs	r0, #0
 80004d2:	f001 f829 	bl	8001528 <ssd1306_DrawBitmap>
}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <readPins>:

void readPins(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
    sw_state_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);
 80004e4:	23a0      	movs	r3, #160	@ 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2140      	movs	r1, #64	@ 0x40
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 feec 	bl	80022c8 <HAL_GPIO_ReadPin>
 80004f0:	0003      	movs	r3, r0
 80004f2:	001a      	movs	r2, r3
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <readPins+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
    sw_state_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <readPins+0x34>)
 80004fa:	2101      	movs	r1, #1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fee3 	bl	80022c8 <HAL_GPIO_ReadPin>
 8000502:	0003      	movs	r3, r0
 8000504:	001a      	movs	r2, r3
 8000506:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <readPins+0x38>)
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200001b4 	.word	0x200001b4
 8000514:	50000400 	.word	0x50000400
 8000518:	200001b8 	.word	0x200001b8

0800051c <display_tap_count_overlay>:

// Display tap count as overlay
void display_tap_count_overlay(void) {
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b08b      	sub	sp, #44	@ 0x2c
 8000520:	af02      	add	r7, sp, #8
    // Semi-transparent background box for readability
//    ssd1306_FillRectangle(0, 0, 127, 30, White);
//    ssd1306_FillRectangle(2, 2, 125, 28, Black);

    // Display title
    ssd1306_SetCursor(25, 3);
 8000522:	2103      	movs	r1, #3
 8000524:	2019      	movs	r0, #25
 8000526:	f000 ffe5 	bl	80014f4 <ssd1306_SetCursor>
    ssd1306_WriteString("TAP COUNT", ComicSans_11x12, White);
 800052a:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <display_tap_count_overlay+0x5c>)
 800052c:	4813      	ldr	r0, [pc, #76]	@ (800057c <display_tap_count_overlay+0x60>)
 800052e:	2201      	movs	r2, #1
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	6819      	ldr	r1, [r3, #0]
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	f000 ffb0 	bl	800149c <ssd1306_WriteString>

    // Display counts in a single line to save space
    sprintf(buffer, "T:%lu L:%lu R:%lu", total_taps, left_taps, right_taps);
 800053c:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <display_tap_count_overlay+0x64>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <display_tap_count_overlay+0x68>)
 8000542:	681c      	ldr	r4, [r3, #0]
 8000544:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <display_tap_count_overlay+0x6c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4910      	ldr	r1, [pc, #64]	@ (800058c <display_tap_count_overlay+0x70>)
 800054a:	0038      	movs	r0, r7
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	0023      	movs	r3, r4
 8000550:	f003 fc5a 	bl	8003e08 <siprintf>
    ssd1306_SetCursor(10, 15);
 8000554:	210f      	movs	r1, #15
 8000556:	200a      	movs	r0, #10
 8000558:	f000 ffcc 	bl	80014f4 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, ComicSans_11x12, White);
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <display_tap_count_overlay+0x5c>)
 800055e:	0038      	movs	r0, r7
 8000560:	2201      	movs	r2, #1
 8000562:	9200      	str	r2, [sp, #0]
 8000564:	6819      	ldr	r1, [r3, #0]
 8000566:	685a      	ldr	r2, [r3, #4]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f000 ff97 	bl	800149c <ssd1306_WriteString>
}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b009      	add	sp, #36	@ 0x24
 8000574:	bd90      	pop	{r4, r7, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	08007ce0 	.word	0x08007ce0
 800057c:	08004770 	.word	0x08004770
 8000580:	200001c0 	.word	0x200001c0
 8000584:	200001c4 	.word	0x200001c4
 8000588:	200001c8 	.word	0x200001c8
 800058c:	0800477c 	.word	0x0800477c

08000590 <display_saved_indicator>:

// Display saved indicator
void display_saved_indicator(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af02      	add	r7, sp, #8
    // Display "saved!" in bottom right corner
    ssd1306_SetCursor(85, 54);
 8000596:	2136      	movs	r1, #54	@ 0x36
 8000598:	2055      	movs	r0, #85	@ 0x55
 800059a:	f000 ffab 	bl	80014f4 <ssd1306_SetCursor>
    ssd1306_WriteString("saved!", ComicSans_11x12, White);
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <display_saved_indicator+0x28>)
 80005a0:	4806      	ldr	r0, [pc, #24]	@ (80005bc <display_saved_indicator+0x2c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	6819      	ldr	r1, [r3, #0]
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f000 ff76 	bl	800149c <ssd1306_WriteString>
}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	08007ce0 	.word	0x08007ce0
 80005bc:	08004790 	.word	0x08004790

080005c0 <save_settings>:

// Save all settings to flash
void save_settings(void) {
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b08c      	sub	sp, #48	@ 0x30
 80005c4:	af00      	add	r7, sp, #0

	HAL_FLASH_Unlock();
 80005c6:	f001 fbc3 	bl	8001d50 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80005ca:	2108      	movs	r1, #8
 80005cc:	2018      	movs	r0, #24
 80005ce:	180b      	adds	r3, r1, r0
 80005d0:	19db      	adds	r3, r3, r7
 80005d2:	2202      	movs	r2, #2
 80005d4:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = 31;  // Last page for 64KB device (not 15!)
 80005d6:	180b      	adds	r3, r1, r0
 80005d8:	19db      	adds	r3, r3, r7
 80005da:	221f      	movs	r2, #31
 80005dc:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 80005de:	180b      	adds	r3, r1, r0
 80005e0:	19db      	adds	r3, r3, r7
 80005e2:	2201      	movs	r2, #1
 80005e4:	60da      	str	r2, [r3, #12]

	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80005e6:	231c      	movs	r3, #28
 80005e8:	18fa      	adds	r2, r7, r3
 80005ea:	180b      	adds	r3, r1, r0
 80005ec:	19db      	adds	r3, r3, r7
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 fc61 	bl	8001eb8 <HAL_FLASHEx_Erase>

    // Write counters and settings
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 80005f6:	4b21      	ldr	r3, [pc, #132]	@ (800067c <save_settings+0xbc>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	491f      	ldr	r1, [pc, #124]	@ (8000680 <save_settings+0xc0>)
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	2001      	movs	r0, #1
 8000608:	f001 fb54 	bl	8001cb4 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_TOTAL_TAPS,
                     total_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <save_settings+0xc4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	491c      	ldr	r1, [pc, #112]	@ (8000688 <save_settings+0xc8>)
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2001      	movs	r0, #1
 800061e:	f001 fb49 	bl	8001cb4 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_LEFT_TAPS,
                     left_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000622:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <save_settings+0xcc>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4918      	ldr	r1, [pc, #96]	@ (8000690 <save_settings+0xd0>)
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2001      	movs	r0, #1
 8000634:	f001 fb3e 	bl	8001cb4 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_RIGHT_TAPS,
                     right_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000638:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <save_settings+0xd4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	001c      	movs	r4, r3
 800063e:	2300      	movs	r3, #0
 8000640:	001d      	movs	r5, r3
 8000642:	4915      	ldr	r1, [pc, #84]	@ (8000698 <save_settings+0xd8>)
 8000644:	0022      	movs	r2, r4
 8000646:	002b      	movs	r3, r5
 8000648:	2001      	movs	r0, #1
 800064a:	f001 fb33 	bl	8001cb4 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_DISPLAY_INV,
                     (uint64_t)display_inverted);

    HAL_FLASH_Lock();
 800064e:	f001 fba3 	bl	8001d98 <HAL_FLASH_Lock>

    // Update last save time
    last_save_time = HAL_GetTick();
 8000652:	f001 fa23 	bl	8001a9c <HAL_GetTick>
 8000656:	0002      	movs	r2, r0
 8000658:	4b10      	ldr	r3, [pc, #64]	@ (800069c <save_settings+0xdc>)
 800065a:	601a      	str	r2, [r3, #0]
    data_changed = 0;  // Clear the changed flag
 800065c:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <save_settings+0xe0>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]

    // Trigger saved indicator
    show_saved_indicator = 1;
 8000662:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <save_settings+0xe4>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
    saved_indicator_timer = HAL_GetTick();
 8000668:	f001 fa18 	bl	8001a9c <HAL_GetTick>
 800066c:	0002      	movs	r2, r0
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <save_settings+0xe8>)
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b00c      	add	sp, #48	@ 0x30
 8000678:	bdb0      	pop	{r4, r5, r7, pc}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	200001c0 	.word	0x200001c0
 8000680:	0800f800 	.word	0x0800f800
 8000684:	200001c4 	.word	0x200001c4
 8000688:	0800f808 	.word	0x0800f808
 800068c:	200001c8 	.word	0x200001c8
 8000690:	0800f810 	.word	0x0800f810
 8000694:	200001bd 	.word	0x200001bd
 8000698:	0800f818 	.word	0x0800f818
 800069c:	200001d8 	.word	0x200001d8
 80006a0:	200001dc 	.word	0x200001dc
 80006a4:	200001e4 	.word	0x200001e4
 80006a8:	200001e0 	.word	0x200001e0

080006ac <check_and_save>:

// Check if it's time to save to flash
void check_and_save(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    if (data_changed && (HAL_GetTick() - last_save_time >= FLASH_SAVE_INTERVAL)) {
 80006b0:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <check_and_save+0x28>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00a      	beq.n	80006ce <check_and_save+0x22>
 80006b8:	f001 f9f0 	bl	8001a9c <HAL_GetTick>
 80006bc:	0002      	movs	r2, r0
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <check_and_save+0x2c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	4a05      	ldr	r2, [pc, #20]	@ (80006dc <check_and_save+0x30>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d901      	bls.n	80006ce <check_and_save+0x22>
        save_settings();
 80006ca:	f7ff ff79 	bl	80005c0 <save_settings>
    }
}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200001dc 	.word	0x200001dc
 80006d8:	200001d8 	.word	0x200001d8
 80006dc:	0000752f 	.word	0x0000752f

080006e0 <force_save>:

// Force save (for important events)
void force_save(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
    if (data_changed) {
 80006e4:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <force_save+0x18>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <force_save+0x10>
        save_settings();
 80006ec:	f7ff ff68 	bl	80005c0 <save_settings>
    }
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	200001dc 	.word	0x200001dc

080006fc <load_settings>:

// Load all settings from flash
void load_settings(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
    // Load tap counters
    total_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_TOTAL_TAPS);
 8000702:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <load_settings+0x78>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <load_settings+0x7c>)
 8000708:	601a      	str	r2, [r3, #0]
    left_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_LEFT_TAPS);
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <load_settings+0x80>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <load_settings+0x84>)
 8000710:	601a      	str	r2, [r3, #0]
    right_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_RIGHT_TAPS);
 8000712:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <load_settings+0x88>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <load_settings+0x8c>)
 8000718:	601a      	str	r2, [r3, #0]

    // Load display invert setting
    uint32_t invert_setting = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_DISPLAY_INV);
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <load_settings+0x90>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	607b      	str	r3, [r7, #4]

    // Check for valid data (not 0xFFFFFFFF)
    if(total_taps == 0xFFFFFFFF) total_taps = 0;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <load_settings+0x7c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	d102      	bne.n	800072e <load_settings+0x32>
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <load_settings+0x7c>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
    if(left_taps == 0xFFFFFFFF) left_taps = 0;
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <load_settings+0x84>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	d102      	bne.n	800073c <load_settings+0x40>
 8000736:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <load_settings+0x84>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
    if(right_taps == 0xFFFFFFFF) right_taps = 0;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <load_settings+0x8c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	d102      	bne.n	800074a <load_settings+0x4e>
 8000744:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <load_settings+0x8c>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]

    // For display_inverted, only check the first byte
    if((invert_setting & 0xFF) != 0xFF) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	22ff      	movs	r2, #255	@ 0xff
 800074e:	4013      	ands	r3, r2
 8000750:	2bff      	cmp	r3, #255	@ 0xff
 8000752:	d007      	beq.n	8000764 <load_settings+0x68>
        display_inverted = (uint8_t)(invert_setting & 0x01);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2201      	movs	r2, #1
 800075a:	4013      	ands	r3, r2
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <load_settings+0x94>)
 8000760:	701a      	strb	r2, [r3, #0]
    } else {
        display_inverted = 0;  // Default to normal display
    }
}
 8000762:	e002      	b.n	800076a <load_settings+0x6e>
        display_inverted = 0;  // Default to normal display
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <load_settings+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	0800f800 	.word	0x0800f800
 8000778:	200001c0 	.word	0x200001c0
 800077c:	0800f808 	.word	0x0800f808
 8000780:	200001c4 	.word	0x200001c4
 8000784:	0800f810 	.word	0x0800f810
 8000788:	200001c8 	.word	0x200001c8
 800078c:	0800f818 	.word	0x0800f818
 8000790:	200001bd 	.word	0x200001bd

08000794 <reset_all_settings>:

// Reset all counters and settings
void reset_all_settings(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
    // Don't do flash operations too early
    if (HAL_GetTick() < 100) {
 8000798:	f001 f980 	bl	8001a9c <HAL_GetTick>
 800079c:	0003      	movs	r3, r0
 800079e:	2b63      	cmp	r3, #99	@ 0x63
 80007a0:	d802      	bhi.n	80007a8 <reset_all_settings+0x14>
        HAL_Delay(100);  // Ensure system is stable
 80007a2:	2064      	movs	r0, #100	@ 0x64
 80007a4:	f001 f984 	bl	8001ab0 <HAL_Delay>
    }

    // Set values to defaults
    total_taps = 0;
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <reset_all_settings+0x38>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
    left_taps = 0;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <reset_all_settings+0x3c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
    right_taps = 0;
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <reset_all_settings+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
    display_inverted = 0;
 80007ba:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <reset_all_settings+0x44>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]

    // Add error checking
    save_settings();
 80007c0:	f7ff fefe 	bl	80005c0 <save_settings>
}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	200001c0 	.word	0x200001c0
 80007d0:	200001c4 	.word	0x200001c4
 80007d4:	200001c8 	.word	0x200001c8
 80007d8:	200001bd 	.word	0x200001bd

080007dc <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
//  // Check which version of the timer triggered this callback and toggle LED
    if (htim == &htim14 )
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d101      	bne.n	80007f0 <HAL_TIM_PeriodElapsedCallback+0x14>
    {
        readPins();
 80007ec:	f7ff fe78 	bl	80004e0 <readPins>
    }
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000168 	.word	0x20000168

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f001 f8cf 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 fabd 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 fb95 	bl	8000f38 <MX_GPIO_Init>
  MX_I2C1_Init();
 800080e:	f000 fb29 	bl	8000e64 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000812:	f000 fb6b 	bl	8000eec <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000816:	f000 fb10 	bl	8000e3a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800081a:	2380      	movs	r3, #128	@ 0x80
 800081c:	0219      	lsls	r1, r3, #8
 800081e:	23a0      	movs	r3, #160	@ 0xa0
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	2200      	movs	r2, #0
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fd6c 	bl	8002302 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800082a:	200a      	movs	r0, #10
 800082c:	f001 f940 	bl	8001ab0 <HAL_Delay>
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	0219      	lsls	r1, r3, #8
 8000834:	23a0      	movs	r3, #160	@ 0xa0
 8000836:	05db      	lsls	r3, r3, #23
 8000838:	2201      	movs	r2, #1
 800083a:	0018      	movs	r0, r3
 800083c:	f001 fd61 	bl	8002302 <HAL_GPIO_WritePin>
  ssd1306_Init();
 8000840:	f000 fc64 	bl	800110c <ssd1306_Init>

//  display_tap_count_overlay();

  // Load all settings from flash (including display invert)
  load_settings();
 8000844:	f7ff ff5a 	bl	80006fc <load_settings>

  // Apply the loaded display invert setting
  ssd1306_InvertDisplay(display_inverted);
 8000848:	4bb6      	ldr	r3, [pc, #728]	@ (8000b24 <main+0x328>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	0018      	movs	r0, r3
 800084e:	f000 ff37 	bl	80016c0 <ssd1306_InvertDisplay>

  // Initialize save time
  last_save_time = HAL_GetTick();
 8000852:	f001 f923 	bl	8001a9c <HAL_GetTick>
 8000856:	0002      	movs	r2, r0
 8000858:	4bb3      	ldr	r3, [pc, #716]	@ (8000b28 <main+0x32c>)
 800085a:	601a      	str	r2, [r3, #0]

  // Check button states at boot for override options
  readPins();
 800085c:	f7ff fe40 	bl	80004e0 <readPins>

  // If left is pressed at boot, toggle invert from saved state
  if(LEFT_PRESSED) {
 8000860:	4bb2      	ldr	r3, [pc, #712]	@ (8000b2c <main+0x330>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d115      	bne.n	8000894 <main+0x98>
 8000868:	4bb1      	ldr	r3, [pc, #708]	@ (8000b30 <main+0x334>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d111      	bne.n	8000894 <main+0x98>
      toggle_display_invert();
 8000870:	f7ff fdc6 	bl	8000400 <toggle_display_invert>
      force_save();  // Save immediately for boot-time changes
 8000874:	f7ff ff34 	bl	80006e0 <force_save>
      // Wait for button release
      while(LEFT_PRESSED) {
 8000878:	e004      	b.n	8000884 <main+0x88>
          HAL_Delay(10);
 800087a:	200a      	movs	r0, #10
 800087c:	f001 f918 	bl	8001ab0 <HAL_Delay>
          readPins();
 8000880:	f7ff fe2e 	bl	80004e0 <readPins>
      while(LEFT_PRESSED) {
 8000884:	4ba9      	ldr	r3, [pc, #676]	@ (8000b2c <main+0x330>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d103      	bne.n	8000894 <main+0x98>
 800088c:	4ba8      	ldr	r3, [pc, #672]	@ (8000b30 <main+0x334>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d0f2      	beq.n	800087a <main+0x7e>
      }
  }

  // If right is pressed at boot, reset everything
  if(RIGHT_PRESSED) {
 8000894:	4ba5      	ldr	r3, [pc, #660]	@ (8000b2c <main+0x330>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d126      	bne.n	80008ea <main+0xee>
 800089c:	4ba4      	ldr	r3, [pc, #656]	@ (8000b30 <main+0x334>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d122      	bne.n	80008ea <main+0xee>
      reset_all_settings();
 80008a4:	f7ff ff76 	bl	8000794 <reset_all_settings>
      ssd1306_InvertDisplay(0);  // Apply default display mode
 80008a8:	2000      	movs	r0, #0
 80008aa:	f000 ff09 	bl	80016c0 <ssd1306_InvertDisplay>

      // Show feedback
      ssd1306_Fill(White);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f000 fc98 	bl	80011e4 <ssd1306_Fill>
      ssd1306_UpdateScreen();
 80008b4:	f000 fcb0 	bl	8001218 <ssd1306_UpdateScreen>
      HAL_Delay(200);
 80008b8:	20c8      	movs	r0, #200	@ 0xc8
 80008ba:	f001 f8f9 	bl	8001ab0 <HAL_Delay>
      ssd1306_Fill(Black);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 fc90 	bl	80011e4 <ssd1306_Fill>
      ssd1306_UpdateScreen();
 80008c4:	f000 fca8 	bl	8001218 <ssd1306_UpdateScreen>
      HAL_Delay(200);
 80008c8:	20c8      	movs	r0, #200	@ 0xc8
 80008ca:	f001 f8f1 	bl	8001ab0 <HAL_Delay>

      // Wait for button release
      while(RIGHT_PRESSED) {
 80008ce:	e004      	b.n	80008da <main+0xde>
          HAL_Delay(10);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f001 f8ed 	bl	8001ab0 <HAL_Delay>
          readPins();
 80008d6:	f7ff fe03 	bl	80004e0 <readPins>
      while(RIGHT_PRESSED) {
 80008da:	4b94      	ldr	r3, [pc, #592]	@ (8000b2c <main+0x330>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d103      	bne.n	80008ea <main+0xee>
 80008e2:	4b93      	ldr	r3, [pc, #588]	@ (8000b30 <main+0x334>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0f2      	beq.n	80008d0 <main+0xd4>
      }
  }

  state_e state = IDLE;
 80008ea:	2317      	movs	r3, #23
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
  int32_t idle_cntr = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  int32_t tap_left_cntr = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  int32_t tap_right_cntr = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  uint8_t left_state = 0;
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
  uint8_t right_state = 0;
 8000904:	1dbb      	adds	r3, r7, #6
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim14);
 800090a:	4b8a      	ldr	r3, [pc, #552]	@ (8000b34 <main+0x338>)
 800090c:	0018      	movs	r0, r3
 800090e:	f003 f873 	bl	80039f8 <HAL_TIM_Base_Start_IT>
  while(1) {
    // Check if it's time to save to flash
    check_and_save();
 8000912:	f7ff fecb 	bl	80006ac <check_and_save>

    // Check if we should hide the saved indicator
    if (show_saved_indicator && (HAL_GetTick() - saved_indicator_timer >= SAVED_DISPLAY_TIME)) {
 8000916:	4b88      	ldr	r3, [pc, #544]	@ (8000b38 <main+0x33c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00c      	beq.n	8000938 <main+0x13c>
 800091e:	f001 f8bd 	bl	8001a9c <HAL_GetTick>
 8000922:	0002      	movs	r2, r0
 8000924:	4b85      	ldr	r3, [pc, #532]	@ (8000b3c <main+0x340>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	1ad2      	subs	r2, r2, r3
 800092a:	23fa      	movs	r3, #250	@ 0xfa
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	429a      	cmp	r2, r3
 8000930:	d302      	bcc.n	8000938 <main+0x13c>
        show_saved_indicator = 0;
 8000932:	4b81      	ldr	r3, [pc, #516]	@ (8000b38 <main+0x33c>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
    }

    switch(state){
 8000938:	2317      	movs	r3, #23
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <main+0x14c>
 8000942:	2b01      	cmp	r3, #1
 8000944:	d03d      	beq.n	80009c2 <main+0x1c6>
 8000946:	e203      	b.n	8000d50 <main+0x554>
    case IDLE:
        if(sw_state_left == 0 || sw_state_right == 0){
 8000948:	4b78      	ldr	r3, [pc, #480]	@ (8000b2c <main+0x330>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <main+0x15c>
 8000950:	4b77      	ldr	r3, [pc, #476]	@ (8000b30 <main+0x334>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10d      	bne.n	8000974 <main+0x178>
            draw_animation(&img_both_up);
 8000958:	4b79      	ldr	r3, [pc, #484]	@ (8000b40 <main+0x344>)
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff fd86 	bl	800046c <draw_animation>
            ssd1306_UpdateScreen();
 8000960:	f000 fc5a 	bl	8001218 <ssd1306_UpdateScreen>
            HAL_Delay(50);
 8000964:	2032      	movs	r0, #50	@ 0x32
 8000966:	f001 f8a3 	bl	8001ab0 <HAL_Delay>
            state = SWITCH;
 800096a:	2317      	movs	r3, #23
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]

            ssd1306_UpdateScreen();
            idle_cnt = (idle_cnt + 1 ) % ani_idle_LEN;
            HAL_Delay(100);
        }
        break;
 8000972:	e1ed      	b.n	8000d50 <main+0x554>
            draw_animation(ani_idle[idle_cnt]);
 8000974:	4b73      	ldr	r3, [pc, #460]	@ (8000b44 <main+0x348>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	001a      	movs	r2, r3
 800097a:	4b73      	ldr	r3, [pc, #460]	@ (8000b48 <main+0x34c>)
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	58d3      	ldr	r3, [r2, r3]
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff fd73 	bl	800046c <draw_animation>
            if (display_mode) {
 8000986:	4b71      	ldr	r3, [pc, #452]	@ (8000b4c <main+0x350>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <main+0x196>
                display_tap_count_overlay();
 800098e:	f7ff fdc5 	bl	800051c <display_tap_count_overlay>
            if (show_saved_indicator) {
 8000992:	4b69      	ldr	r3, [pc, #420]	@ (8000b38 <main+0x33c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <main+0x1a2>
                display_saved_indicator();
 800099a:	f7ff fdf9 	bl	8000590 <display_saved_indicator>
            ssd1306_UpdateScreen();
 800099e:	f000 fc3b 	bl	8001218 <ssd1306_UpdateScreen>
            idle_cnt = (idle_cnt + 1 ) % ani_idle_LEN;
 80009a2:	4b68      	ldr	r3, [pc, #416]	@ (8000b44 <main+0x348>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	2205      	movs	r2, #5
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff fd21 	bl	80003f4 <__aeabi_idivmod>
 80009b2:	000b      	movs	r3, r1
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b63      	ldr	r3, [pc, #396]	@ (8000b44 <main+0x348>)
 80009b8:	701a      	strb	r2, [r3, #0]
            HAL_Delay(100);
 80009ba:	2064      	movs	r0, #100	@ 0x64
 80009bc:	f001 f878 	bl	8001ab0 <HAL_Delay>
        break;
 80009c0:	e1c6      	b.n	8000d50 <main+0x554>
    case SWITCH:
        // Check for display mode switch (both buttons held for 3 seconds)
        if (BOTH_PRESSED) {
 80009c2:	4b5a      	ldr	r3, [pc, #360]	@ (8000b2c <main+0x330>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d132      	bne.n	8000a30 <main+0x234>
 80009ca:	4b59      	ldr	r3, [pc, #356]	@ (8000b30 <main+0x334>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d12e      	bne.n	8000a30 <main+0x234>
            if (both_pressed_timer == 0) {
 80009d2:	4b5f      	ldr	r3, [pc, #380]	@ (8000b50 <main+0x354>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d105      	bne.n	80009e6 <main+0x1ea>
                both_pressed_timer = HAL_GetTick();
 80009da:	f001 f85f 	bl	8001a9c <HAL_GetTick>
 80009de:	0002      	movs	r2, r0
 80009e0:	4b5b      	ldr	r3, [pc, #364]	@ (8000b50 <main+0x354>)
 80009e2:	601a      	str	r2, [r3, #0]
            if (both_pressed_timer == 0) {
 80009e4:	e028      	b.n	8000a38 <main+0x23c>
            } else if (HAL_GetTick() - both_pressed_timer >= MODE_SWITCH_TIME) {
 80009e6:	f001 f859 	bl	8001a9c <HAL_GetTick>
 80009ea:	0002      	movs	r2, r0
 80009ec:	4b58      	ldr	r3, [pc, #352]	@ (8000b50 <main+0x354>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	4a58      	ldr	r2, [pc, #352]	@ (8000b54 <main+0x358>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d91f      	bls.n	8000a38 <main+0x23c>
                display_mode = !display_mode;
 80009f8:	4b54      	ldr	r3, [pc, #336]	@ (8000b4c <main+0x350>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	425a      	negs	r2, r3
 80009fe:	4153      	adcs	r3, r2
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	001a      	movs	r2, r3
 8000a04:	4b51      	ldr	r3, [pc, #324]	@ (8000b4c <main+0x350>)
 8000a06:	701a      	strb	r2, [r3, #0]
                both_pressed_timer = 0;
 8000a08:	4b51      	ldr	r3, [pc, #324]	@ (8000b50 <main+0x354>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]

                // Force save when switching modes
                force_save();
 8000a0e:	f7ff fe67 	bl	80006e0 <force_save>

                // Wait for button release
                while(BOTH_PRESSED) {
 8000a12:	e004      	b.n	8000a1e <main+0x222>
                    HAL_Delay(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f001 f84b 	bl	8001ab0 <HAL_Delay>
                    readPins();
 8000a1a:	f7ff fd61 	bl	80004e0 <readPins>
                while(BOTH_PRESSED) {
 8000a1e:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <main+0x330>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d108      	bne.n	8000a38 <main+0x23c>
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <main+0x334>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f2      	beq.n	8000a14 <main+0x218>
            if (both_pressed_timer == 0) {
 8000a2e:	e003      	b.n	8000a38 <main+0x23c>
                }
            }
        } else {
            both_pressed_timer = 0;
 8000a30:	4b47      	ldr	r3, [pc, #284]	@ (8000b50 <main+0x354>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e000      	b.n	8000a3a <main+0x23e>
            if (both_pressed_timer == 0) {
 8000a38:	46c0      	nop			@ (mov r8, r8)
        }

        // Check for invert toggle (hold left for 2 seconds) - works with or without overlay
        if (LEFT_PRESSED && !RIGHT_PRESSED && both_pressed_timer == 0) {
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b2c <main+0x330>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d137      	bne.n	8000ab2 <main+0x2b6>
 8000a42:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <main+0x334>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d133      	bne.n	8000ab2 <main+0x2b6>
 8000a4a:	4b38      	ldr	r3, [pc, #224]	@ (8000b2c <main+0x330>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d103      	bne.n	8000a5a <main+0x25e>
 8000a52:	4b37      	ldr	r3, [pc, #220]	@ (8000b30 <main+0x334>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d02b      	beq.n	8000ab2 <main+0x2b6>
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b50 <main+0x354>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d127      	bne.n	8000ab2 <main+0x2b6>
            if (invert_timer == 0) {
 8000a62:	4b3d      	ldr	r3, [pc, #244]	@ (8000b58 <main+0x35c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d105      	bne.n	8000a76 <main+0x27a>
                invert_timer = HAL_GetTick();
 8000a6a:	f001 f817 	bl	8001a9c <HAL_GetTick>
 8000a6e:	0002      	movs	r2, r0
 8000a70:	4b39      	ldr	r3, [pc, #228]	@ (8000b58 <main+0x35c>)
 8000a72:	601a      	str	r2, [r3, #0]
            if (invert_timer == 0) {
 8000a74:	e021      	b.n	8000aba <main+0x2be>
            } else if (HAL_GetTick() - invert_timer >= INVERT_HOLD_TIME) {
 8000a76:	f001 f811 	bl	8001a9c <HAL_GetTick>
 8000a7a:	0002      	movs	r2, r0
 8000a7c:	4b36      	ldr	r3, [pc, #216]	@ (8000b58 <main+0x35c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	1ad2      	subs	r2, r2, r3
 8000a82:	23fa      	movs	r3, #250	@ 0xfa
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d317      	bcc.n	8000aba <main+0x2be>
                toggle_display_invert();
 8000a8a:	f7ff fcb9 	bl	8000400 <toggle_display_invert>
                invert_timer = 0;
 8000a8e:	4b32      	ldr	r3, [pc, #200]	@ (8000b58 <main+0x35c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]

                // Wait for button release
                while(LEFT_PRESSED) {
 8000a94:	e004      	b.n	8000aa0 <main+0x2a4>
                    HAL_Delay(10);
 8000a96:	200a      	movs	r0, #10
 8000a98:	f001 f80a 	bl	8001ab0 <HAL_Delay>
                    readPins();
 8000a9c:	f7ff fd20 	bl	80004e0 <readPins>
                while(LEFT_PRESSED) {
 8000aa0:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <main+0x330>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d108      	bne.n	8000aba <main+0x2be>
 8000aa8:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <main+0x334>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d0f2      	beq.n	8000a96 <main+0x29a>
            if (invert_timer == 0) {
 8000ab0:	e003      	b.n	8000aba <main+0x2be>
                }
            }
        } else {
            invert_timer = 0;
 8000ab2:	4b29      	ldr	r3, [pc, #164]	@ (8000b58 <main+0x35c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	e000      	b.n	8000abc <main+0x2c0>
            if (invert_timer == 0) {
 8000aba:	46c0      	nop			@ (mov r8, r8)
        }

        // Normal animation routines continue regardless of overlay
        // Idle reset routines
        if(NONE_PRESSED){
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <main+0x330>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d14b      	bne.n	8000b5c <main+0x360>
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <main+0x334>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d147      	bne.n	8000b5c <main+0x360>
            draw_animation(&img_both_up);
 8000acc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <main+0x344>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff fccc 	bl	800046c <draw_animation>
            if(idle_cntr == 0){
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d103      	bne.n	8000ae2 <main+0x2e6>
                idle_cntr = HAL_GetTick();
 8000ada:	f000 ffdf 	bl	8001a9c <HAL_GetTick>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	613b      	str	r3, [r7, #16]
            }
            if(HAL_GetTick() - idle_cntr >= IDLE_TIME){
 8000ae2:	f000 ffdb 	bl	8001a9c <HAL_GetTick>
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	1ad2      	subs	r2, r2, r3
 8000aec:	23fa      	movs	r3, #250	@ 0xfa
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d307      	bcc.n	8000b04 <main+0x308>
                idle_cntr = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
                // Force save before going to idle
                force_save();
 8000af8:	f7ff fdf2 	bl	80006e0 <force_save>
                state = IDLE;
 8000afc:	2317      	movs	r3, #23
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
            }
            if(left_state)
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d002      	beq.n	8000b12 <main+0x316>
                left_state = 0;
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
            if(right_state)
 8000b12:	1dbb      	adds	r3, r7, #6
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d100      	bne.n	8000b1c <main+0x320>
 8000b1a:	e0e6      	b.n	8000cea <main+0x4ee>
                right_state = 0;
 8000b1c:	1dbb      	adds	r3, r7, #6
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
            if(right_state)
 8000b22:	e0e2      	b.n	8000cea <main+0x4ee>
 8000b24:	200001bd 	.word	0x200001bd
 8000b28:	200001d8 	.word	0x200001d8
 8000b2c:	200001b4 	.word	0x200001b4
 8000b30:	200001b8 	.word	0x200001b8
 8000b34:	20000168 	.word	0x20000168
 8000b38:	200001e4 	.word	0x200001e4
 8000b3c:	200001e0 	.word	0x200001e0
 8000b40:	08004798 	.word	0x08004798
 8000b44:	200001bc 	.word	0x200001bc
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	200001d0 	.word	0x200001d0
 8000b50:	200001cc 	.word	0x200001cc
 8000b54:	00000bb7 	.word	0x00000bb7
 8000b58:	200001d4 	.word	0x200001d4
        }
        // Paw draw routines
        else {
            idle_cntr = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
            if((BOTH_PRESSED) && ((left_state | right_state == 0) || (left_state ^ right_state == 1))){
 8000b60:	4b7c      	ldr	r3, [pc, #496]	@ (8000d54 <main+0x558>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d152      	bne.n	8000c0e <main+0x412>
 8000b68:	4b7b      	ldr	r3, [pc, #492]	@ (8000d58 <main+0x55c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d14e      	bne.n	8000c0e <main+0x412>
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	1dba      	adds	r2, r7, #6
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	4251      	negs	r1, r2
 8000b7a:	414a      	adcs	r2, r1
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	d109      	bne.n	8000b96 <main+0x39a>
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	1dba      	adds	r2, r7, #6
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	3a01      	subs	r2, #1
 8000b8c:	4251      	negs	r1, r2
 8000b8e:	414a      	adcs	r2, r1
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d03b      	beq.n	8000c0e <main+0x412>
                draw_animation(&img_both_down_alt);
 8000b96:	4b71      	ldr	r3, [pc, #452]	@ (8000d5c <main+0x560>)
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fc67 	bl	800046c <draw_animation>
                if(!right_state){
 8000b9e:	1dbb      	adds	r3, r7, #6
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d114      	bne.n	8000bd0 <main+0x3d4>
                    draw_animation_transparent(&img_tap_right);
 8000ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8000d60 <main+0x564>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fc86 	bl	80004ba <draw_animation_transparent>
                    tap_right_cntr = HAL_GetTick();
 8000bae:	f000 ff75 	bl	8001a9c <HAL_GetTick>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	60bb      	str	r3, [r7, #8]
                    right_taps++;  // Increment right tap counter
 8000bb6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d64 <main+0x568>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	4b69      	ldr	r3, [pc, #420]	@ (8000d64 <main+0x568>)
 8000bbe:	601a      	str	r2, [r3, #0]
                    total_taps++;   // Increment total tap counter
 8000bc0:	4b69      	ldr	r3, [pc, #420]	@ (8000d68 <main+0x56c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	1c5a      	adds	r2, r3, #1
 8000bc6:	4b68      	ldr	r3, [pc, #416]	@ (8000d68 <main+0x56c>)
 8000bc8:	601a      	str	r2, [r3, #0]
                    data_changed = 1;  // Mark data as changed
 8000bca:	4b68      	ldr	r3, [pc, #416]	@ (8000d6c <main+0x570>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
                }
                if(!left_state){
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d114      	bne.n	8000c02 <main+0x406>
                    draw_animation_transparent(&img_tap_left);
 8000bd8:	4b65      	ldr	r3, [pc, #404]	@ (8000d70 <main+0x574>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fc6d 	bl	80004ba <draw_animation_transparent>
                    tap_left_cntr = HAL_GetTick();
 8000be0:	f000 ff5c 	bl	8001a9c <HAL_GetTick>
 8000be4:	0003      	movs	r3, r0
 8000be6:	60fb      	str	r3, [r7, #12]
                    left_taps++;    // Increment left tap counter
 8000be8:	4b62      	ldr	r3, [pc, #392]	@ (8000d74 <main+0x578>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	4b61      	ldr	r3, [pc, #388]	@ (8000d74 <main+0x578>)
 8000bf0:	601a      	str	r2, [r3, #0]
                    total_taps++;   // Increment total tap counter
 8000bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8000d68 <main+0x56c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8000d68 <main+0x56c>)
 8000bfa:	601a      	str	r2, [r3, #0]
                    data_changed = 1;  // Mark data as changed
 8000bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8000d6c <main+0x570>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
                }
                right_state = 1; left_state = 1;
 8000c02:	1dbb      	adds	r3, r7, #6
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
            }
            if(RIGHT_PRESSED){
 8000c0e:	4b51      	ldr	r3, [pc, #324]	@ (8000d54 <main+0x558>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d132      	bne.n	8000c7c <main+0x480>
 8000c16:	4b50      	ldr	r3, [pc, #320]	@ (8000d58 <main+0x55c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d12e      	bne.n	8000c7c <main+0x480>
                if(right_state == 0 || left_state == 1){
 8000c1e:	1dbb      	adds	r3, r7, #6
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <main+0x432>
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d11f      	bne.n	8000c6e <main+0x472>
                    draw_animation(&img_right_down_alt);
 8000c2e:	4b52      	ldr	r3, [pc, #328]	@ (8000d78 <main+0x57c>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff fc1b 	bl	800046c <draw_animation>
                    if(!right_state){
 8000c36:	1dbb      	adds	r3, r7, #6
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d114      	bne.n	8000c68 <main+0x46c>
                        draw_animation_transparent(&img_tap_right);
 8000c3e:	4b48      	ldr	r3, [pc, #288]	@ (8000d60 <main+0x564>)
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fc3a 	bl	80004ba <draw_animation_transparent>
                        tap_right_cntr = HAL_GetTick();
 8000c46:	f000 ff29 	bl	8001a9c <HAL_GetTick>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	60bb      	str	r3, [r7, #8]
                        right_taps++;  // Increment right tap counter
 8000c4e:	4b45      	ldr	r3, [pc, #276]	@ (8000d64 <main+0x568>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	4b43      	ldr	r3, [pc, #268]	@ (8000d64 <main+0x568>)
 8000c56:	601a      	str	r2, [r3, #0]
                        total_taps++;   // Increment total tap counter
 8000c58:	4b43      	ldr	r3, [pc, #268]	@ (8000d68 <main+0x56c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	4b42      	ldr	r3, [pc, #264]	@ (8000d68 <main+0x56c>)
 8000c60:	601a      	str	r2, [r3, #0]
                        data_changed = 1;  // Mark data as changed
 8000c62:	4b42      	ldr	r3, [pc, #264]	@ (8000d6c <main+0x570>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
                    }
                    right_state = 1;
 8000c68:	1dbb      	adds	r3, r7, #6
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
                }
                if(left_state)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <main+0x480>
                    left_state = 0;
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
            }
            if(LEFT_PRESSED){
 8000c7c:	4b35      	ldr	r3, [pc, #212]	@ (8000d54 <main+0x558>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d132      	bne.n	8000cea <main+0x4ee>
 8000c84:	4b34      	ldr	r3, [pc, #208]	@ (8000d58 <main+0x55c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d12e      	bne.n	8000cea <main+0x4ee>
                if(left_state == 0 || right_state == 1){
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <main+0x4a0>
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d11f      	bne.n	8000cdc <main+0x4e0>
                    draw_animation(&img_left_down_alt);
 8000c9c:	4b37      	ldr	r3, [pc, #220]	@ (8000d7c <main+0x580>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fbe4 	bl	800046c <draw_animation>
                    if(!left_state){
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d114      	bne.n	8000cd6 <main+0x4da>
                        draw_animation_transparent(&img_tap_left);
 8000cac:	4b30      	ldr	r3, [pc, #192]	@ (8000d70 <main+0x574>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fc03 	bl	80004ba <draw_animation_transparent>
                        tap_left_cntr = HAL_GetTick();
 8000cb4:	f000 fef2 	bl	8001a9c <HAL_GetTick>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	60fb      	str	r3, [r7, #12]
                        left_taps++;    // Increment left tap counter
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <main+0x578>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d74 <main+0x578>)
 8000cc4:	601a      	str	r2, [r3, #0]
                        total_taps++;   // Increment total tap counter
 8000cc6:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <main+0x56c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <main+0x56c>)
 8000cce:	601a      	str	r2, [r3, #0]
                        data_changed = 1;  // Mark data as changed
 8000cd0:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <main+0x570>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
                    }
                    left_state = 1;
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
                }
                if(right_state)
 8000cdc:	1dbb      	adds	r3, r7, #6
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <main+0x4ee>
                    right_state = 0;
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
            }
        }

        // Tap decay routines
        if(tap_left_cntr > 0){
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	dd11      	ble.n	8000d14 <main+0x518>
            if(HAL_GetTick() - tap_left_cntr > TAP_DECAY_TIME) {
 8000cf0:	f000 fed4 	bl	8001a9c <HAL_GetTick>
 8000cf4:	0002      	movs	r2, r0
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2bc8      	cmp	r3, #200	@ 0xc8
 8000cfc:	d906      	bls.n	8000d0c <main+0x510>
                draw_animation_erase(&img_tap_left);
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <main+0x574>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fbc8 	bl	8000496 <draw_animation_erase>
                tap_left_cntr = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e003      	b.n	8000d14 <main+0x518>
            }
            else{
                draw_animation_transparent(&img_tap_left);
 8000d0c:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <main+0x574>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff fbd3 	bl	80004ba <draw_animation_transparent>
            }
        }
        if(tap_right_cntr > 0){
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	dd11      	ble.n	8000d3e <main+0x542>
            if(HAL_GetTick() - tap_right_cntr > TAP_DECAY_TIME) {
 8000d1a:	f000 febf 	bl	8001a9c <HAL_GetTick>
 8000d1e:	0002      	movs	r2, r0
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2bc8      	cmp	r3, #200	@ 0xc8
 8000d26:	d906      	bls.n	8000d36 <main+0x53a>
                draw_animation_erase(&img_tap_right);
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <main+0x564>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f7ff fbb3 	bl	8000496 <draw_animation_erase>
                tap_right_cntr = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	e003      	b.n	8000d3e <main+0x542>
            }
            else{
                draw_animation_transparent(&img_tap_right);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <main+0x564>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff fbbe 	bl	80004ba <draw_animation_transparent>
            }
        }

        // Draw overlay on top if enabled
        if (display_mode) {
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <main+0x584>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <main+0x54e>
            display_tap_count_overlay();
 8000d46:	f7ff fbe9 	bl	800051c <display_tap_count_overlay>
        }

        ssd1306_UpdateScreen();
 8000d4a:	f000 fa65 	bl	8001218 <ssd1306_UpdateScreen>
        break;
 8000d4e:	46c0      	nop			@ (mov r8, r8)
    check_and_save();
 8000d50:	e5df      	b.n	8000912 <main+0x116>
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	200001b4 	.word	0x200001b4
 8000d58:	200001b8 	.word	0x200001b8
 8000d5c:	08005f98 	.word	0x08005f98
 8000d60:	08006f98 	.word	0x08006f98
 8000d64:	200001c8 	.word	0x200001c8
 8000d68:	200001c0 	.word	0x200001c0
 8000d6c:	200001dc 	.word	0x200001dc
 8000d70:	08006b98 	.word	0x08006b98
 8000d74:	200001c4 	.word	0x200001c4
 8000d78:	08006798 	.word	0x08006798
 8000d7c:	08006398 	.word	0x08006398
 8000d80:	200001d0 	.word	0x200001d0

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b093      	sub	sp, #76	@ 0x4c
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	2414      	movs	r4, #20
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	0018      	movs	r0, r3
 8000d90:	2334      	movs	r3, #52	@ 0x34
 8000d92:	001a      	movs	r2, r3
 8000d94:	2100      	movs	r1, #0
 8000d96:	f003 f859 	bl	8003e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	2310      	movs	r3, #16
 8000da0:	001a      	movs	r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	f003 f852 	bl	8003e4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f001 ffcb 	bl	8002d48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	2202      	movs	r2, #2
 8000db6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	2280      	movs	r2, #128	@ 0x80
 8000dbc:	0052      	lsls	r2, r2, #1
 8000dbe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000dc0:	0021      	movs	r1, r4
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2240      	movs	r2, #64	@ 0x40
 8000dcc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2208      	movs	r2, #8
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2280      	movs	r2, #128	@ 0x80
 8000dea:	0292      	lsls	r2, r2, #10
 8000dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2280      	movs	r2, #128	@ 0x80
 8000df2:	0592      	lsls	r2, r2, #22
 8000df4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f001 ffe5 	bl	8002dc8 <HAL_RCC_OscConfig>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e02:	f000 f943 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2202      	movs	r2, #2
 8000e10:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2280      	movs	r2, #128	@ 0x80
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2101      	movs	r1, #1
 8000e24:	0018      	movs	r0, r3
 8000e26:	f002 fadf 	bl	80033e8 <HAL_RCC_ClockConfig>
 8000e2a:	1e03      	subs	r3, r0, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e2e:	f000 f92d 	bl	800108c <Error_Handler>
  }
}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b013      	add	sp, #76	@ 0x4c
 8000e38:	bd90      	pop	{r4, r7, pc}

08000e3a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2004      	movs	r0, #4
 8000e44:	f000 ff04 	bl	8001c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000e48:	2004      	movs	r0, #4
 8000e4a:	f000 ff16 	bl	8001c7a <HAL_NVIC_EnableIRQ>
  /* TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	2013      	movs	r0, #19
 8000e54:	f000 fefc 	bl	8001c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000e58:	2013      	movs	r0, #19
 8000e5a:	f000 ff0e 	bl	8001c7a <HAL_NVIC_EnableIRQ>
}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee4 <MX_I2C1_Init+0x80>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00601133;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e70:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee8 <MX_I2C1_Init+0x84>)
 8000e72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e92:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e9a:	2280      	movs	r2, #128	@ 0x80
 8000e9c:	0292      	lsls	r2, r2, #10
 8000e9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f001 fa4a 	bl	800233c <HAL_I2C_Init>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eac:	f000 f8ee 	bl	800108c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	015a      	lsls	r2, r3, #5
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f001 fead 	bl	8002c18 <HAL_I2CEx_ConfigAnalogFilter>
 8000ebe:	1e03      	subs	r3, r0, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_I2C1_Init+0x62>
  {
    Error_Handler();
 8000ec2:	f000 f8e3 	bl	800108c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_I2C1_Init+0x7c>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f001 fef0 	bl	8002cb0 <HAL_I2CEx_ConfigDigitalFilter>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_I2C1_Init+0x74>
  {
    Error_Handler();
 8000ed4:	f000 f8da 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed8:	46c0      	nop			@ (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	20000114 	.word	0x20000114
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	00601133 	.word	0x00601133

08000eec <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  htim14.Instance = TIM14;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_TIM14_Init+0x40>)
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <MX_TIM14_Init+0x44>)
 8000ef4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 32-1;      // Was 100-1
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <MX_TIM14_Init+0x40>)
 8000ef8:	221f      	movs	r2, #31
 8000efa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <MX_TIM14_Init+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;      // 32MHz/32/10000 = 100Hz
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <MX_TIM14_Init+0x40>)
 8000f04:	4a0b      	ldr	r2, [pc, #44]	@ (8000f34 <MX_TIM14_Init+0x48>)
 8000f06:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <MX_TIM14_Init+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <MX_TIM14_Init+0x40>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f14:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <MX_TIM14_Init+0x40>)
 8000f16:	0018      	movs	r0, r3
 8000f18:	f002 fd16 	bl	8003948 <HAL_TIM_Base_Init>
 8000f1c:	1e03      	subs	r3, r0, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000f20:	f000 f8b4 	bl	800108c <Error_Handler>
  }
}
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	20000168 	.word	0x20000168
 8000f30:	40002000 	.word	0x40002000
 8000f34:	0000270f 	.word	0x0000270f

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b089      	sub	sp, #36	@ 0x24
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	240c      	movs	r4, #12
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	0018      	movs	r0, r3
 8000f44:	2314      	movs	r3, #20
 8000f46:	001a      	movs	r2, r3
 8000f48:	2100      	movs	r1, #0
 8000f4a:	f002 ff7f 	bl	8003e4c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001078 <MX_GPIO_Init+0x140>)
 8000f50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f52:	4b49      	ldr	r3, [pc, #292]	@ (8001078 <MX_GPIO_Init+0x140>)
 8000f54:	2102      	movs	r1, #2
 8000f56:	430a      	orrs	r2, r1
 8000f58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f5a:	4b47      	ldr	r3, [pc, #284]	@ (8001078 <MX_GPIO_Init+0x140>)
 8000f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f5e:	2202      	movs	r2, #2
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b44      	ldr	r3, [pc, #272]	@ (8001078 <MX_GPIO_Init+0x140>)
 8000f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f6a:	4b43      	ldr	r3, [pc, #268]	@ (8001078 <MX_GPIO_Init+0x140>)
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f72:	4b41      	ldr	r3, [pc, #260]	@ (8001078 <MX_GPIO_Init+0x140>)
 8000f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f76:	2204      	movs	r2, #4
 8000f78:	4013      	ands	r3, r2
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001078 <MX_GPIO_Init+0x140>)
 8000f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f82:	4b3d      	ldr	r3, [pc, #244]	@ (8001078 <MX_GPIO_Init+0x140>)
 8000f84:	2101      	movs	r1, #1
 8000f86:	430a      	orrs	r2, r1
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001078 <MX_GPIO_Init+0x140>)
 8000f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4013      	ands	r3, r2
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000f96:	2380      	movs	r3, #128	@ 0x80
 8000f98:	0219      	lsls	r1, r3, #8
 8000f9a:	23a0      	movs	r3, #160	@ 0xa0
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f001 f9ae 	bl	8002302 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	4a34      	ldr	r2, [pc, #208]	@ (800107c <MX_GPIO_Init+0x144>)
 8000faa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	2203      	movs	r2, #3
 8000fb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	4a31      	ldr	r2, [pc, #196]	@ (8001080 <MX_GPIO_Init+0x148>)
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	f001 f81e 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 PA8
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8001084 <MX_GPIO_Init+0x14c>)
 8000fc8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	2203      	movs	r2, #3
 8000fce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	193a      	adds	r2, r7, r4
 8000fd8:	23a0      	movs	r3, #160	@ 0xa0
 8000fda:	05db      	lsls	r3, r3, #23
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f001 f80e 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_LEFT_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin;
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	2240      	movs	r2, #64	@ 0x40
 8000fe8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	2200      	movs	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	193a      	adds	r2, r7, r4
 8000ff8:	23a0      	movs	r3, #160	@ 0xa0
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	0011      	movs	r1, r2
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 fffe 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 8001004:	193b      	adds	r3, r7, r4
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100a:	193b      	adds	r3, r7, r4
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	193b      	adds	r3, r7, r4
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001016:	193b      	adds	r3, r7, r4
 8001018:	4a1b      	ldr	r2, [pc, #108]	@ (8001088 <MX_GPIO_Init+0x150>)
 800101a:	0019      	movs	r1, r3
 800101c:	0010      	movs	r0, r2
 800101e:	f000 ffef 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001022:	0021      	movs	r1, r4
 8001024:	187b      	adds	r3, r7, r1
 8001026:	22ff      	movs	r2, #255	@ 0xff
 8001028:	0052      	lsls	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102c:	000c      	movs	r4, r1
 800102e:	193b      	adds	r3, r7, r4
 8001030:	2203      	movs	r2, #3
 8001032:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	193b      	adds	r3, r7, r4
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	193b      	adds	r3, r7, r4
 800103c:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <MX_GPIO_Init+0x150>)
 800103e:	0019      	movs	r1, r3
 8001040:	0010      	movs	r0, r2
 8001042:	f000 ffdd 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8001046:	0021      	movs	r1, r4
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2280      	movs	r2, #128	@ 0x80
 800104c:	0212      	lsls	r2, r2, #8
 800104e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2201      	movs	r2, #1
 8001054:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8001062:	187a      	adds	r2, r7, r1
 8001064:	23a0      	movs	r3, #160	@ 0xa0
 8001066:	05db      	lsls	r3, r3, #23
 8001068:	0011      	movs	r1, r2
 800106a:	0018      	movs	r0, r3
 800106c:	f000 ffc8 	bl	8002000 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b009      	add	sp, #36	@ 0x24
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	0000c040 	.word	0x0000c040
 8001080:	50000800 	.word	0x50000800
 8001084:	00001dbf 	.word	0x00001dbf
 8001088:	50000400 	.word	0x50000400

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	46c0      	nop			@ (mov r8, r8)
 8001096:	e7fd      	b.n	8001094 <Error_Handler+0x8>

08001098 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800109c:	46c0      	nop			@ (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	0002      	movs	r2, r0
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80010b0:	4808      	ldr	r0, [pc, #32]	@ (80010d4 <ssd1306_WriteCommand+0x30>)
 80010b2:	2301      	movs	r3, #1
 80010b4:	425b      	negs	r3, r3
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	2200      	movs	r2, #0
 80010c4:	2178      	movs	r1, #120	@ 0x78
 80010c6:	f001 f9df 	bl	8002488 <HAL_I2C_Mem_Write>
}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	20000114 	.word	0x20000114

080010d8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af04      	add	r7, sp, #16
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4808      	ldr	r0, [pc, #32]	@ (8001108 <ssd1306_WriteData+0x30>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	4252      	negs	r2, r2
 80010ec:	9202      	str	r2, [sp, #8]
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	2240      	movs	r2, #64	@ 0x40
 80010f8:	2178      	movs	r1, #120	@ 0x78
 80010fa:	f001 f9c5 	bl	8002488 <HAL_I2C_Mem_Write>
}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	20000114 	.word	0x20000114

0800110c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001110:	f7ff ffc2 	bl	8001098 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001114:	2064      	movs	r0, #100	@ 0x64
 8001116:	f000 fccb 	bl	8001ab0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800111a:	2000      	movs	r0, #0
 800111c:	f000 faaa 	bl	8001674 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001120:	2020      	movs	r0, #32
 8001122:	f7ff ffbf 	bl	80010a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ffbc 	bl	80010a4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800112c:	20b0      	movs	r0, #176	@ 0xb0
 800112e:	f7ff ffb9 	bl	80010a4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8001132:	20c0      	movs	r0, #192	@ 0xc0
 8001134:	f7ff ffb6 	bl	80010a4 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff ffb3 	bl	80010a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800113e:	2010      	movs	r0, #16
 8001140:	f7ff ffb0 	bl	80010a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001144:	2040      	movs	r0, #64	@ 0x40
 8001146:	f7ff ffad 	bl	80010a4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);//FF
 800114a:	20ff      	movs	r0, #255	@ 0xff
 800114c:	f000 fa79 	bl	8001642 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8001150:	20a0      	movs	r0, #160	@ 0xa0
 8001152:	f7ff ffa7 	bl	80010a4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001156:	20a6      	movs	r0, #166	@ 0xa6
 8001158:	f7ff ffa4 	bl	80010a4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800115c:	20a8      	movs	r0, #168	@ 0xa8
 800115e:	f7ff ffa1 	bl	80010a4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001162:	203f      	movs	r0, #63	@ 0x3f
 8001164:	f7ff ff9e 	bl	80010a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001168:	20a4      	movs	r0, #164	@ 0xa4
 800116a:	f7ff ff9b 	bl	80010a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800116e:	20d3      	movs	r0, #211	@ 0xd3
 8001170:	f7ff ff98 	bl	80010a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff ff95 	bl	80010a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800117a:	20d5      	movs	r0, #213	@ 0xd5
 800117c:	f7ff ff92 	bl	80010a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001180:	20f0      	movs	r0, #240	@ 0xf0
 8001182:	f7ff ff8f 	bl	80010a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001186:	20d9      	movs	r0, #217	@ 0xd9
 8001188:	f7ff ff8c 	bl	80010a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800118c:	2022      	movs	r0, #34	@ 0x22
 800118e:	f7ff ff89 	bl	80010a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001192:	20da      	movs	r0, #218	@ 0xda
 8001194:	f7ff ff86 	bl	80010a4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001198:	2012      	movs	r0, #18
 800119a:	f7ff ff83 	bl	80010a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800119e:	20db      	movs	r0, #219	@ 0xdb
 80011a0:	f7ff ff80 	bl	80010a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80011a4:	2020      	movs	r0, #32
 80011a6:	f7ff ff7d 	bl	80010a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80011aa:	208d      	movs	r0, #141	@ 0x8d
 80011ac:	f7ff ff7a 	bl	80010a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80011b0:	2014      	movs	r0, #20
 80011b2:	f7ff ff77 	bl	80010a4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 fa5c 	bl	8001674 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f811 	bl	80011e4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80011c2:	f000 f829 	bl	8001218 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <ssd1306_Init+0xd4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <ssd1306_Init+0xd4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80011d2:	4b03      	ldr	r3, [pc, #12]	@ (80011e0 <ssd1306_Init+0xd4>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	711a      	strb	r2, [r3, #4]
}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	200005f8 	.word	0x200005f8

080011e4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	0002      	movs	r2, r0
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <ssd1306_Fill+0x18>
 80011f8:	2300      	movs	r3, #0
 80011fa:	e000      	b.n	80011fe <ssd1306_Fill+0x1a>
 80011fc:	23ff      	movs	r3, #255	@ 0xff
 80011fe:	2282      	movs	r2, #130	@ 0x82
 8001200:	00d2      	lsls	r2, r2, #3
 8001202:	4804      	ldr	r0, [pc, #16]	@ (8001214 <ssd1306_Fill+0x30>)
 8001204:	0019      	movs	r1, r3
 8001206:	f002 fe21 	bl	8003e4c <memset>
}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	200001e8 	.word	0x200001e8

08001218 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e01e      	b.n	8001264 <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3b50      	subs	r3, #80	@ 0x50
 800122c:	b2db      	uxtb	r3, r3
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff ff38 	bl	80010a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ff35 	bl	80010a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800123a:	2010      	movs	r0, #16
 800123c:	f7ff ff32 	bl	80010a4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	0013      	movs	r3, r2
 8001246:	019b      	lsls	r3, r3, #6
 8001248:	189b      	adds	r3, r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	001a      	movs	r2, r3
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <ssd1306_UpdateScreen+0x60>)
 8001250:	18d3      	adds	r3, r2, r3
 8001252:	2182      	movs	r1, #130	@ 0x82
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff3f 	bl	80010d8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	781a      	ldrb	r2, [r3, #0]
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	3201      	adds	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b07      	cmp	r3, #7
 800126a:	d9dc      	bls.n	8001226 <ssd1306_UpdateScreen+0xe>
    }
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	200001e8 	.word	0x200001e8

0800127c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	0004      	movs	r4, r0
 8001284:	0008      	movs	r0, r1
 8001286:	0011      	movs	r1, r2
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	1c22      	adds	r2, r4, #0
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	1dbb      	adds	r3, r7, #6
 8001290:	1c02      	adds	r2, r0, #0
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	1d7b      	adds	r3, r7, #5
 8001296:	1c0a      	adds	r2, r1, #0
 8001298:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b81      	cmp	r3, #129	@ 0x81
 80012a0:	d853      	bhi.n	800134a <ssd1306_DrawPixel+0xce>
 80012a2:	1dbb      	adds	r3, r7, #6
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80012a8:	d84f      	bhi.n	800134a <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80012aa:	1d7b      	adds	r3, r7, #5
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d124      	bne.n	80012fc <ssd1306_DrawPixel+0x80>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	1dbb      	adds	r3, r7, #6
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	08db      	lsrs	r3, r3, #3
 80012bc:	b2d8      	uxtb	r0, r3
 80012be:	0001      	movs	r1, r0
 80012c0:	000b      	movs	r3, r1
 80012c2:	019b      	lsls	r3, r3, #6
 80012c4:	185b      	adds	r3, r3, r1
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	4a22      	ldr	r2, [pc, #136]	@ (8001354 <ssd1306_DrawPixel+0xd8>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	b25a      	sxtb	r2, r3
 80012d0:	1dbb      	adds	r3, r7, #6
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2107      	movs	r1, #7
 80012d6:	400b      	ands	r3, r1
 80012d8:	2101      	movs	r1, #1
 80012da:	4099      	lsls	r1, r3
 80012dc:	000b      	movs	r3, r1
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b25c      	sxtb	r4, r3
 80012e4:	1dfb      	adds	r3, r7, #7
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	0001      	movs	r1, r0
 80012ea:	000b      	movs	r3, r1
 80012ec:	019b      	lsls	r3, r3, #6
 80012ee:	185b      	adds	r3, r3, r1
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	18d3      	adds	r3, r2, r3
 80012f4:	b2e1      	uxtb	r1, r4
 80012f6:	4a17      	ldr	r2, [pc, #92]	@ (8001354 <ssd1306_DrawPixel+0xd8>)
 80012f8:	54d1      	strb	r1, [r2, r3]
 80012fa:	e027      	b.n	800134c <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	1dbb      	adds	r3, r7, #6
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	b2d8      	uxtb	r0, r3
 8001308:	0001      	movs	r1, r0
 800130a:	000b      	movs	r3, r1
 800130c:	019b      	lsls	r3, r3, #6
 800130e:	185b      	adds	r3, r3, r1
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	18d3      	adds	r3, r2, r3
 8001314:	4a0f      	ldr	r2, [pc, #60]	@ (8001354 <ssd1306_DrawPixel+0xd8>)
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	b25b      	sxtb	r3, r3
 800131a:	1dba      	adds	r2, r7, #6
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	2107      	movs	r1, #7
 8001320:	400a      	ands	r2, r1
 8001322:	2101      	movs	r1, #1
 8001324:	4091      	lsls	r1, r2
 8001326:	000a      	movs	r2, r1
 8001328:	b252      	sxtb	r2, r2
 800132a:	43d2      	mvns	r2, r2
 800132c:	b252      	sxtb	r2, r2
 800132e:	4013      	ands	r3, r2
 8001330:	b25c      	sxtb	r4, r3
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	0001      	movs	r1, r0
 8001338:	000b      	movs	r3, r1
 800133a:	019b      	lsls	r3, r3, #6
 800133c:	185b      	adds	r3, r3, r1
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	18d3      	adds	r3, r2, r3
 8001342:	b2e1      	uxtb	r1, r4
 8001344:	4a03      	ldr	r2, [pc, #12]	@ (8001354 <ssd1306_DrawPixel+0xd8>)
 8001346:	54d1      	strb	r1, [r2, r3]
 8001348:	e000      	b.n	800134c <ssd1306_DrawPixel+0xd0>
        return;
 800134a:	46c0      	nop			@ (mov r8, r8)
    }
}
 800134c:	46bd      	mov	sp, r7
 800134e:	b003      	add	sp, #12
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	200001e8 	.word	0x200001e8

08001358 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	0004      	movs	r4, r0
 8001360:	0038      	movs	r0, r7
 8001362:	6001      	str	r1, [r0, #0]
 8001364:	6042      	str	r2, [r0, #4]
 8001366:	6083      	str	r3, [r0, #8]
 8001368:	210f      	movs	r1, #15
 800136a:	187b      	adds	r3, r7, r1
 800136c:	1c22      	adds	r2, r4, #0
 800136e:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001370:	000a      	movs	r2, r1
 8001372:	18bb      	adds	r3, r7, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b1f      	cmp	r3, #31
 8001378:	d903      	bls.n	8001382 <ssd1306_WriteChar+0x2a>
 800137a:	18bb      	adds	r3, r7, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001380:	d901      	bls.n	8001386 <ssd1306_WriteChar+0x2e>
        return 0;
 8001382:	2300      	movs	r3, #0
 8001384:	e084      	b.n	8001490 <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001386:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <ssd1306_WriteChar+0x140>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	001a      	movs	r2, r3
 800138c:	003b      	movs	r3, r7
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	2b82      	cmp	r3, #130	@ 0x82
 8001394:	dc07      	bgt.n	80013a6 <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001396:	4b40      	ldr	r3, [pc, #256]	@ (8001498 <ssd1306_WriteChar+0x140>)
 8001398:	885b      	ldrh	r3, [r3, #2]
 800139a:	001a      	movs	r2, r3
 800139c:	003b      	movs	r3, r7
 800139e:	785b      	ldrb	r3, [r3, #1]
 80013a0:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80013a2:	2b40      	cmp	r3, #64	@ 0x40
 80013a4:	dd01      	ble.n	80013aa <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e072      	b.n	8001490 <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e051      	b.n	8001454 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 80013b0:	003b      	movs	r3, r7
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	230f      	movs	r3, #15
 80013b6:	18fb      	adds	r3, r7, r3
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	3b20      	subs	r3, #32
 80013bc:	0039      	movs	r1, r7
 80013be:	7849      	ldrb	r1, [r1, #1]
 80013c0:	434b      	muls	r3, r1
 80013c2:	0019      	movs	r1, r3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	18cb      	adds	r3, r1, r3
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	18d3      	adds	r3, r2, r3
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	e035      	b.n	8001442 <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	409a      	lsls	r2, r3
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	4013      	ands	r3, r2
 80013e2:	d014      	beq.n	800140e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80013e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001498 <ssd1306_WriteChar+0x140>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	18d3      	adds	r3, r2, r3
 80013f0:	b2d8      	uxtb	r0, r3
 80013f2:	4b29      	ldr	r3, [pc, #164]	@ (8001498 <ssd1306_WriteChar+0x140>)
 80013f4:	885b      	ldrh	r3, [r3, #2]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	18d3      	adds	r3, r2, r3
 80013fe:	b2d9      	uxtb	r1, r3
 8001400:	2330      	movs	r3, #48	@ 0x30
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	001a      	movs	r2, r3
 8001408:	f7ff ff38 	bl	800127c <ssd1306_DrawPixel>
 800140c:	e016      	b.n	800143c <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800140e:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <ssd1306_WriteChar+0x140>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	18d3      	adds	r3, r2, r3
 800141a:	b2d8      	uxtb	r0, r3
 800141c:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <ssd1306_WriteChar+0x140>)
 800141e:	885b      	ldrh	r3, [r3, #2]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	18d3      	adds	r3, r2, r3
 8001428:	b2d9      	uxtb	r1, r3
 800142a:	2330      	movs	r3, #48	@ 0x30
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	425a      	negs	r2, r3
 8001432:	4153      	adcs	r3, r2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	001a      	movs	r2, r3
 8001438:	f7ff ff20 	bl	800127c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	3301      	adds	r3, #1
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	003b      	movs	r3, r7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	001a      	movs	r2, r3
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	4293      	cmp	r3, r2
 800144c:	d3c3      	bcc.n	80013d6 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	003b      	movs	r3, r7
 8001456:	785b      	ldrb	r3, [r3, #1]
 8001458:	001a      	movs	r2, r3
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4293      	cmp	r3, r2
 800145e:	d3a7      	bcc.n	80013b0 <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001460:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <ssd1306_WriteChar+0x140>)
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	003b      	movs	r3, r7
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <ssd1306_WriteChar+0x126>
 800146c:	003b      	movs	r3, r7
 800146e:	6899      	ldr	r1, [r3, #8]
 8001470:	230f      	movs	r3, #15
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	3b20      	subs	r3, #32
 8001478:	18cb      	adds	r3, r1, r3
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	e001      	b.n	8001482 <ssd1306_WriteChar+0x12a>
 800147e:	003b      	movs	r3, r7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	189b      	adds	r3, r3, r2
 8001484:	b29a      	uxth	r2, r3
 8001486:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <ssd1306_WriteChar+0x140>)
 8001488:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800148a:	230f      	movs	r3, #15
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	781b      	ldrb	r3, [r3, #0]
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b009      	add	sp, #36	@ 0x24
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	200005f8 	.word	0x200005f8

0800149c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	0038      	movs	r0, r7
 80014a6:	6001      	str	r1, [r0, #0]
 80014a8:	6042      	str	r2, [r0, #4]
 80014aa:	6083      	str	r3, [r0, #8]
    while (*str) {
 80014ac:	e017      	b.n	80014de <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	7818      	ldrb	r0, [r3, #0]
 80014b2:	003b      	movs	r3, r7
 80014b4:	2218      	movs	r2, #24
 80014b6:	18ba      	adds	r2, r7, r2
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	9200      	str	r2, [sp, #0]
 80014bc:	6819      	ldr	r1, [r3, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f7ff ff49 	bl	8001358 <ssd1306_WriteChar>
 80014c6:	0003      	movs	r3, r0
 80014c8:	001a      	movs	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d002      	beq.n	80014d8 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	e008      	b.n	80014ea <ssd1306_WriteString+0x4e>
        }
        str++;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3301      	adds	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1e3      	bne.n	80014ae <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	781b      	ldrb	r3, [r3, #0]
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b004      	add	sp, #16
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	0002      	movs	r2, r0
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	1dbb      	adds	r3, r7, #6
 8001502:	1c0a      	adds	r2, r1, #0
 8001504:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <ssd1306_SetCursor+0x30>)
 800150e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001510:	1dbb      	adds	r3, r7, #6
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <ssd1306_SetCursor+0x30>)
 8001518:	805a      	strh	r2, [r3, #2]
}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	200005f8 	.word	0x200005f8

08001528 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	0004      	movs	r4, r0
 8001530:	0008      	movs	r0, r1
 8001532:	603a      	str	r2, [r7, #0]
 8001534:	0019      	movs	r1, r3
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	1c22      	adds	r2, r4, #0
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	1c02      	adds	r2, r0, #0
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	1d7b      	adds	r3, r7, #5
 8001544:	1c0a      	adds	r2, r1, #0
 8001546:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001548:	1d7b      	adds	r3, r7, #5
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	3307      	adds	r3, #7
 800154e:	2b00      	cmp	r3, #0
 8001550:	da00      	bge.n	8001554 <ssd1306_DrawBitmap+0x2c>
 8001552:	3307      	adds	r3, #7
 8001554:	10db      	asrs	r3, r3, #3
 8001556:	001a      	movs	r2, r3
 8001558:	230a      	movs	r3, #10
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 800155e:	230f      	movs	r3, #15
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b81      	cmp	r3, #129	@ 0x81
 800156c:	d865      	bhi.n	800163a <ssd1306_DrawBitmap+0x112>
 800156e:	1dbb      	adds	r3, r7, #6
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b3f      	cmp	r3, #63	@ 0x3f
 8001574:	d861      	bhi.n	800163a <ssd1306_DrawBitmap+0x112>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001576:	230e      	movs	r3, #14
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e053      	b.n	8001628 <ssd1306_DrawBitmap+0x100>
        for (uint8_t i = 0; i < w; i++) {
 8001580:	230d      	movs	r3, #13
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	e03c      	b.n	8001604 <ssd1306_DrawBitmap+0xdc>
            if (i & 7) {
 800158a:	230d      	movs	r3, #13
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2207      	movs	r2, #7
 8001592:	4013      	ands	r3, r2
 8001594:	d006      	beq.n	80015a4 <ssd1306_DrawBitmap+0x7c>
                byte <<= 1;
 8001596:	230f      	movs	r3, #15
 8001598:	18fa      	adds	r2, r7, r3
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	18db      	adds	r3, r3, r3
 80015a0:	7013      	strb	r3, [r2, #0]
 80015a2:	e014      	b.n	80015ce <ssd1306_DrawBitmap+0xa6>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80015a4:	230e      	movs	r3, #14
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	220a      	movs	r2, #10
 80015ac:	18ba      	adds	r2, r7, r2
 80015ae:	2100      	movs	r1, #0
 80015b0:	5e52      	ldrsh	r2, [r2, r1]
 80015b2:	4353      	muls	r3, r2
 80015b4:	220d      	movs	r2, #13
 80015b6:	18ba      	adds	r2, r7, r2
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	08d2      	lsrs	r2, r2, #3
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	189b      	adds	r3, r3, r2
 80015c0:	001a      	movs	r2, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	189a      	adds	r2, r3, r2
 80015c6:	230f      	movs	r3, #15
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 80015ce:	230f      	movs	r3, #15
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da0e      	bge.n	80015f8 <ssd1306_DrawBitmap+0xd0>
                ssd1306_DrawPixel(x + i, y, color);
 80015da:	1dfa      	adds	r2, r7, #7
 80015dc:	230d      	movs	r3, #13
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	18d3      	adds	r3, r2, r3
 80015e6:	b2d8      	uxtb	r0, r3
 80015e8:	2324      	movs	r3, #36	@ 0x24
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	1dbb      	adds	r3, r7, #6
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	0019      	movs	r1, r3
 80015f4:	f7ff fe42 	bl	800127c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80015f8:	210d      	movs	r1, #13
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	3201      	adds	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	230d      	movs	r3, #13
 8001606:	18fa      	adds	r2, r7, r3
 8001608:	1d7b      	adds	r3, r7, #5
 800160a:	7812      	ldrb	r2, [r2, #0]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d3bb      	bcc.n	800158a <ssd1306_DrawBitmap+0x62>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001612:	210e      	movs	r1, #14
 8001614:	187b      	adds	r3, r7, r1
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	187b      	adds	r3, r7, r1
 800161a:	3201      	adds	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	1dbb      	adds	r3, r7, #6
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	1dbb      	adds	r3, r7, #6
 8001624:	3201      	adds	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	230e      	movs	r3, #14
 800162a:	18fa      	adds	r2, r7, r3
 800162c:	2320      	movs	r3, #32
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	7812      	ldrb	r2, [r2, #0]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3a3      	bcc.n	8001580 <ssd1306_DrawBitmap+0x58>
            }
        }
    }
    return;
 8001638:	e000      	b.n	800163c <ssd1306_DrawBitmap+0x114>
        return;
 800163a:	46c0      	nop			@ (mov r8, r8)
}
 800163c:	46bd      	mov	sp, r7
 800163e:	b005      	add	sp, #20
 8001640:	bd90      	pop	{r4, r7, pc}

08001642 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	0002      	movs	r2, r0
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 800164e:	210f      	movs	r1, #15
 8001650:	187b      	adds	r3, r7, r1
 8001652:	2281      	movs	r2, #129	@ 0x81
 8001654:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001656:	187b      	adds	r3, r7, r1
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	0018      	movs	r0, r3
 800165c:	f7ff fd22 	bl	80010a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fd1d 	bl	80010a4 <ssd1306_WriteCommand>
}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b004      	add	sp, #16
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	0002      	movs	r2, r0
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001680:	1dfb      	adds	r3, r7, #7
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001688:	230f      	movs	r3, #15
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	22af      	movs	r2, #175	@ 0xaf
 800168e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001690:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <ssd1306_SetDisplayOn+0x48>)
 8001692:	2201      	movs	r2, #1
 8001694:	715a      	strb	r2, [r3, #5]
 8001696:	e006      	b.n	80016a6 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8001698:	230f      	movs	r3, #15
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	22ae      	movs	r2, #174	@ 0xae
 800169e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <ssd1306_SetDisplayOn+0x48>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016a6:	230f      	movs	r3, #15
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff fcf9 	bl	80010a4 <ssd1306_WriteCommand>
}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b004      	add	sp, #16
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	200005f8 	.word	0x200005f8

080016c0 <ssd1306_InvertDisplay>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_InvertDisplay(uint8_t invert) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	0002      	movs	r2, r0
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	701a      	strb	r2, [r3, #0]
    if (invert) {
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <ssd1306_InvertDisplay+0x1c>
        ssd1306_WriteCommand(0xA7); // Inverted display mode
 80016d4:	20a7      	movs	r0, #167	@ 0xa7
 80016d6:	f7ff fce5 	bl	80010a4 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xA6); // Normal display mode
    }
}
 80016da:	e002      	b.n	80016e2 <ssd1306_InvertDisplay+0x22>
        ssd1306_WriteCommand(0xA6); // Normal display mode
 80016dc:	20a6      	movs	r0, #166	@ 0xa6
 80016de:	f7ff fce1 	bl	80010a4 <ssd1306_WriteCommand>
}
 80016e2:	46c0      	nop			@ (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_MspInit+0x44>)
 80016f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <HAL_MspInit+0x44>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80016fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_MspInit+0x44>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	2201      	movs	r2, #1
 8001704:	4013      	ands	r3, r2
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_MspInit+0x44>)
 800170c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_MspInit+0x44>)
 8001710:	2180      	movs	r1, #128	@ 0x80
 8001712:	0549      	lsls	r1, r1, #21
 8001714:	430a      	orrs	r2, r1
 8001716:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_MspInit+0x44>)
 800171a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	055b      	lsls	r3, r3, #21
 8001720:	4013      	ands	r3, r2
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	b002      	add	sp, #8
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	40021000 	.word	0x40021000

08001734 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b091      	sub	sp, #68	@ 0x44
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	232c      	movs	r3, #44	@ 0x2c
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	0018      	movs	r0, r3
 8001742:	2314      	movs	r3, #20
 8001744:	001a      	movs	r2, r3
 8001746:	2100      	movs	r1, #0
 8001748:	f002 fb80 	bl	8003e4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800174c:	2414      	movs	r4, #20
 800174e:	193b      	adds	r3, r7, r4
 8001750:	0018      	movs	r0, r3
 8001752:	2318      	movs	r3, #24
 8001754:	001a      	movs	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	f002 fb78 	bl	8003e4c <memset>
  if(hi2c->Instance==I2C1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a35      	ldr	r2, [pc, #212]	@ (8001838 <HAL_I2C_MspInit+0x104>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d163      	bne.n	800182e <HAL_I2C_MspInit+0xfa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001766:	193b      	adds	r3, r7, r4
 8001768:	2220      	movs	r2, #32
 800176a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800176c:	193b      	adds	r3, r7, r4
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001772:	193b      	adds	r3, r7, r4
 8001774:	0018      	movs	r0, r3
 8001776:	f001 ffc1 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 800177a:	1e03      	subs	r3, r0, #0
 800177c:	d001      	beq.n	8001782 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800177e:	f7ff fc85 	bl	800108c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4b2e      	ldr	r3, [pc, #184]	@ (800183c <HAL_I2C_MspInit+0x108>)
 8001784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <HAL_I2C_MspInit+0x108>)
 8001788:	2102      	movs	r1, #2
 800178a:	430a      	orrs	r2, r1
 800178c:	635a      	str	r2, [r3, #52]	@ 0x34
 800178e:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <HAL_I2C_MspInit+0x108>)
 8001790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b28      	ldr	r3, [pc, #160]	@ (800183c <HAL_I2C_MspInit+0x108>)
 800179c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800179e:	4b27      	ldr	r3, [pc, #156]	@ (800183c <HAL_I2C_MspInit+0x108>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80017a6:	4b25      	ldr	r3, [pc, #148]	@ (800183c <HAL_I2C_MspInit+0x108>)
 80017a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017aa:	2201      	movs	r2, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b2:	212c      	movs	r1, #44	@ 0x2c
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	2280      	movs	r2, #128	@ 0x80
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017bc:	000c      	movs	r4, r1
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	2212      	movs	r2, #18
 80017c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	2201      	movs	r2, #1
 80017c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	193b      	adds	r3, r7, r4
 80017cc:	2203      	movs	r2, #3
 80017ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80017d0:	193b      	adds	r3, r7, r4
 80017d2:	2206      	movs	r2, #6
 80017d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	4a19      	ldr	r2, [pc, #100]	@ (8001840 <HAL_I2C_MspInit+0x10c>)
 80017da:	0019      	movs	r1, r3
 80017dc:	0010      	movs	r0, r2
 80017de:	f000 fc0f 	bl	8002000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e2:	0021      	movs	r1, r4
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	2280      	movs	r2, #128	@ 0x80
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	2212      	movs	r2, #18
 80017f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	2201      	movs	r2, #1
 80017f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	2203      	movs	r2, #3
 80017fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	2206      	movs	r2, #6
 8001802:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	187a      	adds	r2, r7, r1
 8001806:	23a0      	movs	r3, #160	@ 0xa0
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	0011      	movs	r1, r2
 800180c:	0018      	movs	r0, r3
 800180e:	f000 fbf7 	bl	8002000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_I2C_MspInit+0x108>)
 8001814:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_I2C_MspInit+0x108>)
 8001818:	2180      	movs	r1, #128	@ 0x80
 800181a:	0389      	lsls	r1, r1, #14
 800181c:	430a      	orrs	r2, r1
 800181e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_I2C_MspInit+0x108>)
 8001822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	039b      	lsls	r3, r3, #14
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	b011      	add	sp, #68	@ 0x44
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	40005400 	.word	0x40005400
 800183c:	40021000 	.word	0x40021000
 8001840:	50000400 	.word	0x50000400

08001844 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_TIM_Base_MspInit+0x38>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10d      	bne.n	8001872 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_TIM_Base_MspInit+0x3c>)
 8001858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_TIM_Base_MspInit+0x3c>)
 800185c:	2180      	movs	r1, #128	@ 0x80
 800185e:	0209      	lsls	r1, r1, #8
 8001860:	430a      	orrs	r2, r1
 8001862:	641a      	str	r2, [r3, #64]	@ 0x40
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_TIM_Base_MspInit+0x3c>)
 8001866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	40002000 	.word	0x40002000
 8001880:	40021000 	.word	0x40021000

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001888:	46c0      	nop			@ (mov r8, r8)
 800188a:	e7fd      	b.n	8001888 <NMI_Handler+0x4>

0800188c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001890:	46c0      	nop			@ (mov r8, r8)
 8001892:	e7fd      	b.n	8001890 <HardFault_Handler+0x4>

08001894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001898:	46c0      	nop			@ (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ac:	f000 f8e4 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b0:	46c0      	nop			@ (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <TIM14_IRQHandler+0x14>)
 80018c6:	0018      	movs	r0, r3
 80018c8:	f002 f8e4 	bl	8003a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80018cc:	46c0      	nop			@ (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	20000168 	.word	0x20000168

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	@ (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	18d3      	adds	r3, r2, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f002 faa8 	bl	8003e5c <__errno>
 800190c:	0003      	movs	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	2301      	movs	r3, #1
 8001914:	425b      	negs	r3, r3
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	@ (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	18d2      	adds	r2, r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <_sbrk+0x64>)
 8001928:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b006      	add	sp, #24
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20002000 	.word	0x20002000
 8001938:	00000400 	.word	0x00000400
 800193c:	20000600 	.word	0x20000600
 8001940:	20000770 	.word	0x20000770

08001944 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	46c0      	nop			@ (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001950:	480d      	ldr	r0, [pc, #52]	@ (8001988 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001952:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001954:	f7ff fff6 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <LoopForever+0x6>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	@ (8001990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <LoopForever+0xe>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	@ (800199c <LoopForever+0x16>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800197e:	f002 fa73 	bl	8003e68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001982:	f7fe ff3b 	bl	80007fc <main>

08001986 <LoopForever>:

LoopForever:
  b LoopForever
 8001986:	e7fe      	b.n	8001986 <LoopForever>
  ldr   r0, =_estack
 8001988:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001994:	08007d68 	.word	0x08007d68
  ldr r2, =_sbss
 8001998:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 800199c:	2000076c 	.word	0x2000076c

080019a0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_Init+0x3c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_Init+0x3c>)
 80019b6:	2180      	movs	r1, #128	@ 0x80
 80019b8:	0049      	lsls	r1, r1, #1
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019be:	2003      	movs	r0, #3
 80019c0:	f000 f810 	bl	80019e4 <HAL_InitTick>
 80019c4:	1e03      	subs	r3, r0, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80019c8:	1dfb      	adds	r3, r7, #7
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	e001      	b.n	80019d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fe8c 	bl	80016ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d4:	1dfb      	adds	r3, r7, #7
 80019d6:	781b      	ldrb	r3, [r3, #0]
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40022000 	.word	0x40022000

080019e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019ec:	230f      	movs	r3, #15
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80019f4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <HAL_InitTick+0x88>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d02b      	beq.n	8001a54 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80019fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <HAL_InitTick+0x8c>)
 80019fe:	681c      	ldr	r4, [r3, #0]
 8001a00:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <HAL_InitTick+0x88>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	0019      	movs	r1, r3
 8001a06:	23fa      	movs	r3, #250	@ 0xfa
 8001a08:	0098      	lsls	r0, r3, #2
 8001a0a:	f7fe fb83 	bl	8000114 <__udivsi3>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	0019      	movs	r1, r3
 8001a12:	0020      	movs	r0, r4
 8001a14:	f7fe fb7e 	bl	8000114 <__udivsi3>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f000 f93d 	bl	8001c9a <HAL_SYSTICK_Config>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d112      	bne.n	8001a4a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d80a      	bhi.n	8001a40 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	425b      	negs	r3, r3
 8001a30:	2200      	movs	r2, #0
 8001a32:	0018      	movs	r0, r3
 8001a34:	f000 f90c 	bl	8001c50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <HAL_InitTick+0x90>)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e00d      	b.n	8001a5c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a40:	230f      	movs	r3, #15
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	e008      	b.n	8001a5c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	18fb      	adds	r3, r7, r3
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e003      	b.n	8001a5c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a54:	230f      	movs	r3, #15
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	781b      	ldrb	r3, [r3, #0]
}
 8001a62:	0018      	movs	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b005      	add	sp, #20
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	46c0      	nop			@ (mov r8, r8)
 8001a6c:	2000001c 	.word	0x2000001c
 8001a70:	20000014 	.word	0x20000014
 8001a74:	20000018 	.word	0x20000018

08001a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_IncTick+0x1c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	001a      	movs	r2, r3
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_IncTick+0x20>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	18d2      	adds	r2, r2, r3
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <HAL_IncTick+0x20>)
 8001a8a:	601a      	str	r2, [r3, #0]
}
 8001a8c:	46c0      	nop			@ (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	2000001c 	.word	0x2000001c
 8001a98:	20000604 	.word	0x20000604

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b02      	ldr	r3, [pc, #8]	@ (8001aac <HAL_GetTick+0x10>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	20000604 	.word	0x20000604

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff fff0 	bl	8001a9c <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	001a      	movs	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	189b      	adds	r3, r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	f7ff ffe0 	bl	8001a9c <HAL_GetTick>
 8001adc:	0002      	movs	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
  {
  }
}
 8001ae8:	46c0      	nop			@ (mov r8, r8)
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b004      	add	sp, #16
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	2000001c 	.word	0x2000001c

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	0002      	movs	r2, r0
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b0a:	d809      	bhi.n	8001b20 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	001a      	movs	r2, r3
 8001b12:	231f      	movs	r3, #31
 8001b14:	401a      	ands	r2, r3
 8001b16:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <__NVIC_EnableIRQ+0x30>)
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4091      	lsls	r1, r2
 8001b1c:	000a      	movs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001b20:	46c0      	nop			@ (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	0002      	movs	r2, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b40:	d828      	bhi.n	8001b94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b42:	4a2f      	ldr	r2, [pc, #188]	@ (8001c00 <__NVIC_SetPriority+0xd4>)
 8001b44:	1dfb      	adds	r3, r7, #7
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	33c0      	adds	r3, #192	@ 0xc0
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	589b      	ldr	r3, [r3, r2]
 8001b52:	1dfa      	adds	r2, r7, #7
 8001b54:	7812      	ldrb	r2, [r2, #0]
 8001b56:	0011      	movs	r1, r2
 8001b58:	2203      	movs	r2, #3
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	00d2      	lsls	r2, r2, #3
 8001b5e:	21ff      	movs	r1, #255	@ 0xff
 8001b60:	4091      	lsls	r1, r2
 8001b62:	000a      	movs	r2, r1
 8001b64:	43d2      	mvns	r2, r2
 8001b66:	401a      	ands	r2, r3
 8001b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	019b      	lsls	r3, r3, #6
 8001b6e:	22ff      	movs	r2, #255	@ 0xff
 8001b70:	401a      	ands	r2, r3
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	0018      	movs	r0, r3
 8001b78:	2303      	movs	r3, #3
 8001b7a:	4003      	ands	r3, r0
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b80:	481f      	ldr	r0, [pc, #124]	@ (8001c00 <__NVIC_SetPriority+0xd4>)
 8001b82:	1dfb      	adds	r3, r7, #7
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b25b      	sxtb	r3, r3
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	33c0      	adds	r3, #192	@ 0xc0
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b92:	e031      	b.n	8001bf8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b94:	4a1b      	ldr	r2, [pc, #108]	@ (8001c04 <__NVIC_SetPriority+0xd8>)
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	400b      	ands	r3, r1
 8001ba0:	3b08      	subs	r3, #8
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3306      	adds	r3, #6
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	18d3      	adds	r3, r2, r3
 8001baa:	3304      	adds	r3, #4
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1dfa      	adds	r2, r7, #7
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	00d2      	lsls	r2, r2, #3
 8001bba:	21ff      	movs	r1, #255	@ 0xff
 8001bbc:	4091      	lsls	r1, r2
 8001bbe:	000a      	movs	r2, r1
 8001bc0:	43d2      	mvns	r2, r2
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	22ff      	movs	r2, #255	@ 0xff
 8001bcc:	401a      	ands	r2, r3
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	4003      	ands	r3, r0
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bdc:	4809      	ldr	r0, [pc, #36]	@ (8001c04 <__NVIC_SetPriority+0xd8>)
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	001c      	movs	r4, r3
 8001be4:	230f      	movs	r3, #15
 8001be6:	4023      	ands	r3, r4
 8001be8:	3b08      	subs	r3, #8
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	430a      	orrs	r2, r1
 8001bee:	3306      	adds	r3, #6
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	18c3      	adds	r3, r0, r3
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	46c0      	nop			@ (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b003      	add	sp, #12
 8001bfe:	bd90      	pop	{r4, r7, pc}
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	1e5a      	subs	r2, r3, #1
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	045b      	lsls	r3, r3, #17
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d301      	bcc.n	8001c20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e010      	b.n	8001c42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c20:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <SysTick_Config+0x44>)
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	3a01      	subs	r2, #1
 8001c26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c28:	2301      	movs	r3, #1
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	2103      	movs	r1, #3
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7ff ff7c 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c34:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <SysTick_Config+0x44>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3a:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <SysTick_Config+0x44>)
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	e000e010 	.word	0xe000e010

08001c50 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	1c02      	adds	r2, r0, #0
 8001c60:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff ff5d 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b004      	add	sp, #16
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	0002      	movs	r2, r0
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c86:	1dfb      	adds	r3, r7, #7
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff ff33 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c92:	46c0      	nop			@ (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7ff ffaf 	bl	8001c08 <SysTick_Config>
 8001caa:	0003      	movs	r3, r0
}
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001cb4:	b5b0      	push	{r4, r5, r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	603a      	str	r2, [r7, #0]
 8001cc0:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cc2:	4b21      	ldr	r3, [pc, #132]	@ (8001d48 <HAL_FLASH_Program+0x94>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_FLASH_Program+0x1a>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e038      	b.n	8001d40 <HAL_FLASH_Program+0x8c>
 8001cce:	4b1e      	ldr	r3, [pc, #120]	@ (8001d48 <HAL_FLASH_Program+0x94>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <HAL_FLASH_Program+0x94>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001cda:	2517      	movs	r5, #23
 8001cdc:	197c      	adds	r4, r7, r5
 8001cde:	23fa      	movs	r3, #250	@ 0xfa
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f000 f87a 	bl	8001ddc <FLASH_WaitForLastOperation>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001cec:	197b      	adds	r3, r7, r5
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11f      	bne.n	8001d34 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d106      	bne.n	8001d08 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	0008      	movs	r0, r1
 8001d02:	f000 f8b9 	bl	8001e78 <FLASH_Program_DoubleWord>
 8001d06:	e005      	b.n	8001d14 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	0011      	movs	r1, r2
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f002 fd26 	bl	8004760 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d14:	2317      	movs	r3, #23
 8001d16:	18fc      	adds	r4, r7, r3
 8001d18:	23fa      	movs	r3, #250	@ 0xfa
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f000 f85d 	bl	8001ddc <FLASH_WaitForLastOperation>
 8001d22:	0003      	movs	r3, r0
 8001d24:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_FLASH_Program+0x98>)
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	43d9      	mvns	r1, r3
 8001d2e:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <HAL_FLASH_Program+0x98>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <HAL_FLASH_Program+0x94>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001d3a:	2317      	movs	r3, #23
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	781b      	ldrb	r3, [r3, #0]
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b006      	add	sp, #24
 8001d46:	bdb0      	pop	{r4, r5, r7, pc}
 8001d48:	20000608 	.word	0x20000608
 8001d4c:	40022000 	.word	0x40022000

08001d50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <HAL_FLASH_Unlock+0x3c>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da0c      	bge.n	8001d7e <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <HAL_FLASH_Unlock+0x3c>)
 8001d66:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <HAL_FLASH_Unlock+0x40>)
 8001d68:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <HAL_FLASH_Unlock+0x3c>)
 8001d6c:	4a09      	ldr	r2, [pc, #36]	@ (8001d94 <HAL_FLASH_Unlock+0x44>)
 8001d6e:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_FLASH_Unlock+0x3c>)
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	da02      	bge.n	8001d7e <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8001d78:	1dfb      	adds	r3, r7, #7
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	781b      	ldrb	r3, [r3, #0]
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b002      	add	sp, #8
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	45670123 	.word	0x45670123
 8001d94:	cdef89ab 	.word	0xcdef89ab

08001d98 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001da4:	23fa      	movs	r3, #250	@ 0xfa
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	0018      	movs	r0, r3
 8001daa:	f000 f817 	bl	8001ddc <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_FLASH_Lock+0x40>)
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <HAL_FLASH_Lock+0x40>)
 8001db4:	2180      	movs	r1, #128	@ 0x80
 8001db6:	0609      	lsls	r1, r1, #24
 8001db8:	430a      	orrs	r2, r1
 8001dba:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_FLASH_Lock+0x40>)
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da02      	bge.n	8001dca <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	40022000 	.word	0x40022000

08001ddc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff fe5a 	bl	8001a9c <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	025b      	lsls	r3, r3, #9
 8001df0:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8001df2:	e00c      	b.n	8001e0e <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3301      	adds	r3, #1
 8001df8:	d009      	beq.n	8001e0e <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8001dfa:	f7ff fe4f 	bl	8001a9c <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d801      	bhi.n	8001e0e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e028      	b.n	8001e60 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8001e0e:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <FLASH_WaitForLastOperation+0x8c>)
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	4013      	ands	r3, r2
 8001e16:	d1ed      	bne.n	8001df4 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8001e18:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <FLASH_WaitForLastOperation+0x8c>)
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	4a13      	ldr	r2, [pc, #76]	@ (8001e6c <FLASH_WaitForLastOperation+0x90>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8001e22:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <FLASH_WaitForLastOperation+0x8c>)
 8001e24:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <FLASH_WaitForLastOperation+0x94>)
 8001e26:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d011      	beq.n	8001e52 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <FLASH_WaitForLastOperation+0x98>)
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e013      	b.n	8001e60 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	d009      	beq.n	8001e52 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8001e3e:	f7ff fe2d 	bl	8001a9c <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d801      	bhi.n	8001e52 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e006      	b.n	8001e60 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8001e52:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <FLASH_WaitForLastOperation+0x8c>)
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	02db      	lsls	r3, r3, #11
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d1ec      	bne.n	8001e38 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	000083fa 	.word	0x000083fa
 8001e70:	000083fb 	.word	0x000083fb
 8001e74:	20000608 	.word	0x20000608

08001e78 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	603a      	str	r2, [r7, #0]
 8001e82:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <FLASH_Program_DoubleWord+0x3c>)
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <FLASH_Program_DoubleWord+0x3c>)
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001e96:	f3bf 8f6f 	isb	sy
}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	001c      	movs	r4, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	001d      	movs	r5, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	0022      	movs	r2, r4
 8001eaa:	601a      	str	r2, [r3, #0]
}
 8001eac:	46c0      	nop			@ (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b004      	add	sp, #16
 8001eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ec2:	4b35      	ldr	r3, [pc, #212]	@ (8001f98 <HAL_FLASHEx_Erase+0xe0>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_FLASHEx_Erase+0x16>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e05f      	b.n	8001f8e <HAL_FLASHEx_Erase+0xd6>
 8001ece:	4b32      	ldr	r3, [pc, #200]	@ (8001f98 <HAL_FLASHEx_Erase+0xe0>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ed4:	4b30      	ldr	r3, [pc, #192]	@ (8001f98 <HAL_FLASHEx_Erase+0xe0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001eda:	250f      	movs	r5, #15
 8001edc:	197c      	adds	r4, r7, r5
 8001ede:	23fa      	movs	r3, #250	@ 0xfa
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7ff ff7a 	bl	8001ddc <FLASH_WaitForLastOperation>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001eec:	002c      	movs	r4, r5
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d145      	bne.n	8001f82 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2204      	movs	r2, #4
 8001efa:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d10d      	bne.n	8001f20 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 f849 	bl	8001fa0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f0e:	193c      	adds	r4, r7, r4
 8001f10:	23fa      	movs	r3, #250	@ 0xfa
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff ff61 	bl	8001ddc <FLASH_WaitForLastOperation>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	7023      	strb	r3, [r4, #0]
 8001f1e:	e030      	b.n	8001f82 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	4252      	negs	r2, r2
 8001f26:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	e01a      	b.n	8001f66 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	0011      	movs	r1, r2
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f000 f845 	bl	8001fc8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f3e:	250f      	movs	r5, #15
 8001f40:	197c      	adds	r4, r7, r5
 8001f42:	23fa      	movs	r3, #250	@ 0xfa
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	0018      	movs	r0, r3
 8001f48:	f7ff ff48 	bl	8001ddc <FLASH_WaitForLastOperation>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8001f50:	197b      	adds	r3, r7, r5
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	601a      	str	r2, [r3, #0]
          break;
 8001f5e:	e00a      	b.n	8001f76 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	3301      	adds	r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	18d3      	adds	r3, r2, r3
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d3dc      	bcc.n	8001f30 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_FLASHEx_Erase+0xe4>)
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <HAL_FLASHEx_Erase+0xe4>)
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	438a      	bics	r2, r1
 8001f80:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_FLASHEx_Erase+0xe0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001f88:	230f      	movs	r3, #15
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b004      	add	sp, #16
 8001f94:	bdb0      	pop	{r4, r5, r7, pc}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	20000608 	.word	0x20000608
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <FLASH_MassErase+0x24>)
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <FLASH_MassErase+0x24>)
 8001fb2:	2180      	movs	r1, #128	@ 0x80
 8001fb4:	0249      	lsls	r1, r1, #9
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	615a      	str	r2, [r3, #20]
}
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	40022000 	.word	0x40022000

08001fc8 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8001fd2:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <FLASH_PageErase+0x2c>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	4a08      	ldr	r2, [pc, #32]	@ (8001ff8 <FLASH_PageErase+0x30>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	00da      	lsls	r2, r3, #3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	4b03      	ldr	r3, [pc, #12]	@ (8001ff4 <FLASH_PageErase+0x2c>)
 8001fe6:	4905      	ldr	r1, [pc, #20]	@ (8001ffc <FLASH_PageErase+0x34>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	615a      	str	r2, [r3, #20]
}
 8001fec:	46c0      	nop			@ (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b004      	add	sp, #16
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	ffffe007 	.word	0xffffe007
 8001ffc:	00010002 	.word	0x00010002

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200e:	e147      	b.n	80022a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4091      	lsls	r1, r2
 800201a:	000a      	movs	r2, r1
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d100      	bne.n	8002028 <HAL_GPIO_Init+0x28>
 8002026:	e138      	b.n	800229a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2203      	movs	r2, #3
 800202e:	4013      	ands	r3, r2
 8002030:	2b01      	cmp	r3, #1
 8002032:	d005      	beq.n	8002040 <HAL_GPIO_Init+0x40>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	4013      	ands	r3, r2
 800203c:	2b02      	cmp	r3, #2
 800203e:	d130      	bne.n	80020a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	409a      	lsls	r2, r3
 800204e:	0013      	movs	r3, r2
 8002050:	43da      	mvns	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	409a      	lsls	r2, r3
 8002062:	0013      	movs	r3, r2
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002076:	2201      	movs	r2, #1
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
 800207c:	0013      	movs	r3, r2
 800207e:	43da      	mvns	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	2201      	movs	r2, #1
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
 8002094:	0013      	movs	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2203      	movs	r2, #3
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d017      	beq.n	80020de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2203      	movs	r2, #3
 80020ba:	409a      	lsls	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	43da      	mvns	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	409a      	lsls	r2, r3
 80020d0:	0013      	movs	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2203      	movs	r2, #3
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d123      	bne.n	8002132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	08da      	lsrs	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3208      	adds	r2, #8
 80020f2:	0092      	lsls	r2, r2, #2
 80020f4:	58d3      	ldr	r3, [r2, r3]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2207      	movs	r2, #7
 80020fc:	4013      	ands	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	409a      	lsls	r2, r3
 8002104:	0013      	movs	r3, r2
 8002106:	43da      	mvns	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2107      	movs	r1, #7
 8002116:	400b      	ands	r3, r1
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	0092      	lsls	r2, r2, #2
 800212e:	6939      	ldr	r1, [r7, #16]
 8002130:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	409a      	lsls	r2, r3
 8002140:	0013      	movs	r3, r2
 8002142:	43da      	mvns	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2203      	movs	r2, #3
 8002150:	401a      	ands	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	409a      	lsls	r2, r3
 8002158:	0013      	movs	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	23c0      	movs	r3, #192	@ 0xc0
 800216c:	029b      	lsls	r3, r3, #10
 800216e:	4013      	ands	r3, r2
 8002170:	d100      	bne.n	8002174 <HAL_GPIO_Init+0x174>
 8002172:	e092      	b.n	800229a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002174:	4a50      	ldr	r2, [pc, #320]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3318      	adds	r3, #24
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	589b      	ldr	r3, [r3, r2]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2203      	movs	r2, #3
 8002186:	4013      	ands	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	220f      	movs	r2, #15
 800218c:	409a      	lsls	r2, r3
 800218e:	0013      	movs	r3, r2
 8002190:	43da      	mvns	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	23a0      	movs	r3, #160	@ 0xa0
 800219c:	05db      	lsls	r3, r3, #23
 800219e:	429a      	cmp	r2, r3
 80021a0:	d013      	beq.n	80021ca <HAL_GPIO_Init+0x1ca>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a45      	ldr	r2, [pc, #276]	@ (80022bc <HAL_GPIO_Init+0x2bc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00d      	beq.n	80021c6 <HAL_GPIO_Init+0x1c6>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a44      	ldr	r2, [pc, #272]	@ (80022c0 <HAL_GPIO_Init+0x2c0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <HAL_GPIO_Init+0x1c2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a43      	ldr	r2, [pc, #268]	@ (80022c4 <HAL_GPIO_Init+0x2c4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_GPIO_Init+0x1be>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x1cc>
 80021be:	2305      	movs	r3, #5
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x1cc>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x1cc>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x1cc>
 80021ca:	2300      	movs	r3, #0
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	2103      	movs	r1, #3
 80021d0:	400a      	ands	r2, r1
 80021d2:	00d2      	lsls	r2, r2, #3
 80021d4:	4093      	lsls	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80021dc:	4936      	ldr	r1, [pc, #216]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3318      	adds	r3, #24
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021ea:	4b33      	ldr	r3, [pc, #204]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43da      	mvns	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	2380      	movs	r3, #128	@ 0x80
 8002200:	035b      	lsls	r3, r3, #13
 8002202:	4013      	ands	r3, r2
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800220e:	4b2a      	ldr	r3, [pc, #168]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002214:	4b28      	ldr	r3, [pc, #160]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43da      	mvns	r2, r3
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	039b      	lsls	r3, r3, #14
 800222c:	4013      	ands	r3, r2
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002238:	4b1f      	ldr	r3, [pc, #124]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800223e:	4a1e      	ldr	r2, [pc, #120]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002240:	2384      	movs	r3, #132	@ 0x84
 8002242:	58d3      	ldr	r3, [r2, r3]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	43da      	mvns	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	029b      	lsls	r3, r3, #10
 8002258:	4013      	ands	r3, r2
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002264:	4914      	ldr	r1, [pc, #80]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002266:	2284      	movs	r2, #132	@ 0x84
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800226c:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 800226e:	2380      	movs	r3, #128	@ 0x80
 8002270:	58d3      	ldr	r3, [r2, r3]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43da      	mvns	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	2380      	movs	r3, #128	@ 0x80
 8002284:	025b      	lsls	r3, r3, #9
 8002286:	4013      	ands	r3, r2
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002292:	4909      	ldr	r1, [pc, #36]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002294:	2280      	movs	r2, #128	@ 0x80
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	40da      	lsrs	r2, r3
 80022a8:	1e13      	subs	r3, r2, #0
 80022aa:	d000      	beq.n	80022ae <HAL_GPIO_Init+0x2ae>
 80022ac:	e6b0      	b.n	8002010 <HAL_GPIO_Init+0x10>
  }
}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	46c0      	nop			@ (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b006      	add	sp, #24
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021800 	.word	0x40021800
 80022bc:	50000400 	.word	0x50000400
 80022c0:	50000800 	.word	0x50000800
 80022c4:	50000c00 	.word	0x50000c00

080022c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	000a      	movs	r2, r1
 80022d2:	1cbb      	adds	r3, r7, #2
 80022d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	1cba      	adds	r2, r7, #2
 80022dc:	8812      	ldrh	r2, [r2, #0]
 80022de:	4013      	ands	r3, r2
 80022e0:	d004      	beq.n	80022ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80022e2:	230f      	movs	r3, #15
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	e003      	b.n	80022f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ec:	230f      	movs	r3, #15
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80022f4:	230f      	movs	r3, #15
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	781b      	ldrb	r3, [r3, #0]
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b004      	add	sp, #16
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	0008      	movs	r0, r1
 800230c:	0011      	movs	r1, r2
 800230e:	1cbb      	adds	r3, r7, #2
 8002310:	1c02      	adds	r2, r0, #0
 8002312:	801a      	strh	r2, [r3, #0]
 8002314:	1c7b      	adds	r3, r7, #1
 8002316:	1c0a      	adds	r2, r1, #0
 8002318:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800231a:	1c7b      	adds	r3, r7, #1
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002322:	1cbb      	adds	r3, r7, #2
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800232a:	e003      	b.n	8002334 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800232c:	1cbb      	adds	r3, r7, #2
 800232e:	881a      	ldrh	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002334:	46c0      	nop			@ (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e08f      	b.n	800246e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2241      	movs	r2, #65	@ 0x41
 8002352:	5c9b      	ldrb	r3, [r3, r2]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d107      	bne.n	800236a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2240      	movs	r2, #64	@ 0x40
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f7ff f9e5 	bl	8001734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2241      	movs	r2, #65	@ 0x41
 800236e:	2124      	movs	r1, #36	@ 0x24
 8002370:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	438a      	bics	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	493b      	ldr	r1, [pc, #236]	@ (8002478 <HAL_I2C_Init+0x13c>)
 800238c:	400a      	ands	r2, r1
 800238e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4938      	ldr	r1, [pc, #224]	@ (800247c <HAL_I2C_Init+0x140>)
 800239c:	400a      	ands	r2, r1
 800239e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d108      	bne.n	80023ba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2180      	movs	r1, #128	@ 0x80
 80023b2:	0209      	lsls	r1, r1, #8
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	e007      	b.n	80023ca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2184      	movs	r1, #132	@ 0x84
 80023c4:	0209      	lsls	r1, r1, #8
 80023c6:	430a      	orrs	r2, r1
 80023c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d109      	bne.n	80023e6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2180      	movs	r1, #128	@ 0x80
 80023de:	0109      	lsls	r1, r1, #4
 80023e0:	430a      	orrs	r2, r1
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	e007      	b.n	80023f6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4923      	ldr	r1, [pc, #140]	@ (8002480 <HAL_I2C_Init+0x144>)
 80023f2:	400a      	ands	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4920      	ldr	r1, [pc, #128]	@ (8002484 <HAL_I2C_Init+0x148>)
 8002402:	430a      	orrs	r2, r1
 8002404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	491a      	ldr	r1, [pc, #104]	@ (800247c <HAL_I2C_Init+0x140>)
 8002412:	400a      	ands	r2, r1
 8002414:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	431a      	orrs	r2, r3
 8002420:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69d9      	ldr	r1, [r3, #28]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1a      	ldr	r2, [r3, #32]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2101      	movs	r1, #1
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2241      	movs	r2, #65	@ 0x41
 800245a:	2120      	movs	r1, #32
 800245c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2242      	movs	r2, #66	@ 0x42
 8002468:	2100      	movs	r1, #0
 800246a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	f0ffffff 	.word	0xf0ffffff
 800247c:	ffff7fff 	.word	0xffff7fff
 8002480:	fffff7ff 	.word	0xfffff7ff
 8002484:	02008000 	.word	0x02008000

08002488 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b089      	sub	sp, #36	@ 0x24
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	000c      	movs	r4, r1
 8002492:	0010      	movs	r0, r2
 8002494:	0019      	movs	r1, r3
 8002496:	230a      	movs	r3, #10
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	1c22      	adds	r2, r4, #0
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	2308      	movs	r3, #8
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	1c02      	adds	r2, r0, #0
 80024a4:	801a      	strh	r2, [r3, #0]
 80024a6:	1dbb      	adds	r3, r7, #6
 80024a8:	1c0a      	adds	r2, r1, #0
 80024aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2241      	movs	r2, #65	@ 0x41
 80024b0:	5c9b      	ldrb	r3, [r3, r2]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d000      	beq.n	80024ba <HAL_I2C_Mem_Write+0x32>
 80024b8:	e10c      	b.n	80026d4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <HAL_I2C_Mem_Write+0x42>
 80024c0:	232c      	movs	r3, #44	@ 0x2c
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2280      	movs	r2, #128	@ 0x80
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0ff      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2240      	movs	r2, #64	@ 0x40
 80024da:	5c9b      	ldrb	r3, [r3, r2]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_I2C_Mem_Write+0x5c>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e0f8      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2240      	movs	r2, #64	@ 0x40
 80024e8:	2101      	movs	r1, #1
 80024ea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024ec:	f7ff fad6 	bl	8001a9c <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	0219      	lsls	r1, r3, #8
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2319      	movs	r3, #25
 8002500:	2201      	movs	r2, #1
 8002502:	f000 f975 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0e3      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2241      	movs	r2, #65	@ 0x41
 8002512:	2121      	movs	r1, #33	@ 0x21
 8002514:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2242      	movs	r2, #66	@ 0x42
 800251a:	2140      	movs	r1, #64	@ 0x40
 800251c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	222c      	movs	r2, #44	@ 0x2c
 800252e:	18ba      	adds	r2, r7, r2
 8002530:	8812      	ldrh	r2, [r2, #0]
 8002532:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800253a:	1dbb      	adds	r3, r7, #6
 800253c:	881c      	ldrh	r4, [r3, #0]
 800253e:	2308      	movs	r3, #8
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	230a      	movs	r3, #10
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	8819      	ldrh	r1, [r3, #0]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	0023      	movs	r3, r4
 8002556:	f000 f8c5 	bl	80026e4 <I2C_RequestMemoryWrite>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d005      	beq.n	800256a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2240      	movs	r2, #64	@ 0x40
 8002562:	2100      	movs	r1, #0
 8002564:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0b5      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2bff      	cmp	r3, #255	@ 0xff
 8002572:	d911      	bls.n	8002598 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	22ff      	movs	r2, #255	@ 0xff
 8002578:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257e:	b2da      	uxtb	r2, r3
 8002580:	2380      	movs	r3, #128	@ 0x80
 8002582:	045c      	lsls	r4, r3, #17
 8002584:	230a      	movs	r3, #10
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	8819      	ldrh	r1, [r3, #0]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	2300      	movs	r3, #0
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	0023      	movs	r3, r4
 8002592:	f000 fb07 	bl	8002ba4 <I2C_TransferConfig>
 8002596:	e012      	b.n	80025be <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	049c      	lsls	r4, r3, #18
 80025ac:	230a      	movs	r3, #10
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	8819      	ldrh	r1, [r3, #0]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	2300      	movs	r3, #0
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	0023      	movs	r3, r4
 80025ba:	f000 faf3 	bl	8002ba4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f000 f96b 	bl	80028a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80025ca:	1e03      	subs	r3, r0, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e081      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d03a      	beq.n	8002682 <HAL_I2C_Mem_Write+0x1fa>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002610:	2b00      	cmp	r3, #0
 8002612:	d136      	bne.n	8002682 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	0013      	movs	r3, r2
 800261e:	2200      	movs	r2, #0
 8002620:	2180      	movs	r1, #128	@ 0x80
 8002622:	f000 f8e5 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e053      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	2bff      	cmp	r3, #255	@ 0xff
 8002636:	d911      	bls.n	800265c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	22ff      	movs	r2, #255	@ 0xff
 800263c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002642:	b2da      	uxtb	r2, r3
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	045c      	lsls	r4, r3, #17
 8002648:	230a      	movs	r3, #10
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	8819      	ldrh	r1, [r3, #0]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	0023      	movs	r3, r4
 8002656:	f000 faa5 	bl	8002ba4 <I2C_TransferConfig>
 800265a:	e012      	b.n	8002682 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266a:	b2da      	uxtb	r2, r3
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	049c      	lsls	r4, r3, #18
 8002670:	230a      	movs	r3, #10
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	8819      	ldrh	r1, [r3, #0]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	2300      	movs	r3, #0
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	0023      	movs	r3, r4
 800267e:	f000 fa91 	bl	8002ba4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d198      	bne.n	80025be <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	0018      	movs	r0, r3
 8002694:	f000 f94a 	bl	800292c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e01a      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2220      	movs	r2, #32
 80026a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	490b      	ldr	r1, [pc, #44]	@ (80026e0 <HAL_I2C_Mem_Write+0x258>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2241      	movs	r2, #65	@ 0x41
 80026bc:	2120      	movs	r1, #32
 80026be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2242      	movs	r2, #66	@ 0x42
 80026c4:	2100      	movs	r1, #0
 80026c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2240      	movs	r2, #64	@ 0x40
 80026cc:	2100      	movs	r1, #0
 80026ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
  }
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b007      	add	sp, #28
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	fe00e800 	.word	0xfe00e800

080026e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80026e4:	b5b0      	push	{r4, r5, r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	000c      	movs	r4, r1
 80026ee:	0010      	movs	r0, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	250a      	movs	r5, #10
 80026f4:	197b      	adds	r3, r7, r5
 80026f6:	1c22      	adds	r2, r4, #0
 80026f8:	801a      	strh	r2, [r3, #0]
 80026fa:	2308      	movs	r3, #8
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	1c02      	adds	r2, r0, #0
 8002700:	801a      	strh	r2, [r3, #0]
 8002702:	1dbb      	adds	r3, r7, #6
 8002704:	1c0a      	adds	r2, r1, #0
 8002706:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002708:	1dbb      	adds	r3, r7, #6
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	2380      	movs	r3, #128	@ 0x80
 8002710:	045c      	lsls	r4, r3, #17
 8002712:	197b      	adds	r3, r7, r5
 8002714:	8819      	ldrh	r1, [r3, #0]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	4b23      	ldr	r3, [pc, #140]	@ (80027a8 <I2C_RequestMemoryWrite+0xc4>)
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	0023      	movs	r3, r4
 800271e:	f000 fa41 	bl	8002ba4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002724:	6a39      	ldr	r1, [r7, #32]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f8b9 	bl	80028a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800272e:	1e03      	subs	r3, r0, #0
 8002730:	d001      	beq.n	8002736 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e033      	b.n	800279e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002736:	1dbb      	adds	r3, r7, #6
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d107      	bne.n	800274e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800273e:	2308      	movs	r3, #8
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28
 800274c:	e019      	b.n	8002782 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800274e:	2308      	movs	r3, #8
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	b29b      	uxth	r3, r3
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002762:	6a39      	ldr	r1, [r7, #32]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	0018      	movs	r0, r3
 8002768:	f000 f89a 	bl	80028a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d001      	beq.n	8002774 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e014      	b.n	800279e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002774:	2308      	movs	r3, #8
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002782:	6a3a      	ldr	r2, [r7, #32]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	0013      	movs	r3, r2
 800278c:	2200      	movs	r2, #0
 800278e:	2180      	movs	r1, #128	@ 0x80
 8002790:	f000 f82e 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d001      	beq.n	800279c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	0018      	movs	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b004      	add	sp, #16
 80027a4:	bdb0      	pop	{r4, r5, r7, pc}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	80002000 	.word	0x80002000

080027ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d103      	bne.n	80027ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d007      	beq.n	80027e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2101      	movs	r1, #1
 80027e4:	430a      	orrs	r2, r1
 80027e6:	619a      	str	r2, [r3, #24]
  }
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	1dfb      	adds	r3, r7, #7
 80027fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002800:	e03a      	b.n	8002878 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	6839      	ldr	r1, [r7, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 f8d3 	bl	80029b4 <I2C_IsErrorOccurred>
 800280e:	1e03      	subs	r3, r0, #0
 8002810:	d001      	beq.n	8002816 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e040      	b.n	8002898 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	3301      	adds	r3, #1
 800281a:	d02d      	beq.n	8002878 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281c:	f7ff f93e 	bl	8001a9c <HAL_GetTick>
 8002820:	0002      	movs	r2, r0
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d302      	bcc.n	8002832 <I2C_WaitOnFlagUntilTimeout+0x42>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d122      	bne.n	8002878 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	4013      	ands	r3, r2
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	425a      	negs	r2, r3
 8002842:	4153      	adcs	r3, r2
 8002844:	b2db      	uxtb	r3, r3
 8002846:	001a      	movs	r2, r3
 8002848:	1dfb      	adds	r3, r7, #7
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d113      	bne.n	8002878 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002854:	2220      	movs	r2, #32
 8002856:	431a      	orrs	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2241      	movs	r2, #65	@ 0x41
 8002860:	2120      	movs	r1, #32
 8002862:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2242      	movs	r2, #66	@ 0x42
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2240      	movs	r2, #64	@ 0x40
 8002870:	2100      	movs	r1, #0
 8002872:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e00f      	b.n	8002898 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	4013      	ands	r3, r2
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	425a      	negs	r2, r3
 8002888:	4153      	adcs	r3, r2
 800288a:	b2db      	uxtb	r3, r3
 800288c:	001a      	movs	r2, r3
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d0b5      	beq.n	8002802 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b004      	add	sp, #16
 800289e:	bd80      	pop	{r7, pc}

080028a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028ac:	e032      	b.n	8002914 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f000 f87d 	bl	80029b4 <I2C_IsErrorOccurred>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d001      	beq.n	80028c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e030      	b.n	8002924 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3301      	adds	r3, #1
 80028c6:	d025      	beq.n	8002914 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c8:	f7ff f8e8 	bl	8001a9c <HAL_GetTick>
 80028cc:	0002      	movs	r2, r0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d302      	bcc.n	80028de <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d11a      	bne.n	8002914 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2202      	movs	r2, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d013      	beq.n	8002914 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	2220      	movs	r2, #32
 80028f2:	431a      	orrs	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2241      	movs	r2, #65	@ 0x41
 80028fc:	2120      	movs	r1, #32
 80028fe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2242      	movs	r2, #66	@ 0x42
 8002904:	2100      	movs	r1, #0
 8002906:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2240      	movs	r2, #64	@ 0x40
 800290c:	2100      	movs	r1, #0
 800290e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e007      	b.n	8002924 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2202      	movs	r2, #2
 800291c:	4013      	ands	r3, r2
 800291e:	2b02      	cmp	r3, #2
 8002920:	d1c5      	bne.n	80028ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	b004      	add	sp, #16
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002938:	e02f      	b.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	0018      	movs	r0, r3
 8002942:	f000 f837 	bl	80029b4 <I2C_IsErrorOccurred>
 8002946:	1e03      	subs	r3, r0, #0
 8002948:	d001      	beq.n	800294e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e02d      	b.n	80029aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7ff f8a5 	bl	8001a9c <HAL_GetTick>
 8002952:	0002      	movs	r2, r0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d11a      	bne.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2220      	movs	r2, #32
 800296c:	4013      	ands	r3, r2
 800296e:	2b20      	cmp	r3, #32
 8002970:	d013      	beq.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	2220      	movs	r2, #32
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2241      	movs	r2, #65	@ 0x41
 8002982:	2120      	movs	r1, #32
 8002984:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2242      	movs	r2, #66	@ 0x42
 800298a:	2100      	movs	r1, #0
 800298c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2240      	movs	r2, #64	@ 0x40
 8002992:	2100      	movs	r1, #0
 8002994:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e007      	b.n	80029aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2220      	movs	r2, #32
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d1c8      	bne.n	800293a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b004      	add	sp, #16
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	@ 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c0:	2327      	movs	r3, #39	@ 0x27
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2210      	movs	r2, #16
 80029dc:	4013      	ands	r3, r2
 80029de:	d100      	bne.n	80029e2 <I2C_IsErrorOccurred+0x2e>
 80029e0:	e079      	b.n	8002ad6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2210      	movs	r2, #16
 80029e8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ea:	e057      	b.n	8002a9c <I2C_IsErrorOccurred+0xe8>
 80029ec:	2227      	movs	r2, #39	@ 0x27
 80029ee:	18bb      	adds	r3, r7, r2
 80029f0:	18ba      	adds	r2, r7, r2
 80029f2:	7812      	ldrb	r2, [r2, #0]
 80029f4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3301      	adds	r3, #1
 80029fa:	d04f      	beq.n	8002a9c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029fc:	f7ff f84e 	bl	8001a9c <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d302      	bcc.n	8002a12 <I2C_IsErrorOccurred+0x5e>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d144      	bne.n	8002a9c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	01db      	lsls	r3, r3, #7
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a20:	2013      	movs	r0, #19
 8002a22:	183b      	adds	r3, r7, r0
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	2142      	movs	r1, #66	@ 0x42
 8002a28:	5c52      	ldrb	r2, [r2, r1]
 8002a2a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	401a      	ands	r2, r3
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d126      	bne.n	8002a8e <I2C_IsErrorOccurred+0xda>
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	2380      	movs	r3, #128	@ 0x80
 8002a44:	01db      	lsls	r3, r3, #7
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d021      	beq.n	8002a8e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002a4a:	183b      	adds	r3, r7, r0
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d01d      	beq.n	8002a8e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2180      	movs	r1, #128	@ 0x80
 8002a5e:	01c9      	lsls	r1, r1, #7
 8002a60:	430a      	orrs	r2, r1
 8002a62:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a64:	f7ff f81a 	bl	8001a9c <HAL_GetTick>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a6c:	e00f      	b.n	8002a8e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a6e:	f7ff f815 	bl	8001a9c <HAL_GetTick>
 8002a72:	0002      	movs	r2, r0
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b19      	cmp	r3, #25
 8002a7a:	d908      	bls.n	8002a8e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	4313      	orrs	r3, r2
 8002a82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a84:	2327      	movs	r3, #39	@ 0x27
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]

              break;
 8002a8c:	e006      	b.n	8002a9c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2220      	movs	r2, #32
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d1e8      	bne.n	8002a6e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d004      	beq.n	8002ab4 <I2C_IsErrorOccurred+0x100>
 8002aaa:	2327      	movs	r3, #39	@ 0x27
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d09b      	beq.n	80029ec <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ab4:	2327      	movs	r3, #39	@ 0x27
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	4313      	orrs	r3, r2
 8002acc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ace:	2327      	movs	r3, #39	@ 0x27
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	2380      	movs	r3, #128	@ 0x80
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d00c      	beq.n	8002b02 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	2201      	movs	r2, #1
 8002aec:	4313      	orrs	r3, r2
 8002aee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2280      	movs	r2, #128	@ 0x80
 8002af6:	0052      	lsls	r2, r2, #1
 8002af8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002afa:	2327      	movs	r3, #39	@ 0x27
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	2380      	movs	r3, #128	@ 0x80
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d00c      	beq.n	8002b26 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	2208      	movs	r2, #8
 8002b10:	4313      	orrs	r3, r2
 8002b12:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2280      	movs	r2, #128	@ 0x80
 8002b1a:	00d2      	lsls	r2, r2, #3
 8002b1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b1e:	2327      	movs	r3, #39	@ 0x27
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d00c      	beq.n	8002b4a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	2202      	movs	r2, #2
 8002b34:	4313      	orrs	r3, r2
 8002b36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2280      	movs	r2, #128	@ 0x80
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b42:	2327      	movs	r3, #39	@ 0x27
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002b4a:	2327      	movs	r3, #39	@ 0x27
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01d      	beq.n	8002b90 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7ff fe28 	bl	80027ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	490e      	ldr	r1, [pc, #56]	@ (8002ba0 <I2C_IsErrorOccurred+0x1ec>)
 8002b68:	400a      	ands	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2241      	movs	r2, #65	@ 0x41
 8002b7c:	2120      	movs	r1, #32
 8002b7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2242      	movs	r2, #66	@ 0x42
 8002b84:	2100      	movs	r1, #0
 8002b86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2240      	movs	r2, #64	@ 0x40
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002b90:	2327      	movs	r3, #39	@ 0x27
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	781b      	ldrb	r3, [r3, #0]
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b00a      	add	sp, #40	@ 0x28
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	fe00e800 	.word	0xfe00e800

08002ba4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	0008      	movs	r0, r1
 8002bae:	0011      	movs	r1, r2
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	240a      	movs	r4, #10
 8002bb4:	193b      	adds	r3, r7, r4
 8002bb6:	1c02      	adds	r2, r0, #0
 8002bb8:	801a      	strh	r2, [r3, #0]
 8002bba:	2009      	movs	r0, #9
 8002bbc:	183b      	adds	r3, r7, r0
 8002bbe:	1c0a      	adds	r2, r1, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	059b      	lsls	r3, r3, #22
 8002bc8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bca:	183b      	adds	r3, r7, r0
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	0419      	lsls	r1, r3, #16
 8002bd0:	23ff      	movs	r3, #255	@ 0xff
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bd6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bde:	4313      	orrs	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bee:	0d51      	lsrs	r1, r2, #21
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	00d2      	lsls	r2, r2, #3
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	4907      	ldr	r1, [pc, #28]	@ (8002c14 <I2C_TransferConfig+0x70>)
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	43d2      	mvns	r2, r2
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	0011      	movs	r1, r2
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b007      	add	sp, #28
 8002c10:	bd90      	pop	{r4, r7, pc}
 8002c12:	46c0      	nop			@ (mov r8, r8)
 8002c14:	03ff63ff 	.word	0x03ff63ff

08002c18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2241      	movs	r2, #65	@ 0x41
 8002c26:	5c9b      	ldrb	r3, [r3, r2]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d138      	bne.n	8002ca0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2240      	movs	r2, #64	@ 0x40
 8002c32:	5c9b      	ldrb	r3, [r3, r2]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e032      	b.n	8002ca2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2240      	movs	r2, #64	@ 0x40
 8002c40:	2101      	movs	r1, #1
 8002c42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2241      	movs	r2, #65	@ 0x41
 8002c48:	2124      	movs	r1, #36	@ 0x24
 8002c4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2101      	movs	r1, #1
 8002c58:	438a      	bics	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4911      	ldr	r1, [pc, #68]	@ (8002cac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002c68:	400a      	ands	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2101      	movs	r1, #1
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2241      	movs	r2, #65	@ 0x41
 8002c90:	2120      	movs	r1, #32
 8002c92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2240      	movs	r2, #64	@ 0x40
 8002c98:	2100      	movs	r1, #0
 8002c9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e000      	b.n	8002ca2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
  }
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	ffffefff 	.word	0xffffefff

08002cb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2241      	movs	r2, #65	@ 0x41
 8002cbe:	5c9b      	ldrb	r3, [r3, r2]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d139      	bne.n	8002d3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2240      	movs	r2, #64	@ 0x40
 8002cca:	5c9b      	ldrb	r3, [r3, r2]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e033      	b.n	8002d3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2240      	movs	r2, #64	@ 0x40
 8002cd8:	2101      	movs	r1, #1
 8002cda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2241      	movs	r2, #65	@ 0x41
 8002ce0:	2124      	movs	r1, #36	@ 0x24
 8002ce2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a11      	ldr	r2, [pc, #68]	@ (8002d44 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2101      	movs	r1, #1
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2241      	movs	r2, #65	@ 0x41
 8002d2a:	2120      	movs	r1, #32
 8002d2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2240      	movs	r2, #64	@ 0x40
 8002d32:	2100      	movs	r1, #0
 8002d34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
  }
}
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b004      	add	sp, #16
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	fffff0ff 	.word	0xfffff0ff

08002d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d50:	4b19      	ldr	r3, [pc, #100]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a19      	ldr	r2, [pc, #100]	@ (8002dbc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	4b17      	ldr	r3, [pc, #92]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d11f      	bne.n	8002dac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002d6c:	4b14      	ldr	r3, [pc, #80]	@ (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	0013      	movs	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	189b      	adds	r3, r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4912      	ldr	r1, [pc, #72]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7fd f9ca 	bl	8000114 <__udivsi3>
 8002d80:	0003      	movs	r3, r0
 8002d82:	3301      	adds	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d86:	e008      	b.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e001      	b.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e009      	b.n	8002dae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d9a:	4b07      	ldr	r3, [pc, #28]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	401a      	ands	r2, r3
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d0ed      	beq.n	8002d88 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b004      	add	sp, #16
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	fffff9ff 	.word	0xfffff9ff
 8002dc0:	20000014 	.word	0x20000014
 8002dc4:	000f4240 	.word	0x000f4240

08002dc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e2f3      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2201      	movs	r2, #1
 8002de0:	4013      	ands	r3, r2
 8002de2:	d100      	bne.n	8002de6 <HAL_RCC_OscConfig+0x1e>
 8002de4:	e07c      	b.n	8002ee0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de6:	4bc3      	ldr	r3, [pc, #780]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2238      	movs	r2, #56	@ 0x38
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df0:	4bc0      	ldr	r3, [pc, #768]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2203      	movs	r2, #3
 8002df6:	4013      	ands	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_OscConfig+0x3e>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d10b      	bne.n	8002e24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	4bb9      	ldr	r3, [pc, #740]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	2380      	movs	r3, #128	@ 0x80
 8002e12:	029b      	lsls	r3, r3, #10
 8002e14:	4013      	ands	r3, r2
 8002e16:	d062      	beq.n	8002ede <HAL_RCC_OscConfig+0x116>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d15e      	bne.n	8002ede <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e2ce      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	025b      	lsls	r3, r3, #9
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_OscConfig+0x78>
 8002e30:	4bb0      	ldr	r3, [pc, #704]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4baf      	ldr	r3, [pc, #700]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002e36:	2180      	movs	r1, #128	@ 0x80
 8002e38:	0249      	lsls	r1, r1, #9
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e020      	b.n	8002e82 <HAL_RCC_OscConfig+0xba>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	23a0      	movs	r3, #160	@ 0xa0
 8002e46:	02db      	lsls	r3, r3, #11
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d10e      	bne.n	8002e6a <HAL_RCC_OscConfig+0xa2>
 8002e4c:	4ba9      	ldr	r3, [pc, #676]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4ba8      	ldr	r3, [pc, #672]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002e52:	2180      	movs	r1, #128	@ 0x80
 8002e54:	02c9      	lsls	r1, r1, #11
 8002e56:	430a      	orrs	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	4ba6      	ldr	r3, [pc, #664]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4ba5      	ldr	r3, [pc, #660]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002e60:	2180      	movs	r1, #128	@ 0x80
 8002e62:	0249      	lsls	r1, r1, #9
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	e00b      	b.n	8002e82 <HAL_RCC_OscConfig+0xba>
 8002e6a:	4ba2      	ldr	r3, [pc, #648]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4ba1      	ldr	r3, [pc, #644]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002e70:	49a1      	ldr	r1, [pc, #644]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002e72:	400a      	ands	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	4b9f      	ldr	r3, [pc, #636]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b9e      	ldr	r3, [pc, #632]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002e7c:	499f      	ldr	r1, [pc, #636]	@ (80030fc <HAL_RCC_OscConfig+0x334>)
 8002e7e:	400a      	ands	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d014      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fe07 	bl	8001a9c <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe fe02 	bl	8001a9c <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e28d      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea6:	4b93      	ldr	r3, [pc, #588]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	029b      	lsls	r3, r3, #10
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0xcc>
 8002eb2:	e015      	b.n	8002ee0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fdf2 	bl	8001a9c <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ebe:	f7fe fded 	bl	8001a9c <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	@ 0x64
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e278      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ed0:	4b88      	ldr	r3, [pc, #544]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2380      	movs	r3, #128	@ 0x80
 8002ed6:	029b      	lsls	r3, r3, #10
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0xf6>
 8002edc:	e000      	b.n	8002ee0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ede:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d100      	bne.n	8002eec <HAL_RCC_OscConfig+0x124>
 8002eea:	e099      	b.n	8003020 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eec:	4b81      	ldr	r3, [pc, #516]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2238      	movs	r2, #56	@ 0x38
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2203      	movs	r2, #3
 8002efc:	4013      	ands	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d102      	bne.n	8002f0c <HAL_RCC_OscConfig+0x144>
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d002      	beq.n	8002f12 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d135      	bne.n	8002f7e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f12:	4b78      	ldr	r3, [pc, #480]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d005      	beq.n	8002f2a <HAL_RCC_OscConfig+0x162>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e24b      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2a:	4b72      	ldr	r3, [pc, #456]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a74      	ldr	r2, [pc, #464]	@ (8003100 <HAL_RCC_OscConfig+0x338>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	021a      	lsls	r2, r3, #8
 8002f3a:	4b6e      	ldr	r3, [pc, #440]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d112      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f46:	4b6b      	ldr	r3, [pc, #428]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8003104 <HAL_RCC_OscConfig+0x33c>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	4b67      	ldr	r3, [pc, #412]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002f5a:	4b66      	ldr	r3, [pc, #408]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	0adb      	lsrs	r3, r3, #11
 8002f60:	2207      	movs	r2, #7
 8002f62:	4013      	ands	r3, r2
 8002f64:	4a68      	ldr	r2, [pc, #416]	@ (8003108 <HAL_RCC_OscConfig+0x340>)
 8002f66:	40da      	lsrs	r2, r3
 8002f68:	4b68      	ldr	r3, [pc, #416]	@ (800310c <HAL_RCC_OscConfig+0x344>)
 8002f6a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f6c:	4b68      	ldr	r3, [pc, #416]	@ (8003110 <HAL_RCC_OscConfig+0x348>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7fe fd37 	bl	80019e4 <HAL_InitTick>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d051      	beq.n	800301e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e221      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d030      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f86:	4b5b      	ldr	r3, [pc, #364]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003104 <HAL_RCC_OscConfig+0x33c>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	4b57      	ldr	r3, [pc, #348]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002f9a:	4b56      	ldr	r3, [pc, #344]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b55      	ldr	r3, [pc, #340]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002fa0:	2180      	movs	r1, #128	@ 0x80
 8002fa2:	0049      	lsls	r1, r1, #1
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fd78 	bl	8001a9c <HAL_GetTick>
 8002fac:	0003      	movs	r3, r0
 8002fae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7fe fd73 	bl	8001a9c <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1fe      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b48      	ldr	r3, [pc, #288]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003100 <HAL_RCC_OscConfig+0x338>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	021a      	lsls	r2, r3, #8
 8002fe0:	4b44      	ldr	r3, [pc, #272]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	e01b      	b.n	8003020 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002fe8:	4b42      	ldr	r3, [pc, #264]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b41      	ldr	r3, [pc, #260]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8002fee:	4949      	ldr	r1, [pc, #292]	@ (8003114 <HAL_RCC_OscConfig+0x34c>)
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fd52 	bl	8001a9c <HAL_GetTick>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fd4d 	bl	8001a9c <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e1d8      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003010:	4b38      	ldr	r3, [pc, #224]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2380      	movs	r3, #128	@ 0x80
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4013      	ands	r3, r2
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x236>
 800301c:	e000      	b.n	8003020 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800301e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2208      	movs	r2, #8
 8003026:	4013      	ands	r3, r2
 8003028:	d047      	beq.n	80030ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800302a:	4b32      	ldr	r3, [pc, #200]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2238      	movs	r2, #56	@ 0x38
 8003030:	4013      	ands	r3, r2
 8003032:	2b18      	cmp	r3, #24
 8003034:	d10a      	bne.n	800304c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003036:	4b2f      	ldr	r3, [pc, #188]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8003038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303a:	2202      	movs	r2, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d03c      	beq.n	80030ba <HAL_RCC_OscConfig+0x2f2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d138      	bne.n	80030ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e1ba      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d019      	beq.n	8003088 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003054:	4b27      	ldr	r3, [pc, #156]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 8003056:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003058:	4b26      	ldr	r3, [pc, #152]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 800305a:	2101      	movs	r1, #1
 800305c:	430a      	orrs	r2, r1
 800305e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fd1c 	bl	8001a9c <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306a:	f7fe fd17 	bl	8001a9c <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e1a2      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800307c:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 800307e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003080:	2202      	movs	r2, #2
 8003082:	4013      	ands	r3, r2
 8003084:	d0f1      	beq.n	800306a <HAL_RCC_OscConfig+0x2a2>
 8003086:	e018      	b.n	80030ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003088:	4b1a      	ldr	r3, [pc, #104]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 800308a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800308c:	4b19      	ldr	r3, [pc, #100]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 800308e:	2101      	movs	r1, #1
 8003090:	438a      	bics	r2, r1
 8003092:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fd02 	bl	8001a9c <HAL_GetTick>
 8003098:	0003      	movs	r3, r0
 800309a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe fcfd 	bl	8001a9c <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e188      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b0:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 80030b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d1f1      	bne.n	800309e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2204      	movs	r2, #4
 80030c0:	4013      	ands	r3, r2
 80030c2:	d100      	bne.n	80030c6 <HAL_RCC_OscConfig+0x2fe>
 80030c4:	e0c6      	b.n	8003254 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	231f      	movs	r3, #31
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80030ce:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2238      	movs	r2, #56	@ 0x38
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d11e      	bne.n	8003118 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_RCC_OscConfig+0x32c>)
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	2202      	movs	r2, #2
 80030e0:	4013      	ands	r3, r2
 80030e2:	d100      	bne.n	80030e6 <HAL_RCC_OscConfig+0x31e>
 80030e4:	e0b6      	b.n	8003254 <HAL_RCC_OscConfig+0x48c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d000      	beq.n	80030f0 <HAL_RCC_OscConfig+0x328>
 80030ee:	e0b1      	b.n	8003254 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e166      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
 80030f4:	40021000 	.word	0x40021000
 80030f8:	fffeffff 	.word	0xfffeffff
 80030fc:	fffbffff 	.word	0xfffbffff
 8003100:	ffff80ff 	.word	0xffff80ff
 8003104:	ffffc7ff 	.word	0xffffc7ff
 8003108:	00f42400 	.word	0x00f42400
 800310c:	20000014 	.word	0x20000014
 8003110:	20000018 	.word	0x20000018
 8003114:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003118:	4bac      	ldr	r3, [pc, #688]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 800311a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800311c:	2380      	movs	r3, #128	@ 0x80
 800311e:	055b      	lsls	r3, r3, #21
 8003120:	4013      	ands	r3, r2
 8003122:	d101      	bne.n	8003128 <HAL_RCC_OscConfig+0x360>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x362>
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d011      	beq.n	8003152 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	4ba7      	ldr	r3, [pc, #668]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 8003130:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003132:	4ba6      	ldr	r3, [pc, #664]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 8003134:	2180      	movs	r1, #128	@ 0x80
 8003136:	0549      	lsls	r1, r1, #21
 8003138:	430a      	orrs	r2, r1
 800313a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800313c:	4ba3      	ldr	r3, [pc, #652]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 800313e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	055b      	lsls	r3, r3, #21
 8003144:	4013      	ands	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800314a:	231f      	movs	r3, #31
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003152:	4b9f      	ldr	r3, [pc, #636]	@ (80033d0 <HAL_RCC_OscConfig+0x608>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	2380      	movs	r3, #128	@ 0x80
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4013      	ands	r3, r2
 800315c:	d11a      	bne.n	8003194 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800315e:	4b9c      	ldr	r3, [pc, #624]	@ (80033d0 <HAL_RCC_OscConfig+0x608>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b9b      	ldr	r3, [pc, #620]	@ (80033d0 <HAL_RCC_OscConfig+0x608>)
 8003164:	2180      	movs	r1, #128	@ 0x80
 8003166:	0049      	lsls	r1, r1, #1
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800316c:	f7fe fc96 	bl	8001a9c <HAL_GetTick>
 8003170:	0003      	movs	r3, r0
 8003172:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003176:	f7fe fc91 	bl	8001a9c <HAL_GetTick>
 800317a:	0002      	movs	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e11c      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003188:	4b91      	ldr	r3, [pc, #580]	@ (80033d0 <HAL_RCC_OscConfig+0x608>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	2380      	movs	r3, #128	@ 0x80
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4013      	ands	r3, r2
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x3e2>
 800319c:	4b8b      	ldr	r3, [pc, #556]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 800319e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031a0:	4b8a      	ldr	r3, [pc, #552]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80031a2:	2101      	movs	r1, #1
 80031a4:	430a      	orrs	r2, r1
 80031a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031a8:	e01c      	b.n	80031e4 <HAL_RCC_OscConfig+0x41c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b05      	cmp	r3, #5
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x404>
 80031b2:	4b86      	ldr	r3, [pc, #536]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80031b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031b6:	4b85      	ldr	r3, [pc, #532]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80031b8:	2104      	movs	r1, #4
 80031ba:	430a      	orrs	r2, r1
 80031bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031be:	4b83      	ldr	r3, [pc, #524]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80031c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031c2:	4b82      	ldr	r3, [pc, #520]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80031c4:	2101      	movs	r1, #1
 80031c6:	430a      	orrs	r2, r1
 80031c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0x41c>
 80031cc:	4b7f      	ldr	r3, [pc, #508]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80031ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031d0:	4b7e      	ldr	r3, [pc, #504]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80031d2:	2101      	movs	r1, #1
 80031d4:	438a      	bics	r2, r1
 80031d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031d8:	4b7c      	ldr	r3, [pc, #496]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80031da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031dc:	4b7b      	ldr	r3, [pc, #492]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80031de:	2104      	movs	r1, #4
 80031e0:	438a      	bics	r2, r1
 80031e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d014      	beq.n	8003216 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fc56 	bl	8001a9c <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f4:	e009      	b.n	800320a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe fc51 	bl	8001a9c <HAL_GetTick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	4a74      	ldr	r2, [pc, #464]	@ (80033d4 <HAL_RCC_OscConfig+0x60c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e0db      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320a:	4b70      	ldr	r3, [pc, #448]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	2202      	movs	r2, #2
 8003210:	4013      	ands	r3, r2
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x42e>
 8003214:	e013      	b.n	800323e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fe fc41 	bl	8001a9c <HAL_GetTick>
 800321a:	0003      	movs	r3, r0
 800321c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800321e:	e009      	b.n	8003234 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7fe fc3c 	bl	8001a9c <HAL_GetTick>
 8003224:	0002      	movs	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	4a6a      	ldr	r2, [pc, #424]	@ (80033d4 <HAL_RCC_OscConfig+0x60c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e0c6      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003234:	4b65      	ldr	r3, [pc, #404]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 8003236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003238:	2202      	movs	r2, #2
 800323a:	4013      	ands	r3, r2
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800323e:	231f      	movs	r3, #31
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d105      	bne.n	8003254 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003248:	4b60      	ldr	r3, [pc, #384]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 800324a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800324c:	4b5f      	ldr	r3, [pc, #380]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 800324e:	4962      	ldr	r1, [pc, #392]	@ (80033d8 <HAL_RCC_OscConfig+0x610>)
 8003250:	400a      	ands	r2, r1
 8003252:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d100      	bne.n	800325e <HAL_RCC_OscConfig+0x496>
 800325c:	e0b0      	b.n	80033c0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800325e:	4b5b      	ldr	r3, [pc, #364]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2238      	movs	r2, #56	@ 0x38
 8003264:	4013      	ands	r3, r2
 8003266:	2b10      	cmp	r3, #16
 8003268:	d100      	bne.n	800326c <HAL_RCC_OscConfig+0x4a4>
 800326a:	e078      	b.n	800335e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d153      	bne.n	800331c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b55      	ldr	r3, [pc, #340]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b54      	ldr	r3, [pc, #336]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 800327a:	4958      	ldr	r1, [pc, #352]	@ (80033dc <HAL_RCC_OscConfig+0x614>)
 800327c:	400a      	ands	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe fc0c 	bl	8001a9c <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328a:	f7fe fc07 	bl	8001a9c <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e092      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329c:	4b4b      	ldr	r3, [pc, #300]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	049b      	lsls	r3, r3, #18
 80032a4:	4013      	ands	r3, r2
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a8:	4b48      	ldr	r3, [pc, #288]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a4c      	ldr	r2, [pc, #304]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	431a      	orrs	r2, r3
 80032d0:	4b3e      	ldr	r3, [pc, #248]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80032d2:	430a      	orrs	r2, r1
 80032d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d6:	4b3d      	ldr	r3, [pc, #244]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b3c      	ldr	r3, [pc, #240]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80032dc:	2180      	movs	r1, #128	@ 0x80
 80032de:	0449      	lsls	r1, r1, #17
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80032e4:	4b39      	ldr	r3, [pc, #228]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4b38      	ldr	r3, [pc, #224]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 80032ea:	2180      	movs	r1, #128	@ 0x80
 80032ec:	0549      	lsls	r1, r1, #21
 80032ee:	430a      	orrs	r2, r1
 80032f0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe fbd3 	bl	8001a9c <HAL_GetTick>
 80032f6:	0003      	movs	r3, r0
 80032f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe fbce 	bl	8001a9c <HAL_GetTick>
 8003300:	0002      	movs	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e059      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330e:	4b2f      	ldr	r3, [pc, #188]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	049b      	lsls	r3, r3, #18
 8003316:	4013      	ands	r3, r2
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x534>
 800331a:	e051      	b.n	80033c0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331c:	4b2b      	ldr	r3, [pc, #172]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b2a      	ldr	r3, [pc, #168]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 8003322:	492e      	ldr	r1, [pc, #184]	@ (80033dc <HAL_RCC_OscConfig+0x614>)
 8003324:	400a      	ands	r2, r1
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fbb8 	bl	8001a9c <HAL_GetTick>
 800332c:	0003      	movs	r3, r0
 800332e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003332:	f7fe fbb3 	bl	8001a9c <HAL_GetTick>
 8003336:	0002      	movs	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e03e      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003344:	4b21      	ldr	r3, [pc, #132]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	049b      	lsls	r3, r3, #18
 800334c:	4013      	ands	r3, r2
 800334e:	d1f0      	bne.n	8003332 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003350:	4b1e      	ldr	r3, [pc, #120]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	4b1d      	ldr	r3, [pc, #116]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 8003356:	4923      	ldr	r1, [pc, #140]	@ (80033e4 <HAL_RCC_OscConfig+0x61c>)
 8003358:	400a      	ands	r2, r1
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	e030      	b.n	80033c0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e02b      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800336a:	4b18      	ldr	r3, [pc, #96]	@ (80033cc <HAL_RCC_OscConfig+0x604>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2203      	movs	r2, #3
 8003374:	401a      	ands	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	429a      	cmp	r2, r3
 800337c:	d11e      	bne.n	80033bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2270      	movs	r2, #112	@ 0x70
 8003382:	401a      	ands	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d117      	bne.n	80033bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	23fe      	movs	r3, #254	@ 0xfe
 8003390:	01db      	lsls	r3, r3, #7
 8003392:	401a      	ands	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d10e      	bne.n	80033bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	23f8      	movs	r3, #248	@ 0xf8
 80033a2:	039b      	lsls	r3, r3, #14
 80033a4:	401a      	ands	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	0f5b      	lsrs	r3, r3, #29
 80033b2:	075a      	lsls	r2, r3, #29
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b008      	add	sp, #32
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40007000 	.word	0x40007000
 80033d4:	00001388 	.word	0x00001388
 80033d8:	efffffff 	.word	0xefffffff
 80033dc:	feffffff 	.word	0xfeffffff
 80033e0:	1fc1808c 	.word	0x1fc1808c
 80033e4:	effefffc 	.word	0xeffefffc

080033e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0e9      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b76      	ldr	r3, [pc, #472]	@ (80035d8 <HAL_RCC_ClockConfig+0x1f0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2207      	movs	r2, #7
 8003402:	4013      	ands	r3, r2
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d91e      	bls.n	8003448 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b73      	ldr	r3, [pc, #460]	@ (80035d8 <HAL_RCC_ClockConfig+0x1f0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2207      	movs	r2, #7
 8003410:	4393      	bics	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	4b70      	ldr	r3, [pc, #448]	@ (80035d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800341c:	f7fe fb3e 	bl	8001a9c <HAL_GetTick>
 8003420:	0003      	movs	r3, r0
 8003422:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003424:	e009      	b.n	800343a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003426:	f7fe fb39 	bl	8001a9c <HAL_GetTick>
 800342a:	0002      	movs	r2, r0
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	4a6a      	ldr	r2, [pc, #424]	@ (80035dc <HAL_RCC_ClockConfig+0x1f4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0ca      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800343a:	4b67      	ldr	r3, [pc, #412]	@ (80035d8 <HAL_RCC_ClockConfig+0x1f0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2207      	movs	r2, #7
 8003440:	4013      	ands	r3, r2
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d1ee      	bne.n	8003426 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2202      	movs	r2, #2
 800344e:	4013      	ands	r3, r2
 8003450:	d015      	beq.n	800347e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2204      	movs	r2, #4
 8003458:	4013      	ands	r3, r2
 800345a:	d006      	beq.n	800346a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800345c:	4b60      	ldr	r3, [pc, #384]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	4b5f      	ldr	r3, [pc, #380]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003462:	21e0      	movs	r1, #224	@ 0xe0
 8003464:	01c9      	lsls	r1, r1, #7
 8003466:	430a      	orrs	r2, r1
 8003468:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346a:	4b5d      	ldr	r3, [pc, #372]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4a5d      	ldr	r2, [pc, #372]	@ (80035e4 <HAL_RCC_ClockConfig+0x1fc>)
 8003470:	4013      	ands	r3, r2
 8003472:	0019      	movs	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	4b59      	ldr	r3, [pc, #356]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2201      	movs	r2, #1
 8003484:	4013      	ands	r3, r2
 8003486:	d057      	beq.n	8003538 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d107      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003490:	4b53      	ldr	r3, [pc, #332]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	029b      	lsls	r3, r3, #10
 8003498:	4013      	ands	r3, r2
 800349a:	d12b      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e097      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a8:	4b4d      	ldr	r3, [pc, #308]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	2380      	movs	r3, #128	@ 0x80
 80034ae:	049b      	lsls	r3, r3, #18
 80034b0:	4013      	ands	r3, r2
 80034b2:	d11f      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e08b      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c0:	4b47      	ldr	r3, [pc, #284]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	2380      	movs	r3, #128	@ 0x80
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4013      	ands	r3, r2
 80034ca:	d113      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e07f      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d8:	4b41      	ldr	r3, [pc, #260]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 80034da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034dc:	2202      	movs	r2, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	d108      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e074      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e6:	4b3e      	ldr	r3, [pc, #248]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 80034e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ea:	2202      	movs	r2, #2
 80034ec:	4013      	ands	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e06d      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f4:	4b3a      	ldr	r3, [pc, #232]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2207      	movs	r2, #7
 80034fa:	4393      	bics	r3, r2
 80034fc:	0019      	movs	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	4b37      	ldr	r3, [pc, #220]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003504:	430a      	orrs	r2, r1
 8003506:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003508:	f7fe fac8 	bl	8001a9c <HAL_GetTick>
 800350c:	0003      	movs	r3, r0
 800350e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003510:	e009      	b.n	8003526 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003512:	f7fe fac3 	bl	8001a9c <HAL_GetTick>
 8003516:	0002      	movs	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	4a2f      	ldr	r2, [pc, #188]	@ (80035dc <HAL_RCC_ClockConfig+0x1f4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e054      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	4b2e      	ldr	r3, [pc, #184]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2238      	movs	r2, #56	@ 0x38
 800352c:	401a      	ands	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	429a      	cmp	r2, r3
 8003536:	d1ec      	bne.n	8003512 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003538:	4b27      	ldr	r3, [pc, #156]	@ (80035d8 <HAL_RCC_ClockConfig+0x1f0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2207      	movs	r2, #7
 800353e:	4013      	ands	r3, r2
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d21e      	bcs.n	8003584 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b24      	ldr	r3, [pc, #144]	@ (80035d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2207      	movs	r2, #7
 800354c:	4393      	bics	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	4b21      	ldr	r3, [pc, #132]	@ (80035d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003558:	f7fe faa0 	bl	8001a9c <HAL_GetTick>
 800355c:	0003      	movs	r3, r0
 800355e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003560:	e009      	b.n	8003576 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003562:	f7fe fa9b 	bl	8001a9c <HAL_GetTick>
 8003566:	0002      	movs	r2, r0
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <HAL_RCC_ClockConfig+0x1f4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e02c      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003576:	4b18      	ldr	r3, [pc, #96]	@ (80035d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2207      	movs	r2, #7
 800357c:	4013      	ands	r3, r2
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d1ee      	bne.n	8003562 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2204      	movs	r2, #4
 800358a:	4013      	ands	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800358e:	4b14      	ldr	r3, [pc, #80]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4a15      	ldr	r2, [pc, #84]	@ (80035e8 <HAL_RCC_ClockConfig+0x200>)
 8003594:	4013      	ands	r3, r2
 8003596:	0019      	movs	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	4b10      	ldr	r3, [pc, #64]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80035a2:	f000 f829 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035a6:	0001      	movs	r1, r0
 80035a8:	4b0d      	ldr	r3, [pc, #52]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	220f      	movs	r2, #15
 80035b0:	401a      	ands	r2, r3
 80035b2:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <HAL_RCC_ClockConfig+0x204>)
 80035b4:	0092      	lsls	r2, r2, #2
 80035b6:	58d3      	ldr	r3, [r2, r3]
 80035b8:	221f      	movs	r2, #31
 80035ba:	4013      	ands	r3, r2
 80035bc:	000a      	movs	r2, r1
 80035be:	40da      	lsrs	r2, r3
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_RCC_ClockConfig+0x208>)
 80035c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035c4:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <HAL_RCC_ClockConfig+0x20c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7fe fa0b 	bl	80019e4 <HAL_InitTick>
 80035ce:	0003      	movs	r3, r0
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b004      	add	sp, #16
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40022000 	.word	0x40022000
 80035dc:	00001388 	.word	0x00001388
 80035e0:	40021000 	.word	0x40021000
 80035e4:	fffff0ff 	.word	0xfffff0ff
 80035e8:	ffff8fff 	.word	0xffff8fff
 80035ec:	08007cec 	.word	0x08007cec
 80035f0:	20000014 	.word	0x20000014
 80035f4:	20000018 	.word	0x20000018

080035f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035fe:	4b3c      	ldr	r3, [pc, #240]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2238      	movs	r2, #56	@ 0x38
 8003604:	4013      	ands	r3, r2
 8003606:	d10f      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003608:	4b39      	ldr	r3, [pc, #228]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0adb      	lsrs	r3, r3, #11
 800360e:	2207      	movs	r2, #7
 8003610:	4013      	ands	r3, r2
 8003612:	2201      	movs	r2, #1
 8003614:	409a      	lsls	r2, r3
 8003616:	0013      	movs	r3, r2
 8003618:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800361a:	6839      	ldr	r1, [r7, #0]
 800361c:	4835      	ldr	r0, [pc, #212]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800361e:	f7fc fd79 	bl	8000114 <__udivsi3>
 8003622:	0003      	movs	r3, r0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	e05d      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003628:	4b31      	ldr	r3, [pc, #196]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2238      	movs	r2, #56	@ 0x38
 800362e:	4013      	ands	r3, r2
 8003630:	2b08      	cmp	r3, #8
 8003632:	d102      	bne.n	800363a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003634:	4b30      	ldr	r3, [pc, #192]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	e054      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800363a:	4b2d      	ldr	r3, [pc, #180]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2238      	movs	r2, #56	@ 0x38
 8003640:	4013      	ands	r3, r2
 8003642:	2b10      	cmp	r3, #16
 8003644:	d138      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003646:	4b2a      	ldr	r3, [pc, #168]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2203      	movs	r2, #3
 800364c:	4013      	ands	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003650:	4b27      	ldr	r3, [pc, #156]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	2207      	movs	r2, #7
 8003658:	4013      	ands	r3, r2
 800365a:	3301      	adds	r3, #1
 800365c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d10d      	bne.n	8003680 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	4824      	ldr	r0, [pc, #144]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003668:	f7fc fd54 	bl	8000114 <__udivsi3>
 800366c:	0003      	movs	r3, r0
 800366e:	0019      	movs	r1, r3
 8003670:	4b1f      	ldr	r3, [pc, #124]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	227f      	movs	r2, #127	@ 0x7f
 8003678:	4013      	ands	r3, r2
 800367a:	434b      	muls	r3, r1
 800367c:	617b      	str	r3, [r7, #20]
        break;
 800367e:	e00d      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	481c      	ldr	r0, [pc, #112]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003684:	f7fc fd46 	bl	8000114 <__udivsi3>
 8003688:	0003      	movs	r3, r0
 800368a:	0019      	movs	r1, r3
 800368c:	4b18      	ldr	r3, [pc, #96]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	227f      	movs	r2, #127	@ 0x7f
 8003694:	4013      	ands	r3, r2
 8003696:	434b      	muls	r3, r1
 8003698:	617b      	str	r3, [r7, #20]
        break;
 800369a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800369c:	4b14      	ldr	r3, [pc, #80]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0f5b      	lsrs	r3, r3, #29
 80036a2:	2207      	movs	r2, #7
 80036a4:	4013      	ands	r3, r2
 80036a6:	3301      	adds	r3, #1
 80036a8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	6978      	ldr	r0, [r7, #20]
 80036ae:	f7fc fd31 	bl	8000114 <__udivsi3>
 80036b2:	0003      	movs	r3, r0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	e015      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80036b8:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2238      	movs	r2, #56	@ 0x38
 80036be:	4013      	ands	r3, r2
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d103      	bne.n	80036cc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	e00b      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80036cc:	4b08      	ldr	r3, [pc, #32]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2238      	movs	r2, #56	@ 0x38
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b18      	cmp	r3, #24
 80036d6:	d103      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80036d8:	23fa      	movs	r3, #250	@ 0xfa
 80036da:	01db      	lsls	r3, r3, #7
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	e001      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036e4:	693b      	ldr	r3, [r7, #16]
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b006      	add	sp, #24
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	40021000 	.word	0x40021000
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	007a1200 	.word	0x007a1200

080036fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003704:	2313      	movs	r3, #19
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800370c:	2312      	movs	r3, #18
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	2380      	movs	r3, #128	@ 0x80
 800371a:	029b      	lsls	r3, r3, #10
 800371c:	4013      	ands	r3, r2
 800371e:	d100      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003720:	e0a3      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003722:	2011      	movs	r0, #17
 8003724:	183b      	adds	r3, r7, r0
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	4b7f      	ldr	r3, [pc, #508]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800372c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	055b      	lsls	r3, r3, #21
 8003732:	4013      	ands	r3, r2
 8003734:	d110      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	4b7c      	ldr	r3, [pc, #496]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800373a:	4b7b      	ldr	r3, [pc, #492]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800373c:	2180      	movs	r1, #128	@ 0x80
 800373e:	0549      	lsls	r1, r1, #21
 8003740:	430a      	orrs	r2, r1
 8003742:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003744:	4b78      	ldr	r3, [pc, #480]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003746:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003748:	2380      	movs	r3, #128	@ 0x80
 800374a:	055b      	lsls	r3, r3, #21
 800374c:	4013      	ands	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003752:	183b      	adds	r3, r7, r0
 8003754:	2201      	movs	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003758:	4b74      	ldr	r3, [pc, #464]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b73      	ldr	r3, [pc, #460]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800375e:	2180      	movs	r1, #128	@ 0x80
 8003760:	0049      	lsls	r1, r1, #1
 8003762:	430a      	orrs	r2, r1
 8003764:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003766:	f7fe f999 	bl	8001a9c <HAL_GetTick>
 800376a:	0003      	movs	r3, r0
 800376c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800376e:	e00b      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003770:	f7fe f994 	bl	8001a9c <HAL_GetTick>
 8003774:	0002      	movs	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d904      	bls.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800377e:	2313      	movs	r3, #19
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	2203      	movs	r2, #3
 8003784:	701a      	strb	r2, [r3, #0]
        break;
 8003786:	e005      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003788:	4b68      	ldr	r3, [pc, #416]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	2380      	movs	r3, #128	@ 0x80
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4013      	ands	r3, r2
 8003792:	d0ed      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003794:	2313      	movs	r3, #19
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d154      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800379e:	4b62      	ldr	r3, [pc, #392]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037a2:	23c0      	movs	r3, #192	@ 0xc0
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4013      	ands	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d019      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d014      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	4a5c      	ldr	r2, [pc, #368]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037c4:	4b58      	ldr	r3, [pc, #352]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037c8:	4b57      	ldr	r3, [pc, #348]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037ca:	2180      	movs	r1, #128	@ 0x80
 80037cc:	0249      	lsls	r1, r1, #9
 80037ce:	430a      	orrs	r2, r1
 80037d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037d2:	4b55      	ldr	r3, [pc, #340]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037d6:	4b54      	ldr	r3, [pc, #336]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037d8:	4956      	ldr	r1, [pc, #344]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80037da:	400a      	ands	r2, r1
 80037dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037de:	4b52      	ldr	r3, [pc, #328]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2201      	movs	r2, #1
 80037e8:	4013      	ands	r3, r2
 80037ea:	d016      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe f956 	bl	8001a9c <HAL_GetTick>
 80037f0:	0003      	movs	r3, r0
 80037f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f4:	e00c      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fe f951 	bl	8001a9c <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	4a4d      	ldr	r2, [pc, #308]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d904      	bls.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003806:	2313      	movs	r3, #19
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2203      	movs	r2, #3
 800380c:	701a      	strb	r2, [r3, #0]
            break;
 800380e:	e004      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003810:	4b45      	ldr	r3, [pc, #276]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003814:	2202      	movs	r2, #2
 8003816:	4013      	ands	r3, r2
 8003818:	d0ed      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800381a:	2313      	movs	r3, #19
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003824:	4b40      	ldr	r3, [pc, #256]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003828:	4a41      	ldr	r2, [pc, #260]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800382a:	4013      	ands	r3, r2
 800382c:	0019      	movs	r1, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	4b3d      	ldr	r3, [pc, #244]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003834:	430a      	orrs	r2, r1
 8003836:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003838:	e00c      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800383a:	2312      	movs	r3, #18
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	2213      	movs	r2, #19
 8003840:	18ba      	adds	r2, r7, r2
 8003842:	7812      	ldrb	r2, [r2, #0]
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e005      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	2312      	movs	r3, #18
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	2213      	movs	r2, #19
 800384e:	18ba      	adds	r2, r7, r2
 8003850:	7812      	ldrb	r2, [r2, #0]
 8003852:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003854:	2311      	movs	r3, #17
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d105      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385e:	4b32      	ldr	r3, [pc, #200]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003860:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003862:	4b31      	ldr	r3, [pc, #196]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003864:	4935      	ldr	r1, [pc, #212]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003866:	400a      	ands	r2, r1
 8003868:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2201      	movs	r2, #1
 8003870:	4013      	ands	r3, r2
 8003872:	d009      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003874:	4b2c      	ldr	r3, [pc, #176]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003878:	2203      	movs	r2, #3
 800387a:	4393      	bics	r3, r2
 800387c:	0019      	movs	r1, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	4b29      	ldr	r3, [pc, #164]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003884:	430a      	orrs	r2, r1
 8003886:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2220      	movs	r2, #32
 800388e:	4013      	ands	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003892:	4b25      	ldr	r3, [pc, #148]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003896:	4a2a      	ldr	r2, [pc, #168]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003898:	4013      	ands	r3, r2
 800389a:	0019      	movs	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	4b21      	ldr	r3, [pc, #132]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038a2:	430a      	orrs	r2, r1
 80038a4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	@ 0x80
 80038ac:	01db      	lsls	r3, r3, #7
 80038ae:	4013      	ands	r3, r2
 80038b0:	d015      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	0899      	lsrs	r1, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	4b1a      	ldr	r3, [pc, #104]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038c0:	430a      	orrs	r2, r1
 80038c2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	2380      	movs	r3, #128	@ 0x80
 80038ca:	05db      	lsls	r3, r3, #23
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d106      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80038d0:	4b15      	ldr	r3, [pc, #84]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	4b14      	ldr	r3, [pc, #80]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038d6:	2180      	movs	r1, #128	@ 0x80
 80038d8:	0249      	lsls	r1, r1, #9
 80038da:	430a      	orrs	r2, r1
 80038dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	4013      	ands	r3, r2
 80038e8:	d016      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80038ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ee:	4a15      	ldr	r2, [pc, #84]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038fa:	430a      	orrs	r2, r1
 80038fc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	2380      	movs	r3, #128	@ 0x80
 8003904:	01db      	lsls	r3, r3, #7
 8003906:	429a      	cmp	r2, r3
 8003908:	d106      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800390a:	4b07      	ldr	r3, [pc, #28]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003910:	2180      	movs	r1, #128	@ 0x80
 8003912:	0249      	lsls	r1, r1, #9
 8003914:	430a      	orrs	r2, r1
 8003916:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003918:	2312      	movs	r3, #18
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	781b      	ldrb	r3, [r3, #0]
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b006      	add	sp, #24
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	40021000 	.word	0x40021000
 800392c:	40007000 	.word	0x40007000
 8003930:	fffffcff 	.word	0xfffffcff
 8003934:	fffeffff 	.word	0xfffeffff
 8003938:	00001388 	.word	0x00001388
 800393c:	efffffff 	.word	0xefffffff
 8003940:	ffffcfff 	.word	0xffffcfff
 8003944:	ffff3fff 	.word	0xffff3fff

08003948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e04a      	b.n	80039f0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	223d      	movs	r2, #61	@ 0x3d
 800395e:	5c9b      	ldrb	r3, [r3, r2]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d107      	bne.n	8003976 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	223c      	movs	r2, #60	@ 0x3c
 800396a:	2100      	movs	r1, #0
 800396c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0018      	movs	r0, r3
 8003972:	f7fd ff67 	bl	8001844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	223d      	movs	r2, #61	@ 0x3d
 800397a:	2102      	movs	r1, #2
 800397c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3304      	adds	r3, #4
 8003986:	0019      	movs	r1, r3
 8003988:	0010      	movs	r0, r2
 800398a:	f000 f9ab 	bl	8003ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2248      	movs	r2, #72	@ 0x48
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	223e      	movs	r2, #62	@ 0x3e
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	223f      	movs	r2, #63	@ 0x3f
 80039a2:	2101      	movs	r1, #1
 80039a4:	5499      	strb	r1, [r3, r2]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2240      	movs	r2, #64	@ 0x40
 80039aa:	2101      	movs	r1, #1
 80039ac:	5499      	strb	r1, [r3, r2]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2241      	movs	r2, #65	@ 0x41
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2242      	movs	r2, #66	@ 0x42
 80039ba:	2101      	movs	r1, #1
 80039bc:	5499      	strb	r1, [r3, r2]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2243      	movs	r2, #67	@ 0x43
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2244      	movs	r2, #68	@ 0x44
 80039ca:	2101      	movs	r1, #1
 80039cc:	5499      	strb	r1, [r3, r2]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2245      	movs	r2, #69	@ 0x45
 80039d2:	2101      	movs	r1, #1
 80039d4:	5499      	strb	r1, [r3, r2]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2246      	movs	r2, #70	@ 0x46
 80039da:	2101      	movs	r1, #1
 80039dc:	5499      	strb	r1, [r3, r2]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2247      	movs	r2, #71	@ 0x47
 80039e2:	2101      	movs	r1, #1
 80039e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	223d      	movs	r2, #61	@ 0x3d
 80039ea:	2101      	movs	r1, #1
 80039ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	223d      	movs	r2, #61	@ 0x3d
 8003a04:	5c9b      	ldrb	r3, [r3, r2]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d001      	beq.n	8003a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e037      	b.n	8003a80 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	223d      	movs	r2, #61	@ 0x3d
 8003a14:	2102      	movs	r1, #2
 8003a16:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	430a      	orrs	r2, r1
 8003a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a16      	ldr	r2, [pc, #88]	@ (8003a88 <HAL_TIM_Base_Start_IT+0x90>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x44>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a15      	ldr	r2, [pc, #84]	@ (8003a8c <HAL_TIM_Base_Start_IT+0x94>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d116      	bne.n	8003a6a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <HAL_TIM_Base_Start_IT+0x98>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	d016      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x84>
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	2380      	movs	r3, #128	@ 0x80
 8003a52:	025b      	lsls	r3, r3, #9
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d011      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2101      	movs	r1, #1
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a68:	e008      	b.n	8003a7c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2101      	movs	r1, #1
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e000      	b.n	8003a7e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b004      	add	sp, #16
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	00010007 	.word	0x00010007

08003a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d021      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d01d      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	4252      	negs	r2, r2
 8003ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 f8ea 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e007      	b.n	8003af2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 f8dd 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 f8e9 	bl	8003cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2204      	movs	r2, #4
 8003afc:	4013      	ands	r3, r2
 8003afe:	d022      	beq.n	8003b46 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2204      	movs	r2, #4
 8003b04:	4013      	ands	r3, r2
 8003b06:	d01e      	beq.n	8003b46 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2205      	movs	r2, #5
 8003b0e:	4252      	negs	r2, r2
 8003b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	23c0      	movs	r3, #192	@ 0xc0
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4013      	ands	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f000 f8c3 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 8003b2e:	e007      	b.n	8003b40 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f8b6 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f000 f8c2 	bl	8003cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d021      	beq.n	8003b92 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2208      	movs	r2, #8
 8003b52:	4013      	ands	r3, r2
 8003b54:	d01d      	beq.n	8003b92 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2209      	movs	r2, #9
 8003b5c:	4252      	negs	r2, r2
 8003b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2204      	movs	r2, #4
 8003b64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f000 f89d 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 8003b7a:	e007      	b.n	8003b8c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f000 f890 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0018      	movs	r0, r3
 8003b88:	f000 f89c 	bl	8003cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2210      	movs	r2, #16
 8003b96:	4013      	ands	r3, r2
 8003b98:	d022      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d01e      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2211      	movs	r2, #17
 8003ba8:	4252      	negs	r2, r2
 8003baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2208      	movs	r2, #8
 8003bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	23c0      	movs	r3, #192	@ 0xc0
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f000 f876 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e007      	b.n	8003bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f000 f869 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 f875 	bl	8003cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2201      	movs	r2, #1
 8003be4:	4013      	ands	r3, r2
 8003be6:	d00c      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	4013      	ands	r3, r2
 8003bee:	d008      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	4252      	negs	r2, r2
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7fc fded 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2280      	movs	r2, #128	@ 0x80
 8003c06:	4013      	ands	r3, r2
 8003c08:	d104      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	2380      	movs	r3, #128	@ 0x80
 8003c0e:	019b      	lsls	r3, r3, #6
 8003c10:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c12:	d00b      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2280      	movs	r2, #128	@ 0x80
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d007      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1e      	ldr	r2, [pc, #120]	@ (8003c9c <HAL_TIM_IRQHandler+0x208>)
 8003c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 f8de 	bl	8003de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	2380      	movs	r3, #128	@ 0x80
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4013      	ands	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2280      	movs	r2, #128	@ 0x80
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a17      	ldr	r2, [pc, #92]	@ (8003ca0 <HAL_TIM_IRQHandler+0x20c>)
 8003c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f000 f8d5 	bl	8003df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2240      	movs	r2, #64	@ 0x40
 8003c52:	4013      	ands	r3, r2
 8003c54:	d00c      	beq.n	8003c70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2240      	movs	r2, #64	@ 0x40
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d008      	beq.n	8003c70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2241      	movs	r2, #65	@ 0x41
 8003c64:	4252      	negs	r2, r2
 8003c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 f832 	bl	8003cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2220      	movs	r2, #32
 8003c74:	4013      	ands	r3, r2
 8003c76:	d00c      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d008      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2221      	movs	r2, #33	@ 0x21
 8003c86:	4252      	negs	r2, r2
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f000 f8a3 	bl	8003dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	ffffdf7f 	.word	0xffffdf7f
 8003ca0:	fffffeff 	.word	0xfffffeff

08003ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cac:	46c0      	nop			@ (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b002      	add	sp, #8
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cbc:	46c0      	nop			@ (mov r8, r8)
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b002      	add	sp, #8
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ccc:	46c0      	nop			@ (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cdc:	46c0      	nop			@ (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a32      	ldr	r2, [pc, #200]	@ (8003dc0 <TIM_Base_SetConfig+0xdc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_Base_SetConfig+0x20>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a31      	ldr	r2, [pc, #196]	@ (8003dc4 <TIM_Base_SetConfig+0xe0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d108      	bne.n	8003d16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2270      	movs	r2, #112	@ 0x70
 8003d08:	4393      	bics	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a29      	ldr	r2, [pc, #164]	@ (8003dc0 <TIM_Base_SetConfig+0xdc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00f      	beq.n	8003d3e <TIM_Base_SetConfig+0x5a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a28      	ldr	r2, [pc, #160]	@ (8003dc4 <TIM_Base_SetConfig+0xe0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00b      	beq.n	8003d3e <TIM_Base_SetConfig+0x5a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a27      	ldr	r2, [pc, #156]	@ (8003dc8 <TIM_Base_SetConfig+0xe4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <TIM_Base_SetConfig+0x5a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a26      	ldr	r2, [pc, #152]	@ (8003dcc <TIM_Base_SetConfig+0xe8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_Base_SetConfig+0x5a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a25      	ldr	r2, [pc, #148]	@ (8003dd0 <TIM_Base_SetConfig+0xec>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d108      	bne.n	8003d50 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a24      	ldr	r2, [pc, #144]	@ (8003dd4 <TIM_Base_SetConfig+0xf0>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2280      	movs	r2, #128	@ 0x80
 8003d54:	4393      	bics	r3, r2
 8003d56:	001a      	movs	r2, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a11      	ldr	r2, [pc, #68]	@ (8003dc0 <TIM_Base_SetConfig+0xdc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0xaa>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a12      	ldr	r2, [pc, #72]	@ (8003dcc <TIM_Base_SetConfig+0xe8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0xaa>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a11      	ldr	r2, [pc, #68]	@ (8003dd0 <TIM_Base_SetConfig+0xec>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d103      	bne.n	8003d96 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2201      	movs	r2, #1
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d106      	bne.n	8003db6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2201      	movs	r2, #1
 8003dae:	4393      	bics	r3, r2
 8003db0:	001a      	movs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	611a      	str	r2, [r3, #16]
  }
}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b004      	add	sp, #16
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40002000 	.word	0x40002000
 8003dcc:	40014400 	.word	0x40014400
 8003dd0:	40014800 	.word	0x40014800
 8003dd4:	fffffcff 	.word	0xfffffcff

08003dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003de0:	46c0      	nop			@ (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003df0:	46c0      	nop			@ (mov r8, r8)
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b002      	add	sp, #8
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e00:	46c0      	nop			@ (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b002      	add	sp, #8
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <siprintf>:
 8003e08:	b40e      	push	{r1, r2, r3}
 8003e0a:	b510      	push	{r4, lr}
 8003e0c:	2400      	movs	r4, #0
 8003e0e:	490c      	ldr	r1, [pc, #48]	@ (8003e40 <siprintf+0x38>)
 8003e10:	b09d      	sub	sp, #116	@ 0x74
 8003e12:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003e14:	9002      	str	r0, [sp, #8]
 8003e16:	9006      	str	r0, [sp, #24]
 8003e18:	9107      	str	r1, [sp, #28]
 8003e1a:	9104      	str	r1, [sp, #16]
 8003e1c:	4809      	ldr	r0, [pc, #36]	@ (8003e44 <siprintf+0x3c>)
 8003e1e:	490a      	ldr	r1, [pc, #40]	@ (8003e48 <siprintf+0x40>)
 8003e20:	cb04      	ldmia	r3!, {r2}
 8003e22:	9105      	str	r1, [sp, #20]
 8003e24:	6800      	ldr	r0, [r0, #0]
 8003e26:	a902      	add	r1, sp, #8
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003e2c:	f000 f9a8 	bl	8004180 <_svfiprintf_r>
 8003e30:	9b02      	ldr	r3, [sp, #8]
 8003e32:	701c      	strb	r4, [r3, #0]
 8003e34:	b01d      	add	sp, #116	@ 0x74
 8003e36:	bc10      	pop	{r4}
 8003e38:	bc08      	pop	{r3}
 8003e3a:	b003      	add	sp, #12
 8003e3c:	4718      	bx	r3
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	7fffffff 	.word	0x7fffffff
 8003e44:	20000020 	.word	0x20000020
 8003e48:	ffff0208 	.word	0xffff0208

08003e4c <memset>:
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	1882      	adds	r2, r0, r2
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <memset+0xa>
 8003e54:	4770      	bx	lr
 8003e56:	7019      	strb	r1, [r3, #0]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	e7f9      	b.n	8003e50 <memset+0x4>

08003e5c <__errno>:
 8003e5c:	4b01      	ldr	r3, [pc, #4]	@ (8003e64 <__errno+0x8>)
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	4770      	bx	lr
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000020 	.word	0x20000020

08003e68 <__libc_init_array>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	4c0c      	ldr	r4, [pc, #48]	@ (8003ea0 <__libc_init_array+0x38>)
 8003e6e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ea4 <__libc_init_array+0x3c>)
 8003e70:	1b64      	subs	r4, r4, r5
 8003e72:	10a4      	asrs	r4, r4, #2
 8003e74:	42a6      	cmp	r6, r4
 8003e76:	d109      	bne.n	8003e8c <__libc_init_array+0x24>
 8003e78:	2600      	movs	r6, #0
 8003e7a:	f000 fc63 	bl	8004744 <_init>
 8003e7e:	4c0a      	ldr	r4, [pc, #40]	@ (8003ea8 <__libc_init_array+0x40>)
 8003e80:	4d0a      	ldr	r5, [pc, #40]	@ (8003eac <__libc_init_array+0x44>)
 8003e82:	1b64      	subs	r4, r4, r5
 8003e84:	10a4      	asrs	r4, r4, #2
 8003e86:	42a6      	cmp	r6, r4
 8003e88:	d105      	bne.n	8003e96 <__libc_init_array+0x2e>
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	00b3      	lsls	r3, r6, #2
 8003e8e:	58eb      	ldr	r3, [r5, r3]
 8003e90:	4798      	blx	r3
 8003e92:	3601      	adds	r6, #1
 8003e94:	e7ee      	b.n	8003e74 <__libc_init_array+0xc>
 8003e96:	00b3      	lsls	r3, r6, #2
 8003e98:	58eb      	ldr	r3, [r5, r3]
 8003e9a:	4798      	blx	r3
 8003e9c:	3601      	adds	r6, #1
 8003e9e:	e7f2      	b.n	8003e86 <__libc_init_array+0x1e>
 8003ea0:	08007d60 	.word	0x08007d60
 8003ea4:	08007d60 	.word	0x08007d60
 8003ea8:	08007d64 	.word	0x08007d64
 8003eac:	08007d60 	.word	0x08007d60

08003eb0 <__retarget_lock_acquire_recursive>:
 8003eb0:	4770      	bx	lr

08003eb2 <__retarget_lock_release_recursive>:
 8003eb2:	4770      	bx	lr

08003eb4 <memcpy>:
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d100      	bne.n	8003ebe <memcpy+0xa>
 8003ebc:	bd10      	pop	{r4, pc}
 8003ebe:	5ccc      	ldrb	r4, [r1, r3]
 8003ec0:	54c4      	strb	r4, [r0, r3]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	e7f8      	b.n	8003eb8 <memcpy+0x4>
	...

08003ec8 <_free_r>:
 8003ec8:	b570      	push	{r4, r5, r6, lr}
 8003eca:	0005      	movs	r5, r0
 8003ecc:	1e0c      	subs	r4, r1, #0
 8003ece:	d010      	beq.n	8003ef2 <_free_r+0x2a>
 8003ed0:	3c04      	subs	r4, #4
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	da00      	bge.n	8003eda <_free_r+0x12>
 8003ed8:	18e4      	adds	r4, r4, r3
 8003eda:	0028      	movs	r0, r5
 8003edc:	f000 f8e0 	bl	80040a0 <__malloc_lock>
 8003ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f58 <_free_r+0x90>)
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <_free_r+0x2c>
 8003ee8:	6063      	str	r3, [r4, #4]
 8003eea:	6014      	str	r4, [r2, #0]
 8003eec:	0028      	movs	r0, r5
 8003eee:	f000 f8df 	bl	80040b0 <__malloc_unlock>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	d908      	bls.n	8003f0a <_free_r+0x42>
 8003ef8:	6820      	ldr	r0, [r4, #0]
 8003efa:	1821      	adds	r1, r4, r0
 8003efc:	428b      	cmp	r3, r1
 8003efe:	d1f3      	bne.n	8003ee8 <_free_r+0x20>
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	1809      	adds	r1, r1, r0
 8003f06:	6021      	str	r1, [r4, #0]
 8003f08:	e7ee      	b.n	8003ee8 <_free_r+0x20>
 8003f0a:	001a      	movs	r2, r3
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <_free_r+0x4e>
 8003f12:	42a3      	cmp	r3, r4
 8003f14:	d9f9      	bls.n	8003f0a <_free_r+0x42>
 8003f16:	6811      	ldr	r1, [r2, #0]
 8003f18:	1850      	adds	r0, r2, r1
 8003f1a:	42a0      	cmp	r0, r4
 8003f1c:	d10b      	bne.n	8003f36 <_free_r+0x6e>
 8003f1e:	6820      	ldr	r0, [r4, #0]
 8003f20:	1809      	adds	r1, r1, r0
 8003f22:	1850      	adds	r0, r2, r1
 8003f24:	6011      	str	r1, [r2, #0]
 8003f26:	4283      	cmp	r3, r0
 8003f28:	d1e0      	bne.n	8003eec <_free_r+0x24>
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	1841      	adds	r1, r0, r1
 8003f30:	6011      	str	r1, [r2, #0]
 8003f32:	6053      	str	r3, [r2, #4]
 8003f34:	e7da      	b.n	8003eec <_free_r+0x24>
 8003f36:	42a0      	cmp	r0, r4
 8003f38:	d902      	bls.n	8003f40 <_free_r+0x78>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	602b      	str	r3, [r5, #0]
 8003f3e:	e7d5      	b.n	8003eec <_free_r+0x24>
 8003f40:	6820      	ldr	r0, [r4, #0]
 8003f42:	1821      	adds	r1, r4, r0
 8003f44:	428b      	cmp	r3, r1
 8003f46:	d103      	bne.n	8003f50 <_free_r+0x88>
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	1809      	adds	r1, r1, r0
 8003f4e:	6021      	str	r1, [r4, #0]
 8003f50:	6063      	str	r3, [r4, #4]
 8003f52:	6054      	str	r4, [r2, #4]
 8003f54:	e7ca      	b.n	8003eec <_free_r+0x24>
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	20000768 	.word	0x20000768

08003f5c <sbrk_aligned>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	4e0f      	ldr	r6, [pc, #60]	@ (8003f9c <sbrk_aligned+0x40>)
 8003f60:	000d      	movs	r5, r1
 8003f62:	6831      	ldr	r1, [r6, #0]
 8003f64:	0004      	movs	r4, r0
 8003f66:	2900      	cmp	r1, #0
 8003f68:	d102      	bne.n	8003f70 <sbrk_aligned+0x14>
 8003f6a:	f000 fb95 	bl	8004698 <_sbrk_r>
 8003f6e:	6030      	str	r0, [r6, #0]
 8003f70:	0029      	movs	r1, r5
 8003f72:	0020      	movs	r0, r4
 8003f74:	f000 fb90 	bl	8004698 <_sbrk_r>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d103      	bne.n	8003f84 <sbrk_aligned+0x28>
 8003f7c:	2501      	movs	r5, #1
 8003f7e:	426d      	negs	r5, r5
 8003f80:	0028      	movs	r0, r5
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	2303      	movs	r3, #3
 8003f86:	1cc5      	adds	r5, r0, #3
 8003f88:	439d      	bics	r5, r3
 8003f8a:	42a8      	cmp	r0, r5
 8003f8c:	d0f8      	beq.n	8003f80 <sbrk_aligned+0x24>
 8003f8e:	1a29      	subs	r1, r5, r0
 8003f90:	0020      	movs	r0, r4
 8003f92:	f000 fb81 	bl	8004698 <_sbrk_r>
 8003f96:	3001      	adds	r0, #1
 8003f98:	d1f2      	bne.n	8003f80 <sbrk_aligned+0x24>
 8003f9a:	e7ef      	b.n	8003f7c <sbrk_aligned+0x20>
 8003f9c:	20000764 	.word	0x20000764

08003fa0 <_malloc_r>:
 8003fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	1ccb      	adds	r3, r1, #3
 8003fa6:	4393      	bics	r3, r2
 8003fa8:	3308      	adds	r3, #8
 8003faa:	0005      	movs	r5, r0
 8003fac:	001f      	movs	r7, r3
 8003fae:	2b0c      	cmp	r3, #12
 8003fb0:	d234      	bcs.n	800401c <_malloc_r+0x7c>
 8003fb2:	270c      	movs	r7, #12
 8003fb4:	42b9      	cmp	r1, r7
 8003fb6:	d833      	bhi.n	8004020 <_malloc_r+0x80>
 8003fb8:	0028      	movs	r0, r5
 8003fba:	f000 f871 	bl	80040a0 <__malloc_lock>
 8003fbe:	4e37      	ldr	r6, [pc, #220]	@ (800409c <_malloc_r+0xfc>)
 8003fc0:	6833      	ldr	r3, [r6, #0]
 8003fc2:	001c      	movs	r4, r3
 8003fc4:	2c00      	cmp	r4, #0
 8003fc6:	d12f      	bne.n	8004028 <_malloc_r+0x88>
 8003fc8:	0039      	movs	r1, r7
 8003fca:	0028      	movs	r0, r5
 8003fcc:	f7ff ffc6 	bl	8003f5c <sbrk_aligned>
 8003fd0:	0004      	movs	r4, r0
 8003fd2:	1c43      	adds	r3, r0, #1
 8003fd4:	d15f      	bne.n	8004096 <_malloc_r+0xf6>
 8003fd6:	6834      	ldr	r4, [r6, #0]
 8003fd8:	9400      	str	r4, [sp, #0]
 8003fda:	9b00      	ldr	r3, [sp, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d14a      	bne.n	8004076 <_malloc_r+0xd6>
 8003fe0:	2c00      	cmp	r4, #0
 8003fe2:	d052      	beq.n	800408a <_malloc_r+0xea>
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	0028      	movs	r0, r5
 8003fe8:	18e3      	adds	r3, r4, r3
 8003fea:	9900      	ldr	r1, [sp, #0]
 8003fec:	9301      	str	r3, [sp, #4]
 8003fee:	f000 fb53 	bl	8004698 <_sbrk_r>
 8003ff2:	9b01      	ldr	r3, [sp, #4]
 8003ff4:	4283      	cmp	r3, r0
 8003ff6:	d148      	bne.n	800408a <_malloc_r+0xea>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	0028      	movs	r0, r5
 8003ffc:	1aff      	subs	r7, r7, r3
 8003ffe:	0039      	movs	r1, r7
 8004000:	f7ff ffac 	bl	8003f5c <sbrk_aligned>
 8004004:	3001      	adds	r0, #1
 8004006:	d040      	beq.n	800408a <_malloc_r+0xea>
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	19db      	adds	r3, r3, r7
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	6833      	ldr	r3, [r6, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	2a00      	cmp	r2, #0
 8004014:	d133      	bne.n	800407e <_malloc_r+0xde>
 8004016:	9b00      	ldr	r3, [sp, #0]
 8004018:	6033      	str	r3, [r6, #0]
 800401a:	e019      	b.n	8004050 <_malloc_r+0xb0>
 800401c:	2b00      	cmp	r3, #0
 800401e:	dac9      	bge.n	8003fb4 <_malloc_r+0x14>
 8004020:	230c      	movs	r3, #12
 8004022:	602b      	str	r3, [r5, #0]
 8004024:	2000      	movs	r0, #0
 8004026:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004028:	6821      	ldr	r1, [r4, #0]
 800402a:	1bc9      	subs	r1, r1, r7
 800402c:	d420      	bmi.n	8004070 <_malloc_r+0xd0>
 800402e:	290b      	cmp	r1, #11
 8004030:	d90a      	bls.n	8004048 <_malloc_r+0xa8>
 8004032:	19e2      	adds	r2, r4, r7
 8004034:	6027      	str	r7, [r4, #0]
 8004036:	42a3      	cmp	r3, r4
 8004038:	d104      	bne.n	8004044 <_malloc_r+0xa4>
 800403a:	6032      	str	r2, [r6, #0]
 800403c:	6863      	ldr	r3, [r4, #4]
 800403e:	6011      	str	r1, [r2, #0]
 8004040:	6053      	str	r3, [r2, #4]
 8004042:	e005      	b.n	8004050 <_malloc_r+0xb0>
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	e7f9      	b.n	800403c <_malloc_r+0x9c>
 8004048:	6862      	ldr	r2, [r4, #4]
 800404a:	42a3      	cmp	r3, r4
 800404c:	d10e      	bne.n	800406c <_malloc_r+0xcc>
 800404e:	6032      	str	r2, [r6, #0]
 8004050:	0028      	movs	r0, r5
 8004052:	f000 f82d 	bl	80040b0 <__malloc_unlock>
 8004056:	0020      	movs	r0, r4
 8004058:	2207      	movs	r2, #7
 800405a:	300b      	adds	r0, #11
 800405c:	1d23      	adds	r3, r4, #4
 800405e:	4390      	bics	r0, r2
 8004060:	1ac2      	subs	r2, r0, r3
 8004062:	4298      	cmp	r0, r3
 8004064:	d0df      	beq.n	8004026 <_malloc_r+0x86>
 8004066:	1a1b      	subs	r3, r3, r0
 8004068:	50a3      	str	r3, [r4, r2]
 800406a:	e7dc      	b.n	8004026 <_malloc_r+0x86>
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	e7ef      	b.n	8004050 <_malloc_r+0xb0>
 8004070:	0023      	movs	r3, r4
 8004072:	6864      	ldr	r4, [r4, #4]
 8004074:	e7a6      	b.n	8003fc4 <_malloc_r+0x24>
 8004076:	9c00      	ldr	r4, [sp, #0]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	e7ad      	b.n	8003fda <_malloc_r+0x3a>
 800407e:	001a      	movs	r2, r3
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	42a3      	cmp	r3, r4
 8004084:	d1fb      	bne.n	800407e <_malloc_r+0xde>
 8004086:	2300      	movs	r3, #0
 8004088:	e7da      	b.n	8004040 <_malloc_r+0xa0>
 800408a:	230c      	movs	r3, #12
 800408c:	0028      	movs	r0, r5
 800408e:	602b      	str	r3, [r5, #0]
 8004090:	f000 f80e 	bl	80040b0 <__malloc_unlock>
 8004094:	e7c6      	b.n	8004024 <_malloc_r+0x84>
 8004096:	6007      	str	r7, [r0, #0]
 8004098:	e7da      	b.n	8004050 <_malloc_r+0xb0>
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	20000768 	.word	0x20000768

080040a0 <__malloc_lock>:
 80040a0:	b510      	push	{r4, lr}
 80040a2:	4802      	ldr	r0, [pc, #8]	@ (80040ac <__malloc_lock+0xc>)
 80040a4:	f7ff ff04 	bl	8003eb0 <__retarget_lock_acquire_recursive>
 80040a8:	bd10      	pop	{r4, pc}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	20000760 	.word	0x20000760

080040b0 <__malloc_unlock>:
 80040b0:	b510      	push	{r4, lr}
 80040b2:	4802      	ldr	r0, [pc, #8]	@ (80040bc <__malloc_unlock+0xc>)
 80040b4:	f7ff fefd 	bl	8003eb2 <__retarget_lock_release_recursive>
 80040b8:	bd10      	pop	{r4, pc}
 80040ba:	46c0      	nop			@ (mov r8, r8)
 80040bc:	20000760 	.word	0x20000760

080040c0 <__ssputs_r>:
 80040c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c2:	688e      	ldr	r6, [r1, #8]
 80040c4:	b085      	sub	sp, #20
 80040c6:	001f      	movs	r7, r3
 80040c8:	000c      	movs	r4, r1
 80040ca:	680b      	ldr	r3, [r1, #0]
 80040cc:	9002      	str	r0, [sp, #8]
 80040ce:	9203      	str	r2, [sp, #12]
 80040d0:	42be      	cmp	r6, r7
 80040d2:	d830      	bhi.n	8004136 <__ssputs_r+0x76>
 80040d4:	210c      	movs	r1, #12
 80040d6:	5e62      	ldrsh	r2, [r4, r1]
 80040d8:	2190      	movs	r1, #144	@ 0x90
 80040da:	00c9      	lsls	r1, r1, #3
 80040dc:	420a      	tst	r2, r1
 80040de:	d028      	beq.n	8004132 <__ssputs_r+0x72>
 80040e0:	2003      	movs	r0, #3
 80040e2:	6921      	ldr	r1, [r4, #16]
 80040e4:	1a5b      	subs	r3, r3, r1
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	6963      	ldr	r3, [r4, #20]
 80040ea:	4343      	muls	r3, r0
 80040ec:	9801      	ldr	r0, [sp, #4]
 80040ee:	0fdd      	lsrs	r5, r3, #31
 80040f0:	18ed      	adds	r5, r5, r3
 80040f2:	1c7b      	adds	r3, r7, #1
 80040f4:	181b      	adds	r3, r3, r0
 80040f6:	106d      	asrs	r5, r5, #1
 80040f8:	42ab      	cmp	r3, r5
 80040fa:	d900      	bls.n	80040fe <__ssputs_r+0x3e>
 80040fc:	001d      	movs	r5, r3
 80040fe:	0552      	lsls	r2, r2, #21
 8004100:	d528      	bpl.n	8004154 <__ssputs_r+0x94>
 8004102:	0029      	movs	r1, r5
 8004104:	9802      	ldr	r0, [sp, #8]
 8004106:	f7ff ff4b 	bl	8003fa0 <_malloc_r>
 800410a:	1e06      	subs	r6, r0, #0
 800410c:	d02c      	beq.n	8004168 <__ssputs_r+0xa8>
 800410e:	9a01      	ldr	r2, [sp, #4]
 8004110:	6921      	ldr	r1, [r4, #16]
 8004112:	f7ff fecf 	bl	8003eb4 <memcpy>
 8004116:	89a2      	ldrh	r2, [r4, #12]
 8004118:	4b18      	ldr	r3, [pc, #96]	@ (800417c <__ssputs_r+0xbc>)
 800411a:	401a      	ands	r2, r3
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	4313      	orrs	r3, r2
 8004120:	81a3      	strh	r3, [r4, #12]
 8004122:	9b01      	ldr	r3, [sp, #4]
 8004124:	6126      	str	r6, [r4, #16]
 8004126:	18f6      	adds	r6, r6, r3
 8004128:	6026      	str	r6, [r4, #0]
 800412a:	003e      	movs	r6, r7
 800412c:	6165      	str	r5, [r4, #20]
 800412e:	1aed      	subs	r5, r5, r3
 8004130:	60a5      	str	r5, [r4, #8]
 8004132:	42be      	cmp	r6, r7
 8004134:	d900      	bls.n	8004138 <__ssputs_r+0x78>
 8004136:	003e      	movs	r6, r7
 8004138:	0032      	movs	r2, r6
 800413a:	9903      	ldr	r1, [sp, #12]
 800413c:	6820      	ldr	r0, [r4, #0]
 800413e:	f000 fa99 	bl	8004674 <memmove>
 8004142:	2000      	movs	r0, #0
 8004144:	68a3      	ldr	r3, [r4, #8]
 8004146:	1b9b      	subs	r3, r3, r6
 8004148:	60a3      	str	r3, [r4, #8]
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	199b      	adds	r3, r3, r6
 800414e:	6023      	str	r3, [r4, #0]
 8004150:	b005      	add	sp, #20
 8004152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004154:	002a      	movs	r2, r5
 8004156:	9802      	ldr	r0, [sp, #8]
 8004158:	f000 fabb 	bl	80046d2 <_realloc_r>
 800415c:	1e06      	subs	r6, r0, #0
 800415e:	d1e0      	bne.n	8004122 <__ssputs_r+0x62>
 8004160:	6921      	ldr	r1, [r4, #16]
 8004162:	9802      	ldr	r0, [sp, #8]
 8004164:	f7ff feb0 	bl	8003ec8 <_free_r>
 8004168:	230c      	movs	r3, #12
 800416a:	2001      	movs	r0, #1
 800416c:	9a02      	ldr	r2, [sp, #8]
 800416e:	4240      	negs	r0, r0
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	89a2      	ldrh	r2, [r4, #12]
 8004174:	3334      	adds	r3, #52	@ 0x34
 8004176:	4313      	orrs	r3, r2
 8004178:	81a3      	strh	r3, [r4, #12]
 800417a:	e7e9      	b.n	8004150 <__ssputs_r+0x90>
 800417c:	fffffb7f 	.word	0xfffffb7f

08004180 <_svfiprintf_r>:
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	b0a1      	sub	sp, #132	@ 0x84
 8004184:	9003      	str	r0, [sp, #12]
 8004186:	001d      	movs	r5, r3
 8004188:	898b      	ldrh	r3, [r1, #12]
 800418a:	000f      	movs	r7, r1
 800418c:	0016      	movs	r6, r2
 800418e:	061b      	lsls	r3, r3, #24
 8004190:	d511      	bpl.n	80041b6 <_svfiprintf_r+0x36>
 8004192:	690b      	ldr	r3, [r1, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10e      	bne.n	80041b6 <_svfiprintf_r+0x36>
 8004198:	2140      	movs	r1, #64	@ 0x40
 800419a:	f7ff ff01 	bl	8003fa0 <_malloc_r>
 800419e:	6038      	str	r0, [r7, #0]
 80041a0:	6138      	str	r0, [r7, #16]
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d105      	bne.n	80041b2 <_svfiprintf_r+0x32>
 80041a6:	230c      	movs	r3, #12
 80041a8:	9a03      	ldr	r2, [sp, #12]
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	2001      	movs	r0, #1
 80041ae:	4240      	negs	r0, r0
 80041b0:	e0cf      	b.n	8004352 <_svfiprintf_r+0x1d2>
 80041b2:	2340      	movs	r3, #64	@ 0x40
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	2300      	movs	r3, #0
 80041b8:	ac08      	add	r4, sp, #32
 80041ba:	6163      	str	r3, [r4, #20]
 80041bc:	3320      	adds	r3, #32
 80041be:	7663      	strb	r3, [r4, #25]
 80041c0:	3310      	adds	r3, #16
 80041c2:	76a3      	strb	r3, [r4, #26]
 80041c4:	9507      	str	r5, [sp, #28]
 80041c6:	0035      	movs	r5, r6
 80041c8:	782b      	ldrb	r3, [r5, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <_svfiprintf_r+0x52>
 80041ce:	2b25      	cmp	r3, #37	@ 0x25
 80041d0:	d148      	bne.n	8004264 <_svfiprintf_r+0xe4>
 80041d2:	1bab      	subs	r3, r5, r6
 80041d4:	9305      	str	r3, [sp, #20]
 80041d6:	42b5      	cmp	r5, r6
 80041d8:	d00b      	beq.n	80041f2 <_svfiprintf_r+0x72>
 80041da:	0032      	movs	r2, r6
 80041dc:	0039      	movs	r1, r7
 80041de:	9803      	ldr	r0, [sp, #12]
 80041e0:	f7ff ff6e 	bl	80040c0 <__ssputs_r>
 80041e4:	3001      	adds	r0, #1
 80041e6:	d100      	bne.n	80041ea <_svfiprintf_r+0x6a>
 80041e8:	e0ae      	b.n	8004348 <_svfiprintf_r+0x1c8>
 80041ea:	6963      	ldr	r3, [r4, #20]
 80041ec:	9a05      	ldr	r2, [sp, #20]
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	6163      	str	r3, [r4, #20]
 80041f2:	782b      	ldrb	r3, [r5, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d100      	bne.n	80041fa <_svfiprintf_r+0x7a>
 80041f8:	e0a6      	b.n	8004348 <_svfiprintf_r+0x1c8>
 80041fa:	2201      	movs	r2, #1
 80041fc:	2300      	movs	r3, #0
 80041fe:	4252      	negs	r2, r2
 8004200:	6062      	str	r2, [r4, #4]
 8004202:	a904      	add	r1, sp, #16
 8004204:	3254      	adds	r2, #84	@ 0x54
 8004206:	1852      	adds	r2, r2, r1
 8004208:	1c6e      	adds	r6, r5, #1
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	60e3      	str	r3, [r4, #12]
 800420e:	60a3      	str	r3, [r4, #8]
 8004210:	7013      	strb	r3, [r2, #0]
 8004212:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004214:	4b54      	ldr	r3, [pc, #336]	@ (8004368 <_svfiprintf_r+0x1e8>)
 8004216:	2205      	movs	r2, #5
 8004218:	0018      	movs	r0, r3
 800421a:	7831      	ldrb	r1, [r6, #0]
 800421c:	9305      	str	r3, [sp, #20]
 800421e:	f000 fa4d 	bl	80046bc <memchr>
 8004222:	1c75      	adds	r5, r6, #1
 8004224:	2800      	cmp	r0, #0
 8004226:	d11f      	bne.n	8004268 <_svfiprintf_r+0xe8>
 8004228:	6822      	ldr	r2, [r4, #0]
 800422a:	06d3      	lsls	r3, r2, #27
 800422c:	d504      	bpl.n	8004238 <_svfiprintf_r+0xb8>
 800422e:	2353      	movs	r3, #83	@ 0x53
 8004230:	a904      	add	r1, sp, #16
 8004232:	185b      	adds	r3, r3, r1
 8004234:	2120      	movs	r1, #32
 8004236:	7019      	strb	r1, [r3, #0]
 8004238:	0713      	lsls	r3, r2, #28
 800423a:	d504      	bpl.n	8004246 <_svfiprintf_r+0xc6>
 800423c:	2353      	movs	r3, #83	@ 0x53
 800423e:	a904      	add	r1, sp, #16
 8004240:	185b      	adds	r3, r3, r1
 8004242:	212b      	movs	r1, #43	@ 0x2b
 8004244:	7019      	strb	r1, [r3, #0]
 8004246:	7833      	ldrb	r3, [r6, #0]
 8004248:	2b2a      	cmp	r3, #42	@ 0x2a
 800424a:	d016      	beq.n	800427a <_svfiprintf_r+0xfa>
 800424c:	0035      	movs	r5, r6
 800424e:	2100      	movs	r1, #0
 8004250:	200a      	movs	r0, #10
 8004252:	68e3      	ldr	r3, [r4, #12]
 8004254:	782a      	ldrb	r2, [r5, #0]
 8004256:	1c6e      	adds	r6, r5, #1
 8004258:	3a30      	subs	r2, #48	@ 0x30
 800425a:	2a09      	cmp	r2, #9
 800425c:	d950      	bls.n	8004300 <_svfiprintf_r+0x180>
 800425e:	2900      	cmp	r1, #0
 8004260:	d111      	bne.n	8004286 <_svfiprintf_r+0x106>
 8004262:	e017      	b.n	8004294 <_svfiprintf_r+0x114>
 8004264:	3501      	adds	r5, #1
 8004266:	e7af      	b.n	80041c8 <_svfiprintf_r+0x48>
 8004268:	9b05      	ldr	r3, [sp, #20]
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	1ac0      	subs	r0, r0, r3
 800426e:	2301      	movs	r3, #1
 8004270:	4083      	lsls	r3, r0
 8004272:	4313      	orrs	r3, r2
 8004274:	002e      	movs	r6, r5
 8004276:	6023      	str	r3, [r4, #0]
 8004278:	e7cc      	b.n	8004214 <_svfiprintf_r+0x94>
 800427a:	9b07      	ldr	r3, [sp, #28]
 800427c:	1d19      	adds	r1, r3, #4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	9107      	str	r1, [sp, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	db01      	blt.n	800428a <_svfiprintf_r+0x10a>
 8004286:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004288:	e004      	b.n	8004294 <_svfiprintf_r+0x114>
 800428a:	425b      	negs	r3, r3
 800428c:	60e3      	str	r3, [r4, #12]
 800428e:	2302      	movs	r3, #2
 8004290:	4313      	orrs	r3, r2
 8004292:	6023      	str	r3, [r4, #0]
 8004294:	782b      	ldrb	r3, [r5, #0]
 8004296:	2b2e      	cmp	r3, #46	@ 0x2e
 8004298:	d10c      	bne.n	80042b4 <_svfiprintf_r+0x134>
 800429a:	786b      	ldrb	r3, [r5, #1]
 800429c:	2b2a      	cmp	r3, #42	@ 0x2a
 800429e:	d134      	bne.n	800430a <_svfiprintf_r+0x18a>
 80042a0:	9b07      	ldr	r3, [sp, #28]
 80042a2:	3502      	adds	r5, #2
 80042a4:	1d1a      	adds	r2, r3, #4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	9207      	str	r2, [sp, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	da01      	bge.n	80042b2 <_svfiprintf_r+0x132>
 80042ae:	2301      	movs	r3, #1
 80042b0:	425b      	negs	r3, r3
 80042b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80042b4:	4e2d      	ldr	r6, [pc, #180]	@ (800436c <_svfiprintf_r+0x1ec>)
 80042b6:	2203      	movs	r2, #3
 80042b8:	0030      	movs	r0, r6
 80042ba:	7829      	ldrb	r1, [r5, #0]
 80042bc:	f000 f9fe 	bl	80046bc <memchr>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d006      	beq.n	80042d2 <_svfiprintf_r+0x152>
 80042c4:	2340      	movs	r3, #64	@ 0x40
 80042c6:	1b80      	subs	r0, r0, r6
 80042c8:	4083      	lsls	r3, r0
 80042ca:	6822      	ldr	r2, [r4, #0]
 80042cc:	3501      	adds	r5, #1
 80042ce:	4313      	orrs	r3, r2
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	7829      	ldrb	r1, [r5, #0]
 80042d4:	2206      	movs	r2, #6
 80042d6:	4826      	ldr	r0, [pc, #152]	@ (8004370 <_svfiprintf_r+0x1f0>)
 80042d8:	1c6e      	adds	r6, r5, #1
 80042da:	7621      	strb	r1, [r4, #24]
 80042dc:	f000 f9ee 	bl	80046bc <memchr>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d038      	beq.n	8004356 <_svfiprintf_r+0x1d6>
 80042e4:	4b23      	ldr	r3, [pc, #140]	@ (8004374 <_svfiprintf_r+0x1f4>)
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d122      	bne.n	8004330 <_svfiprintf_r+0x1b0>
 80042ea:	2207      	movs	r2, #7
 80042ec:	9b07      	ldr	r3, [sp, #28]
 80042ee:	3307      	adds	r3, #7
 80042f0:	4393      	bics	r3, r2
 80042f2:	3308      	adds	r3, #8
 80042f4:	9307      	str	r3, [sp, #28]
 80042f6:	6963      	ldr	r3, [r4, #20]
 80042f8:	9a04      	ldr	r2, [sp, #16]
 80042fa:	189b      	adds	r3, r3, r2
 80042fc:	6163      	str	r3, [r4, #20]
 80042fe:	e762      	b.n	80041c6 <_svfiprintf_r+0x46>
 8004300:	4343      	muls	r3, r0
 8004302:	0035      	movs	r5, r6
 8004304:	2101      	movs	r1, #1
 8004306:	189b      	adds	r3, r3, r2
 8004308:	e7a4      	b.n	8004254 <_svfiprintf_r+0xd4>
 800430a:	2300      	movs	r3, #0
 800430c:	200a      	movs	r0, #10
 800430e:	0019      	movs	r1, r3
 8004310:	3501      	adds	r5, #1
 8004312:	6063      	str	r3, [r4, #4]
 8004314:	782a      	ldrb	r2, [r5, #0]
 8004316:	1c6e      	adds	r6, r5, #1
 8004318:	3a30      	subs	r2, #48	@ 0x30
 800431a:	2a09      	cmp	r2, #9
 800431c:	d903      	bls.n	8004326 <_svfiprintf_r+0x1a6>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0c8      	beq.n	80042b4 <_svfiprintf_r+0x134>
 8004322:	9109      	str	r1, [sp, #36]	@ 0x24
 8004324:	e7c6      	b.n	80042b4 <_svfiprintf_r+0x134>
 8004326:	4341      	muls	r1, r0
 8004328:	0035      	movs	r5, r6
 800432a:	2301      	movs	r3, #1
 800432c:	1889      	adds	r1, r1, r2
 800432e:	e7f1      	b.n	8004314 <_svfiprintf_r+0x194>
 8004330:	aa07      	add	r2, sp, #28
 8004332:	9200      	str	r2, [sp, #0]
 8004334:	0021      	movs	r1, r4
 8004336:	003a      	movs	r2, r7
 8004338:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <_svfiprintf_r+0x1f8>)
 800433a:	9803      	ldr	r0, [sp, #12]
 800433c:	e000      	b.n	8004340 <_svfiprintf_r+0x1c0>
 800433e:	bf00      	nop
 8004340:	9004      	str	r0, [sp, #16]
 8004342:	9b04      	ldr	r3, [sp, #16]
 8004344:	3301      	adds	r3, #1
 8004346:	d1d6      	bne.n	80042f6 <_svfiprintf_r+0x176>
 8004348:	89bb      	ldrh	r3, [r7, #12]
 800434a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800434c:	065b      	lsls	r3, r3, #25
 800434e:	d500      	bpl.n	8004352 <_svfiprintf_r+0x1d2>
 8004350:	e72c      	b.n	80041ac <_svfiprintf_r+0x2c>
 8004352:	b021      	add	sp, #132	@ 0x84
 8004354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004356:	aa07      	add	r2, sp, #28
 8004358:	9200      	str	r2, [sp, #0]
 800435a:	0021      	movs	r1, r4
 800435c:	003a      	movs	r2, r7
 800435e:	4b06      	ldr	r3, [pc, #24]	@ (8004378 <_svfiprintf_r+0x1f8>)
 8004360:	9803      	ldr	r0, [sp, #12]
 8004362:	f000 f87b 	bl	800445c <_printf_i>
 8004366:	e7eb      	b.n	8004340 <_svfiprintf_r+0x1c0>
 8004368:	08007d2c 	.word	0x08007d2c
 800436c:	08007d32 	.word	0x08007d32
 8004370:	08007d36 	.word	0x08007d36
 8004374:	00000000 	.word	0x00000000
 8004378:	080040c1 	.word	0x080040c1

0800437c <_printf_common>:
 800437c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800437e:	0016      	movs	r6, r2
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	688a      	ldr	r2, [r1, #8]
 8004384:	690b      	ldr	r3, [r1, #16]
 8004386:	000c      	movs	r4, r1
 8004388:	9000      	str	r0, [sp, #0]
 800438a:	4293      	cmp	r3, r2
 800438c:	da00      	bge.n	8004390 <_printf_common+0x14>
 800438e:	0013      	movs	r3, r2
 8004390:	0022      	movs	r2, r4
 8004392:	6033      	str	r3, [r6, #0]
 8004394:	3243      	adds	r2, #67	@ 0x43
 8004396:	7812      	ldrb	r2, [r2, #0]
 8004398:	2a00      	cmp	r2, #0
 800439a:	d001      	beq.n	80043a0 <_printf_common+0x24>
 800439c:	3301      	adds	r3, #1
 800439e:	6033      	str	r3, [r6, #0]
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	069b      	lsls	r3, r3, #26
 80043a4:	d502      	bpl.n	80043ac <_printf_common+0x30>
 80043a6:	6833      	ldr	r3, [r6, #0]
 80043a8:	3302      	adds	r3, #2
 80043aa:	6033      	str	r3, [r6, #0]
 80043ac:	6822      	ldr	r2, [r4, #0]
 80043ae:	2306      	movs	r3, #6
 80043b0:	0015      	movs	r5, r2
 80043b2:	401d      	ands	r5, r3
 80043b4:	421a      	tst	r2, r3
 80043b6:	d027      	beq.n	8004408 <_printf_common+0x8c>
 80043b8:	0023      	movs	r3, r4
 80043ba:	3343      	adds	r3, #67	@ 0x43
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	4193      	sbcs	r3, r2
 80043c2:	6822      	ldr	r2, [r4, #0]
 80043c4:	0692      	lsls	r2, r2, #26
 80043c6:	d430      	bmi.n	800442a <_printf_common+0xae>
 80043c8:	0022      	movs	r2, r4
 80043ca:	9901      	ldr	r1, [sp, #4]
 80043cc:	9800      	ldr	r0, [sp, #0]
 80043ce:	9d08      	ldr	r5, [sp, #32]
 80043d0:	3243      	adds	r2, #67	@ 0x43
 80043d2:	47a8      	blx	r5
 80043d4:	3001      	adds	r0, #1
 80043d6:	d025      	beq.n	8004424 <_printf_common+0xa8>
 80043d8:	2206      	movs	r2, #6
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	2500      	movs	r5, #0
 80043de:	4013      	ands	r3, r2
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d105      	bne.n	80043f0 <_printf_common+0x74>
 80043e4:	6833      	ldr	r3, [r6, #0]
 80043e6:	68e5      	ldr	r5, [r4, #12]
 80043e8:	1aed      	subs	r5, r5, r3
 80043ea:	43eb      	mvns	r3, r5
 80043ec:	17db      	asrs	r3, r3, #31
 80043ee:	401d      	ands	r5, r3
 80043f0:	68a3      	ldr	r3, [r4, #8]
 80043f2:	6922      	ldr	r2, [r4, #16]
 80043f4:	4293      	cmp	r3, r2
 80043f6:	dd01      	ble.n	80043fc <_printf_common+0x80>
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	18ed      	adds	r5, r5, r3
 80043fc:	2600      	movs	r6, #0
 80043fe:	42b5      	cmp	r5, r6
 8004400:	d120      	bne.n	8004444 <_printf_common+0xc8>
 8004402:	2000      	movs	r0, #0
 8004404:	e010      	b.n	8004428 <_printf_common+0xac>
 8004406:	3501      	adds	r5, #1
 8004408:	68e3      	ldr	r3, [r4, #12]
 800440a:	6832      	ldr	r2, [r6, #0]
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	42ab      	cmp	r3, r5
 8004410:	ddd2      	ble.n	80043b8 <_printf_common+0x3c>
 8004412:	0022      	movs	r2, r4
 8004414:	2301      	movs	r3, #1
 8004416:	9901      	ldr	r1, [sp, #4]
 8004418:	9800      	ldr	r0, [sp, #0]
 800441a:	9f08      	ldr	r7, [sp, #32]
 800441c:	3219      	adds	r2, #25
 800441e:	47b8      	blx	r7
 8004420:	3001      	adds	r0, #1
 8004422:	d1f0      	bne.n	8004406 <_printf_common+0x8a>
 8004424:	2001      	movs	r0, #1
 8004426:	4240      	negs	r0, r0
 8004428:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800442a:	2030      	movs	r0, #48	@ 0x30
 800442c:	18e1      	adds	r1, r4, r3
 800442e:	3143      	adds	r1, #67	@ 0x43
 8004430:	7008      	strb	r0, [r1, #0]
 8004432:	0021      	movs	r1, r4
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	3145      	adds	r1, #69	@ 0x45
 8004438:	7809      	ldrb	r1, [r1, #0]
 800443a:	18a2      	adds	r2, r4, r2
 800443c:	3243      	adds	r2, #67	@ 0x43
 800443e:	3302      	adds	r3, #2
 8004440:	7011      	strb	r1, [r2, #0]
 8004442:	e7c1      	b.n	80043c8 <_printf_common+0x4c>
 8004444:	0022      	movs	r2, r4
 8004446:	2301      	movs	r3, #1
 8004448:	9901      	ldr	r1, [sp, #4]
 800444a:	9800      	ldr	r0, [sp, #0]
 800444c:	9f08      	ldr	r7, [sp, #32]
 800444e:	321a      	adds	r2, #26
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	d0e6      	beq.n	8004424 <_printf_common+0xa8>
 8004456:	3601      	adds	r6, #1
 8004458:	e7d1      	b.n	80043fe <_printf_common+0x82>
	...

0800445c <_printf_i>:
 800445c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445e:	b08b      	sub	sp, #44	@ 0x2c
 8004460:	9206      	str	r2, [sp, #24]
 8004462:	000a      	movs	r2, r1
 8004464:	3243      	adds	r2, #67	@ 0x43
 8004466:	9307      	str	r3, [sp, #28]
 8004468:	9005      	str	r0, [sp, #20]
 800446a:	9203      	str	r2, [sp, #12]
 800446c:	7e0a      	ldrb	r2, [r1, #24]
 800446e:	000c      	movs	r4, r1
 8004470:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004472:	2a78      	cmp	r2, #120	@ 0x78
 8004474:	d809      	bhi.n	800448a <_printf_i+0x2e>
 8004476:	2a62      	cmp	r2, #98	@ 0x62
 8004478:	d80b      	bhi.n	8004492 <_printf_i+0x36>
 800447a:	2a00      	cmp	r2, #0
 800447c:	d100      	bne.n	8004480 <_printf_i+0x24>
 800447e:	e0ba      	b.n	80045f6 <_printf_i+0x19a>
 8004480:	497a      	ldr	r1, [pc, #488]	@ (800466c <_printf_i+0x210>)
 8004482:	9104      	str	r1, [sp, #16]
 8004484:	2a58      	cmp	r2, #88	@ 0x58
 8004486:	d100      	bne.n	800448a <_printf_i+0x2e>
 8004488:	e08e      	b.n	80045a8 <_printf_i+0x14c>
 800448a:	0025      	movs	r5, r4
 800448c:	3542      	adds	r5, #66	@ 0x42
 800448e:	702a      	strb	r2, [r5, #0]
 8004490:	e022      	b.n	80044d8 <_printf_i+0x7c>
 8004492:	0010      	movs	r0, r2
 8004494:	3863      	subs	r0, #99	@ 0x63
 8004496:	2815      	cmp	r0, #21
 8004498:	d8f7      	bhi.n	800448a <_printf_i+0x2e>
 800449a:	f7fb fe31 	bl	8000100 <__gnu_thumb1_case_shi>
 800449e:	0016      	.short	0x0016
 80044a0:	fff6001f 	.word	0xfff6001f
 80044a4:	fff6fff6 	.word	0xfff6fff6
 80044a8:	001ffff6 	.word	0x001ffff6
 80044ac:	fff6fff6 	.word	0xfff6fff6
 80044b0:	fff6fff6 	.word	0xfff6fff6
 80044b4:	0036009f 	.word	0x0036009f
 80044b8:	fff6007e 	.word	0xfff6007e
 80044bc:	00b0fff6 	.word	0x00b0fff6
 80044c0:	0036fff6 	.word	0x0036fff6
 80044c4:	fff6fff6 	.word	0xfff6fff6
 80044c8:	0082      	.short	0x0082
 80044ca:	0025      	movs	r5, r4
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	3542      	adds	r5, #66	@ 0x42
 80044d0:	1d11      	adds	r1, r2, #4
 80044d2:	6019      	str	r1, [r3, #0]
 80044d4:	6813      	ldr	r3, [r2, #0]
 80044d6:	702b      	strb	r3, [r5, #0]
 80044d8:	2301      	movs	r3, #1
 80044da:	e09e      	b.n	800461a <_printf_i+0x1be>
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	6809      	ldr	r1, [r1, #0]
 80044e0:	1d02      	adds	r2, r0, #4
 80044e2:	060d      	lsls	r5, r1, #24
 80044e4:	d50b      	bpl.n	80044fe <_printf_i+0xa2>
 80044e6:	6806      	ldr	r6, [r0, #0]
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	2e00      	cmp	r6, #0
 80044ec:	da03      	bge.n	80044f6 <_printf_i+0x9a>
 80044ee:	232d      	movs	r3, #45	@ 0x2d
 80044f0:	9a03      	ldr	r2, [sp, #12]
 80044f2:	4276      	negs	r6, r6
 80044f4:	7013      	strb	r3, [r2, #0]
 80044f6:	4b5d      	ldr	r3, [pc, #372]	@ (800466c <_printf_i+0x210>)
 80044f8:	270a      	movs	r7, #10
 80044fa:	9304      	str	r3, [sp, #16]
 80044fc:	e018      	b.n	8004530 <_printf_i+0xd4>
 80044fe:	6806      	ldr	r6, [r0, #0]
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	0649      	lsls	r1, r1, #25
 8004504:	d5f1      	bpl.n	80044ea <_printf_i+0x8e>
 8004506:	b236      	sxth	r6, r6
 8004508:	e7ef      	b.n	80044ea <_printf_i+0x8e>
 800450a:	6808      	ldr	r0, [r1, #0]
 800450c:	6819      	ldr	r1, [r3, #0]
 800450e:	c940      	ldmia	r1!, {r6}
 8004510:	0605      	lsls	r5, r0, #24
 8004512:	d402      	bmi.n	800451a <_printf_i+0xbe>
 8004514:	0640      	lsls	r0, r0, #25
 8004516:	d500      	bpl.n	800451a <_printf_i+0xbe>
 8004518:	b2b6      	uxth	r6, r6
 800451a:	6019      	str	r1, [r3, #0]
 800451c:	4b53      	ldr	r3, [pc, #332]	@ (800466c <_printf_i+0x210>)
 800451e:	270a      	movs	r7, #10
 8004520:	9304      	str	r3, [sp, #16]
 8004522:	2a6f      	cmp	r2, #111	@ 0x6f
 8004524:	d100      	bne.n	8004528 <_printf_i+0xcc>
 8004526:	3f02      	subs	r7, #2
 8004528:	0023      	movs	r3, r4
 800452a:	2200      	movs	r2, #0
 800452c:	3343      	adds	r3, #67	@ 0x43
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	6863      	ldr	r3, [r4, #4]
 8004532:	60a3      	str	r3, [r4, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	db06      	blt.n	8004546 <_printf_i+0xea>
 8004538:	2104      	movs	r1, #4
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	9d03      	ldr	r5, [sp, #12]
 800453e:	438a      	bics	r2, r1
 8004540:	6022      	str	r2, [r4, #0]
 8004542:	4333      	orrs	r3, r6
 8004544:	d00c      	beq.n	8004560 <_printf_i+0x104>
 8004546:	9d03      	ldr	r5, [sp, #12]
 8004548:	0030      	movs	r0, r6
 800454a:	0039      	movs	r1, r7
 800454c:	f7fb fe68 	bl	8000220 <__aeabi_uidivmod>
 8004550:	9b04      	ldr	r3, [sp, #16]
 8004552:	3d01      	subs	r5, #1
 8004554:	5c5b      	ldrb	r3, [r3, r1]
 8004556:	702b      	strb	r3, [r5, #0]
 8004558:	0033      	movs	r3, r6
 800455a:	0006      	movs	r6, r0
 800455c:	429f      	cmp	r7, r3
 800455e:	d9f3      	bls.n	8004548 <_printf_i+0xec>
 8004560:	2f08      	cmp	r7, #8
 8004562:	d109      	bne.n	8004578 <_printf_i+0x11c>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	07db      	lsls	r3, r3, #31
 8004568:	d506      	bpl.n	8004578 <_printf_i+0x11c>
 800456a:	6862      	ldr	r2, [r4, #4]
 800456c:	6923      	ldr	r3, [r4, #16]
 800456e:	429a      	cmp	r2, r3
 8004570:	dc02      	bgt.n	8004578 <_printf_i+0x11c>
 8004572:	2330      	movs	r3, #48	@ 0x30
 8004574:	3d01      	subs	r5, #1
 8004576:	702b      	strb	r3, [r5, #0]
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	1b5b      	subs	r3, r3, r5
 800457c:	6123      	str	r3, [r4, #16]
 800457e:	9b07      	ldr	r3, [sp, #28]
 8004580:	0021      	movs	r1, r4
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	9805      	ldr	r0, [sp, #20]
 8004586:	9b06      	ldr	r3, [sp, #24]
 8004588:	aa09      	add	r2, sp, #36	@ 0x24
 800458a:	f7ff fef7 	bl	800437c <_printf_common>
 800458e:	3001      	adds	r0, #1
 8004590:	d148      	bne.n	8004624 <_printf_i+0x1c8>
 8004592:	2001      	movs	r0, #1
 8004594:	4240      	negs	r0, r0
 8004596:	b00b      	add	sp, #44	@ 0x2c
 8004598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800459a:	2220      	movs	r2, #32
 800459c:	6809      	ldr	r1, [r1, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	6022      	str	r2, [r4, #0]
 80045a2:	2278      	movs	r2, #120	@ 0x78
 80045a4:	4932      	ldr	r1, [pc, #200]	@ (8004670 <_printf_i+0x214>)
 80045a6:	9104      	str	r1, [sp, #16]
 80045a8:	0021      	movs	r1, r4
 80045aa:	3145      	adds	r1, #69	@ 0x45
 80045ac:	700a      	strb	r2, [r1, #0]
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	6822      	ldr	r2, [r4, #0]
 80045b2:	c940      	ldmia	r1!, {r6}
 80045b4:	0610      	lsls	r0, r2, #24
 80045b6:	d402      	bmi.n	80045be <_printf_i+0x162>
 80045b8:	0650      	lsls	r0, r2, #25
 80045ba:	d500      	bpl.n	80045be <_printf_i+0x162>
 80045bc:	b2b6      	uxth	r6, r6
 80045be:	6019      	str	r1, [r3, #0]
 80045c0:	07d3      	lsls	r3, r2, #31
 80045c2:	d502      	bpl.n	80045ca <_printf_i+0x16e>
 80045c4:	2320      	movs	r3, #32
 80045c6:	4313      	orrs	r3, r2
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	2e00      	cmp	r6, #0
 80045cc:	d001      	beq.n	80045d2 <_printf_i+0x176>
 80045ce:	2710      	movs	r7, #16
 80045d0:	e7aa      	b.n	8004528 <_printf_i+0xcc>
 80045d2:	2220      	movs	r2, #32
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	4393      	bics	r3, r2
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	e7f8      	b.n	80045ce <_printf_i+0x172>
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	680d      	ldr	r5, [r1, #0]
 80045e0:	1d10      	adds	r0, r2, #4
 80045e2:	6949      	ldr	r1, [r1, #20]
 80045e4:	6018      	str	r0, [r3, #0]
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	062e      	lsls	r6, r5, #24
 80045ea:	d501      	bpl.n	80045f0 <_printf_i+0x194>
 80045ec:	6019      	str	r1, [r3, #0]
 80045ee:	e002      	b.n	80045f6 <_printf_i+0x19a>
 80045f0:	066d      	lsls	r5, r5, #25
 80045f2:	d5fb      	bpl.n	80045ec <_printf_i+0x190>
 80045f4:	8019      	strh	r1, [r3, #0]
 80045f6:	2300      	movs	r3, #0
 80045f8:	9d03      	ldr	r5, [sp, #12]
 80045fa:	6123      	str	r3, [r4, #16]
 80045fc:	e7bf      	b.n	800457e <_printf_i+0x122>
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	1d11      	adds	r1, r2, #4
 8004602:	6019      	str	r1, [r3, #0]
 8004604:	6815      	ldr	r5, [r2, #0]
 8004606:	2100      	movs	r1, #0
 8004608:	0028      	movs	r0, r5
 800460a:	6862      	ldr	r2, [r4, #4]
 800460c:	f000 f856 	bl	80046bc <memchr>
 8004610:	2800      	cmp	r0, #0
 8004612:	d001      	beq.n	8004618 <_printf_i+0x1bc>
 8004614:	1b40      	subs	r0, r0, r5
 8004616:	6060      	str	r0, [r4, #4]
 8004618:	6863      	ldr	r3, [r4, #4]
 800461a:	6123      	str	r3, [r4, #16]
 800461c:	2300      	movs	r3, #0
 800461e:	9a03      	ldr	r2, [sp, #12]
 8004620:	7013      	strb	r3, [r2, #0]
 8004622:	e7ac      	b.n	800457e <_printf_i+0x122>
 8004624:	002a      	movs	r2, r5
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	9906      	ldr	r1, [sp, #24]
 800462a:	9805      	ldr	r0, [sp, #20]
 800462c:	9d07      	ldr	r5, [sp, #28]
 800462e:	47a8      	blx	r5
 8004630:	3001      	adds	r0, #1
 8004632:	d0ae      	beq.n	8004592 <_printf_i+0x136>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	079b      	lsls	r3, r3, #30
 8004638:	d415      	bmi.n	8004666 <_printf_i+0x20a>
 800463a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800463c:	68e0      	ldr	r0, [r4, #12]
 800463e:	4298      	cmp	r0, r3
 8004640:	daa9      	bge.n	8004596 <_printf_i+0x13a>
 8004642:	0018      	movs	r0, r3
 8004644:	e7a7      	b.n	8004596 <_printf_i+0x13a>
 8004646:	0022      	movs	r2, r4
 8004648:	2301      	movs	r3, #1
 800464a:	9906      	ldr	r1, [sp, #24]
 800464c:	9805      	ldr	r0, [sp, #20]
 800464e:	9e07      	ldr	r6, [sp, #28]
 8004650:	3219      	adds	r2, #25
 8004652:	47b0      	blx	r6
 8004654:	3001      	adds	r0, #1
 8004656:	d09c      	beq.n	8004592 <_printf_i+0x136>
 8004658:	3501      	adds	r5, #1
 800465a:	68e3      	ldr	r3, [r4, #12]
 800465c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	42ab      	cmp	r3, r5
 8004662:	dcf0      	bgt.n	8004646 <_printf_i+0x1ea>
 8004664:	e7e9      	b.n	800463a <_printf_i+0x1de>
 8004666:	2500      	movs	r5, #0
 8004668:	e7f7      	b.n	800465a <_printf_i+0x1fe>
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	08007d3d 	.word	0x08007d3d
 8004670:	08007d4e 	.word	0x08007d4e

08004674 <memmove>:
 8004674:	b510      	push	{r4, lr}
 8004676:	4288      	cmp	r0, r1
 8004678:	d902      	bls.n	8004680 <memmove+0xc>
 800467a:	188b      	adds	r3, r1, r2
 800467c:	4298      	cmp	r0, r3
 800467e:	d308      	bcc.n	8004692 <memmove+0x1e>
 8004680:	2300      	movs	r3, #0
 8004682:	429a      	cmp	r2, r3
 8004684:	d007      	beq.n	8004696 <memmove+0x22>
 8004686:	5ccc      	ldrb	r4, [r1, r3]
 8004688:	54c4      	strb	r4, [r0, r3]
 800468a:	3301      	adds	r3, #1
 800468c:	e7f9      	b.n	8004682 <memmove+0xe>
 800468e:	5c8b      	ldrb	r3, [r1, r2]
 8004690:	5483      	strb	r3, [r0, r2]
 8004692:	3a01      	subs	r2, #1
 8004694:	d2fb      	bcs.n	800468e <memmove+0x1a>
 8004696:	bd10      	pop	{r4, pc}

08004698 <_sbrk_r>:
 8004698:	2300      	movs	r3, #0
 800469a:	b570      	push	{r4, r5, r6, lr}
 800469c:	4d06      	ldr	r5, [pc, #24]	@ (80046b8 <_sbrk_r+0x20>)
 800469e:	0004      	movs	r4, r0
 80046a0:	0008      	movs	r0, r1
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	f7fd f918 	bl	80018d8 <_sbrk>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d103      	bne.n	80046b4 <_sbrk_r+0x1c>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d000      	beq.n	80046b4 <_sbrk_r+0x1c>
 80046b2:	6023      	str	r3, [r4, #0]
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	2000075c 	.word	0x2000075c

080046bc <memchr>:
 80046bc:	b2c9      	uxtb	r1, r1
 80046be:	1882      	adds	r2, r0, r2
 80046c0:	4290      	cmp	r0, r2
 80046c2:	d101      	bne.n	80046c8 <memchr+0xc>
 80046c4:	2000      	movs	r0, #0
 80046c6:	4770      	bx	lr
 80046c8:	7803      	ldrb	r3, [r0, #0]
 80046ca:	428b      	cmp	r3, r1
 80046cc:	d0fb      	beq.n	80046c6 <memchr+0xa>
 80046ce:	3001      	adds	r0, #1
 80046d0:	e7f6      	b.n	80046c0 <memchr+0x4>

080046d2 <_realloc_r>:
 80046d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046d4:	0006      	movs	r6, r0
 80046d6:	000c      	movs	r4, r1
 80046d8:	0015      	movs	r5, r2
 80046da:	2900      	cmp	r1, #0
 80046dc:	d105      	bne.n	80046ea <_realloc_r+0x18>
 80046de:	0011      	movs	r1, r2
 80046e0:	f7ff fc5e 	bl	8003fa0 <_malloc_r>
 80046e4:	0004      	movs	r4, r0
 80046e6:	0020      	movs	r0, r4
 80046e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046ea:	2a00      	cmp	r2, #0
 80046ec:	d103      	bne.n	80046f6 <_realloc_r+0x24>
 80046ee:	f7ff fbeb 	bl	8003ec8 <_free_r>
 80046f2:	002c      	movs	r4, r5
 80046f4:	e7f7      	b.n	80046e6 <_realloc_r+0x14>
 80046f6:	f000 f81c 	bl	8004732 <_malloc_usable_size_r>
 80046fa:	0007      	movs	r7, r0
 80046fc:	4285      	cmp	r5, r0
 80046fe:	d802      	bhi.n	8004706 <_realloc_r+0x34>
 8004700:	0843      	lsrs	r3, r0, #1
 8004702:	42ab      	cmp	r3, r5
 8004704:	d3ef      	bcc.n	80046e6 <_realloc_r+0x14>
 8004706:	0029      	movs	r1, r5
 8004708:	0030      	movs	r0, r6
 800470a:	f7ff fc49 	bl	8003fa0 <_malloc_r>
 800470e:	9001      	str	r0, [sp, #4]
 8004710:	2800      	cmp	r0, #0
 8004712:	d101      	bne.n	8004718 <_realloc_r+0x46>
 8004714:	9c01      	ldr	r4, [sp, #4]
 8004716:	e7e6      	b.n	80046e6 <_realloc_r+0x14>
 8004718:	002a      	movs	r2, r5
 800471a:	42bd      	cmp	r5, r7
 800471c:	d900      	bls.n	8004720 <_realloc_r+0x4e>
 800471e:	003a      	movs	r2, r7
 8004720:	0021      	movs	r1, r4
 8004722:	9801      	ldr	r0, [sp, #4]
 8004724:	f7ff fbc6 	bl	8003eb4 <memcpy>
 8004728:	0021      	movs	r1, r4
 800472a:	0030      	movs	r0, r6
 800472c:	f7ff fbcc 	bl	8003ec8 <_free_r>
 8004730:	e7f0      	b.n	8004714 <_realloc_r+0x42>

08004732 <_malloc_usable_size_r>:
 8004732:	1f0b      	subs	r3, r1, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	1f18      	subs	r0, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	da01      	bge.n	8004740 <_malloc_usable_size_r+0xe>
 800473c:	580b      	ldr	r3, [r1, r0]
 800473e:	18c0      	adds	r0, r0, r3
 8004740:	4770      	bx	lr
	...

08004744 <_init>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474a:	bc08      	pop	{r3}
 800474c:	469e      	mov	lr, r3
 800474e:	4770      	bx	lr

08004750 <_fini>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004756:	bc08      	pop	{r3}
 8004758:	469e      	mov	lr, r3
 800475a:	4770      	bx	lr
 800475c:	0000      	movs	r0, r0
	...

08004760 <__FLASH_Program_Fast_veneer>:
 8004760:	b401      	push	{r0}
 8004762:	4802      	ldr	r0, [pc, #8]	@ (800476c <__FLASH_Program_Fast_veneer+0xc>)
 8004764:	4684      	mov	ip, r0
 8004766:	bc01      	pop	{r0}
 8004768:	4760      	bx	ip
 800476a:	bf00      	nop
 800476c:	20000071 	.word	0x20000071

Disassembly of section .data:

20000000 <ani_idle>:
20000000:	08004b98 08004f98 08005398 08005798     .K...O...S...W..
20000010:	08005b98                                .[..

20000014 <SystemCoreClock>:
20000014:	00f42400                                .$..

20000018 <uwTickPrio>:
20000018:	00000004                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <_impure_ptr>:
20000020:	20000024                                $.. 

20000024 <_impure_data>:
20000024:	00000000 20000624 2000068c 200006f4     ....$.. ... ... 
	...

20000070 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000070:	b580      	push	{r7, lr}
20000072:	b088      	sub	sp, #32
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
20000078:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000007a:	231f      	movs	r3, #31
2000007c:	18fb      	adds	r3, r7, r3
2000007e:	2200      	movs	r2, #0
20000080:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000086:	683b      	ldr	r3, [r7, #0]
20000088:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000008a:	4b1a      	ldr	r3, [pc, #104]	@ (200000f4 <FLASH_Program_Fast+0x84>)
2000008c:	695a      	ldr	r2, [r3, #20]
2000008e:	4b19      	ldr	r3, [pc, #100]	@ (200000f4 <FLASH_Program_Fast+0x84>)
20000090:	2180      	movs	r1, #128	@ 0x80
20000092:	02c9      	lsls	r1, r1, #11
20000094:	430a      	orrs	r2, r1
20000096:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000098:	f3ef 8310 	mrs	r3, PRIMASK
2000009c:	60fb      	str	r3, [r7, #12]
  return(result);
2000009e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000a2:	b672      	cpsid	i
}
200000a4:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000a6:	e00f      	b.n	200000c8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000a8:	697a      	ldr	r2, [r7, #20]
200000aa:	69bb      	ldr	r3, [r7, #24]
200000ac:	6812      	ldr	r2, [r2, #0]
200000ae:	601a      	str	r2, [r3, #0]
    src += 4U;
200000b0:	697b      	ldr	r3, [r7, #20]
200000b2:	3304      	adds	r3, #4
200000b4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000b6:	69bb      	ldr	r3, [r7, #24]
200000b8:	3304      	adds	r3, #4
200000ba:	61bb      	str	r3, [r7, #24]
    index++;
200000bc:	211f      	movs	r1, #31
200000be:	187b      	adds	r3, r7, r1
200000c0:	781a      	ldrb	r2, [r3, #0]
200000c2:	187b      	adds	r3, r7, r1
200000c4:	3201      	adds	r2, #1
200000c6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000c8:	231f      	movs	r3, #31
200000ca:	18fb      	adds	r3, r7, r3
200000cc:	781b      	ldrb	r3, [r3, #0]
200000ce:	2b3f      	cmp	r3, #63	@ 0x3f
200000d0:	d9ea      	bls.n	200000a8 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000d2:	46c0      	nop			@ (mov r8, r8)
200000d4:	4b07      	ldr	r3, [pc, #28]	@ (200000f4 <FLASH_Program_Fast+0x84>)
200000d6:	691a      	ldr	r2, [r3, #16]
200000d8:	2380      	movs	r3, #128	@ 0x80
200000da:	025b      	lsls	r3, r3, #9
200000dc:	4013      	ands	r3, r2
200000de:	d1f9      	bne.n	200000d4 <FLASH_Program_Fast+0x64>
200000e0:	693b      	ldr	r3, [r7, #16]
200000e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e4:	68bb      	ldr	r3, [r7, #8]
200000e6:	f383 8810 	msr	PRIMASK, r3
}
200000ea:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000ec:	46c0      	nop			@ (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	b008      	add	sp, #32
200000f2:	bd80      	pop	{r7, pc}
200000f4:	40022000 	.word	0x40022000
