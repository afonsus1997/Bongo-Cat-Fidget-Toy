
Bongo-cat-fidget-toy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f0  080000b8  080000b8  000010b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003650  08004aa8  08004aa8  00005aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f8  080080f8  0000a0f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080080f8  080080f8  0000a0f8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080080f8  080080f8  0000a0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080f8  080080f8  000090f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080fc  080080fc  000090fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  08008100  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000674  200000f8  080081f8  0000a0f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  080081f8  0000a76c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a0f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f699  00000000  00000000  0000a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b59  00000000  00000000  000197b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9d  00000000  00000000  0001d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162c5  00000000  00000000  0001dffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001346b  00000000  00000000  000342c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008918c  00000000  00000000  0004772d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d08b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f94  00000000  00000000  000d08fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d4890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000f8 	.word	0x200000f8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004a80 	.word	0x08004a80

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000fc 	.word	0x200000fc
 80000fc:	08004a80 	.word	0x08004a80

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <toggle_display_invert>:

/* USER CODE BEGIN PFP */

// timer value = desired_sec * 64e6/prescaler

void toggle_display_invert(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
    display_inverted = !display_inverted;
 8000406:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <toggle_display_invert+0x64>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	425a      	negs	r2, r3
 800040c:	4153      	adcs	r3, r2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	001a      	movs	r2, r3
 8000412:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <toggle_display_invert+0x64>)
 8000414:	701a      	strb	r2, [r3, #0]
    ssd1306_InvertDisplay(display_inverted);
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <toggle_display_invert+0x64>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	0018      	movs	r0, r3
 800041c:	f001 faee 	bl	80019fc <ssd1306_InvertDisplay>

    // Mark data as changed
    data_changed = 1;
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <toggle_display_invert+0x68>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]

    // Visual feedback
    for(int i = 0; i < 2; i++) {
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	e012      	b.n	8000452 <toggle_display_invert+0x52>
        ssd1306_Fill(White);
 800042c:	2001      	movs	r0, #1
 800042e:	f001 f877 	bl	8001520 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000432:	f001 f88f 	bl	8001554 <ssd1306_UpdateScreen>
        HAL_Delay(50);
 8000436:	2032      	movs	r0, #50	@ 0x32
 8000438:	f001 fcd8 	bl	8001dec <HAL_Delay>
        ssd1306_Fill(Black);
 800043c:	2000      	movs	r0, #0
 800043e:	f001 f86f 	bl	8001520 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000442:	f001 f887 	bl	8001554 <ssd1306_UpdateScreen>
        HAL_Delay(50);
 8000446:	2032      	movs	r0, #50	@ 0x32
 8000448:	f001 fcd0 	bl	8001dec <HAL_Delay>
    for(int i = 0; i < 2; i++) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3301      	adds	r3, #1
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b01      	cmp	r3, #1
 8000456:	dde9      	ble.n	800042c <toggle_display_invert+0x2c>
    }
}
 8000458:	46c0      	nop			@ (mov r8, r8)
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	200001bd 	.word	0x200001bd
 8000468:	200001dc 	.word	0x200001dc

0800046c <draw_animation>:

void draw_animation(char* frame){
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af02      	add	r7, sp, #8
 8000472:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 8000474:	2000      	movs	r0, #0
 8000476:	f001 f853 	bl	8001520 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,frame,128,64,White);
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	2301      	movs	r3, #1
 800047e:	9301      	str	r3, [sp, #4]
 8000480:	2340      	movs	r3, #64	@ 0x40
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	2380      	movs	r3, #128	@ 0x80
 8000486:	2100      	movs	r1, #0
 8000488:	2000      	movs	r0, #0
 800048a:	f001 f9eb 	bl	8001864 <ssd1306_DrawBitmap>
}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}

08000496 <draw_animation_erase>:

void draw_animation_erase(char* frame){
 8000496:	b580      	push	{r7, lr}
 8000498:	b084      	sub	sp, #16
 800049a:	af02      	add	r7, sp, #8
 800049c:	6078      	str	r0, [r7, #4]
    ssd1306_DrawBitmap(0,0,frame,128,64,Black);
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	2300      	movs	r3, #0
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	2340      	movs	r3, #64	@ 0x40
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2380      	movs	r3, #128	@ 0x80
 80004aa:	2100      	movs	r1, #0
 80004ac:	2000      	movs	r0, #0
 80004ae:	f001 f9d9 	bl	8001864 <ssd1306_DrawBitmap>
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}

080004ba <draw_animation_transparent>:

void draw_animation_transparent(char* frame){
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b084      	sub	sp, #16
 80004be:	af02      	add	r7, sp, #8
 80004c0:	6078      	str	r0, [r7, #4]
    ssd1306_DrawBitmap(0,0,frame,128,64,White);
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	2301      	movs	r3, #1
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2340      	movs	r3, #64	@ 0x40
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	2100      	movs	r1, #0
 80004d0:	2000      	movs	r0, #0
 80004d2:	f001 f9c7 	bl	8001864 <ssd1306_DrawBitmap>
}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <readPins>:

void readPins(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
    sw_state_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);
 80004e4:	23a0      	movs	r3, #160	@ 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2140      	movs	r1, #64	@ 0x40
 80004ea:	0018      	movs	r0, r3
 80004ec:	f002 f88a 	bl	8002604 <HAL_GPIO_ReadPin>
 80004f0:	0003      	movs	r3, r0
 80004f2:	001a      	movs	r2, r3
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <readPins+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
    sw_state_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <readPins+0x34>)
 80004fa:	2101      	movs	r1, #1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 f881 	bl	8002604 <HAL_GPIO_ReadPin>
 8000502:	0003      	movs	r3, r0
 8000504:	001a      	movs	r2, r3
 8000506:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <readPins+0x38>)
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200001b4 	.word	0x200001b4
 8000514:	50000400 	.word	0x50000400
 8000518:	200001b8 	.word	0x200001b8

0800051c <display_tap_count_overlay>:

// Display tap count as overlay
void display_tap_count_overlay(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	@ 0x28
 8000520:	af02      	add	r7, sp, #8
    char buffer[32];
    // Display counts in a single line to save space
    sprintf(buffer, "%lu", total_taps);
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <display_tap_count_overlay+0x38>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	490c      	ldr	r1, [pc, #48]	@ (8000558 <display_tap_count_overlay+0x3c>)
 8000528:	003b      	movs	r3, r7
 800052a:	0018      	movs	r0, r3
 800052c:	f003 fe0a 	bl	8004144 <siprintf>
    ssd1306_SetCursor(2, 1);
 8000530:	2101      	movs	r1, #1
 8000532:	2002      	movs	r0, #2
 8000534:	f001 f97c 	bl	8001830 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, ComicSans_11x12, White);
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <display_tap_count_overlay+0x40>)
 800053a:	0038      	movs	r0, r7
 800053c:	2201      	movs	r2, #1
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	6819      	ldr	r1, [r3, #0]
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f001 f947 	bl	80017d8 <ssd1306_WriteString>
}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b008      	add	sp, #32
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	200001c0 	.word	0x200001c0
 8000558:	08004aa8 	.word	0x08004aa8
 800055c:	08008078 	.word	0x08008078

08000560 <display_saved_indicator>:

// Display saved indicator
void display_saved_indicator(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
    // Display "saved!" in bottom right corner
    ssd1306_SetCursor(85, 54);
 8000566:	2136      	movs	r1, #54	@ 0x36
 8000568:	2055      	movs	r0, #85	@ 0x55
 800056a:	f001 f961 	bl	8001830 <ssd1306_SetCursor>
    ssd1306_WriteString("saved!", ComicSans_11x12, White);
 800056e:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <display_saved_indicator+0x28>)
 8000570:	4806      	ldr	r0, [pc, #24]	@ (800058c <display_saved_indicator+0x2c>)
 8000572:	2201      	movs	r2, #1
 8000574:	9200      	str	r2, [sp, #0]
 8000576:	6819      	ldr	r1, [r3, #0]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f001 f92c 	bl	80017d8 <ssd1306_WriteString>
}
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	08008078 	.word	0x08008078
 800058c:	08004aac 	.word	0x08004aac

08000590 <update_display_with_overlays>:

// Update display with overlays
void update_display_with_overlays(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    // Draw overlay on top if enabled
    if (display_mode) {
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <update_display_with_overlays+0x28>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <update_display_with_overlays+0x10>
        display_tap_count_overlay();
 800059c:	f7ff ffbe 	bl	800051c <display_tap_count_overlay>
    }

    // Show saved indicator if active
    if (show_saved_indicator) {
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <update_display_with_overlays+0x2c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <update_display_with_overlays+0x1c>
        display_saved_indicator();
 80005a8:	f7ff ffda 	bl	8000560 <display_saved_indicator>
    }

    ssd1306_UpdateScreen();
 80005ac:	f000 ffd2 	bl	8001554 <ssd1306_UpdateScreen>
}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	200001d0 	.word	0x200001d0
 80005bc:	200001e4 	.word	0x200001e4

080005c0 <handle_display_mode_switch>:

// Handle display mode switching (both buttons held)
uint8_t handle_display_mode_switch(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    if (BOTH_PRESSED) {
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <handle_display_mode_switch+0x88>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d133      	bne.n	8000634 <handle_display_mode_switch+0x74>
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <handle_display_mode_switch+0x8c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d12f      	bne.n	8000634 <handle_display_mode_switch+0x74>
        if (both_pressed_timer == 0) {
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <handle_display_mode_switch+0x90>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d105      	bne.n	80005e8 <handle_display_mode_switch+0x28>
            both_pressed_timer = HAL_GetTick();
 80005dc:	f001 fbfc 	bl	8001dd8 <HAL_GetTick>
 80005e0:	0002      	movs	r2, r0
 80005e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <handle_display_mode_switch+0x90>)
 80005e4:	601a      	str	r2, [r3, #0]
        if (both_pressed_timer == 0) {
 80005e6:	e029      	b.n	800063c <handle_display_mode_switch+0x7c>
        } else if (HAL_GetTick() - both_pressed_timer >= MODE_SWITCH_TIME) {
 80005e8:	f001 fbf6 	bl	8001dd8 <HAL_GetTick>
 80005ec:	0002      	movs	r2, r0
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <handle_display_mode_switch+0x90>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <handle_display_mode_switch+0x94>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d920      	bls.n	800063c <handle_display_mode_switch+0x7c>
            display_mode = !display_mode;
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <handle_display_mode_switch+0x98>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	425a      	negs	r2, r3
 8000600:	4153      	adcs	r3, r2
 8000602:	b2db      	uxtb	r3, r3
 8000604:	001a      	movs	r2, r3
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <handle_display_mode_switch+0x98>)
 8000608:	701a      	strb	r2, [r3, #0]
            both_pressed_timer = 0;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <handle_display_mode_switch+0x90>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]

            // Force save when switching modes
            force_save();
 8000610:	f000 fbe8 	bl	8000de4 <force_save>

            // Wait for button release
            while(BOTH_PRESSED) {
 8000614:	e004      	b.n	8000620 <handle_display_mode_switch+0x60>
                HAL_Delay(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f001 fbe8 	bl	8001dec <HAL_Delay>
                readPins();
 800061c:	f7ff ff60 	bl	80004e0 <readPins>
            while(BOTH_PRESSED) {
 8000620:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <handle_display_mode_switch+0x88>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d103      	bne.n	8000630 <handle_display_mode_switch+0x70>
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <handle_display_mode_switch+0x8c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0f2      	beq.n	8000616 <handle_display_mode_switch+0x56>
            }
            return 1; // Mode switched
 8000630:	2301      	movs	r3, #1
 8000632:	e005      	b.n	8000640 <handle_display_mode_switch+0x80>
        }
    } else {
        both_pressed_timer = 0;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <handle_display_mode_switch+0x90>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	e000      	b.n	800063e <handle_display_mode_switch+0x7e>
        if (both_pressed_timer == 0) {
 800063c:	46c0      	nop			@ (mov r8, r8)
    }
    return 0; // No mode switch
 800063e:	2300      	movs	r3, #0
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	200001b4 	.word	0x200001b4
 800064c:	200001b8 	.word	0x200001b8
 8000650:	200001cc 	.word	0x200001cc
 8000654:	00000bb7 	.word	0x00000bb7
 8000658:	200001d0 	.word	0x200001d0

0800065c <handle_invert_toggle>:

// Handle invert toggle (left button held)
uint8_t handle_invert_toggle(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    if (LEFT_PRESSED && !RIGHT_PRESSED && both_pressed_timer == 0) {
 8000660:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <handle_invert_toggle+0x90>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d138      	bne.n	80006da <handle_invert_toggle+0x7e>
 8000668:	4b21      	ldr	r3, [pc, #132]	@ (80006f0 <handle_invert_toggle+0x94>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d134      	bne.n	80006da <handle_invert_toggle+0x7e>
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <handle_invert_toggle+0x90>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d103      	bne.n	8000680 <handle_invert_toggle+0x24>
 8000678:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <handle_invert_toggle+0x94>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d02c      	beq.n	80006da <handle_invert_toggle+0x7e>
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <handle_invert_toggle+0x98>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d128      	bne.n	80006da <handle_invert_toggle+0x7e>
        if (invert_timer == 0) {
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <handle_invert_toggle+0x9c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d105      	bne.n	800069c <handle_invert_toggle+0x40>
            invert_timer = HAL_GetTick();
 8000690:	f001 fba2 	bl	8001dd8 <HAL_GetTick>
 8000694:	0002      	movs	r2, r0
 8000696:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <handle_invert_toggle+0x9c>)
 8000698:	601a      	str	r2, [r3, #0]
        if (invert_timer == 0) {
 800069a:	e022      	b.n	80006e2 <handle_invert_toggle+0x86>
        } else if (HAL_GetTick() - invert_timer >= INVERT_HOLD_TIME) {
 800069c:	f001 fb9c 	bl	8001dd8 <HAL_GetTick>
 80006a0:	0002      	movs	r2, r0
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <handle_invert_toggle+0x9c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	1ad2      	subs	r2, r2, r3
 80006a8:	23fa      	movs	r3, #250	@ 0xfa
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d318      	bcc.n	80006e2 <handle_invert_toggle+0x86>
            toggle_display_invert();
 80006b0:	f7ff fea6 	bl	8000400 <toggle_display_invert>
            invert_timer = 0;
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <handle_invert_toggle+0x9c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]

            // Wait for button release
            while(LEFT_PRESSED) {
 80006ba:	e004      	b.n	80006c6 <handle_invert_toggle+0x6a>
                HAL_Delay(10);
 80006bc:	200a      	movs	r0, #10
 80006be:	f001 fb95 	bl	8001dec <HAL_Delay>
                readPins();
 80006c2:	f7ff ff0d 	bl	80004e0 <readPins>
            while(LEFT_PRESSED) {
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <handle_invert_toggle+0x90>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d103      	bne.n	80006d6 <handle_invert_toggle+0x7a>
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <handle_invert_toggle+0x94>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d0f2      	beq.n	80006bc <handle_invert_toggle+0x60>
            }
            return 1; // Inverted
 80006d6:	2301      	movs	r3, #1
 80006d8:	e005      	b.n	80006e6 <handle_invert_toggle+0x8a>
        }
    } else {
        invert_timer = 0;
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <handle_invert_toggle+0x9c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	e000      	b.n	80006e4 <handle_invert_toggle+0x88>
        if (invert_timer == 0) {
 80006e2:	46c0      	nop			@ (mov r8, r8)
    }
    return 0; // No invert
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	0018      	movs	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200001b4 	.word	0x200001b4
 80006f0:	200001b8 	.word	0x200001b8
 80006f4:	200001cc 	.word	0x200001cc
 80006f8:	200001d4 	.word	0x200001d4

080006fc <register_tap>:

// Register a tap and increment counters
void register_tap(uint8_t is_left) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	0002      	movs	r2, r0
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	701a      	strb	r2, [r3, #0]
    if (is_left) {
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d005      	beq.n	800071c <register_tap+0x20>
        left_taps++;
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <register_tap+0x44>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <register_tap+0x44>)
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	e004      	b.n	8000726 <register_tap+0x2a>
    } else {
        right_taps++;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <register_tap+0x48>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <register_tap+0x48>)
 8000724:	601a      	str	r2, [r3, #0]
    }
    total_taps++;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <register_tap+0x4c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <register_tap+0x4c>)
 800072e:	601a      	str	r2, [r3, #0]
    data_changed = 1;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <register_tap+0x50>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	200001c4 	.word	0x200001c4
 8000744:	200001c8 	.word	0x200001c8
 8000748:	200001c0 	.word	0x200001c0
 800074c:	200001dc 	.word	0x200001dc

08000750 <handle_tap_decay>:

// Handle tap animations and decay
void handle_tap_decay(int32_t *tap_left_cntr, int32_t *tap_right_cntr) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
    if(*tap_left_cntr > 0){
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	dd13      	ble.n	800078a <handle_tap_decay+0x3a>
        if(HAL_GetTick() - *tap_left_cntr > TAP_DECAY_TIME) {
 8000762:	f001 fb39 	bl	8001dd8 <HAL_GetTick>
 8000766:	0002      	movs	r2, r0
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000770:	d907      	bls.n	8000782 <handle_tap_decay+0x32>
            draw_animation_erase(&img_tap_left);
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <handle_tap_decay+0x74>)
 8000774:	0018      	movs	r0, r3
 8000776:	f7ff fe8e 	bl	8000496 <draw_animation_erase>
            *tap_left_cntr = 0;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e003      	b.n	800078a <handle_tap_decay+0x3a>
        }
        else{
            draw_animation_transparent(&img_tap_left);
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <handle_tap_decay+0x74>)
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff fe98 	bl	80004ba <draw_animation_transparent>
        }
    }
    if(*tap_right_cntr > 0){
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	dd13      	ble.n	80007ba <handle_tap_decay+0x6a>
        if(HAL_GetTick() - *tap_right_cntr > TAP_DECAY_TIME) {
 8000792:	f001 fb21 	bl	8001dd8 <HAL_GetTick>
 8000796:	0002      	movs	r2, r0
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	2bc8      	cmp	r3, #200	@ 0xc8
 80007a0:	d907      	bls.n	80007b2 <handle_tap_decay+0x62>
            draw_animation_erase(&img_tap_right);
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <handle_tap_decay+0x78>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff fe76 	bl	8000496 <draw_animation_erase>
            *tap_right_cntr = 0;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
        }
        else{
            draw_animation_transparent(&img_tap_right);
        }
    }
}
 80007b0:	e003      	b.n	80007ba <handle_tap_decay+0x6a>
            draw_animation_transparent(&img_tap_right);
 80007b2:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <handle_tap_decay+0x78>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff fe80 	bl	80004ba <draw_animation_transparent>
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	08006f30 	.word	0x08006f30
 80007c8:	08007330 	.word	0x08007330

080007cc <handle_paw_animations>:

// Handle paw animations based on button states
void handle_paw_animations(uint8_t *left_state, uint8_t *right_state,
                          int32_t *tap_left_cntr, int32_t *tap_right_cntr,
                          int32_t *idle_cntr) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	603b      	str	r3, [r7, #0]
    *idle_cntr = 0;
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]

    if((BOTH_PRESSED) && ((*left_state | *right_state) == 0 || (*left_state ^ *right_state) == 1)){
 80007e0:	4b54      	ldr	r3, [pc, #336]	@ (8000934 <handle_paw_animations+0x168>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d140      	bne.n	800086a <handle_paw_animations+0x9e>
 80007e8:	4b53      	ldr	r3, [pc, #332]	@ (8000938 <handle_paw_animations+0x16c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d13c      	bne.n	800086a <handle_paw_animations+0x9e>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	781a      	ldrb	r2, [r3, #0]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d007      	beq.n	8000810 <handle_paw_animations+0x44>
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4053      	eors	r3, r2
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b01      	cmp	r3, #1
 800080e:	d12c      	bne.n	800086a <handle_paw_animations+0x9e>
        draw_animation(&img_both_down_alt);
 8000810:	4b4a      	ldr	r3, [pc, #296]	@ (800093c <handle_paw_animations+0x170>)
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff fe2a 	bl	800046c <draw_animation>
        if(!*right_state){
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10c      	bne.n	800083a <handle_paw_animations+0x6e>
            draw_animation_transparent(&img_tap_right);
 8000820:	4b47      	ldr	r3, [pc, #284]	@ (8000940 <handle_paw_animations+0x174>)
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff fe49 	bl	80004ba <draw_animation_transparent>
            *tap_right_cntr = HAL_GetTick();
 8000828:	f001 fad6 	bl	8001dd8 <HAL_GetTick>
 800082c:	0003      	movs	r3, r0
 800082e:	001a      	movs	r2, r3
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	601a      	str	r2, [r3, #0]
            register_tap(0); // Right tap
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff ff61 	bl	80006fc <register_tap>
        }
        if(!*left_state){
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10c      	bne.n	800085c <handle_paw_animations+0x90>
            draw_animation_transparent(&img_tap_left);
 8000842:	4b40      	ldr	r3, [pc, #256]	@ (8000944 <handle_paw_animations+0x178>)
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff fe38 	bl	80004ba <draw_animation_transparent>
            *tap_left_cntr = HAL_GetTick();
 800084a:	f001 fac5 	bl	8001dd8 <HAL_GetTick>
 800084e:	0003      	movs	r3, r0
 8000850:	001a      	movs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	601a      	str	r2, [r3, #0]
            register_tap(1); // Left tap
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff50 	bl	80006fc <register_tap>
        }
        *right_state = 1;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
        *left_state = 1;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e05f      	b.n	800092a <handle_paw_animations+0x15e>
    }
    else if(RIGHT_PRESSED){
 800086a:	4b32      	ldr	r3, [pc, #200]	@ (8000934 <handle_paw_animations+0x168>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d12b      	bne.n	80008ca <handle_paw_animations+0xfe>
 8000872:	4b31      	ldr	r3, [pc, #196]	@ (8000938 <handle_paw_animations+0x16c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d127      	bne.n	80008ca <handle_paw_animations+0xfe>
        if(*right_state == 0 || *left_state == 1){
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d003      	beq.n	800088a <handle_paw_animations+0xbe>
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d117      	bne.n	80008ba <handle_paw_animations+0xee>
            draw_animation(&img_right_down_alt);
 800088a:	4b2f      	ldr	r3, [pc, #188]	@ (8000948 <handle_paw_animations+0x17c>)
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff fded 	bl	800046c <draw_animation>
            if(!*right_state){
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10c      	bne.n	80008b4 <handle_paw_animations+0xe8>
                draw_animation_transparent(&img_tap_right);
 800089a:	4b29      	ldr	r3, [pc, #164]	@ (8000940 <handle_paw_animations+0x174>)
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff fe0c 	bl	80004ba <draw_animation_transparent>
                *tap_right_cntr = HAL_GetTick();
 80008a2:	f001 fa99 	bl	8001dd8 <HAL_GetTick>
 80008a6:	0003      	movs	r3, r0
 80008a8:	001a      	movs	r2, r3
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	601a      	str	r2, [r3, #0]
                register_tap(0); // Right tap
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff ff24 	bl	80006fc <register_tap>
            }
            *right_state = 1;
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
        }
        if(*left_state)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d033      	beq.n	800092a <handle_paw_animations+0x15e>
            *left_state = 0;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
        if(*left_state)
 80008c8:	e02f      	b.n	800092a <handle_paw_animations+0x15e>
    }
    else if(LEFT_PRESSED){
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <handle_paw_animations+0x168>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d12b      	bne.n	800092a <handle_paw_animations+0x15e>
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <handle_paw_animations+0x16c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d127      	bne.n	800092a <handle_paw_animations+0x15e>
        if(*left_state == 0 || *right_state == 1){
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d003      	beq.n	80008ea <handle_paw_animations+0x11e>
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d117      	bne.n	800091a <handle_paw_animations+0x14e>
            draw_animation(&img_left_down_alt);
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <handle_paw_animations+0x180>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff fdbd 	bl	800046c <draw_animation>
            if(!*left_state){
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10c      	bne.n	8000914 <handle_paw_animations+0x148>
                draw_animation_transparent(&img_tap_left);
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <handle_paw_animations+0x178>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fddc 	bl	80004ba <draw_animation_transparent>
                *tap_left_cntr = HAL_GetTick();
 8000902:	f001 fa69 	bl	8001dd8 <HAL_GetTick>
 8000906:	0003      	movs	r3, r0
 8000908:	001a      	movs	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
                register_tap(1); // Left tap
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff fef4 	bl	80006fc <register_tap>
            }
            *left_state = 1;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
        }
        if(*right_state)
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <handle_paw_animations+0x15e>
            *right_state = 0;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
    }
}
 8000928:	e7ff      	b.n	800092a <handle_paw_animations+0x15e>
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b004      	add	sp, #16
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	200001b4 	.word	0x200001b4
 8000938:	200001b8 	.word	0x200001b8
 800093c:	08006330 	.word	0x08006330
 8000940:	08007330 	.word	0x08007330
 8000944:	08006f30 	.word	0x08006f30
 8000948:	08006b30 	.word	0x08006b30
 800094c:	08006730 	.word	0x08006730

08000950 <check_idle_transition>:

// Check if should return to idle state
uint8_t check_idle_transition(int32_t *idle_cntr, uint8_t *left_state, uint8_t *right_state) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
    if(NONE_PRESSED){
 800095c:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <check_idle_transition+0x80>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d130      	bne.n	80009c6 <check_idle_transition+0x76>
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <check_idle_transition+0x84>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d12c      	bne.n	80009c6 <check_idle_transition+0x76>
        draw_animation(&img_both_up);
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <check_idle_transition+0x88>)
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff fd7c 	bl	800046c <draw_animation>
        if(*idle_cntr == 0){
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d105      	bne.n	8000988 <check_idle_transition+0x38>
            *idle_cntr = HAL_GetTick();
 800097c:	f001 fa2c 	bl	8001dd8 <HAL_GetTick>
 8000980:	0003      	movs	r3, r0
 8000982:	001a      	movs	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	601a      	str	r2, [r3, #0]
        }
        if(HAL_GetTick() - *idle_cntr >= IDLE_TIME){
 8000988:	f001 fa26 	bl	8001dd8 <HAL_GetTick>
 800098c:	0002      	movs	r2, r0
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1ad2      	subs	r2, r2, r3
 8000994:	23fa      	movs	r3, #250	@ 0xfa
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	429a      	cmp	r2, r3
 800099a:	d306      	bcc.n	80009aa <check_idle_transition+0x5a>
            *idle_cntr = 0;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
            // Force save before going to idle
            force_save();
 80009a2:	f000 fa1f 	bl	8000de4 <force_save>
            return 1; // Should transition to idle
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00e      	b.n	80009c8 <check_idle_transition+0x78>
        }
        if(*left_state)
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <check_idle_transition+0x68>
            *left_state = 0;
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
        if(*right_state)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <check_idle_transition+0x76>
            *right_state = 0;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
    }
    return 0; // Stay in current state
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b004      	add	sp, #16
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200001b4 	.word	0x200001b4
 80009d4:	200001b8 	.word	0x200001b8
 80009d8:	08004b30 	.word	0x08004b30

080009dc <handle_reset>:

void handle_reset(){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af02      	add	r7, sp, #8
	// Show confirmation prompt

	ssd1306_SetCursor(27, 10);  // x = 9
 80009e2:	210a      	movs	r1, #10
 80009e4:	201b      	movs	r0, #27
 80009e6:	f000 ff23 	bl	8001830 <ssd1306_SetCursor>
	ssd1306_WriteString("RESET ALL?", ComicSans_11x12, White);
 80009ea:	4b51      	ldr	r3, [pc, #324]	@ (8000b30 <handle_reset+0x154>)
 80009ec:	4851      	ldr	r0, [pc, #324]	@ (8000b34 <handle_reset+0x158>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	9200      	str	r2, [sp, #0]
 80009f2:	6819      	ldr	r1, [r3, #0]
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f000 feee 	bl	80017d8 <ssd1306_WriteString>
	ssd1306_SetCursor(27, 26);  // x = 3
 80009fc:	211a      	movs	r1, #26
 80009fe:	201b      	movs	r0, #27
 8000a00:	f000 ff16 	bl	8001830 <ssd1306_SetCursor>
	ssd1306_WriteString("Press again", ComicSans_11x12, White);
 8000a04:	4b4a      	ldr	r3, [pc, #296]	@ (8000b30 <handle_reset+0x154>)
 8000a06:	484c      	ldr	r0, [pc, #304]	@ (8000b38 <handle_reset+0x15c>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	9200      	str	r2, [sp, #0]
 8000a0c:	6819      	ldr	r1, [r3, #0]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f000 fee1 	bl	80017d8 <ssd1306_WriteString>
	ssd1306_SetCursor(27, 42);  // x = 9
 8000a16:	212a      	movs	r1, #42	@ 0x2a
 8000a18:	201b      	movs	r0, #27
 8000a1a:	f000 ff09 	bl	8001830 <ssd1306_SetCursor>
	ssd1306_WriteString("to confirm", ComicSans_11x12, White);
 8000a1e:	4b44      	ldr	r3, [pc, #272]	@ (8000b30 <handle_reset+0x154>)
 8000a20:	4846      	ldr	r0, [pc, #280]	@ (8000b3c <handle_reset+0x160>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	9200      	str	r2, [sp, #0]
 8000a26:	6819      	ldr	r1, [r3, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	f000 fed4 	bl	80017d8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000a30:	f000 fd90 	bl	8001554 <ssd1306_UpdateScreen>
	// Wait for button release
	while(RIGHT_PRESSED) {
 8000a34:	e004      	b.n	8000a40 <handle_reset+0x64>
		HAL_Delay(10);
 8000a36:	200a      	movs	r0, #10
 8000a38:	f001 f9d8 	bl	8001dec <HAL_Delay>
		readPins();
 8000a3c:	f7ff fd50 	bl	80004e0 <readPins>
	while(RIGHT_PRESSED) {
 8000a40:	4b3f      	ldr	r3, [pc, #252]	@ (8000b40 <handle_reset+0x164>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d103      	bne.n	8000a50 <handle_reset+0x74>
 8000a48:	4b3e      	ldr	r3, [pc, #248]	@ (8000b44 <handle_reset+0x168>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f2      	beq.n	8000a36 <handle_reset+0x5a>
	}

	// Wait for confirmation press
	uint32_t confirm_start = HAL_GetTick();
 8000a50:	f001 f9c2 	bl	8001dd8 <HAL_GetTick>
 8000a54:	0003      	movs	r3, r0
 8000a56:	603b      	str	r3, [r7, #0]
	uint8_t confirmed = 0;
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]

	while(HAL_GetTick() - confirm_start < RESET_CONFIRM_TIMEOUT) {
 8000a5e:	e010      	b.n	8000a82 <handle_reset+0xa6>
		readPins();
 8000a60:	f7ff fd3e 	bl	80004e0 <readPins>

		if(RIGHT_PRESSED) {
 8000a64:	4b36      	ldr	r3, [pc, #216]	@ (8000b40 <handle_reset+0x164>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d107      	bne.n	8000a7c <handle_reset+0xa0>
 8000a6c:	4b35      	ldr	r3, [pc, #212]	@ (8000b44 <handle_reset+0x168>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d103      	bne.n	8000a7c <handle_reset+0xa0>
			confirmed = 1;
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	2201      	movs	r2, #1
 8000a78:	701a      	strb	r2, [r3, #0]
			break;
 8000a7a:	e00a      	b.n	8000a92 <handle_reset+0xb6>
		}

		HAL_Delay(100);
 8000a7c:	2064      	movs	r0, #100	@ 0x64
 8000a7e:	f001 f9b5 	bl	8001dec <HAL_Delay>
	while(HAL_GetTick() - confirm_start < RESET_CONFIRM_TIMEOUT) {
 8000a82:	f001 f9a9 	bl	8001dd8 <HAL_GetTick>
 8000a86:	0002      	movs	r2, r0
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b48 <handle_reset+0x16c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d9e6      	bls.n	8000a60 <handle_reset+0x84>
	}

	if(confirmed) {
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d02a      	beq.n	8000af0 <handle_reset+0x114>
		// Perform reset
		reset_all_settings();
 8000a9a:	f000 f9fd 	bl	8000e98 <reset_all_settings>
		ssd1306_InvertDisplay(0);  // Apply default display mode
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 ffac 	bl	80019fc <ssd1306_InvertDisplay>

		// Show success feedback
		ssd1306_Fill(Black);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 fd3b 	bl	8001520 <ssd1306_Fill>
		ssd1306_SetCursor(35, 20);
 8000aaa:	2114      	movs	r1, #20
 8000aac:	2023      	movs	r0, #35	@ 0x23
 8000aae:	f000 febf 	bl	8001830 <ssd1306_SetCursor>
		ssd1306_WriteString("RESET OK!", ComicSans_11x12, White);
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <handle_reset+0x154>)
 8000ab4:	4825      	ldr	r0, [pc, #148]	@ (8000b4c <handle_reset+0x170>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	9200      	str	r2, [sp, #0]
 8000aba:	6819      	ldr	r1, [r3, #0]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	f000 fe8a 	bl	80017d8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000ac4:	f000 fd46 	bl	8001554 <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 8000ac8:	23fa      	movs	r3, #250	@ 0xfa
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f001 f98d 	bl	8001dec <HAL_Delay>

		// Wait for button release
		while(RIGHT_PRESSED) {
 8000ad2:	e004      	b.n	8000ade <handle_reset+0x102>
			HAL_Delay(10);
 8000ad4:	200a      	movs	r0, #10
 8000ad6:	f001 f989 	bl	8001dec <HAL_Delay>
			readPins();
 8000ada:	f7ff fd01 	bl	80004e0 <readPins>
		while(RIGHT_PRESSED) {
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <handle_reset+0x164>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d11b      	bne.n	8000b1e <handle_reset+0x142>
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <handle_reset+0x168>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d0f2      	beq.n	8000ad4 <handle_reset+0xf8>
 8000aee:	e016      	b.n	8000b1e <handle_reset+0x142>
		}
	} else {
		// Cancelled
		ssd1306_Fill(Black);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 fd15 	bl	8001520 <ssd1306_Fill>
		ssd1306_SetCursor(40, 25);
 8000af6:	2119      	movs	r1, #25
 8000af8:	2028      	movs	r0, #40	@ 0x28
 8000afa:	f000 fe99 	bl	8001830 <ssd1306_SetCursor>
		ssd1306_WriteString("Cancelled", ComicSans_11x12, White);
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <handle_reset+0x154>)
 8000b00:	4813      	ldr	r0, [pc, #76]	@ (8000b50 <handle_reset+0x174>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	9200      	str	r2, [sp, #0]
 8000b06:	6819      	ldr	r1, [r3, #0]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f000 fe64 	bl	80017d8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000b10:	f000 fd20 	bl	8001554 <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 8000b14:	23fa      	movs	r3, #250	@ 0xfa
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 f967 	bl	8001dec <HAL_Delay>
	}

	// Clear screen
	ssd1306_Fill(Black);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 fcfe 	bl	8001520 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000b24:	f000 fd16 	bl	8001554 <ssd1306_UpdateScreen>
}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	08008078 	.word	0x08008078
 8000b34:	08004ab4 	.word	0x08004ab4
 8000b38:	08004ac0 	.word	0x08004ac0
 8000b3c:	08004acc 	.word	0x08004acc
 8000b40:	200001b4 	.word	0x200001b4
 8000b44:	200001b8 	.word	0x200001b8
 8000b48:	0000270f 	.word	0x0000270f
 8000b4c:	08004ad8 	.word	0x08004ad8
 8000b50:	08004ae4 	.word	0x08004ae4

08000b54 <handle_credits>:

void handle_credits(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af02      	add	r7, sp, #8
	// Show confirmation prompt

	ssd1306_SetCursor(5, 10);  // x = 9
 8000b5a:	210a      	movs	r1, #10
 8000b5c:	2005      	movs	r0, #5
 8000b5e:	f000 fe67 	bl	8001830 <ssd1306_SetCursor>
	ssd1306_WriteString("Bongo Cat Fidget Toy", ComicSans_11x12, White);
 8000b62:	4b35      	ldr	r3, [pc, #212]	@ (8000c38 <handle_credits+0xe4>)
 8000b64:	4835      	ldr	r0, [pc, #212]	@ (8000c3c <handle_credits+0xe8>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	9200      	str	r2, [sp, #0]
 8000b6a:	6819      	ldr	r1, [r3, #0]
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f000 fe32 	bl	80017d8 <ssd1306_WriteString>
	ssd1306_SetCursor(13, 21);  // x = 3
 8000b74:	2115      	movs	r1, #21
 8000b76:	200d      	movs	r0, #13
 8000b78:	f000 fe5a 	bl	8001830 <ssd1306_SetCursor>
	ssd1306_WriteString("by Afonso Muralha", ComicSans_11x12, White);
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c38 <handle_credits+0xe4>)
 8000b7e:	4830      	ldr	r0, [pc, #192]	@ (8000c40 <handle_credits+0xec>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	9200      	str	r2, [sp, #0]
 8000b84:	6819      	ldr	r1, [r3, #0]
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f000 fe25 	bl	80017d8 <ssd1306_WriteString>
	ssd1306_SetCursor(13, 40);  // x = 9
 8000b8e:	2128      	movs	r1, #40	@ 0x28
 8000b90:	200d      	movs	r0, #13
 8000b92:	f000 fe4d 	bl	8001830 <ssd1306_SetCursor>
	ssd1306_WriteString("afonsomuralha.com", ComicSans_11x12, White);
 8000b96:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <handle_credits+0xe4>)
 8000b98:	482a      	ldr	r0, [pc, #168]	@ (8000c44 <handle_credits+0xf0>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	9200      	str	r2, [sp, #0]
 8000b9e:	6819      	ldr	r1, [r3, #0]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f000 fe18 	bl	80017d8 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000ba8:	f000 fcd4 	bl	8001554 <ssd1306_UpdateScreen>
	// Wait for button release
	while(BOTH_PRESSED || LEFT_PRESSED || RIGHT_PRESSED) {
 8000bac:	e004      	b.n	8000bb8 <handle_credits+0x64>
		HAL_Delay(10);
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f001 f91c 	bl	8001dec <HAL_Delay>
		readPins();
 8000bb4:	f7ff fc94 	bl	80004e0 <readPins>
	while(BOTH_PRESSED || LEFT_PRESSED || RIGHT_PRESSED) {
 8000bb8:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <handle_credits+0xf4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d103      	bne.n	8000bc8 <handle_credits+0x74>
 8000bc0:	4b22      	ldr	r3, [pc, #136]	@ (8000c4c <handle_credits+0xf8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f2      	beq.n	8000bae <handle_credits+0x5a>
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <handle_credits+0xf4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d103      	bne.n	8000bd8 <handle_credits+0x84>
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <handle_credits+0xf8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d0ea      	beq.n	8000bae <handle_credits+0x5a>
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <handle_credits+0xf4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d000      	beq.n	8000be2 <handle_credits+0x8e>
 8000be0:	e003      	b.n	8000bea <handle_credits+0x96>
 8000be2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <handle_credits+0xf8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0e1      	beq.n	8000bae <handle_credits+0x5a>
	}

	while(1) {
		readPins();
 8000bea:	f7ff fc79 	bl	80004e0 <readPins>

		if(RIGHT_PRESSED || LEFT_PRESSED || BOTH_PRESSED) {
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <handle_credits+0xf4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d103      	bne.n	8000bfe <handle_credits+0xaa>
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <handle_credits+0xf8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d013      	beq.n	8000c26 <handle_credits+0xd2>
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <handle_credits+0xf4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d103      	bne.n	8000c0e <handle_credits+0xba>
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <handle_credits+0xf8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d00b      	beq.n	8000c26 <handle_credits+0xd2>
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <handle_credits+0xf4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d103      	bne.n	8000c1e <handle_credits+0xca>
 8000c16:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <handle_credits+0xf8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <handle_credits+0xd2>
			break;
		}

		HAL_Delay(100);
 8000c1e:	2064      	movs	r0, #100	@ 0x64
 8000c20:	f001 f8e4 	bl	8001dec <HAL_Delay>
		readPins();
 8000c24:	e7e1      	b.n	8000bea <handle_credits+0x96>
	}

	// Clear screen
	ssd1306_Fill(Black);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 fc7a 	bl	8001520 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000c2c:	f000 fc92 	bl	8001554 <ssd1306_UpdateScreen>
}
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	08008078 	.word	0x08008078
 8000c3c:	08004af0 	.word	0x08004af0
 8000c40:	08004b08 	.word	0x08004b08
 8000c44:	08004b1c 	.word	0x08004b1c
 8000c48:	200001b4 	.word	0x200001b4
 8000c4c:	200001b8 	.word	0x200001b8

08000c50 <handle_boot_overrides>:

// Handle boot-time button overrides
void handle_boot_overrides(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
    readPins();
 8000c54:	f7ff fc44 	bl	80004e0 <readPins>

    // Show credits
	if(BOTH_PRESSED){
 8000c58:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <handle_boot_overrides+0x6c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d106      	bne.n	8000c6e <handle_boot_overrides+0x1e>
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <handle_boot_overrides+0x70>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <handle_boot_overrides+0x1e>
		handle_credits();
 8000c68:	f7ff ff74 	bl	8000b54 <handle_credits>
		if(RIGHT_PRESSED) {
			handle_reset();
		}
	}

}
 8000c6c:	e023      	b.n	8000cb6 <handle_boot_overrides+0x66>
		if(LEFT_PRESSED) {
 8000c6e:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <handle_boot_overrides+0x6c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d115      	bne.n	8000ca2 <handle_boot_overrides+0x52>
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <handle_boot_overrides+0x70>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d111      	bne.n	8000ca2 <handle_boot_overrides+0x52>
			toggle_display_invert();
 8000c7e:	f7ff fbbf 	bl	8000400 <toggle_display_invert>
			force_save();  // Save immediately for boot-time changes
 8000c82:	f000 f8af 	bl	8000de4 <force_save>
			while(LEFT_PRESSED) {
 8000c86:	e004      	b.n	8000c92 <handle_boot_overrides+0x42>
				HAL_Delay(10);
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f001 f8af 	bl	8001dec <HAL_Delay>
				readPins();
 8000c8e:	f7ff fc27 	bl	80004e0 <readPins>
			while(LEFT_PRESSED) {
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <handle_boot_overrides+0x6c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <handle_boot_overrides+0x52>
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <handle_boot_overrides+0x70>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d0f2      	beq.n	8000c88 <handle_boot_overrides+0x38>
		if(RIGHT_PRESSED) {
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <handle_boot_overrides+0x6c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d105      	bne.n	8000cb6 <handle_boot_overrides+0x66>
 8000caa:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <handle_boot_overrides+0x70>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <handle_boot_overrides+0x66>
			handle_reset();
 8000cb2:	f7ff fe93 	bl	80009dc <handle_reset>
}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200001b4 	.word	0x200001b4
 8000cc0:	200001b8 	.word	0x200001b8

08000cc4 <save_settings>:

// Save all settings to flash
void save_settings(void) {
 8000cc4:	b5b0      	push	{r4, r5, r7, lr}
 8000cc6:	b08c      	sub	sp, #48	@ 0x30
 8000cc8:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8000cca:	f001 f9df 	bl	800208c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError;

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000cce:	2108      	movs	r1, #8
 8000cd0:	2018      	movs	r0, #24
 8000cd2:	180b      	adds	r3, r1, r0
 8000cd4:	19db      	adds	r3, r3, r7
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	601a      	str	r2, [r3, #0]
    EraseInitStruct.Page = 31;  // Last page for 64KB device
 8000cda:	180b      	adds	r3, r1, r0
 8000cdc:	19db      	adds	r3, r3, r7
 8000cde:	221f      	movs	r2, #31
 8000ce0:	609a      	str	r2, [r3, #8]
    EraseInitStruct.NbPages = 1;
 8000ce2:	180b      	adds	r3, r1, r0
 8000ce4:	19db      	adds	r3, r3, r7
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	60da      	str	r2, [r3, #12]

    HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000cea:	231c      	movs	r3, #28
 8000cec:	18fa      	adds	r2, r7, r3
 8000cee:	180b      	adds	r3, r1, r0
 8000cf0:	19db      	adds	r3, r3, r7
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f001 fa7d 	bl	80021f4 <HAL_FLASHEx_Erase>

    // Write counters and settings
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000cfa:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <save_settings+0xbc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	491f      	ldr	r1, [pc, #124]	@ (8000d84 <save_settings+0xc0>)
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f001 f970 	bl	8001ff0 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_TOTAL_TAPS,
                     total_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <save_settings+0xc4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	491c      	ldr	r1, [pc, #112]	@ (8000d8c <save_settings+0xc8>)
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2001      	movs	r0, #1
 8000d22:	f001 f965 	bl	8001ff0 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_LEFT_TAPS,
                     left_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <save_settings+0xcc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	4918      	ldr	r1, [pc, #96]	@ (8000d94 <save_settings+0xd0>)
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2001      	movs	r0, #1
 8000d38:	f001 f95a 	bl	8001ff0 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_RIGHT_TAPS,
                     right_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000d3c:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <save_settings+0xd4>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	001c      	movs	r4, r3
 8000d42:	2300      	movs	r3, #0
 8000d44:	001d      	movs	r5, r3
 8000d46:	4915      	ldr	r1, [pc, #84]	@ (8000d9c <save_settings+0xd8>)
 8000d48:	0022      	movs	r2, r4
 8000d4a:	002b      	movs	r3, r5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f001 f94f 	bl	8001ff0 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_DISPLAY_INV,
                     (uint64_t)display_inverted);

    HAL_FLASH_Lock();
 8000d52:	f001 f9bf 	bl	80020d4 <HAL_FLASH_Lock>

    // Update last save time
    last_save_time = HAL_GetTick();
 8000d56:	f001 f83f 	bl	8001dd8 <HAL_GetTick>
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <save_settings+0xdc>)
 8000d5e:	601a      	str	r2, [r3, #0]
    data_changed = 0;  // Clear the changed flag
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <save_settings+0xe0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]

    // Trigger saved indicator
    show_saved_indicator = 1;
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <save_settings+0xe4>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
    saved_indicator_timer = HAL_GetTick();
 8000d6c:	f001 f834 	bl	8001dd8 <HAL_GetTick>
 8000d70:	0002      	movs	r2, r0
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <save_settings+0xe8>)
 8000d74:	601a      	str	r2, [r3, #0]
}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b00c      	add	sp, #48	@ 0x30
 8000d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	200001c0 	.word	0x200001c0
 8000d84:	0800f800 	.word	0x0800f800
 8000d88:	200001c4 	.word	0x200001c4
 8000d8c:	0800f808 	.word	0x0800f808
 8000d90:	200001c8 	.word	0x200001c8
 8000d94:	0800f810 	.word	0x0800f810
 8000d98:	200001bd 	.word	0x200001bd
 8000d9c:	0800f818 	.word	0x0800f818
 8000da0:	200001d8 	.word	0x200001d8
 8000da4:	200001dc 	.word	0x200001dc
 8000da8:	200001e4 	.word	0x200001e4
 8000dac:	200001e0 	.word	0x200001e0

08000db0 <check_and_save>:

// Check if it's time to save to flash
void check_and_save(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
    if (data_changed && (HAL_GetTick() - last_save_time >= FLASH_SAVE_INTERVAL)) {
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <check_and_save+0x28>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00a      	beq.n	8000dd2 <check_and_save+0x22>
 8000dbc:	f001 f80c 	bl	8001dd8 <HAL_GetTick>
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <check_and_save+0x2c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <check_and_save+0x30>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d901      	bls.n	8000dd2 <check_and_save+0x22>
        save_settings();
 8000dce:	f7ff ff79 	bl	8000cc4 <save_settings>
    }
}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200001dc 	.word	0x200001dc
 8000ddc:	200001d8 	.word	0x200001d8
 8000de0:	0000752f 	.word	0x0000752f

08000de4 <force_save>:

// Force save (for important events)
void force_save(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
    if (data_changed) {
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <force_save+0x18>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <force_save+0x10>
        save_settings();
 8000df0:	f7ff ff68 	bl	8000cc4 <save_settings>
    }
}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	200001dc 	.word	0x200001dc

08000e00 <load_settings>:

// Load all settings from flash
void load_settings(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
    // Load tap counters
    total_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_TOTAL_TAPS);
 8000e06:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <load_settings+0x78>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <load_settings+0x7c>)
 8000e0c:	601a      	str	r2, [r3, #0]
    left_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_LEFT_TAPS);
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <load_settings+0x80>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <load_settings+0x84>)
 8000e14:	601a      	str	r2, [r3, #0]
    right_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_RIGHT_TAPS);
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <load_settings+0x88>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <load_settings+0x8c>)
 8000e1c:	601a      	str	r2, [r3, #0]

    // Load display invert setting
    uint32_t invert_setting = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_DISPLAY_INV);
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e90 <load_settings+0x90>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	607b      	str	r3, [r7, #4]

    // Check for valid data (not 0xFFFFFFFF)
    if(total_taps == 0xFFFFFFFF) total_taps = 0;
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <load_settings+0x7c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	d102      	bne.n	8000e32 <load_settings+0x32>
 8000e2c:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <load_settings+0x7c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
    if(left_taps == 0xFFFFFFFF) left_taps = 0;
 8000e32:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <load_settings+0x84>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	d102      	bne.n	8000e40 <load_settings+0x40>
 8000e3a:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <load_settings+0x84>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
    if(right_taps == 0xFFFFFFFF) right_taps = 0;
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <load_settings+0x8c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	d102      	bne.n	8000e4e <load_settings+0x4e>
 8000e48:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <load_settings+0x8c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]

    // For display_inverted, only check the first byte
    if((invert_setting & 0xFF) != 0xFF) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	22ff      	movs	r2, #255	@ 0xff
 8000e52:	4013      	ands	r3, r2
 8000e54:	2bff      	cmp	r3, #255	@ 0xff
 8000e56:	d007      	beq.n	8000e68 <load_settings+0x68>
        display_inverted = (uint8_t)(invert_setting & 0x01);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4013      	ands	r3, r2
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <load_settings+0x94>)
 8000e64:	701a      	strb	r2, [r3, #0]
    } else {
        display_inverted = 0;  // Default to normal display
    }
}
 8000e66:	e002      	b.n	8000e6e <load_settings+0x6e>
        display_inverted = 0;  // Default to normal display
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <load_settings+0x94>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	0800f800 	.word	0x0800f800
 8000e7c:	200001c0 	.word	0x200001c0
 8000e80:	0800f808 	.word	0x0800f808
 8000e84:	200001c4 	.word	0x200001c4
 8000e88:	0800f810 	.word	0x0800f810
 8000e8c:	200001c8 	.word	0x200001c8
 8000e90:	0800f818 	.word	0x0800f818
 8000e94:	200001bd 	.word	0x200001bd

08000e98 <reset_all_settings>:

// Reset all counters and settings
void reset_all_settings(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    // Don't do flash operations too early
    if (HAL_GetTick() < 100) {
 8000e9c:	f000 ff9c 	bl	8001dd8 <HAL_GetTick>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	2b63      	cmp	r3, #99	@ 0x63
 8000ea4:	d802      	bhi.n	8000eac <reset_all_settings+0x14>
        HAL_Delay(100);  // Ensure system is stable
 8000ea6:	2064      	movs	r0, #100	@ 0x64
 8000ea8:	f000 ffa0 	bl	8001dec <HAL_Delay>
    }

    // Set values to defaults
    total_taps = 0;
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <reset_all_settings+0x38>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
    left_taps = 0;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <reset_all_settings+0x3c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
    right_taps = 0;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <reset_all_settings+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
    display_inverted = 0;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <reset_all_settings+0x44>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]

    // Add error checking
    save_settings();
 8000ec4:	f7ff fefe 	bl	8000cc4 <save_settings>
}
 8000ec8:	46c0      	nop			@ (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	200001c0 	.word	0x200001c0
 8000ed4:	200001c4 	.word	0x200001c4
 8000ed8:	200001c8 	.word	0x200001c8
 8000edc:	200001bd 	.word	0x200001bd

08000ee0 <update_saved_indicator>:

// Update saved indicator visibility
void update_saved_indicator(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    if (show_saved_indicator && (HAL_GetTick() - saved_indicator_timer >= SAVED_DISPLAY_TIME)) {
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <update_saved_indicator+0x2c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00c      	beq.n	8000f06 <update_saved_indicator+0x26>
 8000eec:	f000 ff74 	bl	8001dd8 <HAL_GetTick>
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <update_saved_indicator+0x30>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	1ad2      	subs	r2, r2, r3
 8000ef8:	23fa      	movs	r3, #250	@ 0xfa
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d302      	bcc.n	8000f06 <update_saved_indicator+0x26>
        show_saved_indicator = 0;
 8000f00:	4b02      	ldr	r3, [pc, #8]	@ (8000f0c <update_saved_indicator+0x2c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
    }
}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200001e4 	.word	0x200001e4
 8000f10:	200001e0 	.word	0x200001e0

08000f14 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    if (htim == &htim14)
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d101      	bne.n	8000f28 <HAL_TIM_PeriodElapsedCallback+0x14>
    {
        readPins();
 8000f24:	f7ff fadc 	bl	80004e0 <readPins>
    }
}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000168 	.word	0x20000168

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 fed1 	bl	8001ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f8bf 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f997 	bl	8001274 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f46:	f000 f92b 	bl	80011a0 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000f4a:	f000 f96d 	bl	8001228 <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f4e:	f000 f912 	bl	8001176 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	0219      	lsls	r1, r3, #8
 8000f56:	23a0      	movs	r3, #160	@ 0xa0
 8000f58:	05db      	lsls	r3, r3, #23
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f001 fb6e 	bl	800263e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000f62:	200a      	movs	r0, #10
 8000f64:	f000 ff42 	bl	8001dec <HAL_Delay>
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	0219      	lsls	r1, r3, #8
 8000f6c:	23a0      	movs	r3, #160	@ 0xa0
 8000f6e:	05db      	lsls	r3, r3, #23
 8000f70:	2201      	movs	r2, #1
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 fb63 	bl	800263e <HAL_GPIO_WritePin>
  ssd1306_Init();
 8000f78:	f000 fa66 	bl	8001448 <ssd1306_Init>


  load_settings();
 8000f7c:	f7ff ff40 	bl	8000e00 <load_settings>

  // Apply the loaded display invert setting
  ssd1306_InvertDisplay(display_inverted);
 8000f80:	4b47      	ldr	r3, [pc, #284]	@ (80010a0 <main+0x16c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 fd39 	bl	80019fc <ssd1306_InvertDisplay>

  // Initialize save time
  last_save_time = HAL_GetTick();
 8000f8a:	f000 ff25 	bl	8001dd8 <HAL_GetTick>
 8000f8e:	0002      	movs	r2, r0
 8000f90:	4b44      	ldr	r3, [pc, #272]	@ (80010a4 <main+0x170>)
 8000f92:	601a      	str	r2, [r3, #0]

  // Check button states at boot for override options
  handle_boot_overrides();
 8000f94:	f7ff fe5c 	bl	8000c50 <handle_boot_overrides>

  state_e state = IDLE;
 8000f98:	2317      	movs	r3, #23
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
  int32_t idle_cntr = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
  int32_t tap_left_cntr = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  int32_t tap_right_cntr = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  uint8_t left_state = 0;
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
  uint8_t right_state = 0;
 8000fb2:	1dbb      	adds	r3, r7, #6
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim14);
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80010a8 <main+0x174>)
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f002 feba 	bl	8003d34 <HAL_TIM_Base_Start_IT>

  while(1) {
    // Periodic tasks
    check_and_save();
 8000fc0:	f7ff fef6 	bl	8000db0 <check_and_save>
    update_saved_indicator();
 8000fc4:	f7ff ff8c 	bl	8000ee0 <update_saved_indicator>

    switch(state){
 8000fc8:	2317      	movs	r3, #23
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <main+0xa4>
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d031      	beq.n	800103a <main+0x106>
 8000fd6:	e061      	b.n	800109c <main+0x168>
    case IDLE:
        if(sw_state_left == 0 || sw_state_right == 0){
 8000fd8:	4b34      	ldr	r3, [pc, #208]	@ (80010ac <main+0x178>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <main+0xb4>
 8000fe0:	4b33      	ldr	r3, [pc, #204]	@ (80010b0 <main+0x17c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10d      	bne.n	8001004 <main+0xd0>
            draw_animation(&img_both_up);
 8000fe8:	4b32      	ldr	r3, [pc, #200]	@ (80010b4 <main+0x180>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff fa3e 	bl	800046c <draw_animation>
            ssd1306_UpdateScreen();
 8000ff0:	f000 fab0 	bl	8001554 <ssd1306_UpdateScreen>
            HAL_Delay(50);
 8000ff4:	2032      	movs	r0, #50	@ 0x32
 8000ff6:	f000 fef9 	bl	8001dec <HAL_Delay>
            state = SWITCH;
 8000ffa:	2317      	movs	r3, #23
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
            draw_animation(ani_idle[idle_cnt]);
            update_display_with_overlays();
            idle_cnt = (idle_cnt + 1) % ani_idle_LEN;
            HAL_Delay(100);
        }
        break;
 8001002:	e04b      	b.n	800109c <main+0x168>
            draw_animation(ani_idle[idle_cnt]);
 8001004:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <main+0x184>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	001a      	movs	r2, r3
 800100a:	4b2c      	ldr	r3, [pc, #176]	@ (80010bc <main+0x188>)
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	58d3      	ldr	r3, [r2, r3]
 8001010:	0018      	movs	r0, r3
 8001012:	f7ff fa2b 	bl	800046c <draw_animation>
            update_display_with_overlays();
 8001016:	f7ff fabb 	bl	8000590 <update_display_with_overlays>
            idle_cnt = (idle_cnt + 1) % ani_idle_LEN;
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <main+0x184>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	2205      	movs	r2, #5
 8001022:	0011      	movs	r1, r2
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff f9e5 	bl	80003f4 <__aeabi_idivmod>
 800102a:	000b      	movs	r3, r1
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <main+0x184>)
 8001030:	701a      	strb	r2, [r3, #0]
            HAL_Delay(100);
 8001032:	2064      	movs	r0, #100	@ 0x64
 8001034:	f000 feda 	bl	8001dec <HAL_Delay>
        break;
 8001038:	e030      	b.n	800109c <main+0x168>

    case SWITCH:
        // Handle special button combos
        handle_display_mode_switch();
 800103a:	f7ff fac1 	bl	80005c0 <handle_display_mode_switch>
        handle_invert_toggle();
 800103e:	f7ff fb0d 	bl	800065c <handle_invert_toggle>

        // Check for idle transition
        if(check_idle_transition(&idle_cntr, &left_state, &right_state)) {
 8001042:	1dba      	adds	r2, r7, #6
 8001044:	1df9      	adds	r1, r7, #7
 8001046:	2310      	movs	r3, #16
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff fc80 	bl	8000950 <check_idle_transition>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d004      	beq.n	800105e <main+0x12a>
            state = IDLE;
 8001054:	2317      	movs	r3, #23
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e013      	b.n	8001086 <main+0x152>
        }
        // Handle normal paw animations
        else if(!NONE_PRESSED) {
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <main+0x178>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d103      	bne.n	800106e <main+0x13a>
 8001066:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <main+0x17c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d00b      	beq.n	8001086 <main+0x152>
            handle_paw_animations(&left_state, &right_state,
 800106e:	2308      	movs	r3, #8
 8001070:	18fc      	adds	r4, r7, r3
 8001072:	230c      	movs	r3, #12
 8001074:	18fa      	adds	r2, r7, r3
 8001076:	1db9      	adds	r1, r7, #6
 8001078:	1df8      	adds	r0, r7, #7
 800107a:	2310      	movs	r3, #16
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	0023      	movs	r3, r4
 8001082:	f7ff fba3 	bl	80007cc <handle_paw_animations>
                                &tap_left_cntr, &tap_right_cntr, &idle_cntr);
        }

        // Handle tap decay animations
        handle_tap_decay(&tap_left_cntr, &tap_right_cntr);
 8001086:	2308      	movs	r3, #8
 8001088:	18fa      	adds	r2, r7, r3
 800108a:	230c      	movs	r3, #12
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff fb5d 	bl	8000750 <handle_tap_decay>

        // Update display with all overlays
        update_display_with_overlays();
 8001096:	f7ff fa7b 	bl	8000590 <update_display_with_overlays>
        break;
 800109a:	46c0      	nop			@ (mov r8, r8)
    check_and_save();
 800109c:	e790      	b.n	8000fc0 <main+0x8c>
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	200001bd 	.word	0x200001bd
 80010a4:	200001d8 	.word	0x200001d8
 80010a8:	20000168 	.word	0x20000168
 80010ac:	200001b4 	.word	0x200001b4
 80010b0:	200001b8 	.word	0x200001b8
 80010b4:	08004b30 	.word	0x08004b30
 80010b8:	200001bc 	.word	0x200001bc
 80010bc:	20000000 	.word	0x20000000

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b093      	sub	sp, #76	@ 0x4c
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	2414      	movs	r4, #20
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	0018      	movs	r0, r3
 80010cc:	2334      	movs	r3, #52	@ 0x34
 80010ce:	001a      	movs	r2, r3
 80010d0:	2100      	movs	r1, #0
 80010d2:	f003 f859 	bl	8004188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	0018      	movs	r0, r3
 80010da:	2310      	movs	r3, #16
 80010dc:	001a      	movs	r2, r3
 80010de:	2100      	movs	r1, #0
 80010e0:	f003 f852 	bl	8004188 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f001 ffcb 	bl	8003084 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	2202      	movs	r2, #2
 80010f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	0052      	lsls	r2, r2, #1
 80010fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80010fc:	0021      	movs	r1, r4
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2240      	movs	r2, #64	@ 0x40
 8001108:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2202      	movs	r2, #2
 800110e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2202      	movs	r2, #2
 8001114:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2208      	movs	r2, #8
 8001120:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	0292      	lsls	r2, r2, #10
 8001128:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2280      	movs	r2, #128	@ 0x80
 800112e:	0592      	lsls	r2, r2, #22
 8001130:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	187b      	adds	r3, r7, r1
 8001134:	0018      	movs	r0, r3
 8001136:	f001 ffe5 	bl	8003104 <HAL_RCC_OscConfig>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800113e:	f000 f943 	bl	80013c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2202      	movs	r2, #2
 800114c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2101      	movs	r1, #1
 8001160:	0018      	movs	r0, r3
 8001162:	f002 fadf 	bl	8003724 <HAL_RCC_ClockConfig>
 8001166:	1e03      	subs	r3, r0, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800116a:	f000 f92d 	bl	80013c8 <Error_Handler>
  }
}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b013      	add	sp, #76	@ 0x4c
 8001174:	bd90      	pop	{r4, r7, pc}

08001176 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2004      	movs	r0, #4
 8001180:	f000 ff04 	bl	8001f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001184:	2004      	movs	r0, #4
 8001186:	f000 ff16 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  /* TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2013      	movs	r0, #19
 8001190:	f000 fefc 	bl	8001f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001194:	2013      	movs	r0, #19
 8001196:	f000 ff0e 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001220 <MX_I2C1_Init+0x80>)
 80011a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00601133;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <MX_I2C1_Init+0x84>)
 80011ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ce:	4b13      	ldr	r3, [pc, #76]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011d6:	2280      	movs	r2, #128	@ 0x80
 80011d8:	0292      	lsls	r2, r2, #10
 80011da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f001 fa4a 	bl	8002678 <HAL_I2C_Init>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e8:	f000 f8ee 	bl	80013c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	015a      	lsls	r2, r3, #5
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011f2:	0011      	movs	r1, r2
 80011f4:	0018      	movs	r0, r3
 80011f6:	f001 fead 	bl	8002f54 <HAL_I2CEx_ConfigAnalogFilter>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C1_Init+0x62>
  {
    Error_Handler();
 80011fe:	f000 f8e3 	bl	80013c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_I2C1_Init+0x7c>)
 8001204:	2100      	movs	r1, #0
 8001206:	0018      	movs	r0, r3
 8001208:	f001 fef0 	bl	8002fec <HAL_I2CEx_ConfigDigitalFilter>
 800120c:	1e03      	subs	r3, r0, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C1_Init+0x74>
  {
    Error_Handler();
 8001210:	f000 f8da 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	20000114 	.word	0x20000114
 8001220:	40005400 	.word	0x40005400
 8001224:	00601133 	.word	0x00601133

08001228 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  htim14.Instance = TIM14;
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_TIM14_Init+0x40>)
 800122e:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <MX_TIM14_Init+0x44>)
 8001230:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 32-1;      // Was 100-1
 8001232:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <MX_TIM14_Init+0x40>)
 8001234:	221f      	movs	r2, #31
 8001236:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <MX_TIM14_Init+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;      // 32MHz/32/10000 = 100Hz
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <MX_TIM14_Init+0x40>)
 8001240:	4a0b      	ldr	r2, [pc, #44]	@ (8001270 <MX_TIM14_Init+0x48>)
 8001242:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <MX_TIM14_Init+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <MX_TIM14_Init+0x40>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <MX_TIM14_Init+0x40>)
 8001252:	0018      	movs	r0, r3
 8001254:	f002 fd16 	bl	8003c84 <HAL_TIM_Base_Init>
 8001258:	1e03      	subs	r3, r0, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800125c:	f000 f8b4 	bl	80013c8 <Error_Handler>
  }
}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	20000168 	.word	0x20000168
 800126c:	40002000 	.word	0x40002000
 8001270:	0000270f 	.word	0x0000270f

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b089      	sub	sp, #36	@ 0x24
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	240c      	movs	r4, #12
 800127c:	193b      	adds	r3, r7, r4
 800127e:	0018      	movs	r0, r3
 8001280:	2314      	movs	r3, #20
 8001282:	001a      	movs	r2, r3
 8001284:	2100      	movs	r1, #0
 8001286:	f002 ff7f 	bl	8004188 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b4a      	ldr	r3, [pc, #296]	@ (80013b4 <MX_GPIO_Init+0x140>)
 800128c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800128e:	4b49      	ldr	r3, [pc, #292]	@ (80013b4 <MX_GPIO_Init+0x140>)
 8001290:	2102      	movs	r1, #2
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34
 8001296:	4b47      	ldr	r3, [pc, #284]	@ (80013b4 <MX_GPIO_Init+0x140>)
 8001298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129a:	2202      	movs	r2, #2
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b44      	ldr	r3, [pc, #272]	@ (80013b4 <MX_GPIO_Init+0x140>)
 80012a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012a6:	4b43      	ldr	r3, [pc, #268]	@ (80013b4 <MX_GPIO_Init+0x140>)
 80012a8:	2104      	movs	r1, #4
 80012aa:	430a      	orrs	r2, r1
 80012ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ae:	4b41      	ldr	r3, [pc, #260]	@ (80013b4 <MX_GPIO_Init+0x140>)
 80012b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b2:	2204      	movs	r2, #4
 80012b4:	4013      	ands	r3, r2
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b3e      	ldr	r3, [pc, #248]	@ (80013b4 <MX_GPIO_Init+0x140>)
 80012bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012be:	4b3d      	ldr	r3, [pc, #244]	@ (80013b4 <MX_GPIO_Init+0x140>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	430a      	orrs	r2, r1
 80012c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80012c6:	4b3b      	ldr	r3, [pc, #236]	@ (80013b4 <MX_GPIO_Init+0x140>)
 80012c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ca:	2201      	movs	r2, #1
 80012cc:	4013      	ands	r3, r2
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80012d2:	2380      	movs	r3, #128	@ 0x80
 80012d4:	0219      	lsls	r1, r3, #8
 80012d6:	23a0      	movs	r3, #160	@ 0xa0
 80012d8:	05db      	lsls	r3, r3, #23
 80012da:	2200      	movs	r2, #0
 80012dc:	0018      	movs	r0, r3
 80012de:	f001 f9ae 	bl	800263e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 80012e2:	193b      	adds	r3, r7, r4
 80012e4:	4a34      	ldr	r2, [pc, #208]	@ (80013b8 <MX_GPIO_Init+0x144>)
 80012e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e8:	193b      	adds	r3, r7, r4
 80012ea:	2203      	movs	r2, #3
 80012ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	4a31      	ldr	r2, [pc, #196]	@ (80013bc <MX_GPIO_Init+0x148>)
 80012f8:	0019      	movs	r1, r3
 80012fa:	0010      	movs	r0, r2
 80012fc:	f001 f81e 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 PA8
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001300:	193b      	adds	r3, r7, r4
 8001302:	4a2f      	ldr	r2, [pc, #188]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 8001304:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	193b      	adds	r3, r7, r4
 8001308:	2203      	movs	r2, #3
 800130a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	193b      	adds	r3, r7, r4
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	193a      	adds	r2, r7, r4
 8001314:	23a0      	movs	r3, #160	@ 0xa0
 8001316:	05db      	lsls	r3, r3, #23
 8001318:	0011      	movs	r1, r2
 800131a:	0018      	movs	r0, r3
 800131c:	f001 f80e 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_LEFT_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin;
 8001320:	193b      	adds	r3, r7, r4
 8001322:	2240      	movs	r2, #64	@ 0x40
 8001324:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	193b      	adds	r3, r7, r4
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	193b      	adds	r3, r7, r4
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001332:	193a      	adds	r2, r7, r4
 8001334:	23a0      	movs	r3, #160	@ 0xa0
 8001336:	05db      	lsls	r3, r3, #23
 8001338:	0011      	movs	r1, r2
 800133a:	0018      	movs	r0, r3
 800133c:	f000 fffe 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 8001340:	193b      	adds	r3, r7, r4
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001346:	193b      	adds	r3, r7, r4
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	193b      	adds	r3, r7, r4
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001352:	193b      	adds	r3, r7, r4
 8001354:	4a1b      	ldr	r2, [pc, #108]	@ (80013c4 <MX_GPIO_Init+0x150>)
 8001356:	0019      	movs	r1, r3
 8001358:	0010      	movs	r0, r2
 800135a:	f000 ffef 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800135e:	0021      	movs	r1, r4
 8001360:	187b      	adds	r3, r7, r1
 8001362:	22ff      	movs	r2, #255	@ 0xff
 8001364:	0052      	lsls	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001368:	000c      	movs	r4, r1
 800136a:	193b      	adds	r3, r7, r4
 800136c:	2203      	movs	r2, #3
 800136e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	193b      	adds	r3, r7, r4
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	193b      	adds	r3, r7, r4
 8001378:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <MX_GPIO_Init+0x150>)
 800137a:	0019      	movs	r1, r3
 800137c:	0010      	movs	r0, r2
 800137e:	f000 ffdd 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8001382:	0021      	movs	r1, r4
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	0212      	lsls	r2, r2, #8
 800138a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2201      	movs	r2, #1
 8001390:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 800139e:	187a      	adds	r2, r7, r1
 80013a0:	23a0      	movs	r3, #160	@ 0xa0
 80013a2:	05db      	lsls	r3, r3, #23
 80013a4:	0011      	movs	r1, r2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 ffc8 	bl	800233c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013ac:	46c0      	nop			@ (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b009      	add	sp, #36	@ 0x24
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	40021000 	.word	0x40021000
 80013b8:	0000c040 	.word	0x0000c040
 80013bc:	50000800 	.word	0x50000800
 80013c0:	00001dbf 	.word	0x00001dbf
 80013c4:	50000400 	.word	0x50000400

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	46c0      	nop			@ (mov r8, r8)
 80013d2:	e7fd      	b.n	80013d0 <Error_Handler+0x8>

080013d4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80013d8:	46c0      	nop			@ (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	0002      	movs	r2, r0
 80013e8:	1dfb      	adds	r3, r7, #7
 80013ea:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <ssd1306_WriteCommand+0x30>)
 80013ee:	2301      	movs	r3, #1
 80013f0:	425b      	negs	r3, r3
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2301      	movs	r3, #1
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	2200      	movs	r2, #0
 8001400:	2178      	movs	r1, #120	@ 0x78
 8001402:	f001 f9df 	bl	80027c4 <HAL_I2C_Mem_Write>
}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	20000114 	.word	0x20000114

08001414 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af04      	add	r7, sp, #16
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4808      	ldr	r0, [pc, #32]	@ (8001444 <ssd1306_WriteData+0x30>)
 8001424:	2201      	movs	r2, #1
 8001426:	4252      	negs	r2, r2
 8001428:	9202      	str	r2, [sp, #8]
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2301      	movs	r3, #1
 8001432:	2240      	movs	r2, #64	@ 0x40
 8001434:	2178      	movs	r1, #120	@ 0x78
 8001436:	f001 f9c5 	bl	80027c4 <HAL_I2C_Mem_Write>
}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	20000114 	.word	0x20000114

08001448 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800144c:	f7ff ffc2 	bl	80013d4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001450:	2064      	movs	r0, #100	@ 0x64
 8001452:	f000 fccb 	bl	8001dec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001456:	2000      	movs	r0, #0
 8001458:	f000 faaa 	bl	80019b0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800145c:	2020      	movs	r0, #32
 800145e:	f7ff ffbf 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ffbc 	bl	80013e0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001468:	20b0      	movs	r0, #176	@ 0xb0
 800146a:	f7ff ffb9 	bl	80013e0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 800146e:	20c0      	movs	r0, #192	@ 0xc0
 8001470:	f7ff ffb6 	bl	80013e0 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff ffb3 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800147a:	2010      	movs	r0, #16
 800147c:	f7ff ffb0 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001480:	2040      	movs	r0, #64	@ 0x40
 8001482:	f7ff ffad 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);//FF
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	f000 fa79 	bl	800197e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 800148c:	20a0      	movs	r0, #160	@ 0xa0
 800148e:	f7ff ffa7 	bl	80013e0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001492:	20a6      	movs	r0, #166	@ 0xa6
 8001494:	f7ff ffa4 	bl	80013e0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001498:	20a8      	movs	r0, #168	@ 0xa8
 800149a:	f7ff ffa1 	bl	80013e0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800149e:	203f      	movs	r0, #63	@ 0x3f
 80014a0:	f7ff ff9e 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014a4:	20a4      	movs	r0, #164	@ 0xa4
 80014a6:	f7ff ff9b 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80014aa:	20d3      	movs	r0, #211	@ 0xd3
 80014ac:	f7ff ff98 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff ff95 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80014b6:	20d5      	movs	r0, #213	@ 0xd5
 80014b8:	f7ff ff92 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80014bc:	20f0      	movs	r0, #240	@ 0xf0
 80014be:	f7ff ff8f 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80014c2:	20d9      	movs	r0, #217	@ 0xd9
 80014c4:	f7ff ff8c 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80014c8:	2022      	movs	r0, #34	@ 0x22
 80014ca:	f7ff ff89 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80014ce:	20da      	movs	r0, #218	@ 0xda
 80014d0:	f7ff ff86 	bl	80013e0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80014d4:	2012      	movs	r0, #18
 80014d6:	f7ff ff83 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80014da:	20db      	movs	r0, #219	@ 0xdb
 80014dc:	f7ff ff80 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80014e0:	2020      	movs	r0, #32
 80014e2:	f7ff ff7d 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80014e6:	208d      	movs	r0, #141	@ 0x8d
 80014e8:	f7ff ff7a 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80014ec:	2014      	movs	r0, #20
 80014ee:	f7ff ff77 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80014f2:	2001      	movs	r0, #1
 80014f4:	f000 fa5c 	bl	80019b0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80014f8:	2000      	movs	r0, #0
 80014fa:	f000 f811 	bl	8001520 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80014fe:	f000 f829 	bl	8001554 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <ssd1306_Init+0xd4>)
 8001504:	2200      	movs	r2, #0
 8001506:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001508:	4b04      	ldr	r3, [pc, #16]	@ (800151c <ssd1306_Init+0xd4>)
 800150a:	2200      	movs	r2, #0
 800150c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800150e:	4b03      	ldr	r3, [pc, #12]	@ (800151c <ssd1306_Init+0xd4>)
 8001510:	2201      	movs	r2, #1
 8001512:	711a      	strb	r2, [r3, #4]
}
 8001514:	46c0      	nop			@ (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	200005f8 	.word	0x200005f8

08001520 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	0002      	movs	r2, r0
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800152c:	1dfb      	adds	r3, r7, #7
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <ssd1306_Fill+0x18>
 8001534:	2300      	movs	r3, #0
 8001536:	e000      	b.n	800153a <ssd1306_Fill+0x1a>
 8001538:	23ff      	movs	r3, #255	@ 0xff
 800153a:	2282      	movs	r2, #130	@ 0x82
 800153c:	00d2      	lsls	r2, r2, #3
 800153e:	4804      	ldr	r0, [pc, #16]	@ (8001550 <ssd1306_Fill+0x30>)
 8001540:	0019      	movs	r1, r3
 8001542:	f002 fe21 	bl	8004188 <memset>
}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	200001e8 	.word	0x200001e8

08001554 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	e01e      	b.n	80015a0 <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	3b50      	subs	r3, #80	@ 0x50
 8001568:	b2db      	uxtb	r3, r3
 800156a:	0018      	movs	r0, r3
 800156c:	f7ff ff38 	bl	80013e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff ff35 	bl	80013e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001576:	2010      	movs	r0, #16
 8001578:	f7ff ff32 	bl	80013e0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	0013      	movs	r3, r2
 8001582:	019b      	lsls	r3, r3, #6
 8001584:	189b      	adds	r3, r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	001a      	movs	r2, r3
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <ssd1306_UpdateScreen+0x60>)
 800158c:	18d3      	adds	r3, r2, r3
 800158e:	2182      	movs	r1, #130	@ 0x82
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff ff3f 	bl	8001414 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	3201      	adds	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b07      	cmp	r3, #7
 80015a6:	d9dc      	bls.n	8001562 <ssd1306_UpdateScreen+0xe>
    }
}
 80015a8:	46c0      	nop			@ (mov r8, r8)
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	200001e8 	.word	0x200001e8

080015b8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	0004      	movs	r4, r0
 80015c0:	0008      	movs	r0, r1
 80015c2:	0011      	movs	r1, r2
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	1c22      	adds	r2, r4, #0
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	1dbb      	adds	r3, r7, #6
 80015cc:	1c02      	adds	r2, r0, #0
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	1d7b      	adds	r3, r7, #5
 80015d2:	1c0a      	adds	r2, r1, #0
 80015d4:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b81      	cmp	r3, #129	@ 0x81
 80015dc:	d853      	bhi.n	8001686 <ssd1306_DrawPixel+0xce>
 80015de:	1dbb      	adds	r3, r7, #6
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80015e4:	d84f      	bhi.n	8001686 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80015e6:	1d7b      	adds	r3, r7, #5
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d124      	bne.n	8001638 <ssd1306_DrawPixel+0x80>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	1dbb      	adds	r3, r7, #6
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	b2d8      	uxtb	r0, r3
 80015fa:	0001      	movs	r1, r0
 80015fc:	000b      	movs	r3, r1
 80015fe:	019b      	lsls	r3, r3, #6
 8001600:	185b      	adds	r3, r3, r1
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	18d3      	adds	r3, r2, r3
 8001606:	4a22      	ldr	r2, [pc, #136]	@ (8001690 <ssd1306_DrawPixel+0xd8>)
 8001608:	5cd3      	ldrb	r3, [r2, r3]
 800160a:	b25a      	sxtb	r2, r3
 800160c:	1dbb      	adds	r3, r7, #6
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2107      	movs	r1, #7
 8001612:	400b      	ands	r3, r1
 8001614:	2101      	movs	r1, #1
 8001616:	4099      	lsls	r1, r3
 8001618:	000b      	movs	r3, r1
 800161a:	b25b      	sxtb	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b25c      	sxtb	r4, r3
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	0001      	movs	r1, r0
 8001626:	000b      	movs	r3, r1
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	185b      	adds	r3, r3, r1
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	18d3      	adds	r3, r2, r3
 8001630:	b2e1      	uxtb	r1, r4
 8001632:	4a17      	ldr	r2, [pc, #92]	@ (8001690 <ssd1306_DrawPixel+0xd8>)
 8001634:	54d1      	strb	r1, [r2, r3]
 8001636:	e027      	b.n	8001688 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	1dbb      	adds	r3, r7, #6
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	b2d8      	uxtb	r0, r3
 8001644:	0001      	movs	r1, r0
 8001646:	000b      	movs	r3, r1
 8001648:	019b      	lsls	r3, r3, #6
 800164a:	185b      	adds	r3, r3, r1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	18d3      	adds	r3, r2, r3
 8001650:	4a0f      	ldr	r2, [pc, #60]	@ (8001690 <ssd1306_DrawPixel+0xd8>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	b25b      	sxtb	r3, r3
 8001656:	1dba      	adds	r2, r7, #6
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	2107      	movs	r1, #7
 800165c:	400a      	ands	r2, r1
 800165e:	2101      	movs	r1, #1
 8001660:	4091      	lsls	r1, r2
 8001662:	000a      	movs	r2, r1
 8001664:	b252      	sxtb	r2, r2
 8001666:	43d2      	mvns	r2, r2
 8001668:	b252      	sxtb	r2, r2
 800166a:	4013      	ands	r3, r2
 800166c:	b25c      	sxtb	r4, r3
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	0001      	movs	r1, r0
 8001674:	000b      	movs	r3, r1
 8001676:	019b      	lsls	r3, r3, #6
 8001678:	185b      	adds	r3, r3, r1
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	18d3      	adds	r3, r2, r3
 800167e:	b2e1      	uxtb	r1, r4
 8001680:	4a03      	ldr	r2, [pc, #12]	@ (8001690 <ssd1306_DrawPixel+0xd8>)
 8001682:	54d1      	strb	r1, [r2, r3]
 8001684:	e000      	b.n	8001688 <ssd1306_DrawPixel+0xd0>
        return;
 8001686:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001688:	46bd      	mov	sp, r7
 800168a:	b003      	add	sp, #12
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	200001e8 	.word	0x200001e8

08001694 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	0004      	movs	r4, r0
 800169c:	0038      	movs	r0, r7
 800169e:	6001      	str	r1, [r0, #0]
 80016a0:	6042      	str	r2, [r0, #4]
 80016a2:	6083      	str	r3, [r0, #8]
 80016a4:	210f      	movs	r1, #15
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	1c22      	adds	r2, r4, #0
 80016aa:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80016ac:	000a      	movs	r2, r1
 80016ae:	18bb      	adds	r3, r7, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b1f      	cmp	r3, #31
 80016b4:	d903      	bls.n	80016be <ssd1306_WriteChar+0x2a>
 80016b6:	18bb      	adds	r3, r7, r2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b7e      	cmp	r3, #126	@ 0x7e
 80016bc:	d901      	bls.n	80016c2 <ssd1306_WriteChar+0x2e>
        return 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	e084      	b.n	80017cc <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80016c2:	4b44      	ldr	r3, [pc, #272]	@ (80017d4 <ssd1306_WriteChar+0x140>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	001a      	movs	r2, r3
 80016c8:	003b      	movs	r3, r7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	18d3      	adds	r3, r2, r3
 80016ce:	2b82      	cmp	r3, #130	@ 0x82
 80016d0:	dc07      	bgt.n	80016e2 <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80016d2:	4b40      	ldr	r3, [pc, #256]	@ (80017d4 <ssd1306_WriteChar+0x140>)
 80016d4:	885b      	ldrh	r3, [r3, #2]
 80016d6:	001a      	movs	r2, r3
 80016d8:	003b      	movs	r3, r7
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80016de:	2b40      	cmp	r3, #64	@ 0x40
 80016e0:	dd01      	ble.n	80016e6 <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e072      	b.n	80017cc <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e051      	b.n	8001790 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 80016ec:	003b      	movs	r3, r7
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	230f      	movs	r3, #15
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	3b20      	subs	r3, #32
 80016f8:	0039      	movs	r1, r7
 80016fa:	7849      	ldrb	r1, [r1, #1]
 80016fc:	434b      	muls	r3, r1
 80016fe:	0019      	movs	r1, r3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	18cb      	adds	r3, r1, r3
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	18d3      	adds	r3, r2, r3
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	e035      	b.n	800177e <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	409a      	lsls	r2, r3
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	4013      	ands	r3, r2
 800171e:	d014      	beq.n	800174a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001720:	4b2c      	ldr	r3, [pc, #176]	@ (80017d4 <ssd1306_WriteChar+0x140>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	18d3      	adds	r3, r2, r3
 800172c:	b2d8      	uxtb	r0, r3
 800172e:	4b29      	ldr	r3, [pc, #164]	@ (80017d4 <ssd1306_WriteChar+0x140>)
 8001730:	885b      	ldrh	r3, [r3, #2]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	18d3      	adds	r3, r2, r3
 800173a:	b2d9      	uxtb	r1, r3
 800173c:	2330      	movs	r3, #48	@ 0x30
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	001a      	movs	r2, r3
 8001744:	f7ff ff38 	bl	80015b8 <ssd1306_DrawPixel>
 8001748:	e016      	b.n	8001778 <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800174a:	4b22      	ldr	r3, [pc, #136]	@ (80017d4 <ssd1306_WriteChar+0x140>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	18d3      	adds	r3, r2, r3
 8001756:	b2d8      	uxtb	r0, r3
 8001758:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <ssd1306_WriteChar+0x140>)
 800175a:	885b      	ldrh	r3, [r3, #2]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	18d3      	adds	r3, r2, r3
 8001764:	b2d9      	uxtb	r1, r3
 8001766:	2330      	movs	r3, #48	@ 0x30
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	425a      	negs	r2, r3
 800176e:	4153      	adcs	r3, r2
 8001770:	b2db      	uxtb	r3, r3
 8001772:	001a      	movs	r2, r3
 8001774:	f7ff ff20 	bl	80015b8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	3301      	adds	r3, #1
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	003b      	movs	r3, r7
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	001a      	movs	r2, r3
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	4293      	cmp	r3, r2
 8001788:	d3c3      	bcc.n	8001712 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3301      	adds	r3, #1
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	003b      	movs	r3, r7
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	001a      	movs	r2, r3
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	4293      	cmp	r3, r2
 800179a:	d3a7      	bcc.n	80016ec <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800179c:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <ssd1306_WriteChar+0x140>)
 800179e:	881a      	ldrh	r2, [r3, #0]
 80017a0:	003b      	movs	r3, r7
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <ssd1306_WriteChar+0x126>
 80017a8:	003b      	movs	r3, r7
 80017aa:	6899      	ldr	r1, [r3, #8]
 80017ac:	230f      	movs	r3, #15
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	3b20      	subs	r3, #32
 80017b4:	18cb      	adds	r3, r1, r3
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	e001      	b.n	80017be <ssd1306_WriteChar+0x12a>
 80017ba:	003b      	movs	r3, r7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	189b      	adds	r3, r3, r2
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <ssd1306_WriteChar+0x140>)
 80017c4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80017c6:	230f      	movs	r3, #15
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	781b      	ldrb	r3, [r3, #0]
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b009      	add	sp, #36	@ 0x24
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	200005f8 	.word	0x200005f8

080017d8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	0038      	movs	r0, r7
 80017e2:	6001      	str	r1, [r0, #0]
 80017e4:	6042      	str	r2, [r0, #4]
 80017e6:	6083      	str	r3, [r0, #8]
    while (*str) {
 80017e8:	e017      	b.n	800181a <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	7818      	ldrb	r0, [r3, #0]
 80017ee:	003b      	movs	r3, r7
 80017f0:	2218      	movs	r2, #24
 80017f2:	18ba      	adds	r2, r7, r2
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	9200      	str	r2, [sp, #0]
 80017f8:	6819      	ldr	r1, [r3, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f7ff ff49 	bl	8001694 <ssd1306_WriteChar>
 8001802:	0003      	movs	r3, r0
 8001804:	001a      	movs	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d002      	beq.n	8001814 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	e008      	b.n	8001826 <ssd1306_WriteString+0x4e>
        }
        str++;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3301      	adds	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1e3      	bne.n	80017ea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	781b      	ldrb	r3, [r3, #0]
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b004      	add	sp, #16
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	0002      	movs	r2, r0
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	1dbb      	adds	r3, r7, #6
 800183e:	1c0a      	adds	r2, r1, #0
 8001840:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <ssd1306_SetCursor+0x30>)
 800184a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800184c:	1dbb      	adds	r3, r7, #6
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <ssd1306_SetCursor+0x30>)
 8001854:	805a      	strh	r2, [r3, #2]
}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	200005f8 	.word	0x200005f8

08001864 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	0004      	movs	r4, r0
 800186c:	0008      	movs	r0, r1
 800186e:	603a      	str	r2, [r7, #0]
 8001870:	0019      	movs	r1, r3
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	1c22      	adds	r2, r4, #0
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	1dbb      	adds	r3, r7, #6
 800187a:	1c02      	adds	r2, r0, #0
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	1d7b      	adds	r3, r7, #5
 8001880:	1c0a      	adds	r2, r1, #0
 8001882:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001884:	1d7b      	adds	r3, r7, #5
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	3307      	adds	r3, #7
 800188a:	2b00      	cmp	r3, #0
 800188c:	da00      	bge.n	8001890 <ssd1306_DrawBitmap+0x2c>
 800188e:	3307      	adds	r3, #7
 8001890:	10db      	asrs	r3, r3, #3
 8001892:	001a      	movs	r2, r3
 8001894:	230a      	movs	r3, #10
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 800189a:	230f      	movs	r3, #15
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b81      	cmp	r3, #129	@ 0x81
 80018a8:	d865      	bhi.n	8001976 <ssd1306_DrawBitmap+0x112>
 80018aa:	1dbb      	adds	r3, r7, #6
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80018b0:	d861      	bhi.n	8001976 <ssd1306_DrawBitmap+0x112>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80018b2:	230e      	movs	r3, #14
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	e053      	b.n	8001964 <ssd1306_DrawBitmap+0x100>
        for (uint8_t i = 0; i < w; i++) {
 80018bc:	230d      	movs	r3, #13
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e03c      	b.n	8001940 <ssd1306_DrawBitmap+0xdc>
            if (i & 7) {
 80018c6:	230d      	movs	r3, #13
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2207      	movs	r2, #7
 80018ce:	4013      	ands	r3, r2
 80018d0:	d006      	beq.n	80018e0 <ssd1306_DrawBitmap+0x7c>
                byte <<= 1;
 80018d2:	230f      	movs	r3, #15
 80018d4:	18fa      	adds	r2, r7, r3
 80018d6:	18fb      	adds	r3, r7, r3
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	18db      	adds	r3, r3, r3
 80018dc:	7013      	strb	r3, [r2, #0]
 80018de:	e014      	b.n	800190a <ssd1306_DrawBitmap+0xa6>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80018e0:	230e      	movs	r3, #14
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	220a      	movs	r2, #10
 80018e8:	18ba      	adds	r2, r7, r2
 80018ea:	2100      	movs	r1, #0
 80018ec:	5e52      	ldrsh	r2, [r2, r1]
 80018ee:	4353      	muls	r3, r2
 80018f0:	220d      	movs	r2, #13
 80018f2:	18ba      	adds	r2, r7, r2
 80018f4:	7812      	ldrb	r2, [r2, #0]
 80018f6:	08d2      	lsrs	r2, r2, #3
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	189b      	adds	r3, r3, r2
 80018fc:	001a      	movs	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	189a      	adds	r2, r3, r2
 8001902:	230f      	movs	r3, #15
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	7812      	ldrb	r2, [r2, #0]
 8001908:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 800190a:	230f      	movs	r3, #15
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b25b      	sxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	da0e      	bge.n	8001934 <ssd1306_DrawBitmap+0xd0>
                ssd1306_DrawPixel(x + i, y, color);
 8001916:	1dfa      	adds	r2, r7, #7
 8001918:	230d      	movs	r3, #13
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	18d3      	adds	r3, r2, r3
 8001922:	b2d8      	uxtb	r0, r3
 8001924:	2324      	movs	r3, #36	@ 0x24
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	1dbb      	adds	r3, r7, #6
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	0019      	movs	r1, r3
 8001930:	f7ff fe42 	bl	80015b8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001934:	210d      	movs	r1, #13
 8001936:	187b      	adds	r3, r7, r1
 8001938:	781a      	ldrb	r2, [r3, #0]
 800193a:	187b      	adds	r3, r7, r1
 800193c:	3201      	adds	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	230d      	movs	r3, #13
 8001942:	18fa      	adds	r2, r7, r3
 8001944:	1d7b      	adds	r3, r7, #5
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d3bb      	bcc.n	80018c6 <ssd1306_DrawBitmap+0x62>
    for (uint8_t j = 0; j < h; j++, y++) {
 800194e:	210e      	movs	r1, #14
 8001950:	187b      	adds	r3, r7, r1
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	187b      	adds	r3, r7, r1
 8001956:	3201      	adds	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	1dbb      	adds	r3, r7, #6
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	1dbb      	adds	r3, r7, #6
 8001960:	3201      	adds	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	230e      	movs	r3, #14
 8001966:	18fa      	adds	r2, r7, r3
 8001968:	2320      	movs	r3, #32
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d3a3      	bcc.n	80018bc <ssd1306_DrawBitmap+0x58>
            }
        }
    }
    return;
 8001974:	e000      	b.n	8001978 <ssd1306_DrawBitmap+0x114>
        return;
 8001976:	46c0      	nop			@ (mov r8, r8)
}
 8001978:	46bd      	mov	sp, r7
 800197a:	b005      	add	sp, #20
 800197c:	bd90      	pop	{r4, r7, pc}

0800197e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	0002      	movs	r2, r0
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 800198a:	210f      	movs	r1, #15
 800198c:	187b      	adds	r3, r7, r1
 800198e:	2281      	movs	r2, #129	@ 0x81
 8001990:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001992:	187b      	adds	r3, r7, r1
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	0018      	movs	r0, r3
 8001998:	f7ff fd22 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7ff fd1d 	bl	80013e0 <ssd1306_WriteCommand>
}
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b004      	add	sp, #16
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	0002      	movs	r2, r0
 80019b8:	1dfb      	adds	r3, r7, #7
 80019ba:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80019bc:	1dfb      	adds	r3, r7, #7
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80019c4:	230f      	movs	r3, #15
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	22af      	movs	r2, #175	@ 0xaf
 80019ca:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <ssd1306_SetDisplayOn+0x48>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	715a      	strb	r2, [r3, #5]
 80019d2:	e006      	b.n	80019e2 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80019d4:	230f      	movs	r3, #15
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	22ae      	movs	r2, #174	@ 0xae
 80019da:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <ssd1306_SetDisplayOn+0x48>)
 80019de:	2200      	movs	r2, #0
 80019e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80019e2:	230f      	movs	r3, #15
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff fcf9 	bl	80013e0 <ssd1306_WriteCommand>
}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b004      	add	sp, #16
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			@ (mov r8, r8)
 80019f8:	200005f8 	.word	0x200005f8

080019fc <ssd1306_InvertDisplay>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_InvertDisplay(uint8_t invert) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	0002      	movs	r2, r0
 8001a04:	1dfb      	adds	r3, r7, #7
 8001a06:	701a      	strb	r2, [r3, #0]
    if (invert) {
 8001a08:	1dfb      	adds	r3, r7, #7
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <ssd1306_InvertDisplay+0x1c>
        ssd1306_WriteCommand(0xA7); // Inverted display mode
 8001a10:	20a7      	movs	r0, #167	@ 0xa7
 8001a12:	f7ff fce5 	bl	80013e0 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xA6); // Normal display mode
    }
}
 8001a16:	e002      	b.n	8001a1e <ssd1306_InvertDisplay+0x22>
        ssd1306_WriteCommand(0xA6); // Normal display mode
 8001a18:	20a6      	movs	r0, #166	@ 0xa6
 8001a1a:	f7ff fce1 	bl	80013e0 <ssd1306_WriteCommand>
}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_MspInit>:
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a32:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a4a:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a4c:	2180      	movs	r1, #128	@ 0x80
 8001a4e:	0549      	lsls	r1, r1, #21
 8001a50:	430a      	orrs	r2, r1
 8001a52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a58:	2380      	movs	r3, #128	@ 0x80
 8001a5a:	055b      	lsls	r3, r3, #21
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b002      	add	sp, #8
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			@ (mov r8, r8)
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_I2C_MspInit>:
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b091      	sub	sp, #68	@ 0x44
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	232c      	movs	r3, #44	@ 0x2c
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	2314      	movs	r3, #20
 8001a80:	001a      	movs	r2, r3
 8001a82:	2100      	movs	r1, #0
 8001a84:	f002 fb80 	bl	8004188 <memset>
 8001a88:	2414      	movs	r4, #20
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	2318      	movs	r3, #24
 8001a90:	001a      	movs	r2, r3
 8001a92:	2100      	movs	r1, #0
 8001a94:	f002 fb78 	bl	8004188 <memset>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a35      	ldr	r2, [pc, #212]	@ (8001b74 <HAL_I2C_MspInit+0x104>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d163      	bne.n	8001b6a <HAL_I2C_MspInit+0xfa>
 8001aa2:	193b      	adds	r3, r7, r4
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	193b      	adds	r3, r7, r4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	193b      	adds	r3, r7, r4
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f001 ffc1 	bl	8003a38 <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	1e03      	subs	r3, r0, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_I2C_MspInit+0x4e>
 8001aba:	f7ff fc85 	bl	80013c8 <Error_Handler>
 8001abe:	4b2e      	ldr	r3, [pc, #184]	@ (8001b78 <HAL_I2C_MspInit+0x108>)
 8001ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b78 <HAL_I2C_MspInit+0x108>)
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aca:	4b2b      	ldr	r3, [pc, #172]	@ (8001b78 <HAL_I2C_MspInit+0x108>)
 8001acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4b28      	ldr	r3, [pc, #160]	@ (8001b78 <HAL_I2C_MspInit+0x108>)
 8001ad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ada:	4b27      	ldr	r3, [pc, #156]	@ (8001b78 <HAL_I2C_MspInit+0x108>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ae2:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <HAL_I2C_MspInit+0x108>)
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	212c      	movs	r1, #44	@ 0x2c
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	2280      	movs	r2, #128	@ 0x80
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	000c      	movs	r4, r1
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	2212      	movs	r2, #18
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	193b      	adds	r3, r7, r4
 8001b02:	2201      	movs	r2, #1
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	193b      	adds	r3, r7, r4
 8001b08:	2203      	movs	r2, #3
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	193b      	adds	r3, r7, r4
 8001b0e:	2206      	movs	r2, #6
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	193b      	adds	r3, r7, r4
 8001b14:	4a19      	ldr	r2, [pc, #100]	@ (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001b16:	0019      	movs	r1, r3
 8001b18:	0010      	movs	r0, r2
 8001b1a:	f000 fc0f 	bl	800233c <HAL_GPIO_Init>
 8001b1e:	0021      	movs	r1, r4
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	2280      	movs	r2, #128	@ 0x80
 8001b24:	0092      	lsls	r2, r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	2212      	movs	r2, #18
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	2201      	movs	r2, #1
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	2203      	movs	r2, #3
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	2206      	movs	r2, #6
 8001b3e:	611a      	str	r2, [r3, #16]
 8001b40:	187a      	adds	r2, r7, r1
 8001b42:	23a0      	movs	r3, #160	@ 0xa0
 8001b44:	05db      	lsls	r3, r3, #23
 8001b46:	0011      	movs	r1, r2
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 fbf7 	bl	800233c <HAL_GPIO_Init>
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <HAL_I2C_MspInit+0x108>)
 8001b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_I2C_MspInit+0x108>)
 8001b54:	2180      	movs	r1, #128	@ 0x80
 8001b56:	0389      	lsls	r1, r1, #14
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_I2C_MspInit+0x108>)
 8001b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b60:	2380      	movs	r3, #128	@ 0x80
 8001b62:	039b      	lsls	r3, r3, #14
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	46c0      	nop			@ (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b011      	add	sp, #68	@ 0x44
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	40005400 	.word	0x40005400
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	50000400 	.word	0x50000400

08001b80 <HAL_TIM_Base_MspInit>:
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x38>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10d      	bne.n	8001bae <HAL_TIM_Base_MspInit+0x2e>
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_TIM_Base_MspInit+0x3c>)
 8001b94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_TIM_Base_MspInit+0x3c>)
 8001b98:	2180      	movs	r1, #128	@ 0x80
 8001b9a:	0209      	lsls	r1, r1, #8
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_TIM_Base_MspInit+0x3c>)
 8001ba2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	40002000 	.word	0x40002000
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <NMI_Handler>:
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	46c0      	nop			@ (mov r8, r8)
 8001bc6:	e7fd      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc8 <HardFault_Handler>:
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	46c0      	nop			@ (mov r8, r8)
 8001bce:	e7fd      	b.n	8001bcc <HardFault_Handler+0x4>

08001bd0 <SVC_Handler>:
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	46c0      	nop			@ (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <PendSV_Handler>:
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <SysTick_Handler>:
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	f000 f8e4 	bl	8001db4 <HAL_IncTick>
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <RCC_IRQHandler>:
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <TIM14_IRQHandler>:
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <TIM14_IRQHandler+0x14>)
 8001c02:	0018      	movs	r0, r3
 8001c04:	f002 f8e4 	bl	8003dd0 <HAL_TIM_IRQHandler>
 8001c08:	46c0      	nop			@ (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	20000168 	.word	0x20000168

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	@ (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	@ (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	18d3      	adds	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f002 faa8 	bl	8004198 <__errno>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	425b      	negs	r3, r3
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	18d2      	adds	r2, r2, r3
 8001c62:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <_sbrk+0x64>)
 8001c64:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b006      	add	sp, #24
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20002000 	.word	0x20002000
 8001c74:	00000400 	.word	0x00000400
 8001c78:	20000600 	.word	0x20000600
 8001c7c:	20000770 	.word	0x20000770

08001c80 <SystemInit>:
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	46c0      	nop			@ (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c8c:	480d      	ldr	r0, [pc, #52]	@ (8001cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c90:	f7ff fff6 	bl	8001c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c94:	480c      	ldr	r0, [pc, #48]	@ (8001cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c96:	490d      	ldr	r1, [pc, #52]	@ (8001ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <LoopForever+0xe>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c9c:	e002      	b.n	8001ca4 <LoopCopyDataInit>

08001c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca2:	3304      	adds	r3, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca8:	d3f9      	bcc.n	8001c9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001caa:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cac:	4c0a      	ldr	r4, [pc, #40]	@ (8001cd8 <LoopForever+0x16>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb0:	e001      	b.n	8001cb6 <LoopFillZerobss>

08001cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb4:	3204      	adds	r2, #4

08001cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb8:	d3fb      	bcc.n	8001cb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cba:	f002 fa73 	bl	80041a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001cbe:	f7ff f939 	bl	8000f34 <main>

08001cc2 <LoopForever>:

LoopForever:
  b LoopForever
 8001cc2:	e7fe      	b.n	8001cc2 <LoopForever>
  ldr   r0, =_estack
 8001cc4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ccc:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001cd0:	08008100 	.word	0x08008100
  ldr r2, =_sbss
 8001cd4:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001cd8:	2000076c 	.word	0x2000076c

08001cdc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC1_IRQHandler>
	...

08001ce0 <HAL_Init>:
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	1dfb      	adds	r3, r7, #7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <HAL_Init+0x3c>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <HAL_Init+0x3c>)
 8001cf2:	2180      	movs	r1, #128	@ 0x80
 8001cf4:	0049      	lsls	r1, r1, #1
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	2003      	movs	r0, #3
 8001cfc:	f000 f810 	bl	8001d20 <HAL_InitTick>
 8001d00:	1e03      	subs	r3, r0, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_Init+0x2c>
 8001d04:	1dfb      	adds	r3, r7, #7
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e001      	b.n	8001d10 <HAL_Init+0x30>
 8001d0c:	f7ff fe8c 	bl	8001a28 <HAL_MspInit>
 8001d10:	1dfb      	adds	r3, r7, #7
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40022000 	.word	0x40022000

08001d20 <HAL_InitTick>:
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	230f      	movs	r3, #15
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <HAL_InitTick+0x88>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d02b      	beq.n	8001d90 <HAL_InitTick+0x70>
 8001d38:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <HAL_InitTick+0x8c>)
 8001d3a:	681c      	ldr	r4, [r3, #0]
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <HAL_InitTick+0x88>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	0019      	movs	r1, r3
 8001d42:	23fa      	movs	r3, #250	@ 0xfa
 8001d44:	0098      	lsls	r0, r3, #2
 8001d46:	f7fe f9e5 	bl	8000114 <__udivsi3>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	0020      	movs	r0, r4
 8001d50:	f7fe f9e0 	bl	8000114 <__udivsi3>
 8001d54:	0003      	movs	r3, r0
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 f93d 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d112      	bne.n	8001d86 <HAL_InitTick+0x66>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d80a      	bhi.n	8001d7c <HAL_InitTick+0x5c>
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	425b      	negs	r3, r3
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f90c 	bl	8001f8c <HAL_NVIC_SetPriority>
 8001d74:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <HAL_InitTick+0x90>)
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e00d      	b.n	8001d98 <HAL_InitTick+0x78>
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e008      	b.n	8001d98 <HAL_InitTick+0x78>
 8001d86:	230f      	movs	r3, #15
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e003      	b.n	8001d98 <HAL_InitTick+0x78>
 8001d90:	230f      	movs	r3, #15
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	230f      	movs	r3, #15
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b005      	add	sp, #20
 8001da4:	bd90      	pop	{r4, r7, pc}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	2000001c 	.word	0x2000001c
 8001dac:	20000014 	.word	0x20000014
 8001db0:	20000018 	.word	0x20000018

08001db4 <HAL_IncTick>:
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_IncTick+0x1c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_IncTick+0x20>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	18d2      	adds	r2, r2, r3
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_IncTick+0x20>)
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	2000001c 	.word	0x2000001c
 8001dd4:	20000604 	.word	0x20000604

08001dd8 <HAL_GetTick>:
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4b02      	ldr	r3, [pc, #8]	@ (8001de8 <HAL_GetTick+0x10>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	20000604 	.word	0x20000604

08001dec <HAL_Delay>:
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	f7ff fff0 	bl	8001dd8 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3301      	adds	r3, #1
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	189b      	adds	r3, r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	f7ff ffe0 	bl	8001dd8 <HAL_GetTick>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
 8001e24:	46c0      	nop			@ (mov r8, r8)
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	2000001c 	.word	0x2000001c

08001e34 <__NVIC_EnableIRQ>:
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	1dfb      	adds	r3, r7, #7
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e46:	d809      	bhi.n	8001e5c <__NVIC_EnableIRQ+0x28>
 8001e48:	1dfb      	adds	r3, r7, #7
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	231f      	movs	r3, #31
 8001e50:	401a      	ands	r2, r3
 8001e52:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <__NVIC_EnableIRQ+0x30>)
 8001e54:	2101      	movs	r1, #1
 8001e56:	4091      	lsls	r1, r2
 8001e58:	000a      	movs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	0002      	movs	r2, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e7c:	d828      	bhi.n	8001ed0 <__NVIC_SetPriority+0x68>
 8001e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f3c <__NVIC_SetPriority+0xd4>)
 8001e80:	1dfb      	adds	r3, r7, #7
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	33c0      	adds	r3, #192	@ 0xc0
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	589b      	ldr	r3, [r3, r2]
 8001e8e:	1dfa      	adds	r2, r7, #7
 8001e90:	7812      	ldrb	r2, [r2, #0]
 8001e92:	0011      	movs	r1, r2
 8001e94:	2203      	movs	r2, #3
 8001e96:	400a      	ands	r2, r1
 8001e98:	00d2      	lsls	r2, r2, #3
 8001e9a:	21ff      	movs	r1, #255	@ 0xff
 8001e9c:	4091      	lsls	r1, r2
 8001e9e:	000a      	movs	r2, r1
 8001ea0:	43d2      	mvns	r2, r2
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	0011      	movs	r1, r2
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	019b      	lsls	r3, r3, #6
 8001eaa:	22ff      	movs	r2, #255	@ 0xff
 8001eac:	401a      	ands	r2, r3
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	4003      	ands	r3, r0
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	481f      	ldr	r0, [pc, #124]	@ (8001f3c <__NVIC_SetPriority+0xd4>)
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	33c0      	adds	r3, #192	@ 0xc0
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	501a      	str	r2, [r3, r0]
 8001ece:	e031      	b.n	8001f34 <__NVIC_SetPriority+0xcc>
 8001ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f40 <__NVIC_SetPriority+0xd8>)
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	230f      	movs	r3, #15
 8001eda:	400b      	ands	r3, r1
 8001edc:	3b08      	subs	r3, #8
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3306      	adds	r3, #6
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	18d3      	adds	r3, r2, r3
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	1dfa      	adds	r2, r7, #7
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	0011      	movs	r1, r2
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	00d2      	lsls	r2, r2, #3
 8001ef6:	21ff      	movs	r1, #255	@ 0xff
 8001ef8:	4091      	lsls	r1, r2
 8001efa:	000a      	movs	r2, r1
 8001efc:	43d2      	mvns	r2, r2
 8001efe:	401a      	ands	r2, r3
 8001f00:	0011      	movs	r1, r2
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	019b      	lsls	r3, r3, #6
 8001f06:	22ff      	movs	r2, #255	@ 0xff
 8001f08:	401a      	ands	r2, r3
 8001f0a:	1dfb      	adds	r3, r7, #7
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	2303      	movs	r3, #3
 8001f12:	4003      	ands	r3, r0
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	409a      	lsls	r2, r3
 8001f18:	4809      	ldr	r0, [pc, #36]	@ (8001f40 <__NVIC_SetPriority+0xd8>)
 8001f1a:	1dfb      	adds	r3, r7, #7
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	001c      	movs	r4, r3
 8001f20:	230f      	movs	r3, #15
 8001f22:	4023      	ands	r3, r4
 8001f24:	3b08      	subs	r3, #8
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	3306      	adds	r3, #6
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	18c3      	adds	r3, r0, r3
 8001f30:	3304      	adds	r3, #4
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b003      	add	sp, #12
 8001f3a:	bd90      	pop	{r4, r7, pc}
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <SysTick_Config>:
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	1e5a      	subs	r2, r3, #1
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	045b      	lsls	r3, r3, #17
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d301      	bcc.n	8001f5c <SysTick_Config+0x18>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e010      	b.n	8001f7e <SysTick_Config+0x3a>
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <SysTick_Config+0x44>)
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	3a01      	subs	r2, #1
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	2301      	movs	r3, #1
 8001f66:	425b      	negs	r3, r3
 8001f68:	2103      	movs	r1, #3
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7ff ff7c 	bl	8001e68 <__NVIC_SetPriority>
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <SysTick_Config+0x44>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <SysTick_Config+0x44>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b002      	add	sp, #8
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <HAL_NVIC_SetPriority>:
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	210f      	movs	r1, #15
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	1c02      	adds	r2, r0, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b25b      	sxtb	r3, r3
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff ff5d 	bl	8001e68 <__NVIC_SetPriority>
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_EnableIRQ>:
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7ff ff33 	bl	8001e34 <__NVIC_EnableIRQ>
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7ff ffaf 	bl	8001f44 <SysTick_Config>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b002      	add	sp, #8
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_FLASH_Program>:
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	603a      	str	r2, [r7, #0]
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	4b21      	ldr	r3, [pc, #132]	@ (8002084 <HAL_FLASH_Program+0x94>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_FLASH_Program+0x1a>
 8002006:	2302      	movs	r3, #2
 8002008:	e038      	b.n	800207c <HAL_FLASH_Program+0x8c>
 800200a:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <HAL_FLASH_Program+0x94>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	4b1c      	ldr	r3, [pc, #112]	@ (8002084 <HAL_FLASH_Program+0x94>)
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	2517      	movs	r5, #23
 8002018:	197c      	adds	r4, r7, r5
 800201a:	23fa      	movs	r3, #250	@ 0xfa
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	0018      	movs	r0, r3
 8002020:	f000 f87a 	bl	8002118 <FLASH_WaitForLastOperation>
 8002024:	0003      	movs	r3, r0
 8002026:	7023      	strb	r3, [r4, #0]
 8002028:	197b      	adds	r3, r7, r5
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d11f      	bne.n	8002070 <HAL_FLASH_Program+0x80>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d106      	bne.n	8002044 <HAL_FLASH_Program+0x54>
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	0008      	movs	r0, r1
 800203e:	f000 f8b9 	bl	80021b4 <FLASH_Program_DoubleWord>
 8002042:	e005      	b.n	8002050 <HAL_FLASH_Program+0x60>
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	0011      	movs	r1, r2
 800204a:	0018      	movs	r0, r3
 800204c:	f002 fd24 	bl	8004a98 <__FLASH_Program_Fast_veneer>
 8002050:	2317      	movs	r3, #23
 8002052:	18fc      	adds	r4, r7, r3
 8002054:	23fa      	movs	r3, #250	@ 0xfa
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	0018      	movs	r0, r3
 800205a:	f000 f85d 	bl	8002118 <FLASH_WaitForLastOperation>
 800205e:	0003      	movs	r3, r0
 8002060:	7023      	strb	r3, [r4, #0]
 8002062:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_FLASH_Program+0x98>)
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43d9      	mvns	r1, r3
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <HAL_FLASH_Program+0x98>)
 800206c:	400a      	ands	r2, r1
 800206e:	615a      	str	r2, [r3, #20]
 8002070:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <HAL_FLASH_Program+0x94>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	2317      	movs	r3, #23
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	b006      	add	sp, #24
 8002082:	bdb0      	pop	{r4, r5, r7, pc}
 8002084:	20000608 	.word	0x20000608
 8002088:	40022000 	.word	0x40022000

0800208c <HAL_FLASH_Unlock>:
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_FLASH_Unlock+0x3c>)
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	da0c      	bge.n	80020ba <HAL_FLASH_Unlock+0x2e>
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_FLASH_Unlock+0x3c>)
 80020a2:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <HAL_FLASH_Unlock+0x40>)
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_FLASH_Unlock+0x3c>)
 80020a8:	4a09      	ldr	r2, [pc, #36]	@ (80020d0 <HAL_FLASH_Unlock+0x44>)
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <HAL_FLASH_Unlock+0x3c>)
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da02      	bge.n	80020ba <HAL_FLASH_Unlock+0x2e>
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	40022000 	.word	0x40022000
 80020cc:	45670123 	.word	0x45670123
 80020d0:	cdef89ab 	.word	0xcdef89ab

080020d4 <HAL_FLASH_Lock>:
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	23fa      	movs	r3, #250	@ 0xfa
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 f817 	bl	8002118 <FLASH_WaitForLastOperation>
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_FLASH_Lock+0x40>)
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <HAL_FLASH_Lock+0x40>)
 80020f0:	2180      	movs	r1, #128	@ 0x80
 80020f2:	0609      	lsls	r1, r1, #24
 80020f4:	430a      	orrs	r2, r1
 80020f6:	615a      	str	r2, [r3, #20]
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_FLASH_Lock+0x40>)
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da02      	bge.n	8002106 <HAL_FLASH_Lock+0x32>
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	1dfb      	adds	r3, r7, #7
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	40022000 	.word	0x40022000

08002118 <FLASH_WaitForLastOperation>:
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	f7ff fe5a 	bl	8001dd8 <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	025b      	lsls	r3, r3, #9
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	e00c      	b.n	800214a <FLASH_WaitForLastOperation+0x32>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3301      	adds	r3, #1
 8002134:	d009      	beq.n	800214a <FLASH_WaitForLastOperation+0x32>
 8002136:	f7ff fe4f 	bl	8001dd8 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d801      	bhi.n	800214a <FLASH_WaitForLastOperation+0x32>
 8002146:	2303      	movs	r3, #3
 8002148:	e028      	b.n	800219c <FLASH_WaitForLastOperation+0x84>
 800214a:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <FLASH_WaitForLastOperation+0x8c>)
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	4013      	ands	r3, r2
 8002152:	d1ed      	bne.n	8002130 <FLASH_WaitForLastOperation+0x18>
 8002154:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <FLASH_WaitForLastOperation+0x8c>)
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	4a13      	ldr	r2, [pc, #76]	@ (80021a8 <FLASH_WaitForLastOperation+0x90>)
 800215a:	4013      	ands	r3, r2
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <FLASH_WaitForLastOperation+0x8c>)
 8002160:	4a12      	ldr	r2, [pc, #72]	@ (80021ac <FLASH_WaitForLastOperation+0x94>)
 8002162:	611a      	str	r2, [r3, #16]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d011      	beq.n	800218e <FLASH_WaitForLastOperation+0x76>
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <FLASH_WaitForLastOperation+0x98>)
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	2301      	movs	r3, #1
 8002172:	e013      	b.n	800219c <FLASH_WaitForLastOperation+0x84>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3301      	adds	r3, #1
 8002178:	d009      	beq.n	800218e <FLASH_WaitForLastOperation+0x76>
 800217a:	f7ff fe2d 	bl	8001dd8 <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d801      	bhi.n	800218e <FLASH_WaitForLastOperation+0x76>
 800218a:	2303      	movs	r3, #3
 800218c:	e006      	b.n	800219c <FLASH_WaitForLastOperation+0x84>
 800218e:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <FLASH_WaitForLastOperation+0x8c>)
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	02db      	lsls	r3, r3, #11
 8002196:	4013      	ands	r3, r2
 8002198:	d1ec      	bne.n	8002174 <FLASH_WaitForLastOperation+0x5c>
 800219a:	2300      	movs	r3, #0
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b004      	add	sp, #16
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40022000 	.word	0x40022000
 80021a8:	000083fa 	.word	0x000083fa
 80021ac:	000083fb 	.word	0x000083fb
 80021b0:	20000608 	.word	0x20000608

080021b4 <FLASH_Program_DoubleWord>:
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	603a      	str	r2, [r7, #0]
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <FLASH_Program_DoubleWord+0x3c>)
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <FLASH_Program_DoubleWord+0x3c>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f3bf 8f6f 	isb	sy
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	001c      	movs	r4, r3
 80021dc:	2300      	movs	r3, #0
 80021de:	001d      	movs	r5, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3304      	adds	r3, #4
 80021e4:	0022      	movs	r2, r4
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	46c0      	nop			@ (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b004      	add	sp, #16
 80021ee:	bdb0      	pop	{r4, r5, r7, pc}
 80021f0:	40022000 	.word	0x40022000

080021f4 <HAL_FLASHEx_Erase>:
 80021f4:	b5b0      	push	{r4, r5, r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	4b35      	ldr	r3, [pc, #212]	@ (80022d4 <HAL_FLASHEx_Erase+0xe0>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_FLASHEx_Erase+0x16>
 8002206:	2302      	movs	r3, #2
 8002208:	e05f      	b.n	80022ca <HAL_FLASHEx_Erase+0xd6>
 800220a:	4b32      	ldr	r3, [pc, #200]	@ (80022d4 <HAL_FLASHEx_Erase+0xe0>)
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	4b30      	ldr	r3, [pc, #192]	@ (80022d4 <HAL_FLASHEx_Erase+0xe0>)
 8002212:	2200      	movs	r2, #0
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	250f      	movs	r5, #15
 8002218:	197c      	adds	r4, r7, r5
 800221a:	23fa      	movs	r3, #250	@ 0xfa
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	0018      	movs	r0, r3
 8002220:	f7ff ff7a 	bl	8002118 <FLASH_WaitForLastOperation>
 8002224:	0003      	movs	r3, r0
 8002226:	7023      	strb	r3, [r4, #0]
 8002228:	002c      	movs	r4, r5
 800222a:	193b      	adds	r3, r7, r4
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d145      	bne.n	80022be <HAL_FLASHEx_Erase+0xca>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2204      	movs	r2, #4
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d10d      	bne.n	800225c <HAL_FLASHEx_Erase+0x68>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	0018      	movs	r0, r3
 8002246:	f000 f849 	bl	80022dc <FLASH_MassErase>
 800224a:	193c      	adds	r4, r7, r4
 800224c:	23fa      	movs	r3, #250	@ 0xfa
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	0018      	movs	r0, r3
 8002252:	f7ff ff61 	bl	8002118 <FLASH_WaitForLastOperation>
 8002256:	0003      	movs	r3, r0
 8002258:	7023      	strb	r3, [r4, #0]
 800225a:	e030      	b.n	80022be <HAL_FLASHEx_Erase+0xca>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	4252      	negs	r2, r2
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	e01a      	b.n	80022a2 <HAL_FLASHEx_Erase+0xae>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	0011      	movs	r1, r2
 8002274:	0018      	movs	r0, r3
 8002276:	f000 f845 	bl	8002304 <FLASH_PageErase>
 800227a:	250f      	movs	r5, #15
 800227c:	197c      	adds	r4, r7, r5
 800227e:	23fa      	movs	r3, #250	@ 0xfa
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	0018      	movs	r0, r3
 8002284:	f7ff ff48 	bl	8002118 <FLASH_WaitForLastOperation>
 8002288:	0003      	movs	r3, r0
 800228a:	7023      	strb	r3, [r4, #0]
 800228c:	197b      	adds	r3, r7, r5
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_FLASHEx_Erase+0xa8>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e00a      	b.n	80022b2 <HAL_FLASHEx_Erase+0xbe>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3301      	adds	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	18d3      	adds	r3, r2, r3
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d3dc      	bcc.n	800226c <HAL_FLASHEx_Erase+0x78>
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <HAL_FLASHEx_Erase+0xe4>)
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <HAL_FLASHEx_Erase+0xe4>)
 80022b8:	2102      	movs	r1, #2
 80022ba:	438a      	bics	r2, r1
 80022bc:	615a      	str	r2, [r3, #20]
 80022be:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <HAL_FLASHEx_Erase+0xe0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	230f      	movs	r3, #15
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b004      	add	sp, #16
 80022d0:	bdb0      	pop	{r4, r5, r7, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	20000608 	.word	0x20000608
 80022d8:	40022000 	.word	0x40022000

080022dc <FLASH_MassErase>:
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <FLASH_MassErase+0x24>)
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <FLASH_MassErase+0x24>)
 80022ee:	2180      	movs	r1, #128	@ 0x80
 80022f0:	0249      	lsls	r1, r1, #9
 80022f2:	430a      	orrs	r2, r1
 80022f4:	615a      	str	r2, [r3, #20]
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b002      	add	sp, #8
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	40022000 	.word	0x40022000

08002304 <FLASH_PageErase>:
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <FLASH_PageErase+0x2c>)
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	4a08      	ldr	r2, [pc, #32]	@ (8002334 <FLASH_PageErase+0x30>)
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	00da      	lsls	r2, r3, #3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	431a      	orrs	r2, r3
 8002320:	4b03      	ldr	r3, [pc, #12]	@ (8002330 <FLASH_PageErase+0x2c>)
 8002322:	4905      	ldr	r1, [pc, #20]	@ (8002338 <FLASH_PageErase+0x34>)
 8002324:	430a      	orrs	r2, r1
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40022000 	.word	0x40022000
 8002334:	ffffe007 	.word	0xffffe007
 8002338:	00010002 	.word	0x00010002

0800233c <HAL_GPIO_Init>:
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e147      	b.n	80025dc <HAL_GPIO_Init+0x2a0>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4091      	lsls	r1, r2
 8002356:	000a      	movs	r2, r1
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d100      	bne.n	8002364 <HAL_GPIO_Init+0x28>
 8002362:	e138      	b.n	80025d6 <HAL_GPIO_Init+0x29a>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	4013      	ands	r3, r2
 800236c:	2b01      	cmp	r3, #1
 800236e:	d005      	beq.n	800237c <HAL_GPIO_Init+0x40>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2203      	movs	r2, #3
 8002376:	4013      	ands	r3, r2
 8002378:	2b02      	cmp	r3, #2
 800237a:	d130      	bne.n	80023de <HAL_GPIO_Init+0xa2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	409a      	lsls	r2, r3
 800238a:	0013      	movs	r3, r2
 800238c:	43da      	mvns	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	409a      	lsls	r2, r3
 800239e:	0013      	movs	r3, r2
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	2201      	movs	r2, #1
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	43da      	mvns	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	2201      	movs	r2, #1
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
 80023d0:	0013      	movs	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2203      	movs	r2, #3
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d017      	beq.n	800241a <HAL_GPIO_Init+0xde>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2203      	movs	r2, #3
 80023f6:	409a      	lsls	r2, r3
 80023f8:	0013      	movs	r3, r2
 80023fa:	43da      	mvns	r2, r3
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	409a      	lsls	r2, r3
 800240c:	0013      	movs	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2203      	movs	r2, #3
 8002420:	4013      	ands	r3, r2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d123      	bne.n	800246e <HAL_GPIO_Init+0x132>
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	08da      	lsrs	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	58d3      	ldr	r3, [r2, r3]
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2207      	movs	r2, #7
 8002438:	4013      	ands	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	43da      	mvns	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2107      	movs	r1, #7
 8002452:	400b      	ands	r3, r1
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	409a      	lsls	r2, r3
 8002458:	0013      	movs	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	6939      	ldr	r1, [r7, #16]
 800246c:	50d1      	str	r1, [r2, r3]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	409a      	lsls	r2, r3
 800247c:	0013      	movs	r3, r2
 800247e:	43da      	mvns	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2203      	movs	r2, #3
 800248c:	401a      	ands	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	409a      	lsls	r2, r3
 8002494:	0013      	movs	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	23c0      	movs	r3, #192	@ 0xc0
 80024a8:	029b      	lsls	r3, r3, #10
 80024aa:	4013      	ands	r3, r2
 80024ac:	d100      	bne.n	80024b0 <HAL_GPIO_Init+0x174>
 80024ae:	e092      	b.n	80025d6 <HAL_GPIO_Init+0x29a>
 80024b0:	4a50      	ldr	r2, [pc, #320]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3318      	adds	r3, #24
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	589b      	ldr	r3, [r3, r2]
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2203      	movs	r2, #3
 80024c2:	4013      	ands	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	220f      	movs	r2, #15
 80024c8:	409a      	lsls	r2, r3
 80024ca:	0013      	movs	r3, r2
 80024cc:	43da      	mvns	r2, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	23a0      	movs	r3, #160	@ 0xa0
 80024d8:	05db      	lsls	r3, r3, #23
 80024da:	429a      	cmp	r2, r3
 80024dc:	d013      	beq.n	8002506 <HAL_GPIO_Init+0x1ca>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a45      	ldr	r2, [pc, #276]	@ (80025f8 <HAL_GPIO_Init+0x2bc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00d      	beq.n	8002502 <HAL_GPIO_Init+0x1c6>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a44      	ldr	r2, [pc, #272]	@ (80025fc <HAL_GPIO_Init+0x2c0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <HAL_GPIO_Init+0x1c2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a43      	ldr	r2, [pc, #268]	@ (8002600 <HAL_GPIO_Init+0x2c4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_GPIO_Init+0x1be>
 80024f6:	2303      	movs	r3, #3
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x1cc>
 80024fa:	2305      	movs	r3, #5
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_Init+0x1cc>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_Init+0x1cc>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x1cc>
 8002506:	2300      	movs	r3, #0
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	2103      	movs	r1, #3
 800250c:	400a      	ands	r2, r1
 800250e:	00d2      	lsls	r2, r2, #3
 8002510:	4093      	lsls	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	4936      	ldr	r1, [pc, #216]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3318      	adds	r3, #24
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	505a      	str	r2, [r3, r1]
 8002526:	4b33      	ldr	r3, [pc, #204]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43da      	mvns	r2, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	035b      	lsls	r3, r3, #13
 800253e:	4013      	ands	r3, r2
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x20e>
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	4b28      	ldr	r3, [pc, #160]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43da      	mvns	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	039b      	lsls	r3, r3, #14
 8002568:	4013      	ands	r3, r2
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x238>
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	4a1e      	ldr	r2, [pc, #120]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 800257c:	2384      	movs	r3, #132	@ 0x84
 800257e:	58d3      	ldr	r3, [r2, r3]
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43da      	mvns	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	029b      	lsls	r3, r3, #10
 8002594:	4013      	ands	r3, r2
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x264>
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	4914      	ldr	r1, [pc, #80]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 80025a2:	2284      	movs	r2, #132	@ 0x84
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	508b      	str	r3, [r1, r2]
 80025a8:	4a12      	ldr	r2, [pc, #72]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	58d3      	ldr	r3, [r2, r3]
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43da      	mvns	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	025b      	lsls	r3, r3, #9
 80025c2:	4013      	ands	r3, r2
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x292>
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	4909      	ldr	r1, [pc, #36]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 80025d0:	2280      	movs	r2, #128	@ 0x80
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	508b      	str	r3, [r1, r2]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	3301      	adds	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	40da      	lsrs	r2, r3
 80025e4:	1e13      	subs	r3, r2, #0
 80025e6:	d000      	beq.n	80025ea <HAL_GPIO_Init+0x2ae>
 80025e8:	e6b0      	b.n	800234c <HAL_GPIO_Init+0x10>
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	46c0      	nop			@ (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b006      	add	sp, #24
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021800 	.word	0x40021800
 80025f8:	50000400 	.word	0x50000400
 80025fc:	50000800 	.word	0x50000800
 8002600:	50000c00 	.word	0x50000c00

08002604 <HAL_GPIO_ReadPin>:
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	000a      	movs	r2, r1
 800260e:	1cbb      	adds	r3, r7, #2
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	1cba      	adds	r2, r7, #2
 8002618:	8812      	ldrh	r2, [r2, #0]
 800261a:	4013      	ands	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_GPIO_ReadPin+0x24>
 800261e:	230f      	movs	r3, #15
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	e003      	b.n	8002630 <HAL_GPIO_ReadPin+0x2c>
 8002628:	230f      	movs	r3, #15
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	230f      	movs	r3, #15
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	0018      	movs	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	b004      	add	sp, #16
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_GPIO_WritePin>:
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	0008      	movs	r0, r1
 8002648:	0011      	movs	r1, r2
 800264a:	1cbb      	adds	r3, r7, #2
 800264c:	1c02      	adds	r2, r0, #0
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	1c7b      	adds	r3, r7, #1
 8002652:	1c0a      	adds	r2, r1, #0
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	1c7b      	adds	r3, r7, #1
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_GPIO_WritePin+0x2a>
 800265e:	1cbb      	adds	r3, r7, #2
 8002660:	881a      	ldrh	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	619a      	str	r2, [r3, #24]
 8002666:	e003      	b.n	8002670 <HAL_GPIO_WritePin+0x32>
 8002668:	1cbb      	adds	r3, r7, #2
 800266a:	881a      	ldrh	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002670:	46c0      	nop			@ (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b002      	add	sp, #8
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_I2C_Init>:
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_I2C_Init+0x12>
 8002686:	2301      	movs	r3, #1
 8002688:	e08f      	b.n	80027aa <HAL_I2C_Init+0x132>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2241      	movs	r2, #65	@ 0x41
 800268e:	5c9b      	ldrb	r3, [r3, r2]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d107      	bne.n	80026a6 <HAL_I2C_Init+0x2e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2240      	movs	r2, #64	@ 0x40
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7ff f9e5 	bl	8001a70 <HAL_I2C_MspInit>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2241      	movs	r2, #65	@ 0x41
 80026aa:	2124      	movs	r1, #36	@ 0x24
 80026ac:	5499      	strb	r1, [r3, r2]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	438a      	bics	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	493b      	ldr	r1, [pc, #236]	@ (80027b4 <HAL_I2C_Init+0x13c>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	611a      	str	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4938      	ldr	r1, [pc, #224]	@ (80027b8 <HAL_I2C_Init+0x140>)
 80026d8:	400a      	ands	r2, r1
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d108      	bne.n	80026f6 <HAL_I2C_Init+0x7e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2180      	movs	r1, #128	@ 0x80
 80026ee:	0209      	lsls	r1, r1, #8
 80026f0:	430a      	orrs	r2, r1
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	e007      	b.n	8002706 <HAL_I2C_Init+0x8e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2184      	movs	r1, #132	@ 0x84
 8002700:	0209      	lsls	r1, r1, #8
 8002702:	430a      	orrs	r2, r1
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d109      	bne.n	8002722 <HAL_I2C_Init+0xaa>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2180      	movs	r1, #128	@ 0x80
 800271a:	0109      	lsls	r1, r1, #4
 800271c:	430a      	orrs	r2, r1
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	e007      	b.n	8002732 <HAL_I2C_Init+0xba>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4923      	ldr	r1, [pc, #140]	@ (80027bc <HAL_I2C_Init+0x144>)
 800272e:	400a      	ands	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4920      	ldr	r1, [pc, #128]	@ (80027c0 <HAL_I2C_Init+0x148>)
 800273e:	430a      	orrs	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	491a      	ldr	r1, [pc, #104]	@ (80027b8 <HAL_I2C_Init+0x140>)
 800274e:	400a      	ands	r2, r1
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	431a      	orrs	r2, r3
 800275c:	0011      	movs	r1, r2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	021a      	lsls	r2, r3, #8
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69d9      	ldr	r1, [r3, #28]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1a      	ldr	r2, [r3, #32]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2101      	movs	r1, #1
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	@ 0x44
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2241      	movs	r2, #65	@ 0x41
 8002796:	2120      	movs	r1, #32
 8002798:	5499      	strb	r1, [r3, r2]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2242      	movs	r2, #66	@ 0x42
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]
 80027a8:	2300      	movs	r3, #0
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b002      	add	sp, #8
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	f0ffffff 	.word	0xf0ffffff
 80027b8:	ffff7fff 	.word	0xffff7fff
 80027bc:	fffff7ff 	.word	0xfffff7ff
 80027c0:	02008000 	.word	0x02008000

080027c4 <HAL_I2C_Mem_Write>:
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b089      	sub	sp, #36	@ 0x24
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	000c      	movs	r4, r1
 80027ce:	0010      	movs	r0, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	230a      	movs	r3, #10
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	1c22      	adds	r2, r4, #0
 80027d8:	801a      	strh	r2, [r3, #0]
 80027da:	2308      	movs	r3, #8
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	1c02      	adds	r2, r0, #0
 80027e0:	801a      	strh	r2, [r3, #0]
 80027e2:	1dbb      	adds	r3, r7, #6
 80027e4:	1c0a      	adds	r2, r1, #0
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2241      	movs	r2, #65	@ 0x41
 80027ec:	5c9b      	ldrb	r3, [r3, r2]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d000      	beq.n	80027f6 <HAL_I2C_Mem_Write+0x32>
 80027f4:	e10c      	b.n	8002a10 <HAL_I2C_Mem_Write+0x24c>
 80027f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <HAL_I2C_Mem_Write+0x42>
 80027fc:	232c      	movs	r3, #44	@ 0x2c
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d105      	bne.n	8002812 <HAL_I2C_Mem_Write+0x4e>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2280      	movs	r2, #128	@ 0x80
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
 800280e:	2301      	movs	r3, #1
 8002810:	e0ff      	b.n	8002a12 <HAL_I2C_Mem_Write+0x24e>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2240      	movs	r2, #64	@ 0x40
 8002816:	5c9b      	ldrb	r3, [r3, r2]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_I2C_Mem_Write+0x5c>
 800281c:	2302      	movs	r3, #2
 800281e:	e0f8      	b.n	8002a12 <HAL_I2C_Mem_Write+0x24e>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2240      	movs	r2, #64	@ 0x40
 8002824:	2101      	movs	r1, #1
 8002826:	5499      	strb	r1, [r3, r2]
 8002828:	f7ff fad6 	bl	8001dd8 <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	0219      	lsls	r1, r3, #8
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2319      	movs	r3, #25
 800283c:	2201      	movs	r2, #1
 800283e:	f000 f975 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002842:	1e03      	subs	r3, r0, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Mem_Write+0x86>
 8002846:	2301      	movs	r3, #1
 8002848:	e0e3      	b.n	8002a12 <HAL_I2C_Mem_Write+0x24e>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2241      	movs	r2, #65	@ 0x41
 800284e:	2121      	movs	r1, #33	@ 0x21
 8002850:	5499      	strb	r1, [r3, r2]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2242      	movs	r2, #66	@ 0x42
 8002856:	2140      	movs	r1, #64	@ 0x40
 8002858:	5499      	strb	r1, [r3, r2]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	222c      	movs	r2, #44	@ 0x2c
 800286a:	18ba      	adds	r2, r7, r2
 800286c:	8812      	ldrh	r2, [r2, #0]
 800286e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	635a      	str	r2, [r3, #52]	@ 0x34
 8002876:	1dbb      	adds	r3, r7, #6
 8002878:	881c      	ldrh	r4, [r3, #0]
 800287a:	2308      	movs	r3, #8
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	881a      	ldrh	r2, [r3, #0]
 8002880:	230a      	movs	r3, #10
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	8819      	ldrh	r1, [r3, #0]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	0023      	movs	r3, r4
 8002892:	f000 f8c5 	bl	8002a20 <I2C_RequestMemoryWrite>
 8002896:	1e03      	subs	r3, r0, #0
 8002898:	d005      	beq.n	80028a6 <HAL_I2C_Mem_Write+0xe2>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2240      	movs	r2, #64	@ 0x40
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0b5      	b.n	8002a12 <HAL_I2C_Mem_Write+0x24e>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2bff      	cmp	r3, #255	@ 0xff
 80028ae:	d911      	bls.n	80028d4 <HAL_I2C_Mem_Write+0x110>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	22ff      	movs	r2, #255	@ 0xff
 80028b4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	045c      	lsls	r4, r3, #17
 80028c0:	230a      	movs	r3, #10
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	8819      	ldrh	r1, [r3, #0]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	0023      	movs	r3, r4
 80028ce:	f000 fb07 	bl	8002ee0 <I2C_TransferConfig>
 80028d2:	e012      	b.n	80028fa <HAL_I2C_Mem_Write+0x136>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	049c      	lsls	r4, r3, #18
 80028e8:	230a      	movs	r3, #10
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	8819      	ldrh	r1, [r3, #0]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	2300      	movs	r3, #0
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	0023      	movs	r3, r4
 80028f6:	f000 faf3 	bl	8002ee0 <I2C_TransferConfig>
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	0018      	movs	r0, r3
 8002902:	f000 f96b 	bl	8002bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_Mem_Write+0x14a>
 800290a:	2301      	movs	r3, #1
 800290c:	e081      	b.n	8002a12 <HAL_I2C_Mem_Write+0x24e>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	629a      	str	r2, [r3, #40]	@ 0x28
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	625a      	str	r2, [r3, #36]	@ 0x24
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d03a      	beq.n	80029be <HAL_I2C_Mem_Write+0x1fa>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	d136      	bne.n	80029be <HAL_I2C_Mem_Write+0x1fa>
 8002950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	0013      	movs	r3, r2
 800295a:	2200      	movs	r2, #0
 800295c:	2180      	movs	r1, #128	@ 0x80
 800295e:	f000 f8e5 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002962:	1e03      	subs	r3, r0, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Mem_Write+0x1a6>
 8002966:	2301      	movs	r3, #1
 8002968:	e053      	b.n	8002a12 <HAL_I2C_Mem_Write+0x24e>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	2bff      	cmp	r3, #255	@ 0xff
 8002972:	d911      	bls.n	8002998 <HAL_I2C_Mem_Write+0x1d4>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	22ff      	movs	r2, #255	@ 0xff
 8002978:	851a      	strh	r2, [r3, #40]	@ 0x28
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297e:	b2da      	uxtb	r2, r3
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	045c      	lsls	r4, r3, #17
 8002984:	230a      	movs	r3, #10
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	8819      	ldrh	r1, [r3, #0]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	2300      	movs	r3, #0
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	0023      	movs	r3, r4
 8002992:	f000 faa5 	bl	8002ee0 <I2C_TransferConfig>
 8002996:	e012      	b.n	80029be <HAL_I2C_Mem_Write+0x1fa>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	049c      	lsls	r4, r3, #18
 80029ac:	230a      	movs	r3, #10
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	8819      	ldrh	r1, [r3, #0]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	2300      	movs	r3, #0
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	0023      	movs	r3, r4
 80029ba:	f000 fa91 	bl	8002ee0 <I2C_TransferConfig>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d198      	bne.n	80028fa <HAL_I2C_Mem_Write+0x136>
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 f94a 	bl	8002c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029d4:	1e03      	subs	r3, r0, #0
 80029d6:	d001      	beq.n	80029dc <HAL_I2C_Mem_Write+0x218>
 80029d8:	2301      	movs	r3, #1
 80029da:	e01a      	b.n	8002a12 <HAL_I2C_Mem_Write+0x24e>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2220      	movs	r2, #32
 80029e2:	61da      	str	r2, [r3, #28]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	490b      	ldr	r1, [pc, #44]	@ (8002a1c <HAL_I2C_Mem_Write+0x258>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2241      	movs	r2, #65	@ 0x41
 80029f8:	2120      	movs	r1, #32
 80029fa:	5499      	strb	r1, [r3, r2]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2242      	movs	r2, #66	@ 0x42
 8002a00:	2100      	movs	r1, #0
 8002a02:	5499      	strb	r1, [r3, r2]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2240      	movs	r2, #64	@ 0x40
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_I2C_Mem_Write+0x24e>
 8002a10:	2302      	movs	r3, #2
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b007      	add	sp, #28
 8002a18:	bd90      	pop	{r4, r7, pc}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	fe00e800 	.word	0xfe00e800

08002a20 <I2C_RequestMemoryWrite>:
 8002a20:	b5b0      	push	{r4, r5, r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	000c      	movs	r4, r1
 8002a2a:	0010      	movs	r0, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	250a      	movs	r5, #10
 8002a30:	197b      	adds	r3, r7, r5
 8002a32:	1c22      	adds	r2, r4, #0
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	2308      	movs	r3, #8
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	1c02      	adds	r2, r0, #0
 8002a3c:	801a      	strh	r2, [r3, #0]
 8002a3e:	1dbb      	adds	r3, r7, #6
 8002a40:	1c0a      	adds	r2, r1, #0
 8002a42:	801a      	strh	r2, [r3, #0]
 8002a44:	1dbb      	adds	r3, r7, #6
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	045c      	lsls	r4, r3, #17
 8002a4e:	197b      	adds	r3, r7, r5
 8002a50:	8819      	ldrh	r1, [r3, #0]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	4b23      	ldr	r3, [pc, #140]	@ (8002ae4 <I2C_RequestMemoryWrite+0xc4>)
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	0023      	movs	r3, r4
 8002a5a:	f000 fa41 	bl	8002ee0 <I2C_TransferConfig>
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a60:	6a39      	ldr	r1, [r7, #32]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 f8b9 	bl	8002bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_RequestMemoryWrite+0x52>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e033      	b.n	8002ada <I2C_RequestMemoryWrite+0xba>
 8002a72:	1dbb      	adds	r3, r7, #6
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <I2C_RequestMemoryWrite+0x6a>
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a88:	e019      	b.n	8002abe <I2C_RequestMemoryWrite+0x9e>
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9e:	6a39      	ldr	r1, [r7, #32]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 f89a 	bl	8002bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8002aa8:	1e03      	subs	r3, r0, #0
 8002aaa:	d001      	beq.n	8002ab0 <I2C_RequestMemoryWrite+0x90>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e014      	b.n	8002ada <I2C_RequestMemoryWrite+0xba>
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002abe:	6a3a      	ldr	r2, [r7, #32]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	0013      	movs	r3, r2
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2180      	movs	r1, #128	@ 0x80
 8002acc:	f000 f82e 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002ad0:	1e03      	subs	r3, r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <I2C_RequestMemoryWrite+0xb8>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <I2C_RequestMemoryWrite+0xba>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	0018      	movs	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b004      	add	sp, #16
 8002ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	80002000 	.word	0x80002000

08002ae8 <I2C_Flush_TXDR>:
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2202      	movs	r2, #2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d103      	bne.n	8002b06 <I2C_Flush_TXDR+0x1e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d007      	beq.n	8002b24 <I2C_Flush_TXDR+0x3c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	430a      	orrs	r2, r1
 8002b22:	619a      	str	r2, [r3, #24]
 8002b24:	46c0      	nop			@ (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <I2C_WaitOnFlagUntilTimeout>:
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	1dfb      	adds	r3, r7, #7
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e03a      	b.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x88>
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	6839      	ldr	r1, [r7, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 f8d3 	bl	8002cf0 <I2C_IsErrorOccurred>
 8002b4a:	1e03      	subs	r3, r0, #0
 8002b4c:	d001      	beq.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x26>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e040      	b.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0xa8>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	3301      	adds	r3, #1
 8002b56:	d02d      	beq.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x88>
 8002b58:	f7ff f93e 	bl	8001dd8 <HAL_GetTick>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d302      	bcc.n	8002b6e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d122      	bne.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x88>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4013      	ands	r3, r2
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	425a      	negs	r2, r3
 8002b7e:	4153      	adcs	r3, r2
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	001a      	movs	r2, r3
 8002b84:	1dfb      	adds	r3, r7, #7
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d113      	bne.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x88>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b90:	2220      	movs	r2, #32
 8002b92:	431a      	orrs	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2241      	movs	r2, #65	@ 0x41
 8002b9c:	2120      	movs	r1, #32
 8002b9e:	5499      	strb	r1, [r3, r2]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2242      	movs	r2, #66	@ 0x42
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	5499      	strb	r1, [r3, r2]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2240      	movs	r2, #64	@ 0x40
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e00f      	b.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0xa8>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	425a      	negs	r2, r3
 8002bc4:	4153      	adcs	r3, r2
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	001a      	movs	r2, r3
 8002bca:	1dfb      	adds	r3, r7, #7
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d0b5      	beq.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x12>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b004      	add	sp, #16
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <I2C_WaitOnTXISFlagUntilTimeout>:
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	e032      	b.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f000 f87d 	bl	8002cf0 <I2C_IsErrorOccurred>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d001      	beq.n	8002bfe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e030      	b.n	8002c60 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3301      	adds	r3, #1
 8002c02:	d025      	beq.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
 8002c04:	f7ff f8e8 	bl	8001dd8 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11a      	bne.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2202      	movs	r2, #2
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d013      	beq.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2241      	movs	r2, #65	@ 0x41
 8002c38:	2120      	movs	r1, #32
 8002c3a:	5499      	strb	r1, [r3, r2]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2242      	movs	r2, #66	@ 0x42
 8002c40:	2100      	movs	r1, #0
 8002c42:	5499      	strb	r1, [r3, r2]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	2100      	movs	r1, #0
 8002c4a:	5499      	strb	r1, [r3, r2]
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e007      	b.n	8002c60 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d1c5      	bne.n	8002bea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	0018      	movs	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b004      	add	sp, #16
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	e02f      	b.n	8002cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f000 f837 	bl	8002cf0 <I2C_IsErrorOccurred>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e02d      	b.n	8002ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8002c8a:	f7ff f8a5 	bl	8001dd8 <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d11a      	bne.n	8002cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d013      	beq.n	8002cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2241      	movs	r2, #65	@ 0x41
 8002cbe:	2120      	movs	r1, #32
 8002cc0:	5499      	strb	r1, [r3, r2]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2242      	movs	r2, #66	@ 0x42
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	5499      	strb	r1, [r3, r2]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2240      	movs	r2, #64	@ 0x40
 8002cce:	2100      	movs	r1, #0
 8002cd0:	5499      	strb	r1, [r3, r2]
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e007      	b.n	8002ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d1c8      	bne.n	8002c76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b004      	add	sp, #16
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <I2C_IsErrorOccurred>:
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	2327      	movs	r3, #39	@ 0x27
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2210      	movs	r2, #16
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d100      	bne.n	8002d1e <I2C_IsErrorOccurred+0x2e>
 8002d1c:	e079      	b.n	8002e12 <I2C_IsErrorOccurred+0x122>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2210      	movs	r2, #16
 8002d24:	61da      	str	r2, [r3, #28]
 8002d26:	e057      	b.n	8002dd8 <I2C_IsErrorOccurred+0xe8>
 8002d28:	2227      	movs	r2, #39	@ 0x27
 8002d2a:	18bb      	adds	r3, r7, r2
 8002d2c:	18ba      	adds	r2, r7, r2
 8002d2e:	7812      	ldrb	r2, [r2, #0]
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	3301      	adds	r3, #1
 8002d36:	d04f      	beq.n	8002dd8 <I2C_IsErrorOccurred+0xe8>
 8002d38:	f7ff f84e 	bl	8001dd8 <HAL_GetTick>
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d302      	bcc.n	8002d4e <I2C_IsErrorOccurred+0x5e>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d144      	bne.n	8002dd8 <I2C_IsErrorOccurred+0xe8>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	01db      	lsls	r3, r3, #7
 8002d58:	4013      	ands	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	2013      	movs	r0, #19
 8002d5e:	183b      	adds	r3, r7, r0
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	2142      	movs	r1, #66	@ 0x42
 8002d64:	5c52      	ldrb	r2, [r2, r1]
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	2380      	movs	r3, #128	@ 0x80
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	401a      	ands	r2, r3
 8002d74:	2380      	movs	r3, #128	@ 0x80
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d126      	bne.n	8002dca <I2C_IsErrorOccurred+0xda>
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	2380      	movs	r3, #128	@ 0x80
 8002d80:	01db      	lsls	r3, r3, #7
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d021      	beq.n	8002dca <I2C_IsErrorOccurred+0xda>
 8002d86:	183b      	adds	r3, r7, r0
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d01d      	beq.n	8002dca <I2C_IsErrorOccurred+0xda>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2180      	movs	r1, #128	@ 0x80
 8002d9a:	01c9      	lsls	r1, r1, #7
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	f7ff f81a 	bl	8001dd8 <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	e00f      	b.n	8002dca <I2C_IsErrorOccurred+0xda>
 8002daa:	f7ff f815 	bl	8001dd8 <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b19      	cmp	r3, #25
 8002db6:	d908      	bls.n	8002dca <I2C_IsErrorOccurred+0xda>
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	623b      	str	r3, [r7, #32]
 8002dc0:	2327      	movs	r3, #39	@ 0x27
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e006      	b.n	8002dd8 <I2C_IsErrorOccurred+0xe8>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d1e8      	bne.n	8002daa <I2C_IsErrorOccurred+0xba>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2220      	movs	r2, #32
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d004      	beq.n	8002df0 <I2C_IsErrorOccurred+0x100>
 8002de6:	2327      	movs	r3, #39	@ 0x27
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d09b      	beq.n	8002d28 <I2C_IsErrorOccurred+0x38>
 8002df0:	2327      	movs	r3, #39	@ 0x27
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <I2C_IsErrorOccurred+0x112>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	61da      	str	r2, [r3, #28]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2204      	movs	r2, #4
 8002e06:	4313      	orrs	r3, r2
 8002e08:	623b      	str	r3, [r7, #32]
 8002e0a:	2327      	movs	r3, #39	@ 0x27
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	2201      	movs	r2, #1
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4013      	ands	r3, r2
 8002e22:	d00c      	beq.n	8002e3e <I2C_IsErrorOccurred+0x14e>
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	2201      	movs	r2, #1
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2280      	movs	r2, #128	@ 0x80
 8002e32:	0052      	lsls	r2, r2, #1
 8002e34:	61da      	str	r2, [r3, #28]
 8002e36:	2327      	movs	r3, #39	@ 0x27
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	2380      	movs	r3, #128	@ 0x80
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4013      	ands	r3, r2
 8002e46:	d00c      	beq.n	8002e62 <I2C_IsErrorOccurred+0x172>
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	623b      	str	r3, [r7, #32]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2280      	movs	r2, #128	@ 0x80
 8002e56:	00d2      	lsls	r2, r2, #3
 8002e58:	61da      	str	r2, [r3, #28]
 8002e5a:	2327      	movs	r3, #39	@ 0x27
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	2380      	movs	r3, #128	@ 0x80
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d00c      	beq.n	8002e86 <I2C_IsErrorOccurred+0x196>
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	4313      	orrs	r3, r2
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2280      	movs	r2, #128	@ 0x80
 8002e7a:	0092      	lsls	r2, r2, #2
 8002e7c:	61da      	str	r2, [r3, #28]
 8002e7e:	2327      	movs	r3, #39	@ 0x27
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	2327      	movs	r3, #39	@ 0x27
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01d      	beq.n	8002ecc <I2C_IsErrorOccurred+0x1dc>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7ff fe28 	bl	8002ae8 <I2C_Flush_TXDR>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	490e      	ldr	r1, [pc, #56]	@ (8002edc <I2C_IsErrorOccurred+0x1ec>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2241      	movs	r2, #65	@ 0x41
 8002eb8:	2120      	movs	r1, #32
 8002eba:	5499      	strb	r1, [r3, r2]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2242      	movs	r2, #66	@ 0x42
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	5499      	strb	r1, [r3, r2]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2240      	movs	r2, #64	@ 0x40
 8002ec8:	2100      	movs	r1, #0
 8002eca:	5499      	strb	r1, [r3, r2]
 8002ecc:	2327      	movs	r3, #39	@ 0x27
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b00a      	add	sp, #40	@ 0x28
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	fe00e800 	.word	0xfe00e800

08002ee0 <I2C_TransferConfig>:
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	0008      	movs	r0, r1
 8002eea:	0011      	movs	r1, r2
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	240a      	movs	r4, #10
 8002ef0:	193b      	adds	r3, r7, r4
 8002ef2:	1c02      	adds	r2, r0, #0
 8002ef4:	801a      	strh	r2, [r3, #0]
 8002ef6:	2009      	movs	r0, #9
 8002ef8:	183b      	adds	r3, r7, r0
 8002efa:	1c0a      	adds	r2, r1, #0
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	193b      	adds	r3, r7, r4
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	059b      	lsls	r3, r3, #22
 8002f04:	0d9a      	lsrs	r2, r3, #22
 8002f06:	183b      	adds	r3, r7, r0
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	0419      	lsls	r1, r3, #16
 8002f0c:	23ff      	movs	r3, #255	@ 0xff
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	400b      	ands	r3, r1
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f2a:	0d51      	lsrs	r1, r2, #21
 8002f2c:	2280      	movs	r2, #128	@ 0x80
 8002f2e:	00d2      	lsls	r2, r2, #3
 8002f30:	400a      	ands	r2, r1
 8002f32:	4907      	ldr	r1, [pc, #28]	@ (8002f50 <I2C_TransferConfig+0x70>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	43d2      	mvns	r2, r2
 8002f38:	401a      	ands	r2, r3
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b007      	add	sp, #28
 8002f4c:	bd90      	pop	{r4, r7, pc}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	03ff63ff 	.word	0x03ff63ff

08002f54 <HAL_I2CEx_ConfigAnalogFilter>:
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2241      	movs	r2, #65	@ 0x41
 8002f62:	5c9b      	ldrb	r3, [r3, r2]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d138      	bne.n	8002fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2240      	movs	r2, #64	@ 0x40
 8002f6e:	5c9b      	ldrb	r3, [r3, r2]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e032      	b.n	8002fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2240      	movs	r2, #64	@ 0x40
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	5499      	strb	r1, [r3, r2]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2241      	movs	r2, #65	@ 0x41
 8002f84:	2124      	movs	r1, #36	@ 0x24
 8002f86:	5499      	strb	r1, [r3, r2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2101      	movs	r1, #1
 8002f94:	438a      	bics	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4911      	ldr	r1, [pc, #68]	@ (8002fe8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6819      	ldr	r1, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2241      	movs	r2, #65	@ 0x41
 8002fcc:	2120      	movs	r1, #32
 8002fce:	5499      	strb	r1, [r3, r2]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2240      	movs	r2, #64	@ 0x40
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	5499      	strb	r1, [r3, r2]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e000      	b.n	8002fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b002      	add	sp, #8
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			@ (mov r8, r8)
 8002fe8:	ffffefff 	.word	0xffffefff

08002fec <HAL_I2CEx_ConfigDigitalFilter>:
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2241      	movs	r2, #65	@ 0x41
 8002ffa:	5c9b      	ldrb	r3, [r3, r2]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d139      	bne.n	8003076 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2240      	movs	r2, #64	@ 0x40
 8003006:	5c9b      	ldrb	r3, [r3, r2]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800300c:	2302      	movs	r3, #2
 800300e:	e033      	b.n	8003078 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2240      	movs	r2, #64	@ 0x40
 8003014:	2101      	movs	r1, #1
 8003016:	5499      	strb	r1, [r3, r2]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2241      	movs	r2, #65	@ 0x41
 800301c:	2124      	movs	r1, #36	@ 0x24
 800301e:	5499      	strb	r1, [r3, r2]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2101      	movs	r1, #1
 800302c:	438a      	bics	r2, r1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a11      	ldr	r2, [pc, #68]	@ (8003080 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2101      	movs	r1, #1
 800305e:	430a      	orrs	r2, r1
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2241      	movs	r2, #65	@ 0x41
 8003066:	2120      	movs	r1, #32
 8003068:	5499      	strb	r1, [r3, r2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2240      	movs	r2, #64	@ 0x40
 800306e:	2100      	movs	r1, #0
 8003070:	5499      	strb	r1, [r3, r2]
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003076:	2302      	movs	r3, #2
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b004      	add	sp, #16
 800307e:	bd80      	pop	{r7, pc}
 8003080:	fffff0ff 	.word	0xfffff0ff

08003084 <HAL_PWREx_ControlVoltageScaling>:
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	4b19      	ldr	r3, [pc, #100]	@ (80030f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a19      	ldr	r2, [pc, #100]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003092:	4013      	ands	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	2380      	movs	r3, #128	@ 0x80
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d11f      	bne.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0x64>
 80030a8:	4b14      	ldr	r3, [pc, #80]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0x78>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	0013      	movs	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	189b      	adds	r3, r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4912      	ldr	r1, [pc, #72]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7fd f82c 	bl	8000114 <__udivsi3>
 80030bc:	0003      	movs	r3, r0
 80030be:	3301      	adds	r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e008      	b.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x52>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_PWREx_ControlVoltageScaling+0x4e>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e001      	b.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x52>
 80030d2:	2303      	movs	r3, #3
 80030d4:	e009      	b.n	80030ea <HAL_PWREx_ControlVoltageScaling+0x66>
 80030d6:	4b07      	ldr	r3, [pc, #28]	@ (80030f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	2380      	movs	r3, #128	@ 0x80
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	401a      	ands	r2, r3
 80030e0:	2380      	movs	r3, #128	@ 0x80
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d0ed      	beq.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0x40>
 80030e8:	2300      	movs	r3, #0
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b004      	add	sp, #16
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	40007000 	.word	0x40007000
 80030f8:	fffff9ff 	.word	0xfffff9ff
 80030fc:	20000014 	.word	0x20000014
 8003100:	000f4240 	.word	0x000f4240

08003104 <HAL_RCC_OscConfig>:
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x12>
 8003112:	2301      	movs	r3, #1
 8003114:	e2f3      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2201      	movs	r2, #1
 800311c:	4013      	ands	r3, r2
 800311e:	d100      	bne.n	8003122 <HAL_RCC_OscConfig+0x1e>
 8003120:	e07c      	b.n	800321c <HAL_RCC_OscConfig+0x118>
 8003122:	4bc3      	ldr	r3, [pc, #780]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2238      	movs	r2, #56	@ 0x38
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	4bc0      	ldr	r3, [pc, #768]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2203      	movs	r2, #3
 8003132:	4013      	ands	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b10      	cmp	r3, #16
 800313a:	d102      	bne.n	8003142 <HAL_RCC_OscConfig+0x3e>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d002      	beq.n	8003148 <HAL_RCC_OscConfig+0x44>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d10b      	bne.n	8003160 <HAL_RCC_OscConfig+0x5c>
 8003148:	4bb9      	ldr	r3, [pc, #740]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	029b      	lsls	r3, r3, #10
 8003150:	4013      	ands	r3, r2
 8003152:	d062      	beq.n	800321a <HAL_RCC_OscConfig+0x116>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d15e      	bne.n	800321a <HAL_RCC_OscConfig+0x116>
 800315c:	2301      	movs	r3, #1
 800315e:	e2ce      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	2380      	movs	r3, #128	@ 0x80
 8003166:	025b      	lsls	r3, r3, #9
 8003168:	429a      	cmp	r2, r3
 800316a:	d107      	bne.n	800317c <HAL_RCC_OscConfig+0x78>
 800316c:	4bb0      	ldr	r3, [pc, #704]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4baf      	ldr	r3, [pc, #700]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003172:	2180      	movs	r1, #128	@ 0x80
 8003174:	0249      	lsls	r1, r1, #9
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e020      	b.n	80031be <HAL_RCC_OscConfig+0xba>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	23a0      	movs	r3, #160	@ 0xa0
 8003182:	02db      	lsls	r3, r3, #11
 8003184:	429a      	cmp	r2, r3
 8003186:	d10e      	bne.n	80031a6 <HAL_RCC_OscConfig+0xa2>
 8003188:	4ba9      	ldr	r3, [pc, #676]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4ba8      	ldr	r3, [pc, #672]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800318e:	2180      	movs	r1, #128	@ 0x80
 8003190:	02c9      	lsls	r1, r1, #11
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	4ba6      	ldr	r3, [pc, #664]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4ba5      	ldr	r3, [pc, #660]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800319c:	2180      	movs	r1, #128	@ 0x80
 800319e:	0249      	lsls	r1, r1, #9
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e00b      	b.n	80031be <HAL_RCC_OscConfig+0xba>
 80031a6:	4ba2      	ldr	r3, [pc, #648]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4ba1      	ldr	r3, [pc, #644]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80031ac:	49a1      	ldr	r1, [pc, #644]	@ (8003434 <HAL_RCC_OscConfig+0x330>)
 80031ae:	400a      	ands	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	4b9f      	ldr	r3, [pc, #636]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b9e      	ldr	r3, [pc, #632]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80031b8:	499f      	ldr	r1, [pc, #636]	@ (8003438 <HAL_RCC_OscConfig+0x334>)
 80031ba:	400a      	ands	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d014      	beq.n	80031f0 <HAL_RCC_OscConfig+0xec>
 80031c6:	f7fe fe07 	bl	8001dd8 <HAL_GetTick>
 80031ca:	0003      	movs	r3, r0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xde>
 80031d0:	f7fe fe02 	bl	8001dd8 <HAL_GetTick>
 80031d4:	0002      	movs	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	@ 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xde>
 80031de:	2303      	movs	r3, #3
 80031e0:	e28d      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 80031e2:	4b93      	ldr	r3, [pc, #588]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	@ 0x80
 80031e8:	029b      	lsls	r3, r3, #10
 80031ea:	4013      	ands	r3, r2
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0xcc>
 80031ee:	e015      	b.n	800321c <HAL_RCC_OscConfig+0x118>
 80031f0:	f7fe fdf2 	bl	8001dd8 <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x108>
 80031fa:	f7fe fded 	bl	8001dd8 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b64      	cmp	r3, #100	@ 0x64
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x108>
 8003208:	2303      	movs	r3, #3
 800320a:	e278      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 800320c:	4b88      	ldr	r3, [pc, #544]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	029b      	lsls	r3, r3, #10
 8003214:	4013      	ands	r3, r2
 8003216:	d1f0      	bne.n	80031fa <HAL_RCC_OscConfig+0xf6>
 8003218:	e000      	b.n	800321c <HAL_RCC_OscConfig+0x118>
 800321a:	46c0      	nop			@ (mov r8, r8)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2202      	movs	r2, #2
 8003222:	4013      	ands	r3, r2
 8003224:	d100      	bne.n	8003228 <HAL_RCC_OscConfig+0x124>
 8003226:	e099      	b.n	800335c <HAL_RCC_OscConfig+0x258>
 8003228:	4b81      	ldr	r3, [pc, #516]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2238      	movs	r2, #56	@ 0x38
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	4b7f      	ldr	r3, [pc, #508]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2203      	movs	r2, #3
 8003238:	4013      	ands	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2b10      	cmp	r3, #16
 8003240:	d102      	bne.n	8003248 <HAL_RCC_OscConfig+0x144>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d002      	beq.n	800324e <HAL_RCC_OscConfig+0x14a>
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d135      	bne.n	80032ba <HAL_RCC_OscConfig+0x1b6>
 800324e:	4b78      	ldr	r3, [pc, #480]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4013      	ands	r3, r2
 8003258:	d005      	beq.n	8003266 <HAL_RCC_OscConfig+0x162>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_OscConfig+0x162>
 8003262:	2301      	movs	r3, #1
 8003264:	e24b      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 8003266:	4b72      	ldr	r3, [pc, #456]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4a74      	ldr	r2, [pc, #464]	@ (800343c <HAL_RCC_OscConfig+0x338>)
 800326c:	4013      	ands	r3, r2
 800326e:	0019      	movs	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	021a      	lsls	r2, r3, #8
 8003276:	4b6e      	ldr	r3, [pc, #440]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d112      	bne.n	80032a8 <HAL_RCC_OscConfig+0x1a4>
 8003282:	4b6b      	ldr	r3, [pc, #428]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6e      	ldr	r2, [pc, #440]	@ (8003440 <HAL_RCC_OscConfig+0x33c>)
 8003288:	4013      	ands	r3, r2
 800328a:	0019      	movs	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	4b67      	ldr	r3, [pc, #412]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	4b66      	ldr	r3, [pc, #408]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	0adb      	lsrs	r3, r3, #11
 800329c:	2207      	movs	r2, #7
 800329e:	4013      	ands	r3, r2
 80032a0:	4a68      	ldr	r2, [pc, #416]	@ (8003444 <HAL_RCC_OscConfig+0x340>)
 80032a2:	40da      	lsrs	r2, r3
 80032a4:	4b68      	ldr	r3, [pc, #416]	@ (8003448 <HAL_RCC_OscConfig+0x344>)
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	4b68      	ldr	r3, [pc, #416]	@ (800344c <HAL_RCC_OscConfig+0x348>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7fe fd37 	bl	8001d20 <HAL_InitTick>
 80032b2:	1e03      	subs	r3, r0, #0
 80032b4:	d051      	beq.n	800335a <HAL_RCC_OscConfig+0x256>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e221      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d030      	beq.n	8003324 <HAL_RCC_OscConfig+0x220>
 80032c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003440 <HAL_RCC_OscConfig+0x33c>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	4b57      	ldr	r3, [pc, #348]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	4b56      	ldr	r3, [pc, #344]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b55      	ldr	r3, [pc, #340]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80032dc:	2180      	movs	r1, #128	@ 0x80
 80032de:	0049      	lsls	r1, r1, #1
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	f7fe fd78 	bl	8001dd8 <HAL_GetTick>
 80032e8:	0003      	movs	r3, r0
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x1fc>
 80032ee:	f7fe fd73 	bl	8001dd8 <HAL_GetTick>
 80032f2:	0002      	movs	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x1fc>
 80032fc:	2303      	movs	r3, #3
 80032fe:	e1fe      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 8003300:	4b4b      	ldr	r3, [pc, #300]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4013      	ands	r3, r2
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x1ea>
 800330c:	4b48      	ldr	r3, [pc, #288]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a4a      	ldr	r2, [pc, #296]	@ (800343c <HAL_RCC_OscConfig+0x338>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	4b44      	ldr	r3, [pc, #272]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	e01b      	b.n	800335c <HAL_RCC_OscConfig+0x258>
 8003324:	4b42      	ldr	r3, [pc, #264]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4b41      	ldr	r3, [pc, #260]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800332a:	4949      	ldr	r1, [pc, #292]	@ (8003450 <HAL_RCC_OscConfig+0x34c>)
 800332c:	400a      	ands	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f7fe fd52 	bl	8001dd8 <HAL_GetTick>
 8003334:	0003      	movs	r3, r0
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x248>
 800333a:	f7fe fd4d 	bl	8001dd8 <HAL_GetTick>
 800333e:	0002      	movs	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x248>
 8003348:	2303      	movs	r3, #3
 800334a:	e1d8      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 800334c:	4b38      	ldr	r3, [pc, #224]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4013      	ands	r3, r2
 8003356:	d1f0      	bne.n	800333a <HAL_RCC_OscConfig+0x236>
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x258>
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2208      	movs	r2, #8
 8003362:	4013      	ands	r3, r2
 8003364:	d047      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
 8003366:	4b32      	ldr	r3, [pc, #200]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2238      	movs	r2, #56	@ 0x38
 800336c:	4013      	ands	r3, r2
 800336e:	2b18      	cmp	r3, #24
 8003370:	d10a      	bne.n	8003388 <HAL_RCC_OscConfig+0x284>
 8003372:	4b2f      	ldr	r3, [pc, #188]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003376:	2202      	movs	r2, #2
 8003378:	4013      	ands	r3, r2
 800337a:	d03c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d138      	bne.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
 8003384:	2301      	movs	r3, #1
 8003386:	e1ba      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d019      	beq.n	80033c4 <HAL_RCC_OscConfig+0x2c0>
 8003390:	4b27      	ldr	r3, [pc, #156]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003392:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003394:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003396:	2101      	movs	r1, #1
 8003398:	430a      	orrs	r2, r1
 800339a:	661a      	str	r2, [r3, #96]	@ 0x60
 800339c:	f7fe fd1c 	bl	8001dd8 <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x2b4>
 80033a6:	f7fe fd17 	bl	8001dd8 <HAL_GetTick>
 80033aa:	0002      	movs	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x2b4>
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1a2      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 80033b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80033ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033bc:	2202      	movs	r2, #2
 80033be:	4013      	ands	r3, r2
 80033c0:	d0f1      	beq.n	80033a6 <HAL_RCC_OscConfig+0x2a2>
 80033c2:	e018      	b.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
 80033c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80033c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033c8:	4b19      	ldr	r3, [pc, #100]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	438a      	bics	r2, r1
 80033ce:	661a      	str	r2, [r3, #96]	@ 0x60
 80033d0:	f7fe fd02 	bl	8001dd8 <HAL_GetTick>
 80033d4:	0003      	movs	r3, r0
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x2e8>
 80033da:	f7fe fcfd 	bl	8001dd8 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x2e8>
 80033e8:	2303      	movs	r3, #3
 80033ea:	e188      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 80033ec:	4b10      	ldr	r3, [pc, #64]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 80033ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f0:	2202      	movs	r2, #2
 80033f2:	4013      	ands	r3, r2
 80033f4:	d1f1      	bne.n	80033da <HAL_RCC_OscConfig+0x2d6>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2204      	movs	r2, #4
 80033fc:	4013      	ands	r3, r2
 80033fe:	d100      	bne.n	8003402 <HAL_RCC_OscConfig+0x2fe>
 8003400:	e0c6      	b.n	8003590 <HAL_RCC_OscConfig+0x48c>
 8003402:	231f      	movs	r3, #31
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2238      	movs	r2, #56	@ 0x38
 8003410:	4013      	ands	r3, r2
 8003412:	2b20      	cmp	r3, #32
 8003414:	d11e      	bne.n	8003454 <HAL_RCC_OscConfig+0x350>
 8003416:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <HAL_RCC_OscConfig+0x32c>)
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	2202      	movs	r2, #2
 800341c:	4013      	ands	r3, r2
 800341e:	d100      	bne.n	8003422 <HAL_RCC_OscConfig+0x31e>
 8003420:	e0b6      	b.n	8003590 <HAL_RCC_OscConfig+0x48c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <HAL_RCC_OscConfig+0x328>
 800342a:	e0b1      	b.n	8003590 <HAL_RCC_OscConfig+0x48c>
 800342c:	2301      	movs	r3, #1
 800342e:	e166      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 8003430:	40021000 	.word	0x40021000
 8003434:	fffeffff 	.word	0xfffeffff
 8003438:	fffbffff 	.word	0xfffbffff
 800343c:	ffff80ff 	.word	0xffff80ff
 8003440:	ffffc7ff 	.word	0xffffc7ff
 8003444:	00f42400 	.word	0x00f42400
 8003448:	20000014 	.word	0x20000014
 800344c:	20000018 	.word	0x20000018
 8003450:	fffffeff 	.word	0xfffffeff
 8003454:	4bac      	ldr	r3, [pc, #688]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003458:	2380      	movs	r3, #128	@ 0x80
 800345a:	055b      	lsls	r3, r3, #21
 800345c:	4013      	ands	r3, r2
 800345e:	d101      	bne.n	8003464 <HAL_RCC_OscConfig+0x360>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x362>
 8003464:	2300      	movs	r3, #0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d011      	beq.n	800348e <HAL_RCC_OscConfig+0x38a>
 800346a:	4ba7      	ldr	r3, [pc, #668]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800346c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800346e:	4ba6      	ldr	r3, [pc, #664]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003470:	2180      	movs	r1, #128	@ 0x80
 8003472:	0549      	lsls	r1, r1, #21
 8003474:	430a      	orrs	r2, r1
 8003476:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003478:	4ba3      	ldr	r3, [pc, #652]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800347a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800347c:	2380      	movs	r3, #128	@ 0x80
 800347e:	055b      	lsls	r3, r3, #21
 8003480:	4013      	ands	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	231f      	movs	r3, #31
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	4b9f      	ldr	r3, [pc, #636]	@ (800370c <HAL_RCC_OscConfig+0x608>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	2380      	movs	r3, #128	@ 0x80
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4013      	ands	r3, r2
 8003498:	d11a      	bne.n	80034d0 <HAL_RCC_OscConfig+0x3cc>
 800349a:	4b9c      	ldr	r3, [pc, #624]	@ (800370c <HAL_RCC_OscConfig+0x608>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b9b      	ldr	r3, [pc, #620]	@ (800370c <HAL_RCC_OscConfig+0x608>)
 80034a0:	2180      	movs	r1, #128	@ 0x80
 80034a2:	0049      	lsls	r1, r1, #1
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f7fe fc96 	bl	8001dd8 <HAL_GetTick>
 80034ac:	0003      	movs	r3, r0
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
 80034b2:	f7fe fc91 	bl	8001dd8 <HAL_GetTick>
 80034b6:	0002      	movs	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
 80034c0:	2303      	movs	r3, #3
 80034c2:	e11c      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 80034c4:	4b91      	ldr	r3, [pc, #580]	@ (800370c <HAL_RCC_OscConfig+0x608>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	2380      	movs	r3, #128	@ 0x80
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4013      	ands	r3, r2
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x3ae>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x3e2>
 80034d8:	4b8b      	ldr	r3, [pc, #556]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 80034da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034dc:	4b8a      	ldr	r3, [pc, #552]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 80034de:	2101      	movs	r1, #1
 80034e0:	430a      	orrs	r2, r1
 80034e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x41c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x404>
 80034ee:	4b86      	ldr	r3, [pc, #536]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 80034f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034f2:	4b85      	ldr	r3, [pc, #532]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 80034f4:	2104      	movs	r1, #4
 80034f6:	430a      	orrs	r2, r1
 80034f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034fa:	4b83      	ldr	r3, [pc, #524]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 80034fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034fe:	4b82      	ldr	r3, [pc, #520]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003500:	2101      	movs	r1, #1
 8003502:	430a      	orrs	r2, r1
 8003504:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x41c>
 8003508:	4b7f      	ldr	r3, [pc, #508]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800350a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800350c:	4b7e      	ldr	r3, [pc, #504]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800350e:	2101      	movs	r1, #1
 8003510:	438a      	bics	r2, r1
 8003512:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003514:	4b7c      	ldr	r3, [pc, #496]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003516:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003518:	4b7b      	ldr	r3, [pc, #492]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800351a:	2104      	movs	r1, #4
 800351c:	438a      	bics	r2, r1
 800351e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d014      	beq.n	8003552 <HAL_RCC_OscConfig+0x44e>
 8003528:	f7fe fc56 	bl	8001dd8 <HAL_GetTick>
 800352c:	0003      	movs	r3, r0
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	e009      	b.n	8003546 <HAL_RCC_OscConfig+0x442>
 8003532:	f7fe fc51 	bl	8001dd8 <HAL_GetTick>
 8003536:	0002      	movs	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	4a74      	ldr	r2, [pc, #464]	@ (8003710 <HAL_RCC_OscConfig+0x60c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x442>
 8003542:	2303      	movs	r3, #3
 8003544:	e0db      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 8003546:	4b70      	ldr	r3, [pc, #448]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	2202      	movs	r2, #2
 800354c:	4013      	ands	r3, r2
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x42e>
 8003550:	e013      	b.n	800357a <HAL_RCC_OscConfig+0x476>
 8003552:	f7fe fc41 	bl	8001dd8 <HAL_GetTick>
 8003556:	0003      	movs	r3, r0
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	e009      	b.n	8003570 <HAL_RCC_OscConfig+0x46c>
 800355c:	f7fe fc3c 	bl	8001dd8 <HAL_GetTick>
 8003560:	0002      	movs	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	4a6a      	ldr	r2, [pc, #424]	@ (8003710 <HAL_RCC_OscConfig+0x60c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x46c>
 800356c:	2303      	movs	r3, #3
 800356e:	e0c6      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 8003570:	4b65      	ldr	r3, [pc, #404]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003574:	2202      	movs	r2, #2
 8003576:	4013      	ands	r3, r2
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x458>
 800357a:	231f      	movs	r3, #31
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCC_OscConfig+0x48c>
 8003584:	4b60      	ldr	r3, [pc, #384]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003586:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003588:	4b5f      	ldr	r3, [pc, #380]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800358a:	4962      	ldr	r1, [pc, #392]	@ (8003714 <HAL_RCC_OscConfig+0x610>)
 800358c:	400a      	ands	r2, r1
 800358e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d100      	bne.n	800359a <HAL_RCC_OscConfig+0x496>
 8003598:	e0b0      	b.n	80036fc <HAL_RCC_OscConfig+0x5f8>
 800359a:	4b5b      	ldr	r3, [pc, #364]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2238      	movs	r2, #56	@ 0x38
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d100      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4a4>
 80035a6:	e078      	b.n	800369a <HAL_RCC_OscConfig+0x596>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d153      	bne.n	8003658 <HAL_RCC_OscConfig+0x554>
 80035b0:	4b55      	ldr	r3, [pc, #340]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b54      	ldr	r3, [pc, #336]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 80035b6:	4958      	ldr	r1, [pc, #352]	@ (8003718 <HAL_RCC_OscConfig+0x614>)
 80035b8:	400a      	ands	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	f7fe fc0c 	bl	8001dd8 <HAL_GetTick>
 80035c0:	0003      	movs	r3, r0
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x4d4>
 80035c6:	f7fe fc07 	bl	8001dd8 <HAL_GetTick>
 80035ca:	0002      	movs	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x4d4>
 80035d4:	2303      	movs	r3, #3
 80035d6:	e092      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 80035d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	049b      	lsls	r3, r3, #18
 80035e0:	4013      	ands	r3, r2
 80035e2:	d1f0      	bne.n	80035c6 <HAL_RCC_OscConfig+0x4c2>
 80035e4:	4b48      	ldr	r3, [pc, #288]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a4c      	ldr	r2, [pc, #304]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	431a      	orrs	r2, r3
 800360c:	4b3e      	ldr	r3, [pc, #248]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800360e:	430a      	orrs	r2, r1
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	4b3d      	ldr	r3, [pc, #244]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b3c      	ldr	r3, [pc, #240]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003618:	2180      	movs	r1, #128	@ 0x80
 800361a:	0449      	lsls	r1, r1, #17
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	4b38      	ldr	r3, [pc, #224]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003626:	2180      	movs	r1, #128	@ 0x80
 8003628:	0549      	lsls	r1, r1, #21
 800362a:	430a      	orrs	r2, r1
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	f7fe fbd3 	bl	8001dd8 <HAL_GetTick>
 8003632:	0003      	movs	r3, r0
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x546>
 8003638:	f7fe fbce 	bl	8001dd8 <HAL_GetTick>
 800363c:	0002      	movs	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x546>
 8003646:	2303      	movs	r3, #3
 8003648:	e059      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 800364a:	4b2f      	ldr	r3, [pc, #188]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	049b      	lsls	r3, r3, #18
 8003652:	4013      	ands	r3, r2
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x534>
 8003656:	e051      	b.n	80036fc <HAL_RCC_OscConfig+0x5f8>
 8003658:	4b2b      	ldr	r3, [pc, #172]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4b2a      	ldr	r3, [pc, #168]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800365e:	492e      	ldr	r1, [pc, #184]	@ (8003718 <HAL_RCC_OscConfig+0x614>)
 8003660:	400a      	ands	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f7fe fbb8 	bl	8001dd8 <HAL_GetTick>
 8003668:	0003      	movs	r3, r0
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x57c>
 800366e:	f7fe fbb3 	bl	8001dd8 <HAL_GetTick>
 8003672:	0002      	movs	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x57c>
 800367c:	2303      	movs	r3, #3
 800367e:	e03e      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 8003680:	4b21      	ldr	r3, [pc, #132]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2380      	movs	r3, #128	@ 0x80
 8003686:	049b      	lsls	r3, r3, #18
 8003688:	4013      	ands	r3, r2
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x56a>
 800368c:	4b1e      	ldr	r3, [pc, #120]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	4b1d      	ldr	r3, [pc, #116]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 8003692:	4923      	ldr	r1, [pc, #140]	@ (8003720 <HAL_RCC_OscConfig+0x61c>)
 8003694:	400a      	ands	r2, r1
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	e030      	b.n	80036fc <HAL_RCC_OscConfig+0x5f8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_OscConfig+0x5a2>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e02b      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 80036a6:	4b18      	ldr	r3, [pc, #96]	@ (8003708 <HAL_RCC_OscConfig+0x604>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2203      	movs	r2, #3
 80036b0:	401a      	ands	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d11e      	bne.n	80036f8 <HAL_RCC_OscConfig+0x5f4>
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2270      	movs	r2, #112	@ 0x70
 80036be:	401a      	ands	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d117      	bne.n	80036f8 <HAL_RCC_OscConfig+0x5f4>
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	23fe      	movs	r3, #254	@ 0xfe
 80036cc:	01db      	lsls	r3, r3, #7
 80036ce:	401a      	ands	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d10e      	bne.n	80036f8 <HAL_RCC_OscConfig+0x5f4>
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	23f8      	movs	r3, #248	@ 0xf8
 80036de:	039b      	lsls	r3, r3, #14
 80036e0:	401a      	ands	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d106      	bne.n	80036f8 <HAL_RCC_OscConfig+0x5f4>
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	0f5b      	lsrs	r3, r3, #29
 80036ee:	075a      	lsls	r2, r3, #29
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0x5f8>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x5fa>
 80036fc:	2300      	movs	r3, #0
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b008      	add	sp, #32
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	40021000 	.word	0x40021000
 800370c:	40007000 	.word	0x40007000
 8003710:	00001388 	.word	0x00001388
 8003714:	efffffff 	.word	0xefffffff
 8003718:	feffffff 	.word	0xfeffffff
 800371c:	1fc1808c 	.word	0x1fc1808c
 8003720:	effefffc 	.word	0xeffefffc

08003724 <HAL_RCC_ClockConfig>:
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
 8003734:	2301      	movs	r3, #1
 8003736:	e0e9      	b.n	800390c <HAL_RCC_ClockConfig+0x1e8>
 8003738:	4b76      	ldr	r3, [pc, #472]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2207      	movs	r2, #7
 800373e:	4013      	ands	r3, r2
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d91e      	bls.n	8003784 <HAL_RCC_ClockConfig+0x60>
 8003746:	4b73      	ldr	r3, [pc, #460]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2207      	movs	r2, #7
 800374c:	4393      	bics	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	4b70      	ldr	r3, [pc, #448]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	f7fe fb3e 	bl	8001dd8 <HAL_GetTick>
 800375c:	0003      	movs	r3, r0
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e009      	b.n	8003776 <HAL_RCC_ClockConfig+0x52>
 8003762:	f7fe fb39 	bl	8001dd8 <HAL_GetTick>
 8003766:	0002      	movs	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	4a6a      	ldr	r2, [pc, #424]	@ (8003918 <HAL_RCC_ClockConfig+0x1f4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x52>
 8003772:	2303      	movs	r3, #3
 8003774:	e0ca      	b.n	800390c <HAL_RCC_ClockConfig+0x1e8>
 8003776:	4b67      	ldr	r3, [pc, #412]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2207      	movs	r2, #7
 800377c:	4013      	ands	r3, r2
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d1ee      	bne.n	8003762 <HAL_RCC_ClockConfig+0x3e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2202      	movs	r2, #2
 800378a:	4013      	ands	r3, r2
 800378c:	d015      	beq.n	80037ba <HAL_RCC_ClockConfig+0x96>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2204      	movs	r2, #4
 8003794:	4013      	ands	r3, r2
 8003796:	d006      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x82>
 8003798:	4b60      	ldr	r3, [pc, #384]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	4b5f      	ldr	r3, [pc, #380]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 800379e:	21e0      	movs	r1, #224	@ 0xe0
 80037a0:	01c9      	lsls	r1, r1, #7
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
 80037a6:	4b5d      	ldr	r3, [pc, #372]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003920 <HAL_RCC_ClockConfig+0x1fc>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	0019      	movs	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	4b59      	ldr	r3, [pc, #356]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2201      	movs	r2, #1
 80037c0:	4013      	ands	r3, r2
 80037c2:	d057      	beq.n	8003874 <HAL_RCC_ClockConfig+0x150>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_ClockConfig+0xb8>
 80037cc:	4b53      	ldr	r3, [pc, #332]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	2380      	movs	r3, #128	@ 0x80
 80037d2:	029b      	lsls	r3, r3, #10
 80037d4:	4013      	ands	r3, r2
 80037d6:	d12b      	bne.n	8003830 <HAL_RCC_ClockConfig+0x10c>
 80037d8:	2301      	movs	r3, #1
 80037da:	e097      	b.n	800390c <HAL_RCC_ClockConfig+0x1e8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xd0>
 80037e4:	4b4d      	ldr	r3, [pc, #308]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	2380      	movs	r3, #128	@ 0x80
 80037ea:	049b      	lsls	r3, r3, #18
 80037ec:	4013      	ands	r3, r2
 80037ee:	d11f      	bne.n	8003830 <HAL_RCC_ClockConfig+0x10c>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e08b      	b.n	800390c <HAL_RCC_ClockConfig+0x1e8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d107      	bne.n	800380c <HAL_RCC_ClockConfig+0xe8>
 80037fc:	4b47      	ldr	r3, [pc, #284]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2380      	movs	r3, #128	@ 0x80
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4013      	ands	r3, r2
 8003806:	d113      	bne.n	8003830 <HAL_RCC_ClockConfig+0x10c>
 8003808:	2301      	movs	r3, #1
 800380a:	e07f      	b.n	800390c <HAL_RCC_ClockConfig+0x1e8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d106      	bne.n	8003822 <HAL_RCC_ClockConfig+0xfe>
 8003814:	4b41      	ldr	r3, [pc, #260]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 8003816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003818:	2202      	movs	r2, #2
 800381a:	4013      	ands	r3, r2
 800381c:	d108      	bne.n	8003830 <HAL_RCC_ClockConfig+0x10c>
 800381e:	2301      	movs	r3, #1
 8003820:	e074      	b.n	800390c <HAL_RCC_ClockConfig+0x1e8>
 8003822:	4b3e      	ldr	r3, [pc, #248]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 8003824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003826:	2202      	movs	r2, #2
 8003828:	4013      	ands	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x10c>
 800382c:	2301      	movs	r3, #1
 800382e:	e06d      	b.n	800390c <HAL_RCC_ClockConfig+0x1e8>
 8003830:	4b3a      	ldr	r3, [pc, #232]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2207      	movs	r2, #7
 8003836:	4393      	bics	r3, r2
 8003838:	0019      	movs	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	4b37      	ldr	r3, [pc, #220]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	f7fe fac8 	bl	8001dd8 <HAL_GetTick>
 8003848:	0003      	movs	r3, r0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e009      	b.n	8003862 <HAL_RCC_ClockConfig+0x13e>
 800384e:	f7fe fac3 	bl	8001dd8 <HAL_GetTick>
 8003852:	0002      	movs	r2, r0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	4a2f      	ldr	r2, [pc, #188]	@ (8003918 <HAL_RCC_ClockConfig+0x1f4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_ClockConfig+0x13e>
 800385e:	2303      	movs	r3, #3
 8003860:	e054      	b.n	800390c <HAL_RCC_ClockConfig+0x1e8>
 8003862:	4b2e      	ldr	r3, [pc, #184]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2238      	movs	r2, #56	@ 0x38
 8003868:	401a      	ands	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	429a      	cmp	r2, r3
 8003872:	d1ec      	bne.n	800384e <HAL_RCC_ClockConfig+0x12a>
 8003874:	4b27      	ldr	r3, [pc, #156]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2207      	movs	r2, #7
 800387a:	4013      	ands	r3, r2
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d21e      	bcs.n	80038c0 <HAL_RCC_ClockConfig+0x19c>
 8003882:	4b24      	ldr	r3, [pc, #144]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2207      	movs	r2, #7
 8003888:	4393      	bics	r3, r2
 800388a:	0019      	movs	r1, r3
 800388c:	4b21      	ldr	r3, [pc, #132]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f7fe faa0 	bl	8001dd8 <HAL_GetTick>
 8003898:	0003      	movs	r3, r0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e009      	b.n	80038b2 <HAL_RCC_ClockConfig+0x18e>
 800389e:	f7fe fa9b 	bl	8001dd8 <HAL_GetTick>
 80038a2:	0002      	movs	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003918 <HAL_RCC_ClockConfig+0x1f4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_ClockConfig+0x18e>
 80038ae:	2303      	movs	r3, #3
 80038b0:	e02c      	b.n	800390c <HAL_RCC_ClockConfig+0x1e8>
 80038b2:	4b18      	ldr	r3, [pc, #96]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2207      	movs	r2, #7
 80038b8:	4013      	ands	r3, r2
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d1ee      	bne.n	800389e <HAL_RCC_ClockConfig+0x17a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2204      	movs	r2, #4
 80038c6:	4013      	ands	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_RCC_ClockConfig+0x1ba>
 80038ca:	4b14      	ldr	r3, [pc, #80]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	4a15      	ldr	r2, [pc, #84]	@ (8003924 <HAL_RCC_ClockConfig+0x200>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	0019      	movs	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	4b10      	ldr	r3, [pc, #64]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 80038da:	430a      	orrs	r2, r1
 80038dc:	609a      	str	r2, [r3, #8]
 80038de:	f000 f829 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038e2:	0001      	movs	r1, r0
 80038e4:	4b0d      	ldr	r3, [pc, #52]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	220f      	movs	r2, #15
 80038ec:	401a      	ands	r2, r3
 80038ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003928 <HAL_RCC_ClockConfig+0x204>)
 80038f0:	0092      	lsls	r2, r2, #2
 80038f2:	58d3      	ldr	r3, [r2, r3]
 80038f4:	221f      	movs	r2, #31
 80038f6:	4013      	ands	r3, r2
 80038f8:	000a      	movs	r2, r1
 80038fa:	40da      	lsrs	r2, r3
 80038fc:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <HAL_RCC_ClockConfig+0x208>)
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_RCC_ClockConfig+0x20c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0018      	movs	r0, r3
 8003906:	f7fe fa0b 	bl	8001d20 <HAL_InitTick>
 800390a:	0003      	movs	r3, r0
 800390c:	0018      	movs	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	b004      	add	sp, #16
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40022000 	.word	0x40022000
 8003918:	00001388 	.word	0x00001388
 800391c:	40021000 	.word	0x40021000
 8003920:	fffff0ff 	.word	0xfffff0ff
 8003924:	ffff8fff 	.word	0xffff8fff
 8003928:	08008084 	.word	0x08008084
 800392c:	20000014 	.word	0x20000014
 8003930:	20000018 	.word	0x20000018

08003934 <HAL_RCC_GetSysClockFreq>:
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2238      	movs	r2, #56	@ 0x38
 8003940:	4013      	ands	r3, r2
 8003942:	d10f      	bne.n	8003964 <HAL_RCC_GetSysClockFreq+0x30>
 8003944:	4b39      	ldr	r3, [pc, #228]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0adb      	lsrs	r3, r3, #11
 800394a:	2207      	movs	r2, #7
 800394c:	4013      	ands	r3, r2
 800394e:	2201      	movs	r2, #1
 8003950:	409a      	lsls	r2, r3
 8003952:	0013      	movs	r3, r2
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	6839      	ldr	r1, [r7, #0]
 8003958:	4835      	ldr	r0, [pc, #212]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0xfc>)
 800395a:	f7fc fbdb 	bl	8000114 <__udivsi3>
 800395e:	0003      	movs	r3, r0
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	e05d      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0xec>
 8003964:	4b31      	ldr	r3, [pc, #196]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2238      	movs	r2, #56	@ 0x38
 800396a:	4013      	ands	r3, r2
 800396c:	2b08      	cmp	r3, #8
 800396e:	d102      	bne.n	8003976 <HAL_RCC_GetSysClockFreq+0x42>
 8003970:	4b30      	ldr	r3, [pc, #192]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x100>)
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e054      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0xec>
 8003976:	4b2d      	ldr	r3, [pc, #180]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2238      	movs	r2, #56	@ 0x38
 800397c:	4013      	ands	r3, r2
 800397e:	2b10      	cmp	r3, #16
 8003980:	d138      	bne.n	80039f4 <HAL_RCC_GetSysClockFreq+0xc0>
 8003982:	4b2a      	ldr	r3, [pc, #168]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2203      	movs	r2, #3
 8003988:	4013      	ands	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	4b27      	ldr	r3, [pc, #156]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	2207      	movs	r2, #7
 8003994:	4013      	ands	r3, r2
 8003996:	3301      	adds	r3, #1
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d10d      	bne.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	4824      	ldr	r0, [pc, #144]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x100>)
 80039a4:	f7fc fbb6 	bl	8000114 <__udivsi3>
 80039a8:	0003      	movs	r3, r0
 80039aa:	0019      	movs	r1, r3
 80039ac:	4b1f      	ldr	r3, [pc, #124]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	227f      	movs	r2, #127	@ 0x7f
 80039b4:	4013      	ands	r3, r2
 80039b6:	434b      	muls	r3, r1
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e00d      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xa4>
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	481c      	ldr	r0, [pc, #112]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0xfc>)
 80039c0:	f7fc fba8 	bl	8000114 <__udivsi3>
 80039c4:	0003      	movs	r3, r0
 80039c6:	0019      	movs	r1, r3
 80039c8:	4b18      	ldr	r3, [pc, #96]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	227f      	movs	r2, #127	@ 0x7f
 80039d0:	4013      	ands	r3, r2
 80039d2:	434b      	muls	r3, r1
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	46c0      	nop			@ (mov r8, r8)
 80039d8:	4b14      	ldr	r3, [pc, #80]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	0f5b      	lsrs	r3, r3, #29
 80039de:	2207      	movs	r2, #7
 80039e0:	4013      	ands	r3, r2
 80039e2:	3301      	adds	r3, #1
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	6978      	ldr	r0, [r7, #20]
 80039ea:	f7fc fb93 	bl	8000114 <__udivsi3>
 80039ee:	0003      	movs	r3, r0
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e015      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0xec>
 80039f4:	4b0d      	ldr	r3, [pc, #52]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2238      	movs	r2, #56	@ 0x38
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d103      	bne.n	8003a08 <HAL_RCC_GetSysClockFreq+0xd4>
 8003a00:	2380      	movs	r3, #128	@ 0x80
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0xec>
 8003a08:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2238      	movs	r2, #56	@ 0x38
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b18      	cmp	r3, #24
 8003a12:	d103      	bne.n	8003a1c <HAL_RCC_GetSysClockFreq+0xe8>
 8003a14:	23fa      	movs	r3, #250	@ 0xfa
 8003a16:	01db      	lsls	r3, r3, #7
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	e001      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0xec>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	0018      	movs	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b006      	add	sp, #24
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	00f42400 	.word	0x00f42400
 8003a34:	007a1200 	.word	0x007a1200

08003a38 <HAL_RCCEx_PeriphCLKConfig>:
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	2313      	movs	r3, #19
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	2312      	movs	r3, #18
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	029b      	lsls	r3, r3, #10
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d100      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a5c:	e0a3      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003a5e:	2011      	movs	r0, #17
 8003a60:	183b      	adds	r3, r7, r0
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	4b7f      	ldr	r3, [pc, #508]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a6a:	2380      	movs	r3, #128	@ 0x80
 8003a6c:	055b      	lsls	r3, r3, #21
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d110      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003a72:	4b7c      	ldr	r3, [pc, #496]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a76:	4b7b      	ldr	r3, [pc, #492]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a78:	2180      	movs	r1, #128	@ 0x80
 8003a7a:	0549      	lsls	r1, r1, #21
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a80:	4b78      	ldr	r3, [pc, #480]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a84:	2380      	movs	r3, #128	@ 0x80
 8003a86:	055b      	lsls	r3, r3, #21
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	183b      	adds	r3, r7, r0
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	4b74      	ldr	r3, [pc, #464]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b73      	ldr	r3, [pc, #460]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a9a:	2180      	movs	r1, #128	@ 0x80
 8003a9c:	0049      	lsls	r1, r1, #1
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f7fe f999 	bl	8001dd8 <HAL_GetTick>
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e00b      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8003aac:	f7fe f994 	bl	8001dd8 <HAL_GetTick>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d904      	bls.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8003aba:	2313      	movs	r3, #19
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	2203      	movs	r2, #3
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	e005      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ac4:	4b68      	ldr	r3, [pc, #416]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4013      	ands	r3, r2
 8003ace:	d0ed      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ad0:	2313      	movs	r3, #19
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d154      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003ada:	4b62      	ldr	r3, [pc, #392]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003adc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ade:	23c0      	movs	r3, #192	@ 0xc0
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d019      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d014      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003af6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afa:	4a5c      	ldr	r2, [pc, #368]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	4b58      	ldr	r3, [pc, #352]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b04:	4b57      	ldr	r3, [pc, #348]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b06:	2180      	movs	r1, #128	@ 0x80
 8003b08:	0249      	lsls	r1, r1, #9
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b0e:	4b55      	ldr	r3, [pc, #340]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b12:	4b54      	ldr	r3, [pc, #336]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b14:	4956      	ldr	r1, [pc, #344]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003b16:	400a      	ands	r2, r1
 8003b18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b1a:	4b52      	ldr	r3, [pc, #328]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2201      	movs	r2, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	d016      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8003b28:	f7fe f956 	bl	8001dd8 <HAL_GetTick>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e00c      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003b32:	f7fe f951 	bl	8001dd8 <HAL_GetTick>
 8003b36:	0002      	movs	r2, r0
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	4a4d      	ldr	r2, [pc, #308]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d904      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003b42:	2313      	movs	r3, #19
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	2203      	movs	r2, #3
 8003b48:	701a      	strb	r2, [r3, #0]
 8003b4a:	e004      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8003b4c:	4b45      	ldr	r3, [pc, #276]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b50:	2202      	movs	r2, #2
 8003b52:	4013      	ands	r3, r2
 8003b54:	d0ed      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003b56:	2313      	movs	r3, #19
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8003b60:	4b40      	ldr	r3, [pc, #256]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b64:	4a41      	ldr	r2, [pc, #260]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	0019      	movs	r1, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b70:	430a      	orrs	r2, r1
 8003b72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b74:	e00c      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003b76:	2312      	movs	r3, #18
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	2213      	movs	r2, #19
 8003b7c:	18ba      	adds	r2, r7, r2
 8003b7e:	7812      	ldrb	r2, [r2, #0]
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e005      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003b84:	2312      	movs	r3, #18
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	2213      	movs	r2, #19
 8003b8a:	18ba      	adds	r2, r7, r2
 8003b8c:	7812      	ldrb	r2, [r2, #0]
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	2311      	movs	r3, #17
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d105      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003b9a:	4b32      	ldr	r3, [pc, #200]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b9e:	4b31      	ldr	r3, [pc, #196]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ba0:	4935      	ldr	r1, [pc, #212]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ba2:	400a      	ands	r2, r1
 8003ba4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	4013      	ands	r3, r2
 8003bae:	d009      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	4393      	bics	r3, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	4b29      	ldr	r3, [pc, #164]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bce:	4b25      	ldr	r3, [pc, #148]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	4b21      	ldr	r3, [pc, #132]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bde:	430a      	orrs	r2, r1
 8003be0:	655a      	str	r2, [r3, #84]	@ 0x54
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	@ 0x80
 8003be8:	01db      	lsls	r3, r3, #7
 8003bea:	4013      	ands	r3, r2
 8003bec:	d015      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bee:	4b1d      	ldr	r3, [pc, #116]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	0899      	lsrs	r1, r3, #2
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	2380      	movs	r3, #128	@ 0x80
 8003c06:	05db      	lsls	r3, r3, #23
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d106      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c0c:	4b15      	ldr	r3, [pc, #84]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c12:	2180      	movs	r1, #128	@ 0x80
 8003c14:	0249      	lsls	r1, r1, #9
 8003c16:	430a      	orrs	r2, r1
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	2380      	movs	r3, #128	@ 0x80
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	4013      	ands	r3, r2
 8003c24:	d016      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003c26:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2a:	4a15      	ldr	r2, [pc, #84]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	0019      	movs	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c36:	430a      	orrs	r2, r1
 8003c38:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	2380      	movs	r3, #128	@ 0x80
 8003c40:	01db      	lsls	r3, r3, #7
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d106      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003c46:	4b07      	ldr	r3, [pc, #28]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c4c:	2180      	movs	r1, #128	@ 0x80
 8003c4e:	0249      	lsls	r1, r1, #9
 8003c50:	430a      	orrs	r2, r1
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	2312      	movs	r3, #18
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b006      	add	sp, #24
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40007000 	.word	0x40007000
 8003c6c:	fffffcff 	.word	0xfffffcff
 8003c70:	fffeffff 	.word	0xfffeffff
 8003c74:	00001388 	.word	0x00001388
 8003c78:	efffffff 	.word	0xefffffff
 8003c7c:	ffffcfff 	.word	0xffffcfff
 8003c80:	ffff3fff 	.word	0xffff3fff

08003c84 <HAL_TIM_Base_Init>:
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_TIM_Base_Init+0x12>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e04a      	b.n	8003d2c <HAL_TIM_Base_Init+0xa8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	223d      	movs	r2, #61	@ 0x3d
 8003c9a:	5c9b      	ldrb	r3, [r3, r2]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d107      	bne.n	8003cb2 <HAL_TIM_Base_Init+0x2e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	223c      	movs	r2, #60	@ 0x3c
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	5499      	strb	r1, [r3, r2]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7fd ff67 	bl	8001b80 <HAL_TIM_Base_MspInit>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	223d      	movs	r2, #61	@ 0x3d
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	5499      	strb	r1, [r3, r2]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	0010      	movs	r0, r2
 8003cc6:	f000 f9ab 	bl	8004020 <TIM_Base_SetConfig>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2248      	movs	r2, #72	@ 0x48
 8003cce:	2101      	movs	r1, #1
 8003cd0:	5499      	strb	r1, [r3, r2]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	223e      	movs	r2, #62	@ 0x3e
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	5499      	strb	r1, [r3, r2]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	223f      	movs	r2, #63	@ 0x3f
 8003cde:	2101      	movs	r1, #1
 8003ce0:	5499      	strb	r1, [r3, r2]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2240      	movs	r2, #64	@ 0x40
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	5499      	strb	r1, [r3, r2]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2241      	movs	r2, #65	@ 0x41
 8003cee:	2101      	movs	r1, #1
 8003cf0:	5499      	strb	r1, [r3, r2]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2242      	movs	r2, #66	@ 0x42
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2243      	movs	r2, #67	@ 0x43
 8003cfe:	2101      	movs	r1, #1
 8003d00:	5499      	strb	r1, [r3, r2]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2244      	movs	r2, #68	@ 0x44
 8003d06:	2101      	movs	r1, #1
 8003d08:	5499      	strb	r1, [r3, r2]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2245      	movs	r2, #69	@ 0x45
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2246      	movs	r2, #70	@ 0x46
 8003d16:	2101      	movs	r1, #1
 8003d18:	5499      	strb	r1, [r3, r2]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2247      	movs	r2, #71	@ 0x47
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	223d      	movs	r2, #61	@ 0x3d
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b002      	add	sp, #8
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_TIM_Base_Start_IT>:
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	223d      	movs	r2, #61	@ 0x3d
 8003d40:	5c9b      	ldrb	r3, [r3, r2]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d001      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x18>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e037      	b.n	8003dbc <HAL_TIM_Base_Start_IT+0x88>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	223d      	movs	r2, #61	@ 0x3d
 8003d50:	2102      	movs	r1, #2
 8003d52:	5499      	strb	r1, [r3, r2]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2101      	movs	r1, #1
 8003d60:	430a      	orrs	r2, r1
 8003d62:	60da      	str	r2, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a16      	ldr	r2, [pc, #88]	@ (8003dc4 <HAL_TIM_Base_Start_IT+0x90>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d004      	beq.n	8003d78 <HAL_TIM_Base_Start_IT+0x44>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a15      	ldr	r2, [pc, #84]	@ (8003dc8 <HAL_TIM_Base_Start_IT+0x94>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d116      	bne.n	8003da6 <HAL_TIM_Base_Start_IT+0x72>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	4a13      	ldr	r2, [pc, #76]	@ (8003dcc <HAL_TIM_Base_Start_IT+0x98>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b06      	cmp	r3, #6
 8003d88:	d016      	beq.n	8003db8 <HAL_TIM_Base_Start_IT+0x84>
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	2380      	movs	r3, #128	@ 0x80
 8003d8e:	025b      	lsls	r3, r3, #9
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d011      	beq.n	8003db8 <HAL_TIM_Base_Start_IT+0x84>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2101      	movs	r1, #1
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e008      	b.n	8003db8 <HAL_TIM_Base_Start_IT+0x84>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e000      	b.n	8003dba <HAL_TIM_Base_Start_IT+0x86>
 8003db8:	46c0      	nop			@ (mov r8, r8)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b004      	add	sp, #16
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	00010007 	.word	0x00010007

08003dd0 <HAL_TIM_IRQHandler>:
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2202      	movs	r2, #2
 8003dec:	4013      	ands	r3, r2
 8003dee:	d021      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x64>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2202      	movs	r2, #2
 8003df4:	4013      	ands	r3, r2
 8003df6:	d01d      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x64>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	4252      	negs	r2, r2
 8003e00:	611a      	str	r2, [r3, #16]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	771a      	strb	r2, [r3, #28]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2203      	movs	r2, #3
 8003e10:	4013      	ands	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_TIM_IRQHandler+0x4e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 f8ea 	bl	8003ff0 <HAL_TIM_IC_CaptureCallback>
 8003e1c:	e007      	b.n	8003e2e <HAL_TIM_IRQHandler+0x5e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 f8dd 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f000 f8e9 	bl	8004000 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2204      	movs	r2, #4
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xb2>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2204      	movs	r2, #4
 8003e40:	4013      	ands	r3, r2
 8003e42:	d01e      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xb2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2205      	movs	r2, #5
 8003e4a:	4252      	negs	r2, r2
 8003e4c:	611a      	str	r2, [r3, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	771a      	strb	r2, [r3, #28]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	23c0      	movs	r3, #192	@ 0xc0
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_TIM_IRQHandler+0x9c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f000 f8c3 	bl	8003ff0 <HAL_TIM_IC_CaptureCallback>
 8003e6a:	e007      	b.n	8003e7c <HAL_TIM_IRQHandler+0xac>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 f8b6 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	0018      	movs	r0, r3
 8003e78:	f000 f8c2 	bl	8004000 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	771a      	strb	r2, [r3, #28]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2208      	movs	r2, #8
 8003e86:	4013      	ands	r3, r2
 8003e88:	d021      	beq.n	8003ece <HAL_TIM_IRQHandler+0xfe>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d01d      	beq.n	8003ece <HAL_TIM_IRQHandler+0xfe>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2209      	movs	r2, #9
 8003e98:	4252      	negs	r2, r2
 8003e9a:	611a      	str	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2204      	movs	r2, #4
 8003ea0:	771a      	strb	r2, [r3, #28]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0xe8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 f89d 	bl	8003ff0 <HAL_TIM_IC_CaptureCallback>
 8003eb6:	e007      	b.n	8003ec8 <HAL_TIM_IRQHandler+0xf8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f000 f890 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f000 f89c 	bl	8004000 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	771a      	strb	r2, [r3, #28]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x14c>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2210      	movs	r2, #16
 8003eda:	4013      	ands	r3, r2
 8003edc:	d01e      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x14c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2211      	movs	r2, #17
 8003ee4:	4252      	negs	r2, r2
 8003ee6:	611a      	str	r2, [r3, #16]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2208      	movs	r2, #8
 8003eec:	771a      	strb	r2, [r3, #28]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	23c0      	movs	r3, #192	@ 0xc0
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_TIM_IRQHandler+0x136>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 f876 	bl	8003ff0 <HAL_TIM_IC_CaptureCallback>
 8003f04:	e007      	b.n	8003f16 <HAL_TIM_IRQHandler+0x146>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 f869 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	0018      	movs	r0, r3
 8003f12:	f000 f875 	bl	8004000 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	4013      	ands	r3, r2
 8003f22:	d00c      	beq.n	8003f3e <HAL_TIM_IRQHandler+0x16e>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d008      	beq.n	8003f3e <HAL_TIM_IRQHandler+0x16e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2202      	movs	r2, #2
 8003f32:	4252      	negs	r2, r2
 8003f34:	611a      	str	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7fc ffeb 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2280      	movs	r2, #128	@ 0x80
 8003f42:	4013      	ands	r3, r2
 8003f44:	d104      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x180>
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	2380      	movs	r3, #128	@ 0x80
 8003f4a:	019b      	lsls	r3, r3, #6
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d00b      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x198>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2280      	movs	r2, #128	@ 0x80
 8003f54:	4013      	ands	r3, r2
 8003f56:	d007      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x198>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd8 <HAL_TIM_IRQHandler+0x208>)
 8003f5e:	611a      	str	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	0018      	movs	r0, r3
 8003f64:	f000 f8de 	bl	8004124 <HAL_TIMEx_BreakCallback>
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	2380      	movs	r3, #128	@ 0x80
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x1ba>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2280      	movs	r2, #128	@ 0x80
 8003f76:	4013      	ands	r3, r2
 8003f78:	d007      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x1ba>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a17      	ldr	r2, [pc, #92]	@ (8003fdc <HAL_TIM_IRQHandler+0x20c>)
 8003f80:	611a      	str	r2, [r3, #16]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 f8d5 	bl	8004134 <HAL_TIMEx_Break2Callback>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2240      	movs	r2, #64	@ 0x40
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d00c      	beq.n	8003fac <HAL_TIM_IRQHandler+0x1dc>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2240      	movs	r2, #64	@ 0x40
 8003f96:	4013      	ands	r3, r2
 8003f98:	d008      	beq.n	8003fac <HAL_TIM_IRQHandler+0x1dc>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2241      	movs	r2, #65	@ 0x41
 8003fa0:	4252      	negs	r2, r2
 8003fa2:	611a      	str	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f000 f832 	bl	8004010 <HAL_TIM_TriggerCallback>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d00c      	beq.n	8003fce <HAL_TIM_IRQHandler+0x1fe>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d008      	beq.n	8003fce <HAL_TIM_IRQHandler+0x1fe>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2221      	movs	r2, #33	@ 0x21
 8003fc2:	4252      	negs	r2, r2
 8003fc4:	611a      	str	r2, [r3, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f000 f8a3 	bl	8004114 <HAL_TIMEx_CommutCallback>
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b004      	add	sp, #16
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	ffffdf7f 	.word	0xffffdf7f
 8003fdc:	fffffeff 	.word	0xfffffeff

08003fe0 <HAL_TIM_OC_DelayElapsedCallback>:
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	46c0      	nop			@ (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_TIM_IC_CaptureCallback>:
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	46c0      	nop			@ (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	46c0      	nop			@ (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_TIM_TriggerCallback>:
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	46c0      	nop			@ (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <TIM_Base_SetConfig>:
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a32      	ldr	r2, [pc, #200]	@ (80040fc <TIM_Base_SetConfig+0xdc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_Base_SetConfig+0x20>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a31      	ldr	r2, [pc, #196]	@ (8004100 <TIM_Base_SetConfig+0xe0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d108      	bne.n	8004052 <TIM_Base_SetConfig+0x32>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2270      	movs	r2, #112	@ 0x70
 8004044:	4393      	bics	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a29      	ldr	r2, [pc, #164]	@ (80040fc <TIM_Base_SetConfig+0xdc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00f      	beq.n	800407a <TIM_Base_SetConfig+0x5a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a28      	ldr	r2, [pc, #160]	@ (8004100 <TIM_Base_SetConfig+0xe0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_Base_SetConfig+0x5a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a27      	ldr	r2, [pc, #156]	@ (8004104 <TIM_Base_SetConfig+0xe4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_Base_SetConfig+0x5a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a26      	ldr	r2, [pc, #152]	@ (8004108 <TIM_Base_SetConfig+0xe8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_Base_SetConfig+0x5a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a25      	ldr	r2, [pc, #148]	@ (800410c <TIM_Base_SetConfig+0xec>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <TIM_Base_SetConfig+0x6c>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a24      	ldr	r2, [pc, #144]	@ (8004110 <TIM_Base_SetConfig+0xf0>)
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2280      	movs	r2, #128	@ 0x80
 8004090:	4393      	bics	r3, r2
 8004092:	001a      	movs	r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a11      	ldr	r2, [pc, #68]	@ (80040fc <TIM_Base_SetConfig+0xdc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a12      	ldr	r2, [pc, #72]	@ (8004108 <TIM_Base_SetConfig+0xe8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a11      	ldr	r2, [pc, #68]	@ (800410c <TIM_Base_SetConfig+0xec>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d103      	bne.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	615a      	str	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2201      	movs	r2, #1
 80040de:	4013      	ands	r3, r2
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d106      	bne.n	80040f2 <TIM_Base_SetConfig+0xd2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2201      	movs	r2, #1
 80040ea:	4393      	bics	r3, r2
 80040ec:	001a      	movs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	611a      	str	r2, [r3, #16]
 80040f2:	46c0      	nop			@ (mov r8, r8)
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b004      	add	sp, #16
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40000400 	.word	0x40000400
 8004104:	40002000 	.word	0x40002000
 8004108:	40014400 	.word	0x40014400
 800410c:	40014800 	.word	0x40014800
 8004110:	fffffcff 	.word	0xfffffcff

08004114 <HAL_TIMEx_CommutCallback>:
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	46c0      	nop			@ (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b002      	add	sp, #8
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_TIMEx_BreakCallback>:
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	46c0      	nop			@ (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIMEx_Break2Callback>:
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	46c0      	nop			@ (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b002      	add	sp, #8
 8004142:	bd80      	pop	{r7, pc}

08004144 <siprintf>:
 8004144:	b40e      	push	{r1, r2, r3}
 8004146:	b510      	push	{r4, lr}
 8004148:	2400      	movs	r4, #0
 800414a:	490c      	ldr	r1, [pc, #48]	@ (800417c <siprintf+0x38>)
 800414c:	b09d      	sub	sp, #116	@ 0x74
 800414e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004150:	9002      	str	r0, [sp, #8]
 8004152:	9006      	str	r0, [sp, #24]
 8004154:	9107      	str	r1, [sp, #28]
 8004156:	9104      	str	r1, [sp, #16]
 8004158:	4809      	ldr	r0, [pc, #36]	@ (8004180 <siprintf+0x3c>)
 800415a:	490a      	ldr	r1, [pc, #40]	@ (8004184 <siprintf+0x40>)
 800415c:	cb04      	ldmia	r3!, {r2}
 800415e:	9105      	str	r1, [sp, #20]
 8004160:	6800      	ldr	r0, [r0, #0]
 8004162:	a902      	add	r1, sp, #8
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004168:	f000 f9a8 	bl	80044bc <_svfiprintf_r>
 800416c:	9b02      	ldr	r3, [sp, #8]
 800416e:	701c      	strb	r4, [r3, #0]
 8004170:	b01d      	add	sp, #116	@ 0x74
 8004172:	bc10      	pop	{r4}
 8004174:	bc08      	pop	{r3}
 8004176:	b003      	add	sp, #12
 8004178:	4718      	bx	r3
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	7fffffff 	.word	0x7fffffff
 8004180:	20000020 	.word	0x20000020
 8004184:	ffff0208 	.word	0xffff0208

08004188 <memset>:
 8004188:	0003      	movs	r3, r0
 800418a:	1882      	adds	r2, r0, r2
 800418c:	4293      	cmp	r3, r2
 800418e:	d100      	bne.n	8004192 <memset+0xa>
 8004190:	4770      	bx	lr
 8004192:	7019      	strb	r1, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	e7f9      	b.n	800418c <memset+0x4>

08004198 <__errno>:
 8004198:	4b01      	ldr	r3, [pc, #4]	@ (80041a0 <__errno+0x8>)
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	4770      	bx	lr
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	20000020 	.word	0x20000020

080041a4 <__libc_init_array>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	2600      	movs	r6, #0
 80041a8:	4c0c      	ldr	r4, [pc, #48]	@ (80041dc <__libc_init_array+0x38>)
 80041aa:	4d0d      	ldr	r5, [pc, #52]	@ (80041e0 <__libc_init_array+0x3c>)
 80041ac:	1b64      	subs	r4, r4, r5
 80041ae:	10a4      	asrs	r4, r4, #2
 80041b0:	42a6      	cmp	r6, r4
 80041b2:	d109      	bne.n	80041c8 <__libc_init_array+0x24>
 80041b4:	2600      	movs	r6, #0
 80041b6:	f000 fc63 	bl	8004a80 <_init>
 80041ba:	4c0a      	ldr	r4, [pc, #40]	@ (80041e4 <__libc_init_array+0x40>)
 80041bc:	4d0a      	ldr	r5, [pc, #40]	@ (80041e8 <__libc_init_array+0x44>)
 80041be:	1b64      	subs	r4, r4, r5
 80041c0:	10a4      	asrs	r4, r4, #2
 80041c2:	42a6      	cmp	r6, r4
 80041c4:	d105      	bne.n	80041d2 <__libc_init_array+0x2e>
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	00b3      	lsls	r3, r6, #2
 80041ca:	58eb      	ldr	r3, [r5, r3]
 80041cc:	4798      	blx	r3
 80041ce:	3601      	adds	r6, #1
 80041d0:	e7ee      	b.n	80041b0 <__libc_init_array+0xc>
 80041d2:	00b3      	lsls	r3, r6, #2
 80041d4:	58eb      	ldr	r3, [r5, r3]
 80041d6:	4798      	blx	r3
 80041d8:	3601      	adds	r6, #1
 80041da:	e7f2      	b.n	80041c2 <__libc_init_array+0x1e>
 80041dc:	080080f8 	.word	0x080080f8
 80041e0:	080080f8 	.word	0x080080f8
 80041e4:	080080fc 	.word	0x080080fc
 80041e8:	080080f8 	.word	0x080080f8

080041ec <__retarget_lock_acquire_recursive>:
 80041ec:	4770      	bx	lr

080041ee <__retarget_lock_release_recursive>:
 80041ee:	4770      	bx	lr

080041f0 <memcpy>:
 80041f0:	2300      	movs	r3, #0
 80041f2:	b510      	push	{r4, lr}
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d100      	bne.n	80041fa <memcpy+0xa>
 80041f8:	bd10      	pop	{r4, pc}
 80041fa:	5ccc      	ldrb	r4, [r1, r3]
 80041fc:	54c4      	strb	r4, [r0, r3]
 80041fe:	3301      	adds	r3, #1
 8004200:	e7f8      	b.n	80041f4 <memcpy+0x4>
	...

08004204 <_free_r>:
 8004204:	b570      	push	{r4, r5, r6, lr}
 8004206:	0005      	movs	r5, r0
 8004208:	1e0c      	subs	r4, r1, #0
 800420a:	d010      	beq.n	800422e <_free_r+0x2a>
 800420c:	3c04      	subs	r4, #4
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	da00      	bge.n	8004216 <_free_r+0x12>
 8004214:	18e4      	adds	r4, r4, r3
 8004216:	0028      	movs	r0, r5
 8004218:	f000 f8e0 	bl	80043dc <__malloc_lock>
 800421c:	4a1d      	ldr	r2, [pc, #116]	@ (8004294 <_free_r+0x90>)
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <_free_r+0x2c>
 8004224:	6063      	str	r3, [r4, #4]
 8004226:	6014      	str	r4, [r2, #0]
 8004228:	0028      	movs	r0, r5
 800422a:	f000 f8df 	bl	80043ec <__malloc_unlock>
 800422e:	bd70      	pop	{r4, r5, r6, pc}
 8004230:	42a3      	cmp	r3, r4
 8004232:	d908      	bls.n	8004246 <_free_r+0x42>
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	1821      	adds	r1, r4, r0
 8004238:	428b      	cmp	r3, r1
 800423a:	d1f3      	bne.n	8004224 <_free_r+0x20>
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	1809      	adds	r1, r1, r0
 8004242:	6021      	str	r1, [r4, #0]
 8004244:	e7ee      	b.n	8004224 <_free_r+0x20>
 8004246:	001a      	movs	r2, r3
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <_free_r+0x4e>
 800424e:	42a3      	cmp	r3, r4
 8004250:	d9f9      	bls.n	8004246 <_free_r+0x42>
 8004252:	6811      	ldr	r1, [r2, #0]
 8004254:	1850      	adds	r0, r2, r1
 8004256:	42a0      	cmp	r0, r4
 8004258:	d10b      	bne.n	8004272 <_free_r+0x6e>
 800425a:	6820      	ldr	r0, [r4, #0]
 800425c:	1809      	adds	r1, r1, r0
 800425e:	1850      	adds	r0, r2, r1
 8004260:	6011      	str	r1, [r2, #0]
 8004262:	4283      	cmp	r3, r0
 8004264:	d1e0      	bne.n	8004228 <_free_r+0x24>
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	1841      	adds	r1, r0, r1
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	6053      	str	r3, [r2, #4]
 8004270:	e7da      	b.n	8004228 <_free_r+0x24>
 8004272:	42a0      	cmp	r0, r4
 8004274:	d902      	bls.n	800427c <_free_r+0x78>
 8004276:	230c      	movs	r3, #12
 8004278:	602b      	str	r3, [r5, #0]
 800427a:	e7d5      	b.n	8004228 <_free_r+0x24>
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	1821      	adds	r1, r4, r0
 8004280:	428b      	cmp	r3, r1
 8004282:	d103      	bne.n	800428c <_free_r+0x88>
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	1809      	adds	r1, r1, r0
 800428a:	6021      	str	r1, [r4, #0]
 800428c:	6063      	str	r3, [r4, #4]
 800428e:	6054      	str	r4, [r2, #4]
 8004290:	e7ca      	b.n	8004228 <_free_r+0x24>
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	20000768 	.word	0x20000768

08004298 <sbrk_aligned>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	4e0f      	ldr	r6, [pc, #60]	@ (80042d8 <sbrk_aligned+0x40>)
 800429c:	000d      	movs	r5, r1
 800429e:	6831      	ldr	r1, [r6, #0]
 80042a0:	0004      	movs	r4, r0
 80042a2:	2900      	cmp	r1, #0
 80042a4:	d102      	bne.n	80042ac <sbrk_aligned+0x14>
 80042a6:	f000 fb95 	bl	80049d4 <_sbrk_r>
 80042aa:	6030      	str	r0, [r6, #0]
 80042ac:	0029      	movs	r1, r5
 80042ae:	0020      	movs	r0, r4
 80042b0:	f000 fb90 	bl	80049d4 <_sbrk_r>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d103      	bne.n	80042c0 <sbrk_aligned+0x28>
 80042b8:	2501      	movs	r5, #1
 80042ba:	426d      	negs	r5, r5
 80042bc:	0028      	movs	r0, r5
 80042be:	bd70      	pop	{r4, r5, r6, pc}
 80042c0:	2303      	movs	r3, #3
 80042c2:	1cc5      	adds	r5, r0, #3
 80042c4:	439d      	bics	r5, r3
 80042c6:	42a8      	cmp	r0, r5
 80042c8:	d0f8      	beq.n	80042bc <sbrk_aligned+0x24>
 80042ca:	1a29      	subs	r1, r5, r0
 80042cc:	0020      	movs	r0, r4
 80042ce:	f000 fb81 	bl	80049d4 <_sbrk_r>
 80042d2:	3001      	adds	r0, #1
 80042d4:	d1f2      	bne.n	80042bc <sbrk_aligned+0x24>
 80042d6:	e7ef      	b.n	80042b8 <sbrk_aligned+0x20>
 80042d8:	20000764 	.word	0x20000764

080042dc <_malloc_r>:
 80042dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042de:	2203      	movs	r2, #3
 80042e0:	1ccb      	adds	r3, r1, #3
 80042e2:	4393      	bics	r3, r2
 80042e4:	3308      	adds	r3, #8
 80042e6:	0005      	movs	r5, r0
 80042e8:	001f      	movs	r7, r3
 80042ea:	2b0c      	cmp	r3, #12
 80042ec:	d234      	bcs.n	8004358 <_malloc_r+0x7c>
 80042ee:	270c      	movs	r7, #12
 80042f0:	42b9      	cmp	r1, r7
 80042f2:	d833      	bhi.n	800435c <_malloc_r+0x80>
 80042f4:	0028      	movs	r0, r5
 80042f6:	f000 f871 	bl	80043dc <__malloc_lock>
 80042fa:	4e37      	ldr	r6, [pc, #220]	@ (80043d8 <_malloc_r+0xfc>)
 80042fc:	6833      	ldr	r3, [r6, #0]
 80042fe:	001c      	movs	r4, r3
 8004300:	2c00      	cmp	r4, #0
 8004302:	d12f      	bne.n	8004364 <_malloc_r+0x88>
 8004304:	0039      	movs	r1, r7
 8004306:	0028      	movs	r0, r5
 8004308:	f7ff ffc6 	bl	8004298 <sbrk_aligned>
 800430c:	0004      	movs	r4, r0
 800430e:	1c43      	adds	r3, r0, #1
 8004310:	d15f      	bne.n	80043d2 <_malloc_r+0xf6>
 8004312:	6834      	ldr	r4, [r6, #0]
 8004314:	9400      	str	r4, [sp, #0]
 8004316:	9b00      	ldr	r3, [sp, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d14a      	bne.n	80043b2 <_malloc_r+0xd6>
 800431c:	2c00      	cmp	r4, #0
 800431e:	d052      	beq.n	80043c6 <_malloc_r+0xea>
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	0028      	movs	r0, r5
 8004324:	18e3      	adds	r3, r4, r3
 8004326:	9900      	ldr	r1, [sp, #0]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	f000 fb53 	bl	80049d4 <_sbrk_r>
 800432e:	9b01      	ldr	r3, [sp, #4]
 8004330:	4283      	cmp	r3, r0
 8004332:	d148      	bne.n	80043c6 <_malloc_r+0xea>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	0028      	movs	r0, r5
 8004338:	1aff      	subs	r7, r7, r3
 800433a:	0039      	movs	r1, r7
 800433c:	f7ff ffac 	bl	8004298 <sbrk_aligned>
 8004340:	3001      	adds	r0, #1
 8004342:	d040      	beq.n	80043c6 <_malloc_r+0xea>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	19db      	adds	r3, r3, r7
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	6833      	ldr	r3, [r6, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	2a00      	cmp	r2, #0
 8004350:	d133      	bne.n	80043ba <_malloc_r+0xde>
 8004352:	9b00      	ldr	r3, [sp, #0]
 8004354:	6033      	str	r3, [r6, #0]
 8004356:	e019      	b.n	800438c <_malloc_r+0xb0>
 8004358:	2b00      	cmp	r3, #0
 800435a:	dac9      	bge.n	80042f0 <_malloc_r+0x14>
 800435c:	230c      	movs	r3, #12
 800435e:	602b      	str	r3, [r5, #0]
 8004360:	2000      	movs	r0, #0
 8004362:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004364:	6821      	ldr	r1, [r4, #0]
 8004366:	1bc9      	subs	r1, r1, r7
 8004368:	d420      	bmi.n	80043ac <_malloc_r+0xd0>
 800436a:	290b      	cmp	r1, #11
 800436c:	d90a      	bls.n	8004384 <_malloc_r+0xa8>
 800436e:	19e2      	adds	r2, r4, r7
 8004370:	6027      	str	r7, [r4, #0]
 8004372:	42a3      	cmp	r3, r4
 8004374:	d104      	bne.n	8004380 <_malloc_r+0xa4>
 8004376:	6032      	str	r2, [r6, #0]
 8004378:	6863      	ldr	r3, [r4, #4]
 800437a:	6011      	str	r1, [r2, #0]
 800437c:	6053      	str	r3, [r2, #4]
 800437e:	e005      	b.n	800438c <_malloc_r+0xb0>
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	e7f9      	b.n	8004378 <_malloc_r+0x9c>
 8004384:	6862      	ldr	r2, [r4, #4]
 8004386:	42a3      	cmp	r3, r4
 8004388:	d10e      	bne.n	80043a8 <_malloc_r+0xcc>
 800438a:	6032      	str	r2, [r6, #0]
 800438c:	0028      	movs	r0, r5
 800438e:	f000 f82d 	bl	80043ec <__malloc_unlock>
 8004392:	0020      	movs	r0, r4
 8004394:	2207      	movs	r2, #7
 8004396:	300b      	adds	r0, #11
 8004398:	1d23      	adds	r3, r4, #4
 800439a:	4390      	bics	r0, r2
 800439c:	1ac2      	subs	r2, r0, r3
 800439e:	4298      	cmp	r0, r3
 80043a0:	d0df      	beq.n	8004362 <_malloc_r+0x86>
 80043a2:	1a1b      	subs	r3, r3, r0
 80043a4:	50a3      	str	r3, [r4, r2]
 80043a6:	e7dc      	b.n	8004362 <_malloc_r+0x86>
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	e7ef      	b.n	800438c <_malloc_r+0xb0>
 80043ac:	0023      	movs	r3, r4
 80043ae:	6864      	ldr	r4, [r4, #4]
 80043b0:	e7a6      	b.n	8004300 <_malloc_r+0x24>
 80043b2:	9c00      	ldr	r4, [sp, #0]
 80043b4:	6863      	ldr	r3, [r4, #4]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	e7ad      	b.n	8004316 <_malloc_r+0x3a>
 80043ba:	001a      	movs	r2, r3
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	42a3      	cmp	r3, r4
 80043c0:	d1fb      	bne.n	80043ba <_malloc_r+0xde>
 80043c2:	2300      	movs	r3, #0
 80043c4:	e7da      	b.n	800437c <_malloc_r+0xa0>
 80043c6:	230c      	movs	r3, #12
 80043c8:	0028      	movs	r0, r5
 80043ca:	602b      	str	r3, [r5, #0]
 80043cc:	f000 f80e 	bl	80043ec <__malloc_unlock>
 80043d0:	e7c6      	b.n	8004360 <_malloc_r+0x84>
 80043d2:	6007      	str	r7, [r0, #0]
 80043d4:	e7da      	b.n	800438c <_malloc_r+0xb0>
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	20000768 	.word	0x20000768

080043dc <__malloc_lock>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	4802      	ldr	r0, [pc, #8]	@ (80043e8 <__malloc_lock+0xc>)
 80043e0:	f7ff ff04 	bl	80041ec <__retarget_lock_acquire_recursive>
 80043e4:	bd10      	pop	{r4, pc}
 80043e6:	46c0      	nop			@ (mov r8, r8)
 80043e8:	20000760 	.word	0x20000760

080043ec <__malloc_unlock>:
 80043ec:	b510      	push	{r4, lr}
 80043ee:	4802      	ldr	r0, [pc, #8]	@ (80043f8 <__malloc_unlock+0xc>)
 80043f0:	f7ff fefd 	bl	80041ee <__retarget_lock_release_recursive>
 80043f4:	bd10      	pop	{r4, pc}
 80043f6:	46c0      	nop			@ (mov r8, r8)
 80043f8:	20000760 	.word	0x20000760

080043fc <__ssputs_r>:
 80043fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fe:	688e      	ldr	r6, [r1, #8]
 8004400:	b085      	sub	sp, #20
 8004402:	001f      	movs	r7, r3
 8004404:	000c      	movs	r4, r1
 8004406:	680b      	ldr	r3, [r1, #0]
 8004408:	9002      	str	r0, [sp, #8]
 800440a:	9203      	str	r2, [sp, #12]
 800440c:	42be      	cmp	r6, r7
 800440e:	d830      	bhi.n	8004472 <__ssputs_r+0x76>
 8004410:	210c      	movs	r1, #12
 8004412:	5e62      	ldrsh	r2, [r4, r1]
 8004414:	2190      	movs	r1, #144	@ 0x90
 8004416:	00c9      	lsls	r1, r1, #3
 8004418:	420a      	tst	r2, r1
 800441a:	d028      	beq.n	800446e <__ssputs_r+0x72>
 800441c:	2003      	movs	r0, #3
 800441e:	6921      	ldr	r1, [r4, #16]
 8004420:	1a5b      	subs	r3, r3, r1
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	6963      	ldr	r3, [r4, #20]
 8004426:	4343      	muls	r3, r0
 8004428:	9801      	ldr	r0, [sp, #4]
 800442a:	0fdd      	lsrs	r5, r3, #31
 800442c:	18ed      	adds	r5, r5, r3
 800442e:	1c7b      	adds	r3, r7, #1
 8004430:	181b      	adds	r3, r3, r0
 8004432:	106d      	asrs	r5, r5, #1
 8004434:	42ab      	cmp	r3, r5
 8004436:	d900      	bls.n	800443a <__ssputs_r+0x3e>
 8004438:	001d      	movs	r5, r3
 800443a:	0552      	lsls	r2, r2, #21
 800443c:	d528      	bpl.n	8004490 <__ssputs_r+0x94>
 800443e:	0029      	movs	r1, r5
 8004440:	9802      	ldr	r0, [sp, #8]
 8004442:	f7ff ff4b 	bl	80042dc <_malloc_r>
 8004446:	1e06      	subs	r6, r0, #0
 8004448:	d02c      	beq.n	80044a4 <__ssputs_r+0xa8>
 800444a:	9a01      	ldr	r2, [sp, #4]
 800444c:	6921      	ldr	r1, [r4, #16]
 800444e:	f7ff fecf 	bl	80041f0 <memcpy>
 8004452:	89a2      	ldrh	r2, [r4, #12]
 8004454:	4b18      	ldr	r3, [pc, #96]	@ (80044b8 <__ssputs_r+0xbc>)
 8004456:	401a      	ands	r2, r3
 8004458:	2380      	movs	r3, #128	@ 0x80
 800445a:	4313      	orrs	r3, r2
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	9b01      	ldr	r3, [sp, #4]
 8004460:	6126      	str	r6, [r4, #16]
 8004462:	18f6      	adds	r6, r6, r3
 8004464:	6026      	str	r6, [r4, #0]
 8004466:	003e      	movs	r6, r7
 8004468:	6165      	str	r5, [r4, #20]
 800446a:	1aed      	subs	r5, r5, r3
 800446c:	60a5      	str	r5, [r4, #8]
 800446e:	42be      	cmp	r6, r7
 8004470:	d900      	bls.n	8004474 <__ssputs_r+0x78>
 8004472:	003e      	movs	r6, r7
 8004474:	0032      	movs	r2, r6
 8004476:	9903      	ldr	r1, [sp, #12]
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	f000 fa99 	bl	80049b0 <memmove>
 800447e:	2000      	movs	r0, #0
 8004480:	68a3      	ldr	r3, [r4, #8]
 8004482:	1b9b      	subs	r3, r3, r6
 8004484:	60a3      	str	r3, [r4, #8]
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	199b      	adds	r3, r3, r6
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	b005      	add	sp, #20
 800448e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004490:	002a      	movs	r2, r5
 8004492:	9802      	ldr	r0, [sp, #8]
 8004494:	f000 fabb 	bl	8004a0e <_realloc_r>
 8004498:	1e06      	subs	r6, r0, #0
 800449a:	d1e0      	bne.n	800445e <__ssputs_r+0x62>
 800449c:	6921      	ldr	r1, [r4, #16]
 800449e:	9802      	ldr	r0, [sp, #8]
 80044a0:	f7ff feb0 	bl	8004204 <_free_r>
 80044a4:	230c      	movs	r3, #12
 80044a6:	2001      	movs	r0, #1
 80044a8:	9a02      	ldr	r2, [sp, #8]
 80044aa:	4240      	negs	r0, r0
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	89a2      	ldrh	r2, [r4, #12]
 80044b0:	3334      	adds	r3, #52	@ 0x34
 80044b2:	4313      	orrs	r3, r2
 80044b4:	81a3      	strh	r3, [r4, #12]
 80044b6:	e7e9      	b.n	800448c <__ssputs_r+0x90>
 80044b8:	fffffb7f 	.word	0xfffffb7f

080044bc <_svfiprintf_r>:
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	b0a1      	sub	sp, #132	@ 0x84
 80044c0:	9003      	str	r0, [sp, #12]
 80044c2:	001d      	movs	r5, r3
 80044c4:	898b      	ldrh	r3, [r1, #12]
 80044c6:	000f      	movs	r7, r1
 80044c8:	0016      	movs	r6, r2
 80044ca:	061b      	lsls	r3, r3, #24
 80044cc:	d511      	bpl.n	80044f2 <_svfiprintf_r+0x36>
 80044ce:	690b      	ldr	r3, [r1, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10e      	bne.n	80044f2 <_svfiprintf_r+0x36>
 80044d4:	2140      	movs	r1, #64	@ 0x40
 80044d6:	f7ff ff01 	bl	80042dc <_malloc_r>
 80044da:	6038      	str	r0, [r7, #0]
 80044dc:	6138      	str	r0, [r7, #16]
 80044de:	2800      	cmp	r0, #0
 80044e0:	d105      	bne.n	80044ee <_svfiprintf_r+0x32>
 80044e2:	230c      	movs	r3, #12
 80044e4:	9a03      	ldr	r2, [sp, #12]
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	2001      	movs	r0, #1
 80044ea:	4240      	negs	r0, r0
 80044ec:	e0cf      	b.n	800468e <_svfiprintf_r+0x1d2>
 80044ee:	2340      	movs	r3, #64	@ 0x40
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	2300      	movs	r3, #0
 80044f4:	ac08      	add	r4, sp, #32
 80044f6:	6163      	str	r3, [r4, #20]
 80044f8:	3320      	adds	r3, #32
 80044fa:	7663      	strb	r3, [r4, #25]
 80044fc:	3310      	adds	r3, #16
 80044fe:	76a3      	strb	r3, [r4, #26]
 8004500:	9507      	str	r5, [sp, #28]
 8004502:	0035      	movs	r5, r6
 8004504:	782b      	ldrb	r3, [r5, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <_svfiprintf_r+0x52>
 800450a:	2b25      	cmp	r3, #37	@ 0x25
 800450c:	d148      	bne.n	80045a0 <_svfiprintf_r+0xe4>
 800450e:	1bab      	subs	r3, r5, r6
 8004510:	9305      	str	r3, [sp, #20]
 8004512:	42b5      	cmp	r5, r6
 8004514:	d00b      	beq.n	800452e <_svfiprintf_r+0x72>
 8004516:	0032      	movs	r2, r6
 8004518:	0039      	movs	r1, r7
 800451a:	9803      	ldr	r0, [sp, #12]
 800451c:	f7ff ff6e 	bl	80043fc <__ssputs_r>
 8004520:	3001      	adds	r0, #1
 8004522:	d100      	bne.n	8004526 <_svfiprintf_r+0x6a>
 8004524:	e0ae      	b.n	8004684 <_svfiprintf_r+0x1c8>
 8004526:	6963      	ldr	r3, [r4, #20]
 8004528:	9a05      	ldr	r2, [sp, #20]
 800452a:	189b      	adds	r3, r3, r2
 800452c:	6163      	str	r3, [r4, #20]
 800452e:	782b      	ldrb	r3, [r5, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d100      	bne.n	8004536 <_svfiprintf_r+0x7a>
 8004534:	e0a6      	b.n	8004684 <_svfiprintf_r+0x1c8>
 8004536:	2201      	movs	r2, #1
 8004538:	2300      	movs	r3, #0
 800453a:	4252      	negs	r2, r2
 800453c:	6062      	str	r2, [r4, #4]
 800453e:	a904      	add	r1, sp, #16
 8004540:	3254      	adds	r2, #84	@ 0x54
 8004542:	1852      	adds	r2, r2, r1
 8004544:	1c6e      	adds	r6, r5, #1
 8004546:	6023      	str	r3, [r4, #0]
 8004548:	60e3      	str	r3, [r4, #12]
 800454a:	60a3      	str	r3, [r4, #8]
 800454c:	7013      	strb	r3, [r2, #0]
 800454e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004550:	4b54      	ldr	r3, [pc, #336]	@ (80046a4 <_svfiprintf_r+0x1e8>)
 8004552:	2205      	movs	r2, #5
 8004554:	0018      	movs	r0, r3
 8004556:	7831      	ldrb	r1, [r6, #0]
 8004558:	9305      	str	r3, [sp, #20]
 800455a:	f000 fa4d 	bl	80049f8 <memchr>
 800455e:	1c75      	adds	r5, r6, #1
 8004560:	2800      	cmp	r0, #0
 8004562:	d11f      	bne.n	80045a4 <_svfiprintf_r+0xe8>
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	06d3      	lsls	r3, r2, #27
 8004568:	d504      	bpl.n	8004574 <_svfiprintf_r+0xb8>
 800456a:	2353      	movs	r3, #83	@ 0x53
 800456c:	a904      	add	r1, sp, #16
 800456e:	185b      	adds	r3, r3, r1
 8004570:	2120      	movs	r1, #32
 8004572:	7019      	strb	r1, [r3, #0]
 8004574:	0713      	lsls	r3, r2, #28
 8004576:	d504      	bpl.n	8004582 <_svfiprintf_r+0xc6>
 8004578:	2353      	movs	r3, #83	@ 0x53
 800457a:	a904      	add	r1, sp, #16
 800457c:	185b      	adds	r3, r3, r1
 800457e:	212b      	movs	r1, #43	@ 0x2b
 8004580:	7019      	strb	r1, [r3, #0]
 8004582:	7833      	ldrb	r3, [r6, #0]
 8004584:	2b2a      	cmp	r3, #42	@ 0x2a
 8004586:	d016      	beq.n	80045b6 <_svfiprintf_r+0xfa>
 8004588:	0035      	movs	r5, r6
 800458a:	2100      	movs	r1, #0
 800458c:	200a      	movs	r0, #10
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	782a      	ldrb	r2, [r5, #0]
 8004592:	1c6e      	adds	r6, r5, #1
 8004594:	3a30      	subs	r2, #48	@ 0x30
 8004596:	2a09      	cmp	r2, #9
 8004598:	d950      	bls.n	800463c <_svfiprintf_r+0x180>
 800459a:	2900      	cmp	r1, #0
 800459c:	d111      	bne.n	80045c2 <_svfiprintf_r+0x106>
 800459e:	e017      	b.n	80045d0 <_svfiprintf_r+0x114>
 80045a0:	3501      	adds	r5, #1
 80045a2:	e7af      	b.n	8004504 <_svfiprintf_r+0x48>
 80045a4:	9b05      	ldr	r3, [sp, #20]
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	1ac0      	subs	r0, r0, r3
 80045aa:	2301      	movs	r3, #1
 80045ac:	4083      	lsls	r3, r0
 80045ae:	4313      	orrs	r3, r2
 80045b0:	002e      	movs	r6, r5
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	e7cc      	b.n	8004550 <_svfiprintf_r+0x94>
 80045b6:	9b07      	ldr	r3, [sp, #28]
 80045b8:	1d19      	adds	r1, r3, #4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	9107      	str	r1, [sp, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	db01      	blt.n	80045c6 <_svfiprintf_r+0x10a>
 80045c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045c4:	e004      	b.n	80045d0 <_svfiprintf_r+0x114>
 80045c6:	425b      	negs	r3, r3
 80045c8:	60e3      	str	r3, [r4, #12]
 80045ca:	2302      	movs	r3, #2
 80045cc:	4313      	orrs	r3, r2
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	782b      	ldrb	r3, [r5, #0]
 80045d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80045d4:	d10c      	bne.n	80045f0 <_svfiprintf_r+0x134>
 80045d6:	786b      	ldrb	r3, [r5, #1]
 80045d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045da:	d134      	bne.n	8004646 <_svfiprintf_r+0x18a>
 80045dc:	9b07      	ldr	r3, [sp, #28]
 80045de:	3502      	adds	r5, #2
 80045e0:	1d1a      	adds	r2, r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	9207      	str	r2, [sp, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	da01      	bge.n	80045ee <_svfiprintf_r+0x132>
 80045ea:	2301      	movs	r3, #1
 80045ec:	425b      	negs	r3, r3
 80045ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80045f0:	4e2d      	ldr	r6, [pc, #180]	@ (80046a8 <_svfiprintf_r+0x1ec>)
 80045f2:	2203      	movs	r2, #3
 80045f4:	0030      	movs	r0, r6
 80045f6:	7829      	ldrb	r1, [r5, #0]
 80045f8:	f000 f9fe 	bl	80049f8 <memchr>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d006      	beq.n	800460e <_svfiprintf_r+0x152>
 8004600:	2340      	movs	r3, #64	@ 0x40
 8004602:	1b80      	subs	r0, r0, r6
 8004604:	4083      	lsls	r3, r0
 8004606:	6822      	ldr	r2, [r4, #0]
 8004608:	3501      	adds	r5, #1
 800460a:	4313      	orrs	r3, r2
 800460c:	6023      	str	r3, [r4, #0]
 800460e:	7829      	ldrb	r1, [r5, #0]
 8004610:	2206      	movs	r2, #6
 8004612:	4826      	ldr	r0, [pc, #152]	@ (80046ac <_svfiprintf_r+0x1f0>)
 8004614:	1c6e      	adds	r6, r5, #1
 8004616:	7621      	strb	r1, [r4, #24]
 8004618:	f000 f9ee 	bl	80049f8 <memchr>
 800461c:	2800      	cmp	r0, #0
 800461e:	d038      	beq.n	8004692 <_svfiprintf_r+0x1d6>
 8004620:	4b23      	ldr	r3, [pc, #140]	@ (80046b0 <_svfiprintf_r+0x1f4>)
 8004622:	2b00      	cmp	r3, #0
 8004624:	d122      	bne.n	800466c <_svfiprintf_r+0x1b0>
 8004626:	2207      	movs	r2, #7
 8004628:	9b07      	ldr	r3, [sp, #28]
 800462a:	3307      	adds	r3, #7
 800462c:	4393      	bics	r3, r2
 800462e:	3308      	adds	r3, #8
 8004630:	9307      	str	r3, [sp, #28]
 8004632:	6963      	ldr	r3, [r4, #20]
 8004634:	9a04      	ldr	r2, [sp, #16]
 8004636:	189b      	adds	r3, r3, r2
 8004638:	6163      	str	r3, [r4, #20]
 800463a:	e762      	b.n	8004502 <_svfiprintf_r+0x46>
 800463c:	4343      	muls	r3, r0
 800463e:	0035      	movs	r5, r6
 8004640:	2101      	movs	r1, #1
 8004642:	189b      	adds	r3, r3, r2
 8004644:	e7a4      	b.n	8004590 <_svfiprintf_r+0xd4>
 8004646:	2300      	movs	r3, #0
 8004648:	200a      	movs	r0, #10
 800464a:	0019      	movs	r1, r3
 800464c:	3501      	adds	r5, #1
 800464e:	6063      	str	r3, [r4, #4]
 8004650:	782a      	ldrb	r2, [r5, #0]
 8004652:	1c6e      	adds	r6, r5, #1
 8004654:	3a30      	subs	r2, #48	@ 0x30
 8004656:	2a09      	cmp	r2, #9
 8004658:	d903      	bls.n	8004662 <_svfiprintf_r+0x1a6>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0c8      	beq.n	80045f0 <_svfiprintf_r+0x134>
 800465e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004660:	e7c6      	b.n	80045f0 <_svfiprintf_r+0x134>
 8004662:	4341      	muls	r1, r0
 8004664:	0035      	movs	r5, r6
 8004666:	2301      	movs	r3, #1
 8004668:	1889      	adds	r1, r1, r2
 800466a:	e7f1      	b.n	8004650 <_svfiprintf_r+0x194>
 800466c:	aa07      	add	r2, sp, #28
 800466e:	9200      	str	r2, [sp, #0]
 8004670:	0021      	movs	r1, r4
 8004672:	003a      	movs	r2, r7
 8004674:	4b0f      	ldr	r3, [pc, #60]	@ (80046b4 <_svfiprintf_r+0x1f8>)
 8004676:	9803      	ldr	r0, [sp, #12]
 8004678:	e000      	b.n	800467c <_svfiprintf_r+0x1c0>
 800467a:	bf00      	nop
 800467c:	9004      	str	r0, [sp, #16]
 800467e:	9b04      	ldr	r3, [sp, #16]
 8004680:	3301      	adds	r3, #1
 8004682:	d1d6      	bne.n	8004632 <_svfiprintf_r+0x176>
 8004684:	89bb      	ldrh	r3, [r7, #12]
 8004686:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004688:	065b      	lsls	r3, r3, #25
 800468a:	d500      	bpl.n	800468e <_svfiprintf_r+0x1d2>
 800468c:	e72c      	b.n	80044e8 <_svfiprintf_r+0x2c>
 800468e:	b021      	add	sp, #132	@ 0x84
 8004690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004692:	aa07      	add	r2, sp, #28
 8004694:	9200      	str	r2, [sp, #0]
 8004696:	0021      	movs	r1, r4
 8004698:	003a      	movs	r2, r7
 800469a:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <_svfiprintf_r+0x1f8>)
 800469c:	9803      	ldr	r0, [sp, #12]
 800469e:	f000 f87b 	bl	8004798 <_printf_i>
 80046a2:	e7eb      	b.n	800467c <_svfiprintf_r+0x1c0>
 80046a4:	080080c4 	.word	0x080080c4
 80046a8:	080080ca 	.word	0x080080ca
 80046ac:	080080ce 	.word	0x080080ce
 80046b0:	00000000 	.word	0x00000000
 80046b4:	080043fd 	.word	0x080043fd

080046b8 <_printf_common>:
 80046b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ba:	0016      	movs	r6, r2
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	688a      	ldr	r2, [r1, #8]
 80046c0:	690b      	ldr	r3, [r1, #16]
 80046c2:	000c      	movs	r4, r1
 80046c4:	9000      	str	r0, [sp, #0]
 80046c6:	4293      	cmp	r3, r2
 80046c8:	da00      	bge.n	80046cc <_printf_common+0x14>
 80046ca:	0013      	movs	r3, r2
 80046cc:	0022      	movs	r2, r4
 80046ce:	6033      	str	r3, [r6, #0]
 80046d0:	3243      	adds	r2, #67	@ 0x43
 80046d2:	7812      	ldrb	r2, [r2, #0]
 80046d4:	2a00      	cmp	r2, #0
 80046d6:	d001      	beq.n	80046dc <_printf_common+0x24>
 80046d8:	3301      	adds	r3, #1
 80046da:	6033      	str	r3, [r6, #0]
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	069b      	lsls	r3, r3, #26
 80046e0:	d502      	bpl.n	80046e8 <_printf_common+0x30>
 80046e2:	6833      	ldr	r3, [r6, #0]
 80046e4:	3302      	adds	r3, #2
 80046e6:	6033      	str	r3, [r6, #0]
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	2306      	movs	r3, #6
 80046ec:	0015      	movs	r5, r2
 80046ee:	401d      	ands	r5, r3
 80046f0:	421a      	tst	r2, r3
 80046f2:	d027      	beq.n	8004744 <_printf_common+0x8c>
 80046f4:	0023      	movs	r3, r4
 80046f6:	3343      	adds	r3, #67	@ 0x43
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	1e5a      	subs	r2, r3, #1
 80046fc:	4193      	sbcs	r3, r2
 80046fe:	6822      	ldr	r2, [r4, #0]
 8004700:	0692      	lsls	r2, r2, #26
 8004702:	d430      	bmi.n	8004766 <_printf_common+0xae>
 8004704:	0022      	movs	r2, r4
 8004706:	9901      	ldr	r1, [sp, #4]
 8004708:	9800      	ldr	r0, [sp, #0]
 800470a:	9d08      	ldr	r5, [sp, #32]
 800470c:	3243      	adds	r2, #67	@ 0x43
 800470e:	47a8      	blx	r5
 8004710:	3001      	adds	r0, #1
 8004712:	d025      	beq.n	8004760 <_printf_common+0xa8>
 8004714:	2206      	movs	r2, #6
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	2500      	movs	r5, #0
 800471a:	4013      	ands	r3, r2
 800471c:	2b04      	cmp	r3, #4
 800471e:	d105      	bne.n	800472c <_printf_common+0x74>
 8004720:	6833      	ldr	r3, [r6, #0]
 8004722:	68e5      	ldr	r5, [r4, #12]
 8004724:	1aed      	subs	r5, r5, r3
 8004726:	43eb      	mvns	r3, r5
 8004728:	17db      	asrs	r3, r3, #31
 800472a:	401d      	ands	r5, r3
 800472c:	68a3      	ldr	r3, [r4, #8]
 800472e:	6922      	ldr	r2, [r4, #16]
 8004730:	4293      	cmp	r3, r2
 8004732:	dd01      	ble.n	8004738 <_printf_common+0x80>
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	18ed      	adds	r5, r5, r3
 8004738:	2600      	movs	r6, #0
 800473a:	42b5      	cmp	r5, r6
 800473c:	d120      	bne.n	8004780 <_printf_common+0xc8>
 800473e:	2000      	movs	r0, #0
 8004740:	e010      	b.n	8004764 <_printf_common+0xac>
 8004742:	3501      	adds	r5, #1
 8004744:	68e3      	ldr	r3, [r4, #12]
 8004746:	6832      	ldr	r2, [r6, #0]
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	42ab      	cmp	r3, r5
 800474c:	ddd2      	ble.n	80046f4 <_printf_common+0x3c>
 800474e:	0022      	movs	r2, r4
 8004750:	2301      	movs	r3, #1
 8004752:	9901      	ldr	r1, [sp, #4]
 8004754:	9800      	ldr	r0, [sp, #0]
 8004756:	9f08      	ldr	r7, [sp, #32]
 8004758:	3219      	adds	r2, #25
 800475a:	47b8      	blx	r7
 800475c:	3001      	adds	r0, #1
 800475e:	d1f0      	bne.n	8004742 <_printf_common+0x8a>
 8004760:	2001      	movs	r0, #1
 8004762:	4240      	negs	r0, r0
 8004764:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004766:	2030      	movs	r0, #48	@ 0x30
 8004768:	18e1      	adds	r1, r4, r3
 800476a:	3143      	adds	r1, #67	@ 0x43
 800476c:	7008      	strb	r0, [r1, #0]
 800476e:	0021      	movs	r1, r4
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	3145      	adds	r1, #69	@ 0x45
 8004774:	7809      	ldrb	r1, [r1, #0]
 8004776:	18a2      	adds	r2, r4, r2
 8004778:	3243      	adds	r2, #67	@ 0x43
 800477a:	3302      	adds	r3, #2
 800477c:	7011      	strb	r1, [r2, #0]
 800477e:	e7c1      	b.n	8004704 <_printf_common+0x4c>
 8004780:	0022      	movs	r2, r4
 8004782:	2301      	movs	r3, #1
 8004784:	9901      	ldr	r1, [sp, #4]
 8004786:	9800      	ldr	r0, [sp, #0]
 8004788:	9f08      	ldr	r7, [sp, #32]
 800478a:	321a      	adds	r2, #26
 800478c:	47b8      	blx	r7
 800478e:	3001      	adds	r0, #1
 8004790:	d0e6      	beq.n	8004760 <_printf_common+0xa8>
 8004792:	3601      	adds	r6, #1
 8004794:	e7d1      	b.n	800473a <_printf_common+0x82>
	...

08004798 <_printf_i>:
 8004798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479a:	b08b      	sub	sp, #44	@ 0x2c
 800479c:	9206      	str	r2, [sp, #24]
 800479e:	000a      	movs	r2, r1
 80047a0:	3243      	adds	r2, #67	@ 0x43
 80047a2:	9307      	str	r3, [sp, #28]
 80047a4:	9005      	str	r0, [sp, #20]
 80047a6:	9203      	str	r2, [sp, #12]
 80047a8:	7e0a      	ldrb	r2, [r1, #24]
 80047aa:	000c      	movs	r4, r1
 80047ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80047ae:	2a78      	cmp	r2, #120	@ 0x78
 80047b0:	d809      	bhi.n	80047c6 <_printf_i+0x2e>
 80047b2:	2a62      	cmp	r2, #98	@ 0x62
 80047b4:	d80b      	bhi.n	80047ce <_printf_i+0x36>
 80047b6:	2a00      	cmp	r2, #0
 80047b8:	d100      	bne.n	80047bc <_printf_i+0x24>
 80047ba:	e0ba      	b.n	8004932 <_printf_i+0x19a>
 80047bc:	497a      	ldr	r1, [pc, #488]	@ (80049a8 <_printf_i+0x210>)
 80047be:	9104      	str	r1, [sp, #16]
 80047c0:	2a58      	cmp	r2, #88	@ 0x58
 80047c2:	d100      	bne.n	80047c6 <_printf_i+0x2e>
 80047c4:	e08e      	b.n	80048e4 <_printf_i+0x14c>
 80047c6:	0025      	movs	r5, r4
 80047c8:	3542      	adds	r5, #66	@ 0x42
 80047ca:	702a      	strb	r2, [r5, #0]
 80047cc:	e022      	b.n	8004814 <_printf_i+0x7c>
 80047ce:	0010      	movs	r0, r2
 80047d0:	3863      	subs	r0, #99	@ 0x63
 80047d2:	2815      	cmp	r0, #21
 80047d4:	d8f7      	bhi.n	80047c6 <_printf_i+0x2e>
 80047d6:	f7fb fc93 	bl	8000100 <__gnu_thumb1_case_shi>
 80047da:	0016      	.short	0x0016
 80047dc:	fff6001f 	.word	0xfff6001f
 80047e0:	fff6fff6 	.word	0xfff6fff6
 80047e4:	001ffff6 	.word	0x001ffff6
 80047e8:	fff6fff6 	.word	0xfff6fff6
 80047ec:	fff6fff6 	.word	0xfff6fff6
 80047f0:	0036009f 	.word	0x0036009f
 80047f4:	fff6007e 	.word	0xfff6007e
 80047f8:	00b0fff6 	.word	0x00b0fff6
 80047fc:	0036fff6 	.word	0x0036fff6
 8004800:	fff6fff6 	.word	0xfff6fff6
 8004804:	0082      	.short	0x0082
 8004806:	0025      	movs	r5, r4
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	3542      	adds	r5, #66	@ 0x42
 800480c:	1d11      	adds	r1, r2, #4
 800480e:	6019      	str	r1, [r3, #0]
 8004810:	6813      	ldr	r3, [r2, #0]
 8004812:	702b      	strb	r3, [r5, #0]
 8004814:	2301      	movs	r3, #1
 8004816:	e09e      	b.n	8004956 <_printf_i+0x1be>
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	6809      	ldr	r1, [r1, #0]
 800481c:	1d02      	adds	r2, r0, #4
 800481e:	060d      	lsls	r5, r1, #24
 8004820:	d50b      	bpl.n	800483a <_printf_i+0xa2>
 8004822:	6806      	ldr	r6, [r0, #0]
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	2e00      	cmp	r6, #0
 8004828:	da03      	bge.n	8004832 <_printf_i+0x9a>
 800482a:	232d      	movs	r3, #45	@ 0x2d
 800482c:	9a03      	ldr	r2, [sp, #12]
 800482e:	4276      	negs	r6, r6
 8004830:	7013      	strb	r3, [r2, #0]
 8004832:	4b5d      	ldr	r3, [pc, #372]	@ (80049a8 <_printf_i+0x210>)
 8004834:	270a      	movs	r7, #10
 8004836:	9304      	str	r3, [sp, #16]
 8004838:	e018      	b.n	800486c <_printf_i+0xd4>
 800483a:	6806      	ldr	r6, [r0, #0]
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	0649      	lsls	r1, r1, #25
 8004840:	d5f1      	bpl.n	8004826 <_printf_i+0x8e>
 8004842:	b236      	sxth	r6, r6
 8004844:	e7ef      	b.n	8004826 <_printf_i+0x8e>
 8004846:	6808      	ldr	r0, [r1, #0]
 8004848:	6819      	ldr	r1, [r3, #0]
 800484a:	c940      	ldmia	r1!, {r6}
 800484c:	0605      	lsls	r5, r0, #24
 800484e:	d402      	bmi.n	8004856 <_printf_i+0xbe>
 8004850:	0640      	lsls	r0, r0, #25
 8004852:	d500      	bpl.n	8004856 <_printf_i+0xbe>
 8004854:	b2b6      	uxth	r6, r6
 8004856:	6019      	str	r1, [r3, #0]
 8004858:	4b53      	ldr	r3, [pc, #332]	@ (80049a8 <_printf_i+0x210>)
 800485a:	270a      	movs	r7, #10
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004860:	d100      	bne.n	8004864 <_printf_i+0xcc>
 8004862:	3f02      	subs	r7, #2
 8004864:	0023      	movs	r3, r4
 8004866:	2200      	movs	r2, #0
 8004868:	3343      	adds	r3, #67	@ 0x43
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	6863      	ldr	r3, [r4, #4]
 800486e:	60a3      	str	r3, [r4, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	db06      	blt.n	8004882 <_printf_i+0xea>
 8004874:	2104      	movs	r1, #4
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	9d03      	ldr	r5, [sp, #12]
 800487a:	438a      	bics	r2, r1
 800487c:	6022      	str	r2, [r4, #0]
 800487e:	4333      	orrs	r3, r6
 8004880:	d00c      	beq.n	800489c <_printf_i+0x104>
 8004882:	9d03      	ldr	r5, [sp, #12]
 8004884:	0030      	movs	r0, r6
 8004886:	0039      	movs	r1, r7
 8004888:	f7fb fcca 	bl	8000220 <__aeabi_uidivmod>
 800488c:	9b04      	ldr	r3, [sp, #16]
 800488e:	3d01      	subs	r5, #1
 8004890:	5c5b      	ldrb	r3, [r3, r1]
 8004892:	702b      	strb	r3, [r5, #0]
 8004894:	0033      	movs	r3, r6
 8004896:	0006      	movs	r6, r0
 8004898:	429f      	cmp	r7, r3
 800489a:	d9f3      	bls.n	8004884 <_printf_i+0xec>
 800489c:	2f08      	cmp	r7, #8
 800489e:	d109      	bne.n	80048b4 <_printf_i+0x11c>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	07db      	lsls	r3, r3, #31
 80048a4:	d506      	bpl.n	80048b4 <_printf_i+0x11c>
 80048a6:	6862      	ldr	r2, [r4, #4]
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	dc02      	bgt.n	80048b4 <_printf_i+0x11c>
 80048ae:	2330      	movs	r3, #48	@ 0x30
 80048b0:	3d01      	subs	r5, #1
 80048b2:	702b      	strb	r3, [r5, #0]
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	1b5b      	subs	r3, r3, r5
 80048b8:	6123      	str	r3, [r4, #16]
 80048ba:	9b07      	ldr	r3, [sp, #28]
 80048bc:	0021      	movs	r1, r4
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	9805      	ldr	r0, [sp, #20]
 80048c2:	9b06      	ldr	r3, [sp, #24]
 80048c4:	aa09      	add	r2, sp, #36	@ 0x24
 80048c6:	f7ff fef7 	bl	80046b8 <_printf_common>
 80048ca:	3001      	adds	r0, #1
 80048cc:	d148      	bne.n	8004960 <_printf_i+0x1c8>
 80048ce:	2001      	movs	r0, #1
 80048d0:	4240      	negs	r0, r0
 80048d2:	b00b      	add	sp, #44	@ 0x2c
 80048d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d6:	2220      	movs	r2, #32
 80048d8:	6809      	ldr	r1, [r1, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	6022      	str	r2, [r4, #0]
 80048de:	2278      	movs	r2, #120	@ 0x78
 80048e0:	4932      	ldr	r1, [pc, #200]	@ (80049ac <_printf_i+0x214>)
 80048e2:	9104      	str	r1, [sp, #16]
 80048e4:	0021      	movs	r1, r4
 80048e6:	3145      	adds	r1, #69	@ 0x45
 80048e8:	700a      	strb	r2, [r1, #0]
 80048ea:	6819      	ldr	r1, [r3, #0]
 80048ec:	6822      	ldr	r2, [r4, #0]
 80048ee:	c940      	ldmia	r1!, {r6}
 80048f0:	0610      	lsls	r0, r2, #24
 80048f2:	d402      	bmi.n	80048fa <_printf_i+0x162>
 80048f4:	0650      	lsls	r0, r2, #25
 80048f6:	d500      	bpl.n	80048fa <_printf_i+0x162>
 80048f8:	b2b6      	uxth	r6, r6
 80048fa:	6019      	str	r1, [r3, #0]
 80048fc:	07d3      	lsls	r3, r2, #31
 80048fe:	d502      	bpl.n	8004906 <_printf_i+0x16e>
 8004900:	2320      	movs	r3, #32
 8004902:	4313      	orrs	r3, r2
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	2e00      	cmp	r6, #0
 8004908:	d001      	beq.n	800490e <_printf_i+0x176>
 800490a:	2710      	movs	r7, #16
 800490c:	e7aa      	b.n	8004864 <_printf_i+0xcc>
 800490e:	2220      	movs	r2, #32
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	4393      	bics	r3, r2
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	e7f8      	b.n	800490a <_printf_i+0x172>
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	680d      	ldr	r5, [r1, #0]
 800491c:	1d10      	adds	r0, r2, #4
 800491e:	6949      	ldr	r1, [r1, #20]
 8004920:	6018      	str	r0, [r3, #0]
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	062e      	lsls	r6, r5, #24
 8004926:	d501      	bpl.n	800492c <_printf_i+0x194>
 8004928:	6019      	str	r1, [r3, #0]
 800492a:	e002      	b.n	8004932 <_printf_i+0x19a>
 800492c:	066d      	lsls	r5, r5, #25
 800492e:	d5fb      	bpl.n	8004928 <_printf_i+0x190>
 8004930:	8019      	strh	r1, [r3, #0]
 8004932:	2300      	movs	r3, #0
 8004934:	9d03      	ldr	r5, [sp, #12]
 8004936:	6123      	str	r3, [r4, #16]
 8004938:	e7bf      	b.n	80048ba <_printf_i+0x122>
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	1d11      	adds	r1, r2, #4
 800493e:	6019      	str	r1, [r3, #0]
 8004940:	6815      	ldr	r5, [r2, #0]
 8004942:	2100      	movs	r1, #0
 8004944:	0028      	movs	r0, r5
 8004946:	6862      	ldr	r2, [r4, #4]
 8004948:	f000 f856 	bl	80049f8 <memchr>
 800494c:	2800      	cmp	r0, #0
 800494e:	d001      	beq.n	8004954 <_printf_i+0x1bc>
 8004950:	1b40      	subs	r0, r0, r5
 8004952:	6060      	str	r0, [r4, #4]
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	6123      	str	r3, [r4, #16]
 8004958:	2300      	movs	r3, #0
 800495a:	9a03      	ldr	r2, [sp, #12]
 800495c:	7013      	strb	r3, [r2, #0]
 800495e:	e7ac      	b.n	80048ba <_printf_i+0x122>
 8004960:	002a      	movs	r2, r5
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	9906      	ldr	r1, [sp, #24]
 8004966:	9805      	ldr	r0, [sp, #20]
 8004968:	9d07      	ldr	r5, [sp, #28]
 800496a:	47a8      	blx	r5
 800496c:	3001      	adds	r0, #1
 800496e:	d0ae      	beq.n	80048ce <_printf_i+0x136>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	079b      	lsls	r3, r3, #30
 8004974:	d415      	bmi.n	80049a2 <_printf_i+0x20a>
 8004976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004978:	68e0      	ldr	r0, [r4, #12]
 800497a:	4298      	cmp	r0, r3
 800497c:	daa9      	bge.n	80048d2 <_printf_i+0x13a>
 800497e:	0018      	movs	r0, r3
 8004980:	e7a7      	b.n	80048d2 <_printf_i+0x13a>
 8004982:	0022      	movs	r2, r4
 8004984:	2301      	movs	r3, #1
 8004986:	9906      	ldr	r1, [sp, #24]
 8004988:	9805      	ldr	r0, [sp, #20]
 800498a:	9e07      	ldr	r6, [sp, #28]
 800498c:	3219      	adds	r2, #25
 800498e:	47b0      	blx	r6
 8004990:	3001      	adds	r0, #1
 8004992:	d09c      	beq.n	80048ce <_printf_i+0x136>
 8004994:	3501      	adds	r5, #1
 8004996:	68e3      	ldr	r3, [r4, #12]
 8004998:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	42ab      	cmp	r3, r5
 800499e:	dcf0      	bgt.n	8004982 <_printf_i+0x1ea>
 80049a0:	e7e9      	b.n	8004976 <_printf_i+0x1de>
 80049a2:	2500      	movs	r5, #0
 80049a4:	e7f7      	b.n	8004996 <_printf_i+0x1fe>
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	080080d5 	.word	0x080080d5
 80049ac:	080080e6 	.word	0x080080e6

080049b0 <memmove>:
 80049b0:	b510      	push	{r4, lr}
 80049b2:	4288      	cmp	r0, r1
 80049b4:	d902      	bls.n	80049bc <memmove+0xc>
 80049b6:	188b      	adds	r3, r1, r2
 80049b8:	4298      	cmp	r0, r3
 80049ba:	d308      	bcc.n	80049ce <memmove+0x1e>
 80049bc:	2300      	movs	r3, #0
 80049be:	429a      	cmp	r2, r3
 80049c0:	d007      	beq.n	80049d2 <memmove+0x22>
 80049c2:	5ccc      	ldrb	r4, [r1, r3]
 80049c4:	54c4      	strb	r4, [r0, r3]
 80049c6:	3301      	adds	r3, #1
 80049c8:	e7f9      	b.n	80049be <memmove+0xe>
 80049ca:	5c8b      	ldrb	r3, [r1, r2]
 80049cc:	5483      	strb	r3, [r0, r2]
 80049ce:	3a01      	subs	r2, #1
 80049d0:	d2fb      	bcs.n	80049ca <memmove+0x1a>
 80049d2:	bd10      	pop	{r4, pc}

080049d4 <_sbrk_r>:
 80049d4:	2300      	movs	r3, #0
 80049d6:	b570      	push	{r4, r5, r6, lr}
 80049d8:	4d06      	ldr	r5, [pc, #24]	@ (80049f4 <_sbrk_r+0x20>)
 80049da:	0004      	movs	r4, r0
 80049dc:	0008      	movs	r0, r1
 80049de:	602b      	str	r3, [r5, #0]
 80049e0:	f7fd f918 	bl	8001c14 <_sbrk>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d103      	bne.n	80049f0 <_sbrk_r+0x1c>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d000      	beq.n	80049f0 <_sbrk_r+0x1c>
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	bd70      	pop	{r4, r5, r6, pc}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	2000075c 	.word	0x2000075c

080049f8 <memchr>:
 80049f8:	b2c9      	uxtb	r1, r1
 80049fa:	1882      	adds	r2, r0, r2
 80049fc:	4290      	cmp	r0, r2
 80049fe:	d101      	bne.n	8004a04 <memchr+0xc>
 8004a00:	2000      	movs	r0, #0
 8004a02:	4770      	bx	lr
 8004a04:	7803      	ldrb	r3, [r0, #0]
 8004a06:	428b      	cmp	r3, r1
 8004a08:	d0fb      	beq.n	8004a02 <memchr+0xa>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	e7f6      	b.n	80049fc <memchr+0x4>

08004a0e <_realloc_r>:
 8004a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a10:	0006      	movs	r6, r0
 8004a12:	000c      	movs	r4, r1
 8004a14:	0015      	movs	r5, r2
 8004a16:	2900      	cmp	r1, #0
 8004a18:	d105      	bne.n	8004a26 <_realloc_r+0x18>
 8004a1a:	0011      	movs	r1, r2
 8004a1c:	f7ff fc5e 	bl	80042dc <_malloc_r>
 8004a20:	0004      	movs	r4, r0
 8004a22:	0020      	movs	r0, r4
 8004a24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a26:	2a00      	cmp	r2, #0
 8004a28:	d103      	bne.n	8004a32 <_realloc_r+0x24>
 8004a2a:	f7ff fbeb 	bl	8004204 <_free_r>
 8004a2e:	002c      	movs	r4, r5
 8004a30:	e7f7      	b.n	8004a22 <_realloc_r+0x14>
 8004a32:	f000 f81c 	bl	8004a6e <_malloc_usable_size_r>
 8004a36:	0007      	movs	r7, r0
 8004a38:	4285      	cmp	r5, r0
 8004a3a:	d802      	bhi.n	8004a42 <_realloc_r+0x34>
 8004a3c:	0843      	lsrs	r3, r0, #1
 8004a3e:	42ab      	cmp	r3, r5
 8004a40:	d3ef      	bcc.n	8004a22 <_realloc_r+0x14>
 8004a42:	0029      	movs	r1, r5
 8004a44:	0030      	movs	r0, r6
 8004a46:	f7ff fc49 	bl	80042dc <_malloc_r>
 8004a4a:	9001      	str	r0, [sp, #4]
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d101      	bne.n	8004a54 <_realloc_r+0x46>
 8004a50:	9c01      	ldr	r4, [sp, #4]
 8004a52:	e7e6      	b.n	8004a22 <_realloc_r+0x14>
 8004a54:	002a      	movs	r2, r5
 8004a56:	42bd      	cmp	r5, r7
 8004a58:	d900      	bls.n	8004a5c <_realloc_r+0x4e>
 8004a5a:	003a      	movs	r2, r7
 8004a5c:	0021      	movs	r1, r4
 8004a5e:	9801      	ldr	r0, [sp, #4]
 8004a60:	f7ff fbc6 	bl	80041f0 <memcpy>
 8004a64:	0021      	movs	r1, r4
 8004a66:	0030      	movs	r0, r6
 8004a68:	f7ff fbcc 	bl	8004204 <_free_r>
 8004a6c:	e7f0      	b.n	8004a50 <_realloc_r+0x42>

08004a6e <_malloc_usable_size_r>:
 8004a6e:	1f0b      	subs	r3, r1, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	1f18      	subs	r0, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	da01      	bge.n	8004a7c <_malloc_usable_size_r+0xe>
 8004a78:	580b      	ldr	r3, [r1, r0]
 8004a7a:	18c0      	adds	r0, r0, r3
 8004a7c:	4770      	bx	lr
	...

08004a80 <_init>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr

08004a8c <_fini>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	46c0      	nop			@ (mov r8, r8)
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr

08004a98 <__FLASH_Program_Fast_veneer>:
 8004a98:	b401      	push	{r0}
 8004a9a:	4802      	ldr	r0, [pc, #8]	@ (8004aa4 <__FLASH_Program_Fast_veneer+0xc>)
 8004a9c:	4684      	mov	ip, r0
 8004a9e:	bc01      	pop	{r0}
 8004aa0:	4760      	bx	ip
 8004aa2:	bf00      	nop
 8004aa4:	20000071 	.word	0x20000071

Disassembly of section .data:

20000000 <ani_idle>:
20000000:	08004f30 08005330 08005730 08005b30     0O..0S..0W..0[..
20000010:	08005f30                                0_..

20000014 <SystemCoreClock>:
20000014:	00f42400                                .$..

20000018 <uwTickPrio>:
20000018:	00000004                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <_impure_ptr>:
20000020:	20000024                                $.. 

20000024 <_impure_data>:
20000024:	00000000 20000624 2000068c 200006f4     ....$.. ... ... 
	...

20000070 <FLASH_Program_Fast>:
20000070:	b580      	push	{r7, lr}
20000072:	b088      	sub	sp, #32
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
20000078:	6039      	str	r1, [r7, #0]
2000007a:	231f      	movs	r3, #31
2000007c:	18fb      	adds	r3, r7, r3
2000007e:	2200      	movs	r2, #0
20000080:	701a      	strb	r2, [r3, #0]
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	61bb      	str	r3, [r7, #24]
20000086:	683b      	ldr	r3, [r7, #0]
20000088:	617b      	str	r3, [r7, #20]
2000008a:	4b1a      	ldr	r3, [pc, #104]	@ (200000f4 <FLASH_Program_Fast+0x84>)
2000008c:	695a      	ldr	r2, [r3, #20]
2000008e:	4b19      	ldr	r3, [pc, #100]	@ (200000f4 <FLASH_Program_Fast+0x84>)
20000090:	2180      	movs	r1, #128	@ 0x80
20000092:	02c9      	lsls	r1, r1, #11
20000094:	430a      	orrs	r2, r1
20000096:	615a      	str	r2, [r3, #20]
20000098:	f3ef 8310 	mrs	r3, PRIMASK
2000009c:	60fb      	str	r3, [r7, #12]
2000009e:	68fb      	ldr	r3, [r7, #12]
200000a0:	613b      	str	r3, [r7, #16]
200000a2:	b672      	cpsid	i
200000a4:	46c0      	nop			@ (mov r8, r8)
200000a6:	e00f      	b.n	200000c8 <FLASH_Program_Fast+0x58>
200000a8:	697a      	ldr	r2, [r7, #20]
200000aa:	69bb      	ldr	r3, [r7, #24]
200000ac:	6812      	ldr	r2, [r2, #0]
200000ae:	601a      	str	r2, [r3, #0]
200000b0:	697b      	ldr	r3, [r7, #20]
200000b2:	3304      	adds	r3, #4
200000b4:	617b      	str	r3, [r7, #20]
200000b6:	69bb      	ldr	r3, [r7, #24]
200000b8:	3304      	adds	r3, #4
200000ba:	61bb      	str	r3, [r7, #24]
200000bc:	211f      	movs	r1, #31
200000be:	187b      	adds	r3, r7, r1
200000c0:	781a      	ldrb	r2, [r3, #0]
200000c2:	187b      	adds	r3, r7, r1
200000c4:	3201      	adds	r2, #1
200000c6:	701a      	strb	r2, [r3, #0]
200000c8:	231f      	movs	r3, #31
200000ca:	18fb      	adds	r3, r7, r3
200000cc:	781b      	ldrb	r3, [r3, #0]
200000ce:	2b3f      	cmp	r3, #63	@ 0x3f
200000d0:	d9ea      	bls.n	200000a8 <FLASH_Program_Fast+0x38>
200000d2:	46c0      	nop			@ (mov r8, r8)
200000d4:	4b07      	ldr	r3, [pc, #28]	@ (200000f4 <FLASH_Program_Fast+0x84>)
200000d6:	691a      	ldr	r2, [r3, #16]
200000d8:	2380      	movs	r3, #128	@ 0x80
200000da:	025b      	lsls	r3, r3, #9
200000dc:	4013      	ands	r3, r2
200000de:	d1f9      	bne.n	200000d4 <FLASH_Program_Fast+0x64>
200000e0:	693b      	ldr	r3, [r7, #16]
200000e2:	60bb      	str	r3, [r7, #8]
200000e4:	68bb      	ldr	r3, [r7, #8]
200000e6:	f383 8810 	msr	PRIMASK, r3
200000ea:	46c0      	nop			@ (mov r8, r8)
200000ec:	46c0      	nop			@ (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	b008      	add	sp, #32
200000f2:	bd80      	pop	{r7, pc}
200000f4:	40022000 	.word	0x40022000
