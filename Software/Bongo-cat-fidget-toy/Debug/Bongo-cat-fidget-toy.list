
Bongo-cat-fidget-toy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000322c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c40  080032e4  080032e4  000042e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f24  08005f24  00007020  2**0
                  CONTENTS
  4 .ARM          00000000  08005f24  08005f24  00007020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f24  08005f24  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f24  08005f24  00006f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f28  08005f28  00006f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08005f2c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000020  08005f4c  00007020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08005f4c  00007504  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e173  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235a  00000000  00000000  000151bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00017518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3a  00000000  00000000  00018370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001569b  00000000  00000000  00018eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011995  00000000  00000000  0002e545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087cb3  00000000  00000000  0003feda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7b8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003444  00000000  00000000  000c7bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000cb014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000020 	.word	0x20000020
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080032cc 	.word	0x080032cc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000024 	.word	0x20000024
 80000fc:	080032cc 	.word	0x080032cc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <draw_animation>:
int sw_state_right;

uint8_t idle_cnt;


void draw_animation(char* frame){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af02      	add	r7, sp, #8
 80003f2:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 fc05 	bl	8000c04 <ssd1306_Fill>
	ssd1306_DrawBitmap(0,0,frame,128,64,White);
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	2301      	movs	r3, #1
 80003fe:	9301      	str	r3, [sp, #4]
 8000400:	2340      	movs	r3, #64	@ 0x40
 8000402:	9300      	str	r3, [sp, #0]
 8000404:	2380      	movs	r3, #128	@ 0x80
 8000406:	2100      	movs	r1, #0
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fcb5 	bl	8000d78 <ssd1306_DrawBitmap>
//	ssd1306_UpdateScreen();
}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}

08000416 <draw_animation_erase>:

void draw_animation_erase(char* frame){
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af02      	add	r7, sp, #8
 800041c:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(0,0,frame,128,64,Black);
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	2300      	movs	r3, #0
 8000422:	9301      	str	r3, [sp, #4]
 8000424:	2340      	movs	r3, #64	@ 0x40
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	2380      	movs	r3, #128	@ 0x80
 800042a:	2100      	movs	r1, #0
 800042c:	2000      	movs	r0, #0
 800042e:	f000 fca3 	bl	8000d78 <ssd1306_DrawBitmap>
//	ssd1306_UpdateScreen();
}
 8000432:	46c0      	nop			@ (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b002      	add	sp, #8
 8000438:	bd80      	pop	{r7, pc}

0800043a <draw_animation_transparent>:

void draw_animation_transparent(char* frame){
 800043a:	b580      	push	{r7, lr}
 800043c:	b084      	sub	sp, #16
 800043e:	af02      	add	r7, sp, #8
 8000440:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(0,0,frame,128,64,White);
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	2301      	movs	r3, #1
 8000446:	9301      	str	r3, [sp, #4]
 8000448:	2340      	movs	r3, #64	@ 0x40
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	2380      	movs	r3, #128	@ 0x80
 800044e:	2100      	movs	r1, #0
 8000450:	2000      	movs	r0, #0
 8000452:	f000 fc91 	bl	8000d78 <ssd1306_DrawBitmap>
//	ssd1306_UpdateScreen();
}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
//  // Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim14 )
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	4b0d      	ldr	r3, [pc, #52]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800046c:	429a      	cmp	r2, r3
 800046e:	d112      	bne.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		sw_state_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);
 8000470:	23a0      	movs	r3, #160	@ 0xa0
 8000472:	05db      	lsls	r3, r3, #23
 8000474:	2140      	movs	r1, #64	@ 0x40
 8000476:	0018      	movs	r0, r3
 8000478:	f001 f95c 	bl	8001734 <HAL_GPIO_ReadPin>
 800047c:	0003      	movs	r3, r0
 800047e:	001a      	movs	r2, r3
 8000480:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000482:	601a      	str	r2, [r3, #0]
		sw_state_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000486:	2101      	movs	r1, #1
 8000488:	0018      	movs	r0, r3
 800048a:	f001 f953 	bl	8001734 <HAL_GPIO_ReadPin>
 800048e:	0003      	movs	r3, r0
 8000490:	001a      	movs	r2, r3
 8000492:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000494:	601a      	str	r2, [r3, #0]
	}
}
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b002      	add	sp, #8
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	20000090 	.word	0x20000090
 80004a4:	200000dc 	.word	0x200000dc
 80004a8:	50000400 	.word	0x50000400
 80004ac:	200000e0 	.word	0x200000e0

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 fe51 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f973 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 fa4b 	bl	8000958 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c2:	f000 f9df 	bl	8000884 <MX_I2C1_Init>
  MX_TIM14_Init();
 80004c6:	f000 fa21 	bl	800090c <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004ca:	f000 f9c5 	bl	8000858 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80004ce:	2380      	movs	r3, #128	@ 0x80
 80004d0:	0219      	lsls	r1, r3, #8
 80004d2:	23a0      	movs	r3, #160	@ 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2200      	movs	r2, #0
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 f948 	bl	800176e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80004de:	200a      	movs	r0, #10
 80004e0:	f000 fec2 	bl	8001268 <HAL_Delay>
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 80004e4:	2380      	movs	r3, #128	@ 0x80
 80004e6:	0219      	lsls	r1, r3, #8
 80004e8:	23a0      	movs	r3, #160	@ 0xa0
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	2201      	movs	r2, #1
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 f93d 	bl	800176e <HAL_GPIO_WritePin>
  ssd1306_Init();
 80004f4:	f000 fb1a 	bl	8000b2c <ssd1306_Init>
//  HAL_Delay(50);
//    ssd1306_TestAll();

  state_e state = IDLE;
 80004f8:	2317      	movs	r3, #23
 80004fa:	18fb      	adds	r3, r7, r3
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
  int32_t idle_cntr = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
  int32_t tap_left_cntr = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  int32_t tap_right_cntr = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
  uint8_t left_state = 0;
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
  uint8_t right_state = 0;
 8000512:	1dbb      	adds	r3, r7, #6
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim14);
 8000518:	4b97      	ldr	r3, [pc, #604]	@ (8000778 <main+0x2c8>)
 800051a:	0018      	movs	r0, r3
 800051c:	f002 fca2 	bl	8002e64 <HAL_TIM_Base_Start_IT>
  while(1) {
	switch(state){
 8000520:	2317      	movs	r3, #23
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <main+0x80>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d031      	beq.n	8000592 <main+0xe2>
 800052e:	e7f7      	b.n	8000520 <main+0x70>
	case IDLE:
		if(sw_state_left == 0 || sw_state_right == 0){
 8000530:	4b92      	ldr	r3, [pc, #584]	@ (800077c <main+0x2cc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d003      	beq.n	8000540 <main+0x90>
 8000538:	4b91      	ldr	r3, [pc, #580]	@ (8000780 <main+0x2d0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d10d      	bne.n	800055c <main+0xac>
			draw_animation(&img_both_up);
 8000540:	4b90      	ldr	r3, [pc, #576]	@ (8000784 <main+0x2d4>)
 8000542:	0018      	movs	r0, r3
 8000544:	f7ff ff52 	bl	80003ec <draw_animation>
			ssd1306_UpdateScreen();
 8000548:	f000 fb76 	bl	8000c38 <ssd1306_UpdateScreen>
			HAL_Delay(50);
 800054c:	2032      	movs	r0, #50	@ 0x32
 800054e:	f000 fe8b 	bl	8001268 <HAL_Delay>
			state = SWITCH;
 8000552:	2317      	movs	r3, #23
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	2201      	movs	r2, #1
 8000558:	701a      	strb	r2, [r3, #0]
			  draw_animation(ani_idle[idle_cnt]);
			  ssd1306_UpdateScreen();
			  idle_cnt = (idle_cnt + 1 ) % ani_idle_LEN;
			  HAL_Delay(100);
		}
		break;
 800055a:	e10c      	b.n	8000776 <main+0x2c6>
			  draw_animation(ani_idle[idle_cnt]);
 800055c:	4b8a      	ldr	r3, [pc, #552]	@ (8000788 <main+0x2d8>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	001a      	movs	r2, r3
 8000562:	4b8a      	ldr	r3, [pc, #552]	@ (800078c <main+0x2dc>)
 8000564:	0092      	lsls	r2, r2, #2
 8000566:	58d3      	ldr	r3, [r2, r3]
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff ff3f 	bl	80003ec <draw_animation>
			  ssd1306_UpdateScreen();
 800056e:	f000 fb63 	bl	8000c38 <ssd1306_UpdateScreen>
			  idle_cnt = (idle_cnt + 1 ) % ani_idle_LEN;
 8000572:	4b85      	ldr	r3, [pc, #532]	@ (8000788 <main+0x2d8>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	3301      	adds	r3, #1
 8000578:	2205      	movs	r2, #5
 800057a:	0011      	movs	r1, r2
 800057c:	0018      	movs	r0, r3
 800057e:	f7ff ff2f 	bl	80003e0 <__aeabi_idivmod>
 8000582:	000b      	movs	r3, r1
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b80      	ldr	r3, [pc, #512]	@ (8000788 <main+0x2d8>)
 8000588:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(100);
 800058a:	2064      	movs	r0, #100	@ 0x64
 800058c:	f000 fe6c 	bl	8001268 <HAL_Delay>
		break;
 8000590:	e0f1      	b.n	8000776 <main+0x2c6>
	case SWITCH:
		// Idle reset routines
		if(NONE_PRESSED){
 8000592:	4b7a      	ldr	r3, [pc, #488]	@ (800077c <main+0x2cc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d12d      	bne.n	80005f6 <main+0x146>
 800059a:	4b79      	ldr	r3, [pc, #484]	@ (8000780 <main+0x2d0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d129      	bne.n	80005f6 <main+0x146>
			draw_animation(&img_both_up);
 80005a2:	4b78      	ldr	r3, [pc, #480]	@ (8000784 <main+0x2d4>)
 80005a4:	0018      	movs	r0, r3
 80005a6:	f7ff ff21 	bl	80003ec <draw_animation>
			if(idle_cntr == 0){
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d103      	bne.n	80005b8 <main+0x108>
				idle_cntr = HAL_GetTick();
 80005b0:	f000 fe50 	bl	8001254 <HAL_GetTick>
 80005b4:	0003      	movs	r3, r0
 80005b6:	613b      	str	r3, [r7, #16]
			}
			if(HAL_GetTick() - idle_cntr >= IDLE_TIME){
 80005b8:	f000 fe4c 	bl	8001254 <HAL_GetTick>
 80005bc:	0002      	movs	r2, r0
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	1ad2      	subs	r2, r2, r3
 80005c2:	23fa      	movs	r3, #250	@ 0xfa
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d305      	bcc.n	80005d6 <main+0x126>
				idle_cntr = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
				state = IDLE;
 80005ce:	2317      	movs	r3, #23
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
			}
			if(left_state)
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <main+0x134>
				left_state = 0;
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
			if(right_state)
 80005e4:	1dbb      	adds	r3, r7, #6
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d100      	bne.n	80005ee <main+0x13e>
 80005ec:	e096      	b.n	800071c <main+0x26c>
				right_state = 0;
 80005ee:	1dbb      	adds	r3, r7, #6
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
			if(right_state)
 80005f4:	e092      	b.n	800071c <main+0x26c>

		}
		// Paw draw routines
		else {
			idle_cntr = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
			if((BOTH_PRESSED) && ((left_state | right_state == 0) || (left_state ^ right_state == 1))){
 80005fa:	4b60      	ldr	r3, [pc, #384]	@ (800077c <main+0x2cc>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d138      	bne.n	8000674 <main+0x1c4>
 8000602:	4b5f      	ldr	r3, [pc, #380]	@ (8000780 <main+0x2d0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d134      	bne.n	8000674 <main+0x1c4>
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	1dba      	adds	r2, r7, #6
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	4251      	negs	r1, r2
 8000614:	414a      	adcs	r2, r1
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	4313      	orrs	r3, r2
 800061a:	d109      	bne.n	8000630 <main+0x180>
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	1dba      	adds	r2, r7, #6
 8000622:	7812      	ldrb	r2, [r2, #0]
 8000624:	3a01      	subs	r2, #1
 8000626:	4251      	negs	r1, r2
 8000628:	414a      	adcs	r2, r1
 800062a:	b2d2      	uxtb	r2, r2
 800062c:	4293      	cmp	r3, r2
 800062e:	d021      	beq.n	8000674 <main+0x1c4>
				draw_animation(&img_both_down_alt);
 8000630:	4b57      	ldr	r3, [pc, #348]	@ (8000790 <main+0x2e0>)
 8000632:	0018      	movs	r0, r3
 8000634:	f7ff feda 	bl	80003ec <draw_animation>
				if(!right_state){
 8000638:	1dbb      	adds	r3, r7, #6
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d107      	bne.n	8000650 <main+0x1a0>
					draw_animation_transparent(&img_tap_right);
 8000640:	4b54      	ldr	r3, [pc, #336]	@ (8000794 <main+0x2e4>)
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff fef9 	bl	800043a <draw_animation_transparent>
					tap_right_cntr = HAL_GetTick();
 8000648:	f000 fe04 	bl	8001254 <HAL_GetTick>
 800064c:	0003      	movs	r3, r0
 800064e:	60bb      	str	r3, [r7, #8]
				}
				if(!left_state){
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d107      	bne.n	8000668 <main+0x1b8>
					draw_animation_transparent(&img_tap_left);
 8000658:	4b4f      	ldr	r3, [pc, #316]	@ (8000798 <main+0x2e8>)
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff feed 	bl	800043a <draw_animation_transparent>
					tap_left_cntr = HAL_GetTick();
 8000660:	f000 fdf8 	bl	8001254 <HAL_GetTick>
 8000664:	0003      	movs	r3, r0
 8000666:	60fb      	str	r3, [r7, #12]
				}
				right_state = 1; left_state = 1;
 8000668:	1dbb      	adds	r3, r7, #6
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
			}
			if(RIGHT_PRESSED){
 8000674:	4b41      	ldr	r3, [pc, #260]	@ (800077c <main+0x2cc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d125      	bne.n	80006c8 <main+0x218>
 800067c:	4b40      	ldr	r3, [pc, #256]	@ (8000780 <main+0x2d0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d121      	bne.n	80006c8 <main+0x218>
				if(right_state == 0 || left_state == 1){
 8000684:	1dbb      	adds	r3, r7, #6
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <main+0x1e4>
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d112      	bne.n	80006ba <main+0x20a>
					draw_animation(&img_right_down_alt);
 8000694:	4b41      	ldr	r3, [pc, #260]	@ (800079c <main+0x2ec>)
 8000696:	0018      	movs	r0, r3
 8000698:	f7ff fea8 	bl	80003ec <draw_animation>
					if(!right_state){
 800069c:	1dbb      	adds	r3, r7, #6
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d107      	bne.n	80006b4 <main+0x204>
						draw_animation_transparent(&img_tap_right);
 80006a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000794 <main+0x2e4>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff fec7 	bl	800043a <draw_animation_transparent>
						tap_right_cntr = HAL_GetTick();
 80006ac:	f000 fdd2 	bl	8001254 <HAL_GetTick>
 80006b0:	0003      	movs	r3, r0
 80006b2:	60bb      	str	r3, [r7, #8]
					}
					right_state = 1;
 80006b4:	1dbb      	adds	r3, r7, #6
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]

				}
				if(left_state)
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <main+0x218>
					left_state = 0;
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
			}
			if(LEFT_PRESSED){
 80006c8:	4b2c      	ldr	r3, [pc, #176]	@ (800077c <main+0x2cc>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d125      	bne.n	800071c <main+0x26c>
 80006d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <main+0x2d0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d121      	bne.n	800071c <main+0x26c>
				if(left_state == 0 || right_state == 1){
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <main+0x238>
 80006e0:	1dbb      	adds	r3, r7, #6
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d112      	bne.n	800070e <main+0x25e>
					draw_animation(&img_left_down_alt);
 80006e8:	4b2d      	ldr	r3, [pc, #180]	@ (80007a0 <main+0x2f0>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff fe7e 	bl	80003ec <draw_animation>
					if(!left_state){
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d107      	bne.n	8000708 <main+0x258>
						draw_animation_transparent(&img_tap_left);
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <main+0x2e8>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff fe9d 	bl	800043a <draw_animation_transparent>
						tap_left_cntr = HAL_GetTick();
 8000700:	f000 fda8 	bl	8001254 <HAL_GetTick>
 8000704:	0003      	movs	r3, r0
 8000706:	60fb      	str	r3, [r7, #12]
					}
					left_state = 1;
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]

				}
				if(right_state)
 800070e:	1dbb      	adds	r3, r7, #6
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <main+0x26c>
					right_state = 0;
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
//			draw_animation_transparent(&img_tap_right);
//			tap_right_cntr = HAL_GetTick();
//		}

		// Tap decay routines
		if(tap_left_cntr > 0){
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	dd11      	ble.n	8000746 <main+0x296>
			if(HAL_GetTick() - tap_left_cntr > TAP_DECAY_TIME) {
 8000722:	f000 fd97 	bl	8001254 <HAL_GetTick>
 8000726:	0002      	movs	r2, r0
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	2bc8      	cmp	r3, #200	@ 0xc8
 800072e:	d906      	bls.n	800073e <main+0x28e>
				draw_animation_erase(&img_tap_left);
 8000730:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <main+0x2e8>)
 8000732:	0018      	movs	r0, r3
 8000734:	f7ff fe6f 	bl	8000416 <draw_animation_erase>
				tap_left_cntr = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e003      	b.n	8000746 <main+0x296>
				}
			else{
				draw_animation_transparent(&img_tap_left);
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <main+0x2e8>)
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff fe7a 	bl	800043a <draw_animation_transparent>
			}
			}
		if(tap_right_cntr > 0){
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	2b00      	cmp	r3, #0
 800074a:	dd11      	ble.n	8000770 <main+0x2c0>
			if(HAL_GetTick() - tap_right_cntr > TAP_DECAY_TIME) {
 800074c:	f000 fd82 	bl	8001254 <HAL_GetTick>
 8000750:	0002      	movs	r2, r0
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	2bc8      	cmp	r3, #200	@ 0xc8
 8000758:	d906      	bls.n	8000768 <main+0x2b8>
				draw_animation_erase(&img_tap_right);
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <main+0x2e4>)
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fe5a 	bl	8000416 <draw_animation_erase>
				tap_right_cntr = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	e003      	b.n	8000770 <main+0x2c0>
				}
			else{
				draw_animation_transparent(&img_tap_right);
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <main+0x2e4>)
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff fe65 	bl	800043a <draw_animation_transparent>
			}
			}

//		HAL_Delay(100);
		ssd1306_UpdateScreen();
 8000770:	f000 fa62 	bl	8000c38 <ssd1306_UpdateScreen>
		break;
 8000774:	46c0      	nop			@ (mov r8, r8)
	switch(state){
 8000776:	e6d3      	b.n	8000520 <main+0x70>
 8000778:	20000090 	.word	0x20000090
 800077c:	200000dc 	.word	0x200000dc
 8000780:	200000e0 	.word	0x200000e0
 8000784:	080032e4 	.word	0x080032e4
 8000788:	200000e4 	.word	0x200000e4
 800078c:	20000000 	.word	0x20000000
 8000790:	08004ae4 	.word	0x08004ae4
 8000794:	08005ae4 	.word	0x08005ae4
 8000798:	080056e4 	.word	0x080056e4
 800079c:	080052e4 	.word	0x080052e4
 80007a0:	08004ee4 	.word	0x08004ee4

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b093      	sub	sp, #76	@ 0x4c
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	2414      	movs	r4, #20
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	0018      	movs	r0, r3
 80007b0:	2334      	movs	r3, #52	@ 0x34
 80007b2:	001a      	movs	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	f002 fd5d 	bl	8003274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	0018      	movs	r0, r3
 80007be:	2310      	movs	r3, #16
 80007c0:	001a      	movs	r2, r3
 80007c2:	2100      	movs	r1, #0
 80007c4:	f002 fd56 	bl	8003274 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c8:	2380      	movs	r3, #128	@ 0x80
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fcf1 	bl	80021b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2202      	movs	r2, #2
 80007d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2280      	movs	r2, #128	@ 0x80
 80007dc:	0052      	lsls	r2, r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007e0:	0021      	movs	r1, r4
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2240      	movs	r2, #64	@ 0x40
 80007ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2202      	movs	r2, #2
 80007f2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2202      	movs	r2, #2
 80007f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2208      	movs	r2, #8
 8000804:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	0292      	lsls	r2, r2, #10
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	0592      	lsls	r2, r2, #22
 8000814:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	187b      	adds	r3, r7, r1
 8000818:	0018      	movs	r0, r3
 800081a:	f001 fd0b 	bl	8002234 <HAL_RCC_OscConfig>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000822:	f000 f943 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2202      	movs	r2, #2
 8000830:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2102      	movs	r1, #2
 8000842:	0018      	movs	r0, r3
 8000844:	f002 f806 	bl	8002854 <HAL_RCC_ClockConfig>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800084c:	f000 f92e 	bl	8000aac <Error_Handler>
  }
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b013      	add	sp, #76	@ 0x4c
 8000856:	bd90      	pop	{r4, r7, pc}

08000858 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	2004      	movs	r0, #4
 8000862:	f000 fdd1 	bl	8001408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000866:	2004      	movs	r0, #4
 8000868:	f000 fde3 	bl	8001432 <HAL_NVIC_EnableIRQ>
  /* TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2013      	movs	r0, #19
 8000872:	f000 fdc9 	bl	8001408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000876:	2013      	movs	r0, #19
 8000878:	f000 fddb 	bl	8001432 <HAL_NVIC_EnableIRQ>
}
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000888:	4b1d      	ldr	r3, [pc, #116]	@ (8000900 <MX_I2C1_Init+0x7c>)
 800088a:	4a1e      	ldr	r2, [pc, #120]	@ (8000904 <MX_I2C1_Init+0x80>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602476;
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <MX_I2C1_Init+0x7c>)
 8000890:	4a1d      	ldr	r2, [pc, #116]	@ (8000908 <MX_I2C1_Init+0x84>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000894:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_I2C1_Init+0x7c>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089a:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <MX_I2C1_Init+0x7c>)
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_I2C1_Init+0x7c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_I2C1_Init+0x7c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_I2C1_Init+0x7c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <MX_I2C1_Init+0x7c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_I2C1_Init+0x7c>)
 80008ba:	2280      	movs	r2, #128	@ 0x80
 80008bc:	0292      	lsls	r2, r2, #10
 80008be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_I2C1_Init+0x7c>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 ff70 	bl	80017a8 <HAL_I2C_Init>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008cc:	f000 f8ee 	bl	8000aac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80008d0:	2380      	movs	r3, #128	@ 0x80
 80008d2:	015a      	lsls	r2, r3, #5
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <MX_I2C1_Init+0x7c>)
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 fbd3 	bl	8002084 <HAL_I2CEx_ConfigAnalogFilter>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C1_Init+0x62>
  {
    Error_Handler();
 80008e2:	f000 f8e3 	bl	8000aac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_I2C1_Init+0x7c>)
 80008e8:	2100      	movs	r1, #0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 fc16 	bl	800211c <HAL_I2CEx_ConfigDigitalFilter>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C1_Init+0x74>
  {
    Error_Handler();
 80008f4:	f000 f8da 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	2000003c 	.word	0x2000003c
 8000904:	40005400 	.word	0x40005400
 8000908:	00602476 	.word	0x00602476

0800090c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_TIM14_Init+0x40>)
 8000912:	4a0f      	ldr	r2, [pc, #60]	@ (8000950 <MX_TIM14_Init+0x44>)
 8000914:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 100-1;
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <MX_TIM14_Init+0x40>)
 8000918:	2263      	movs	r2, #99	@ 0x63
 800091a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_TIM14_Init+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 6400-1;
 8000922:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <MX_TIM14_Init+0x40>)
 8000924:	4a0b      	ldr	r2, [pc, #44]	@ (8000954 <MX_TIM14_Init+0x48>)
 8000926:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_TIM14_Init+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b07      	ldr	r3, [pc, #28]	@ (800094c <MX_TIM14_Init+0x40>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000934:	4b05      	ldr	r3, [pc, #20]	@ (800094c <MX_TIM14_Init+0x40>)
 8000936:	0018      	movs	r0, r3
 8000938:	f002 fa3c 	bl	8002db4 <HAL_TIM_Base_Init>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000940:	f000 f8b4 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	20000090 	.word	0x20000090
 8000950:	40002000 	.word	0x40002000
 8000954:	000018ff 	.word	0x000018ff

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b089      	sub	sp, #36	@ 0x24
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	240c      	movs	r4, #12
 8000960:	193b      	adds	r3, r7, r4
 8000962:	0018      	movs	r0, r3
 8000964:	2314      	movs	r3, #20
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f002 fc83 	bl	8003274 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b4a      	ldr	r3, [pc, #296]	@ (8000a98 <MX_GPIO_Init+0x140>)
 8000970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000972:	4b49      	ldr	r3, [pc, #292]	@ (8000a98 <MX_GPIO_Init+0x140>)
 8000974:	2102      	movs	r1, #2
 8000976:	430a      	orrs	r2, r1
 8000978:	635a      	str	r2, [r3, #52]	@ 0x34
 800097a:	4b47      	ldr	r3, [pc, #284]	@ (8000a98 <MX_GPIO_Init+0x140>)
 800097c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800097e:	2202      	movs	r2, #2
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b44      	ldr	r3, [pc, #272]	@ (8000a98 <MX_GPIO_Init+0x140>)
 8000988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800098a:	4b43      	ldr	r3, [pc, #268]	@ (8000a98 <MX_GPIO_Init+0x140>)
 800098c:	2104      	movs	r1, #4
 800098e:	430a      	orrs	r2, r1
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34
 8000992:	4b41      	ldr	r3, [pc, #260]	@ (8000a98 <MX_GPIO_Init+0x140>)
 8000994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000996:	2204      	movs	r2, #4
 8000998:	4013      	ands	r3, r2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a98 <MX_GPIO_Init+0x140>)
 80009a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000a98 <MX_GPIO_Init+0x140>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000a98 <MX_GPIO_Init+0x140>)
 80009ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80009b6:	2380      	movs	r3, #128	@ 0x80
 80009b8:	0219      	lsls	r1, r3, #8
 80009ba:	23a0      	movs	r3, #160	@ 0xa0
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2200      	movs	r2, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 fed4 	bl	800176e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	4a34      	ldr	r2, [pc, #208]	@ (8000a9c <MX_GPIO_Init+0x144>)
 80009ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2203      	movs	r2, #3
 80009d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	4a31      	ldr	r2, [pc, #196]	@ (8000aa0 <MX_GPIO_Init+0x148>)
 80009dc:	0019      	movs	r1, r3
 80009de:	0010      	movs	r0, r2
 80009e0:	f000 fd44 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 PA8
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	4a2f      	ldr	r2, [pc, #188]	@ (8000aa4 <MX_GPIO_Init+0x14c>)
 80009e8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	2203      	movs	r2, #3
 80009ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	193a      	adds	r2, r7, r4
 80009f8:	23a0      	movs	r3, #160	@ 0xa0
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fd34 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_LEFT_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2240      	movs	r2, #64	@ 0x40
 8000a08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000a16:	193a      	adds	r2, r7, r4
 8000a18:	23a0      	movs	r3, #160	@ 0xa0
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fd24 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa8 <MX_GPIO_Init+0x150>)
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	0010      	movs	r0, r2
 8000a3e:	f000 fd15 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a42:	0021      	movs	r1, r4
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	22ff      	movs	r2, #255	@ 0xff
 8000a48:	0052      	lsls	r2, r2, #1
 8000a4a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2203      	movs	r2, #3
 8000a52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <MX_GPIO_Init+0x150>)
 8000a5e:	0019      	movs	r1, r3
 8000a60:	0010      	movs	r0, r2
 8000a62:	f000 fd03 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000a66:	0021      	movs	r1, r4
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	0212      	lsls	r2, r2, #8
 8000a6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2201      	movs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000a82:	187a      	adds	r2, r7, r1
 8000a84:	23a0      	movs	r3, #160	@ 0xa0
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	0011      	movs	r1, r2
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fcee 	bl	800146c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b009      	add	sp, #36	@ 0x24
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	0000c040 	.word	0x0000c040
 8000aa0:	50000800 	.word	0x50000800
 8000aa4:	00001dbf 	.word	0x00001dbf
 8000aa8:	50000400 	.word	0x50000400

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af04      	add	r7, sp, #16
 8000aca:	0002      	movs	r2, r0
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000ad0:	4808      	ldr	r0, [pc, #32]	@ (8000af4 <ssd1306_WriteCommand+0x30>)
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	425b      	negs	r3, r3
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2178      	movs	r1, #120	@ 0x78
 8000ae6:	f000 ff05 	bl	80018f4 <HAL_I2C_Mem_Write>
}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	2000003c 	.word	0x2000003c

08000af8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af04      	add	r7, sp, #16
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	4808      	ldr	r0, [pc, #32]	@ (8000b28 <ssd1306_WriteData+0x30>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4252      	negs	r2, r2
 8000b0c:	9202      	str	r2, [sp, #8]
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2301      	movs	r3, #1
 8000b16:	2240      	movs	r2, #64	@ 0x40
 8000b18:	2178      	movs	r1, #120	@ 0x78
 8000b1a:	f000 feeb 	bl	80018f4 <HAL_I2C_Mem_Write>
}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	2000003c 	.word	0x2000003c

08000b2c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b30:	f7ff ffc2 	bl	8000ab8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b34:	2064      	movs	r0, #100	@ 0x64
 8000b36:	f000 fb97 	bl	8001268 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 f9c2 	bl	8000ec4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b40:	2020      	movs	r0, #32
 8000b42:	f7ff ffbf 	bl	8000ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff ffbc 	bl	8000ac4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b4c:	20b0      	movs	r0, #176	@ 0xb0
 8000b4e:	f7ff ffb9 	bl	8000ac4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8000b52:	20c0      	movs	r0, #192	@ 0xc0
 8000b54:	f7ff ffb6 	bl	8000ac4 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ffb3 	bl	8000ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000b5e:	2010      	movs	r0, #16
 8000b60:	f7ff ffb0 	bl	8000ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000b64:	2040      	movs	r0, #64	@ 0x40
 8000b66:	f7ff ffad 	bl	8000ac4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);//FF
 8000b6a:	20ff      	movs	r0, #255	@ 0xff
 8000b6c:	f000 f991 	bl	8000e92 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8000b70:	20a0      	movs	r0, #160	@ 0xa0
 8000b72:	f7ff ffa7 	bl	8000ac4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000b76:	20a6      	movs	r0, #166	@ 0xa6
 8000b78:	f7ff ffa4 	bl	8000ac4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000b7c:	20a8      	movs	r0, #168	@ 0xa8
 8000b7e:	f7ff ffa1 	bl	8000ac4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000b82:	203f      	movs	r0, #63	@ 0x3f
 8000b84:	f7ff ff9e 	bl	8000ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b88:	20a4      	movs	r0, #164	@ 0xa4
 8000b8a:	f7ff ff9b 	bl	8000ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000b8e:	20d3      	movs	r0, #211	@ 0xd3
 8000b90:	f7ff ff98 	bl	8000ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff ff95 	bl	8000ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b9a:	20d5      	movs	r0, #213	@ 0xd5
 8000b9c:	f7ff ff92 	bl	8000ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ba0:	20f0      	movs	r0, #240	@ 0xf0
 8000ba2:	f7ff ff8f 	bl	8000ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000ba6:	20d9      	movs	r0, #217	@ 0xd9
 8000ba8:	f7ff ff8c 	bl	8000ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000bac:	2022      	movs	r0, #34	@ 0x22
 8000bae:	f7ff ff89 	bl	8000ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bb2:	20da      	movs	r0, #218	@ 0xda
 8000bb4:	f7ff ff86 	bl	8000ac4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000bb8:	2012      	movs	r0, #18
 8000bba:	f7ff ff83 	bl	8000ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000bbe:	20db      	movs	r0, #219	@ 0xdb
 8000bc0:	f7ff ff80 	bl	8000ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	f7ff ff7d 	bl	8000ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000bca:	208d      	movs	r0, #141	@ 0x8d
 8000bcc:	f7ff ff7a 	bl	8000ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000bd0:	2014      	movs	r0, #20
 8000bd2:	f7ff ff77 	bl	8000ac4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f000 f974 	bl	8000ec4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 f811 	bl	8000c04 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000be2:	f000 f829 	bl	8000c38 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <ssd1306_Init+0xd4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <ssd1306_Init+0xd4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000bf2:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <ssd1306_Init+0xd4>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	711a      	strb	r2, [r3, #4]
}
 8000bf8:	46c0      	nop			@ (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	200004f8 	.word	0x200004f8

08000c04 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	0002      	movs	r2, r0
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <ssd1306_Fill+0x18>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e000      	b.n	8000c1e <ssd1306_Fill+0x1a>
 8000c1c:	23ff      	movs	r3, #255	@ 0xff
 8000c1e:	2282      	movs	r2, #130	@ 0x82
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <ssd1306_Fill+0x30>)
 8000c24:	0019      	movs	r1, r3
 8000c26:	f002 fb25 	bl	8003274 <memset>
}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b002      	add	sp, #8
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	200000e8 	.word	0x200000e8

08000c38 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e01e      	b.n	8000c84 <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	3b50      	subs	r3, #80	@ 0x50
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff ff38 	bl	8000ac4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff ff35 	bl	8000ac4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000c5a:	2010      	movs	r0, #16
 8000c5c:	f7ff ff32 	bl	8000ac4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	0013      	movs	r3, r2
 8000c66:	019b      	lsls	r3, r3, #6
 8000c68:	189b      	adds	r3, r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <ssd1306_UpdateScreen+0x60>)
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	2182      	movs	r1, #130	@ 0x82
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ff3f 	bl	8000af8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781a      	ldrb	r2, [r3, #0]
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	3201      	adds	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d9dc      	bls.n	8000c46 <ssd1306_UpdateScreen+0xe>
    }
}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	200000e8 	.word	0x200000e8

08000c9c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	0004      	movs	r4, r0
 8000ca4:	0008      	movs	r0, r1
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	1c22      	adds	r2, r4, #0
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	1dbb      	adds	r3, r7, #6
 8000cb0:	1c02      	adds	r2, r0, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	1d7b      	adds	r3, r7, #5
 8000cb6:	1c0a      	adds	r2, r1, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b81      	cmp	r3, #129	@ 0x81
 8000cc0:	d853      	bhi.n	8000d6a <ssd1306_DrawPixel+0xce>
 8000cc2:	1dbb      	adds	r3, r7, #6
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cc8:	d84f      	bhi.n	8000d6a <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000cca:	1d7b      	adds	r3, r7, #5
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d124      	bne.n	8000d1c <ssd1306_DrawPixel+0x80>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	1dbb      	adds	r3, r7, #6
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	08db      	lsrs	r3, r3, #3
 8000cdc:	b2d8      	uxtb	r0, r3
 8000cde:	0001      	movs	r1, r0
 8000ce0:	000b      	movs	r3, r1
 8000ce2:	019b      	lsls	r3, r3, #6
 8000ce4:	185b      	adds	r3, r3, r1
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	18d3      	adds	r3, r2, r3
 8000cea:	4a22      	ldr	r2, [pc, #136]	@ (8000d74 <ssd1306_DrawPixel+0xd8>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	b25a      	sxtb	r2, r3
 8000cf0:	1dbb      	adds	r3, r7, #6
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2107      	movs	r1, #7
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4099      	lsls	r1, r3
 8000cfc:	000b      	movs	r3, r1
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b25c      	sxtb	r4, r3
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	0001      	movs	r1, r0
 8000d0a:	000b      	movs	r3, r1
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	185b      	adds	r3, r3, r1
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	18d3      	adds	r3, r2, r3
 8000d14:	b2e1      	uxtb	r1, r4
 8000d16:	4a17      	ldr	r2, [pc, #92]	@ (8000d74 <ssd1306_DrawPixel+0xd8>)
 8000d18:	54d1      	strb	r1, [r2, r3]
 8000d1a:	e027      	b.n	8000d6c <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	1dbb      	adds	r3, r7, #6
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	08db      	lsrs	r3, r3, #3
 8000d26:	b2d8      	uxtb	r0, r3
 8000d28:	0001      	movs	r1, r0
 8000d2a:	000b      	movs	r3, r1
 8000d2c:	019b      	lsls	r3, r3, #6
 8000d2e:	185b      	adds	r3, r3, r1
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	18d3      	adds	r3, r2, r3
 8000d34:	4a0f      	ldr	r2, [pc, #60]	@ (8000d74 <ssd1306_DrawPixel+0xd8>)
 8000d36:	5cd3      	ldrb	r3, [r2, r3]
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	1dba      	adds	r2, r7, #6
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	2107      	movs	r1, #7
 8000d40:	400a      	ands	r2, r1
 8000d42:	2101      	movs	r1, #1
 8000d44:	4091      	lsls	r1, r2
 8000d46:	000a      	movs	r2, r1
 8000d48:	b252      	sxtb	r2, r2
 8000d4a:	43d2      	mvns	r2, r2
 8000d4c:	b252      	sxtb	r2, r2
 8000d4e:	4013      	ands	r3, r2
 8000d50:	b25c      	sxtb	r4, r3
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	0001      	movs	r1, r0
 8000d58:	000b      	movs	r3, r1
 8000d5a:	019b      	lsls	r3, r3, #6
 8000d5c:	185b      	adds	r3, r3, r1
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	b2e1      	uxtb	r1, r4
 8000d64:	4a03      	ldr	r2, [pc, #12]	@ (8000d74 <ssd1306_DrawPixel+0xd8>)
 8000d66:	54d1      	strb	r1, [r2, r3]
 8000d68:	e000      	b.n	8000d6c <ssd1306_DrawPixel+0xd0>
        return;
 8000d6a:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b003      	add	sp, #12
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	200000e8 	.word	0x200000e8

08000d78 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	0004      	movs	r4, r0
 8000d80:	0008      	movs	r0, r1
 8000d82:	603a      	str	r2, [r7, #0]
 8000d84:	0019      	movs	r1, r3
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	1c22      	adds	r2, r4, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
 8000d8c:	1dbb      	adds	r3, r7, #6
 8000d8e:	1c02      	adds	r2, r0, #0
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	1d7b      	adds	r3, r7, #5
 8000d94:	1c0a      	adds	r2, r1, #0
 8000d96:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000d98:	1d7b      	adds	r3, r7, #5
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3307      	adds	r3, #7
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	da00      	bge.n	8000da4 <ssd1306_DrawBitmap+0x2c>
 8000da2:	3307      	adds	r3, #7
 8000da4:	10db      	asrs	r3, r3, #3
 8000da6:	001a      	movs	r2, r3
 8000da8:	230a      	movs	r3, #10
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8000dae:	230f      	movs	r3, #15
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b81      	cmp	r3, #129	@ 0x81
 8000dbc:	d865      	bhi.n	8000e8a <ssd1306_DrawBitmap+0x112>
 8000dbe:	1dbb      	adds	r3, r7, #6
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dc4:	d861      	bhi.n	8000e8a <ssd1306_DrawBitmap+0x112>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000dc6:	230e      	movs	r3, #14
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
 8000dce:	e053      	b.n	8000e78 <ssd1306_DrawBitmap+0x100>
        for (uint8_t i = 0; i < w; i++) {
 8000dd0:	230d      	movs	r3, #13
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	e03c      	b.n	8000e54 <ssd1306_DrawBitmap+0xdc>
            if (i & 7) {
 8000dda:	230d      	movs	r3, #13
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2207      	movs	r2, #7
 8000de2:	4013      	ands	r3, r2
 8000de4:	d006      	beq.n	8000df4 <ssd1306_DrawBitmap+0x7c>
                byte <<= 1;
 8000de6:	230f      	movs	r3, #15
 8000de8:	18fa      	adds	r2, r7, r3
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	18db      	adds	r3, r3, r3
 8000df0:	7013      	strb	r3, [r2, #0]
 8000df2:	e014      	b.n	8000e1e <ssd1306_DrawBitmap+0xa6>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000df4:	230e      	movs	r3, #14
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	18ba      	adds	r2, r7, r2
 8000dfe:	2100      	movs	r1, #0
 8000e00:	5e52      	ldrsh	r2, [r2, r1]
 8000e02:	4353      	muls	r3, r2
 8000e04:	220d      	movs	r2, #13
 8000e06:	18ba      	adds	r2, r7, r2
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	08d2      	lsrs	r2, r2, #3
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	189b      	adds	r3, r3, r2
 8000e10:	001a      	movs	r2, r3
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	189a      	adds	r2, r3, r2
 8000e16:	230f      	movs	r3, #15
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 8000e1e:	230f      	movs	r3, #15
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da0e      	bge.n	8000e48 <ssd1306_DrawBitmap+0xd0>
                ssd1306_DrawPixel(x + i, y, color);
 8000e2a:	1dfa      	adds	r2, r7, #7
 8000e2c:	230d      	movs	r3, #13
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	18d3      	adds	r3, r2, r3
 8000e36:	b2d8      	uxtb	r0, r3
 8000e38:	2324      	movs	r3, #36	@ 0x24
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	781a      	ldrb	r2, [r3, #0]
 8000e3e:	1dbb      	adds	r3, r7, #6
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0019      	movs	r1, r3
 8000e44:	f7ff ff2a 	bl	8000c9c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000e48:	210d      	movs	r1, #13
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	3201      	adds	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	230d      	movs	r3, #13
 8000e56:	18fa      	adds	r2, r7, r3
 8000e58:	1d7b      	adds	r3, r7, #5
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d3bb      	bcc.n	8000dda <ssd1306_DrawBitmap+0x62>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000e62:	210e      	movs	r1, #14
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	3201      	adds	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	1dbb      	adds	r3, r7, #6
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	1dbb      	adds	r3, r7, #6
 8000e74:	3201      	adds	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	230e      	movs	r3, #14
 8000e7a:	18fa      	adds	r2, r7, r3
 8000e7c:	2320      	movs	r3, #32
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3a3      	bcc.n	8000dd0 <ssd1306_DrawBitmap+0x58>
            }
        }
    }
    return;
 8000e88:	e000      	b.n	8000e8c <ssd1306_DrawBitmap+0x114>
        return;
 8000e8a:	46c0      	nop			@ (mov r8, r8)
}
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b005      	add	sp, #20
 8000e90:	bd90      	pop	{r4, r7, pc}

08000e92 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b084      	sub	sp, #16
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	0002      	movs	r2, r0
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2281      	movs	r2, #129	@ 0x81
 8000ea4:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff fe0a 	bl	8000ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff fe05 	bl	8000ac4 <ssd1306_WriteCommand>
}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	0002      	movs	r2, r0
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8000ed8:	230f      	movs	r3, #15
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	22af      	movs	r2, #175	@ 0xaf
 8000ede:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <ssd1306_SetDisplayOn+0x48>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	715a      	strb	r2, [r3, #5]
 8000ee6:	e006      	b.n	8000ef6 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8000ee8:	230f      	movs	r3, #15
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	22ae      	movs	r2, #174	@ 0xae
 8000eee:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <ssd1306_SetDisplayOn+0x48>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff fde1 	bl	8000ac4 <ssd1306_WriteCommand>
}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	200004f8 	.word	0x200004f8

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	2201      	movs	r2, #1
 8000f28:	4013      	ands	r3, r2
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f34:	2180      	movs	r1, #128	@ 0x80
 8000f36:	0549      	lsls	r1, r1, #21
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f40:	2380      	movs	r3, #128	@ 0x80
 8000f42:	055b      	lsls	r3, r3, #21
 8000f44:	4013      	ands	r3, r2
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b091      	sub	sp, #68	@ 0x44
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	232c      	movs	r3, #44	@ 0x2c
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	0018      	movs	r0, r3
 8000f66:	2314      	movs	r3, #20
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f002 f982 	bl	8003274 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	2414      	movs	r4, #20
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	0018      	movs	r0, r3
 8000f76:	2318      	movs	r3, #24
 8000f78:	001a      	movs	r2, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f002 f97a 	bl	8003274 <memset>
  if(hi2c->Instance==I2C1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a35      	ldr	r2, [pc, #212]	@ (800105c <HAL_I2C_MspInit+0x104>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d163      	bne.n	8001052 <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 fde5 	bl	8002b68 <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	1e03      	subs	r3, r0, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fa2:	f7ff fd83 	bl	8000aac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8001060 <HAL_I2C_MspInit+0x108>)
 8000fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000faa:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <HAL_I2C_MspInit+0x108>)
 8000fac:	2102      	movs	r1, #2
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001060 <HAL_I2C_MspInit+0x108>)
 8000fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b28      	ldr	r3, [pc, #160]	@ (8001060 <HAL_I2C_MspInit+0x108>)
 8000fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fc2:	4b27      	ldr	r3, [pc, #156]	@ (8001060 <HAL_I2C_MspInit+0x108>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fca:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <HAL_I2C_MspInit+0x108>)
 8000fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd6:	212c      	movs	r1, #44	@ 0x2c
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2280      	movs	r2, #128	@ 0x80
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe0:	000c      	movs	r4, r1
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	2212      	movs	r2, #18
 8000fe6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	2201      	movs	r2, #1
 8000fec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	2206      	movs	r2, #6
 8000ff8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <HAL_I2C_MspInit+0x10c>)
 8000ffe:	0019      	movs	r1, r3
 8001000:	0010      	movs	r0, r2
 8001002:	f000 fa33 	bl	800146c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001006:	0021      	movs	r1, r4
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2280      	movs	r2, #128	@ 0x80
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2212      	movs	r2, #18
 8001014:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2201      	movs	r2, #1
 800101a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	187b      	adds	r3, r7, r1
 800101e:	2203      	movs	r2, #3
 8001020:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001022:	187b      	adds	r3, r7, r1
 8001024:	2206      	movs	r2, #6
 8001026:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	187a      	adds	r2, r7, r1
 800102a:	23a0      	movs	r3, #160	@ 0xa0
 800102c:	05db      	lsls	r3, r3, #23
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f000 fa1b 	bl	800146c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_I2C_MspInit+0x108>)
 8001038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <HAL_I2C_MspInit+0x108>)
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	0389      	lsls	r1, r1, #14
 8001040:	430a      	orrs	r2, r1
 8001042:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_I2C_MspInit+0x108>)
 8001046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	039b      	lsls	r3, r3, #14
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b011      	add	sp, #68	@ 0x44
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	40005400 	.word	0x40005400
 8001060:	40021000 	.word	0x40021000
 8001064:	50000400 	.word	0x50000400

08001068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <HAL_TIM_Base_MspInit+0x38>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10d      	bne.n	8001096 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_TIM_Base_MspInit+0x3c>)
 800107c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001080:	2180      	movs	r1, #128	@ 0x80
 8001082:	0209      	lsls	r1, r1, #8
 8001084:	430a      	orrs	r2, r1
 8001086:	641a      	str	r2, [r3, #64]	@ 0x40
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_TIM_Base_MspInit+0x3c>)
 800108a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800108c:	2380      	movs	r3, #128	@ 0x80
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	40002000 	.word	0x40002000
 80010a4:	40021000 	.word	0x40021000

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	e7fd      	b.n	80010ac <NMI_Handler+0x4>

080010b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	e7fd      	b.n	80010b4 <HardFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f8ae 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <TIM14_IRQHandler+0x14>)
 80010ea:	0018      	movs	r0, r3
 80010ec:	f001 ff08 	bl	8002f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	20000090 	.word	0x20000090

080010fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	46c0      	nop			@ (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001108:	480d      	ldr	r0, [pc, #52]	@ (8001140 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800110a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800110c:	f7ff fff6 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	@ (8001148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	@ (8001154 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001136:	f002 f8a5 	bl	8003284 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800113a:	f7ff f9b9 	bl	80004b0 <main>

0800113e <LoopForever>:

LoopForever:
  b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   r0, =_estack
 8001140:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800114c:	08005f2c 	.word	0x08005f2c
  ldr r2, =_sbss
 8001150:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001154:	20000504 	.word	0x20000504

08001158 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_IRQHandler>
	...

0800115c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <HAL_Init+0x3c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_Init+0x3c>)
 800116e:	2180      	movs	r1, #128	@ 0x80
 8001170:	0049      	lsls	r1, r1, #1
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	2003      	movs	r0, #3
 8001178:	f000 f810 	bl	800119c <HAL_InitTick>
 800117c:	1e03      	subs	r3, r0, #0
 800117e:	d003      	beq.n	8001188 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e001      	b.n	800118c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fec2 	bl	8000f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	781b      	ldrb	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	230f      	movs	r3, #15
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_InitTick+0x88>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d02b      	beq.n	800120c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <HAL_InitTick+0x8c>)
 80011b6:	681c      	ldr	r4, [r3, #0]
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_InitTick+0x88>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	0019      	movs	r1, r3
 80011be:	23fa      	movs	r3, #250	@ 0xfa
 80011c0:	0098      	lsls	r0, r3, #2
 80011c2:	f7fe ff9d 	bl	8000100 <__udivsi3>
 80011c6:	0003      	movs	r3, r0
 80011c8:	0019      	movs	r1, r3
 80011ca:	0020      	movs	r0, r4
 80011cc:	f7fe ff98 	bl	8000100 <__udivsi3>
 80011d0:	0003      	movs	r3, r0
 80011d2:	0018      	movs	r0, r3
 80011d4:	f000 f93d 	bl	8001452 <HAL_SYSTICK_Config>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d112      	bne.n	8001202 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d80a      	bhi.n	80011f8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	2301      	movs	r3, #1
 80011e6:	425b      	negs	r3, r3
 80011e8:	2200      	movs	r2, #0
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f90c 	bl	8001408 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <HAL_InitTick+0x90>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e00d      	b.n	8001214 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011f8:	230f      	movs	r3, #15
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e008      	b.n	8001214 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001202:	230f      	movs	r3, #15
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e003      	b.n	8001214 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800120c:	230f      	movs	r3, #15
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001214:	230f      	movs	r3, #15
 8001216:	18fb      	adds	r3, r7, r3
 8001218:	781b      	ldrb	r3, [r3, #0]
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b005      	add	sp, #20
 8001220:	bd90      	pop	{r4, r7, pc}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	2000001c 	.word	0x2000001c
 8001228:	20000014 	.word	0x20000014
 800122c:	20000018 	.word	0x20000018

08001230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <HAL_IncTick+0x1c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	001a      	movs	r2, r3
 800123a:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <HAL_IncTick+0x20>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	18d2      	adds	r2, r2, r3
 8001240:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <HAL_IncTick+0x20>)
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	2000001c 	.word	0x2000001c
 8001250:	20000500 	.word	0x20000500

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b02      	ldr	r3, [pc, #8]	@ (8001264 <HAL_GetTick+0x10>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	20000500 	.word	0x20000500

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff fff0 	bl	8001254 <HAL_GetTick>
 8001274:	0003      	movs	r3, r0
 8001276:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3301      	adds	r3, #1
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	001a      	movs	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	189b      	adds	r3, r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	46c0      	nop			@ (mov r8, r8)
 8001290:	f7ff ffe0 	bl	8001254 <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	46c0      	nop			@ (mov r8, r8)
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	2000001c 	.word	0x2000001c

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	0002      	movs	r2, r0
 80012b8:	1dfb      	adds	r3, r7, #7
 80012ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80012c2:	d809      	bhi.n	80012d8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	001a      	movs	r2, r3
 80012ca:	231f      	movs	r3, #31
 80012cc:	401a      	ands	r2, r3
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <__NVIC_EnableIRQ+0x30>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	4091      	lsls	r1, r2
 80012d4:	000a      	movs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80012d8:	46c0      	nop			@ (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	0002      	movs	r2, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80012f8:	d828      	bhi.n	800134c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012fa:	4a2f      	ldr	r2, [pc, #188]	@ (80013b8 <__NVIC_SetPriority+0xd4>)
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b25b      	sxtb	r3, r3
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	33c0      	adds	r3, #192	@ 0xc0
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	589b      	ldr	r3, [r3, r2]
 800130a:	1dfa      	adds	r2, r7, #7
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	0011      	movs	r1, r2
 8001310:	2203      	movs	r2, #3
 8001312:	400a      	ands	r2, r1
 8001314:	00d2      	lsls	r2, r2, #3
 8001316:	21ff      	movs	r1, #255	@ 0xff
 8001318:	4091      	lsls	r1, r2
 800131a:	000a      	movs	r2, r1
 800131c:	43d2      	mvns	r2, r2
 800131e:	401a      	ands	r2, r3
 8001320:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	019b      	lsls	r3, r3, #6
 8001326:	22ff      	movs	r2, #255	@ 0xff
 8001328:	401a      	ands	r2, r3
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	0018      	movs	r0, r3
 8001330:	2303      	movs	r3, #3
 8001332:	4003      	ands	r3, r0
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001338:	481f      	ldr	r0, [pc, #124]	@ (80013b8 <__NVIC_SetPriority+0xd4>)
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b25b      	sxtb	r3, r3
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	430a      	orrs	r2, r1
 8001344:	33c0      	adds	r3, #192	@ 0xc0
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800134a:	e031      	b.n	80013b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134c:	4a1b      	ldr	r2, [pc, #108]	@ (80013bc <__NVIC_SetPriority+0xd8>)
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	0019      	movs	r1, r3
 8001354:	230f      	movs	r3, #15
 8001356:	400b      	ands	r3, r1
 8001358:	3b08      	subs	r3, #8
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3306      	adds	r3, #6
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	18d3      	adds	r3, r2, r3
 8001362:	3304      	adds	r3, #4
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	1dfa      	adds	r2, r7, #7
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	0011      	movs	r1, r2
 800136c:	2203      	movs	r2, #3
 800136e:	400a      	ands	r2, r1
 8001370:	00d2      	lsls	r2, r2, #3
 8001372:	21ff      	movs	r1, #255	@ 0xff
 8001374:	4091      	lsls	r1, r2
 8001376:	000a      	movs	r2, r1
 8001378:	43d2      	mvns	r2, r2
 800137a:	401a      	ands	r2, r3
 800137c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	019b      	lsls	r3, r3, #6
 8001382:	22ff      	movs	r2, #255	@ 0xff
 8001384:	401a      	ands	r2, r3
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	0018      	movs	r0, r3
 800138c:	2303      	movs	r3, #3
 800138e:	4003      	ands	r3, r0
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001394:	4809      	ldr	r0, [pc, #36]	@ (80013bc <__NVIC_SetPriority+0xd8>)
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	001c      	movs	r4, r3
 800139c:	230f      	movs	r3, #15
 800139e:	4023      	ands	r3, r4
 80013a0:	3b08      	subs	r3, #8
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	430a      	orrs	r2, r1
 80013a6:	3306      	adds	r3, #6
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	18c3      	adds	r3, r0, r3
 80013ac:	3304      	adds	r3, #4
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	46c0      	nop			@ (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b003      	add	sp, #12
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	1e5a      	subs	r2, r3, #1
 80013cc:	2380      	movs	r3, #128	@ 0x80
 80013ce:	045b      	lsls	r3, r3, #17
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d301      	bcc.n	80013d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d4:	2301      	movs	r3, #1
 80013d6:	e010      	b.n	80013fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <SysTick_Config+0x44>)
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	3a01      	subs	r2, #1
 80013de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e0:	2301      	movs	r3, #1
 80013e2:	425b      	negs	r3, r3
 80013e4:	2103      	movs	r1, #3
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff ff7c 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <SysTick_Config+0x44>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <SysTick_Config+0x44>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	0018      	movs	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	210f      	movs	r1, #15
 8001414:	187b      	adds	r3, r7, r1
 8001416:	1c02      	adds	r2, r0, #0
 8001418:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	187b      	adds	r3, r7, r1
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b25b      	sxtb	r3, r3
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff ff5d 	bl	80012e4 <__NVIC_SetPriority>
}
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b004      	add	sp, #16
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	0002      	movs	r2, r0
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b25b      	sxtb	r3, r3
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff ff33 	bl	80012b0 <__NVIC_EnableIRQ>
}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff ffaf 	bl	80013c0 <SysTick_Config>
 8001462:	0003      	movs	r3, r0
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b002      	add	sp, #8
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147a:	e147      	b.n	800170c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2101      	movs	r1, #1
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4091      	lsls	r1, r2
 8001486:	000a      	movs	r2, r1
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d100      	bne.n	8001494 <HAL_GPIO_Init+0x28>
 8001492:	e138      	b.n	8001706 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2203      	movs	r2, #3
 800149a:	4013      	ands	r3, r2
 800149c:	2b01      	cmp	r3, #1
 800149e:	d005      	beq.n	80014ac <HAL_GPIO_Init+0x40>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2203      	movs	r2, #3
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d130      	bne.n	800150e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	409a      	lsls	r2, r3
 80014ba:	0013      	movs	r3, r2
 80014bc:	43da      	mvns	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	409a      	lsls	r2, r3
 80014ce:	0013      	movs	r3, r2
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014e2:	2201      	movs	r2, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	2201      	movs	r2, #1
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2203      	movs	r2, #3
 8001514:	4013      	ands	r3, r2
 8001516:	2b03      	cmp	r3, #3
 8001518:	d017      	beq.n	800154a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	43da      	mvns	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	409a      	lsls	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2203      	movs	r2, #3
 8001550:	4013      	ands	r3, r2
 8001552:	2b02      	cmp	r3, #2
 8001554:	d123      	bne.n	800159e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	08da      	lsrs	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3208      	adds	r2, #8
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	58d3      	ldr	r3, [r2, r3]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2207      	movs	r2, #7
 8001568:	4013      	ands	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	43da      	mvns	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2107      	movs	r1, #7
 8001582:	400b      	ands	r3, r1
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	08da      	lsrs	r2, r3, #3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3208      	adds	r2, #8
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	6939      	ldr	r1, [r7, #16]
 800159c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	409a      	lsls	r2, r3
 80015ac:	0013      	movs	r3, r2
 80015ae:	43da      	mvns	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2203      	movs	r2, #3
 80015bc:	401a      	ands	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	23c0      	movs	r3, #192	@ 0xc0
 80015d8:	029b      	lsls	r3, r3, #10
 80015da:	4013      	ands	r3, r2
 80015dc:	d100      	bne.n	80015e0 <HAL_GPIO_Init+0x174>
 80015de:	e092      	b.n	8001706 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015e0:	4a50      	ldr	r2, [pc, #320]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3318      	adds	r3, #24
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	589b      	ldr	r3, [r3, r2]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2203      	movs	r2, #3
 80015f2:	4013      	ands	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	220f      	movs	r2, #15
 80015f8:	409a      	lsls	r2, r3
 80015fa:	0013      	movs	r3, r2
 80015fc:	43da      	mvns	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	23a0      	movs	r3, #160	@ 0xa0
 8001608:	05db      	lsls	r3, r3, #23
 800160a:	429a      	cmp	r2, r3
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0x1ca>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a45      	ldr	r2, [pc, #276]	@ (8001728 <HAL_GPIO_Init+0x2bc>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00d      	beq.n	8001632 <HAL_GPIO_Init+0x1c6>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a44      	ldr	r2, [pc, #272]	@ (800172c <HAL_GPIO_Init+0x2c0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d007      	beq.n	800162e <HAL_GPIO_Init+0x1c2>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a43      	ldr	r2, [pc, #268]	@ (8001730 <HAL_GPIO_Init+0x2c4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d101      	bne.n	800162a <HAL_GPIO_Init+0x1be>
 8001626:	2303      	movs	r3, #3
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x1cc>
 800162a:	2305      	movs	r3, #5
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x1cc>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x1cc>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x1cc>
 8001636:	2300      	movs	r3, #0
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	2103      	movs	r1, #3
 800163c:	400a      	ands	r2, r1
 800163e:	00d2      	lsls	r2, r2, #3
 8001640:	4093      	lsls	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001648:	4936      	ldr	r1, [pc, #216]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3318      	adds	r3, #24
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001656:	4b33      	ldr	r3, [pc, #204]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43da      	mvns	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	2380      	movs	r3, #128	@ 0x80
 800166c:	035b      	lsls	r3, r3, #13
 800166e:	4013      	ands	r3, r2
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800167a:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43da      	mvns	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	039b      	lsls	r3, r3, #14
 8001698:	4013      	ands	r3, r2
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 80016ac:	2384      	movs	r3, #132	@ 0x84
 80016ae:	58d3      	ldr	r3, [r2, r3]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43da      	mvns	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	029b      	lsls	r3, r3, #10
 80016c4:	4013      	ands	r3, r2
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d0:	4914      	ldr	r1, [pc, #80]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 80016d2:	2284      	movs	r2, #132	@ 0x84
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80016d8:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	58d3      	ldr	r3, [r2, r3]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	025b      	lsls	r3, r3, #9
 80016f2:	4013      	ands	r3, r2
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016fe:	4909      	ldr	r1, [pc, #36]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 8001700:	2280      	movs	r2, #128	@ 0x80
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	40da      	lsrs	r2, r3
 8001714:	1e13      	subs	r3, r2, #0
 8001716:	d000      	beq.n	800171a <HAL_GPIO_Init+0x2ae>
 8001718:	e6b0      	b.n	800147c <HAL_GPIO_Init+0x10>
  }
}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b006      	add	sp, #24
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021800 	.word	0x40021800
 8001728:	50000400 	.word	0x50000400
 800172c:	50000800 	.word	0x50000800
 8001730:	50000c00 	.word	0x50000c00

08001734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	000a      	movs	r2, r1
 800173e:	1cbb      	adds	r3, r7, #2
 8001740:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	1cba      	adds	r2, r7, #2
 8001748:	8812      	ldrh	r2, [r2, #0]
 800174a:	4013      	ands	r3, r2
 800174c:	d004      	beq.n	8001758 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800174e:	230f      	movs	r3, #15
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	e003      	b.n	8001760 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001758:	230f      	movs	r3, #15
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001760:	230f      	movs	r3, #15
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	781b      	ldrb	r3, [r3, #0]
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	0008      	movs	r0, r1
 8001778:	0011      	movs	r1, r2
 800177a:	1cbb      	adds	r3, r7, #2
 800177c:	1c02      	adds	r2, r0, #0
 800177e:	801a      	strh	r2, [r3, #0]
 8001780:	1c7b      	adds	r3, r7, #1
 8001782:	1c0a      	adds	r2, r1, #0
 8001784:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001786:	1c7b      	adds	r3, r7, #1
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178e:	1cbb      	adds	r3, r7, #2
 8001790:	881a      	ldrh	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001796:	e003      	b.n	80017a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001798:	1cbb      	adds	r3, r7, #2
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017a0:	46c0      	nop			@ (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e08f      	b.n	80018da <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2241      	movs	r2, #65	@ 0x41
 80017be:	5c9b      	ldrb	r3, [r3, r2]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d107      	bne.n	80017d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2240      	movs	r2, #64	@ 0x40
 80017ca:	2100      	movs	r1, #0
 80017cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff fbc1 	bl	8000f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2241      	movs	r2, #65	@ 0x41
 80017da:	2124      	movs	r1, #36	@ 0x24
 80017dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	438a      	bics	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	493b      	ldr	r1, [pc, #236]	@ (80018e4 <HAL_I2C_Init+0x13c>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4938      	ldr	r1, [pc, #224]	@ (80018e8 <HAL_I2C_Init+0x140>)
 8001808:	400a      	ands	r2, r1
 800180a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d108      	bne.n	8001826 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2180      	movs	r1, #128	@ 0x80
 800181e:	0209      	lsls	r1, r1, #8
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	e007      	b.n	8001836 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2184      	movs	r1, #132	@ 0x84
 8001830:	0209      	lsls	r1, r1, #8
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d109      	bne.n	8001852 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2180      	movs	r1, #128	@ 0x80
 800184a:	0109      	lsls	r1, r1, #4
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	e007      	b.n	8001862 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4923      	ldr	r1, [pc, #140]	@ (80018ec <HAL_I2C_Init+0x144>)
 800185e:	400a      	ands	r2, r1
 8001860:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4920      	ldr	r1, [pc, #128]	@ (80018f0 <HAL_I2C_Init+0x148>)
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	491a      	ldr	r1, [pc, #104]	@ (80018e8 <HAL_I2C_Init+0x140>)
 800187e:	400a      	ands	r2, r1
 8001880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	431a      	orrs	r2, r3
 800188c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69d9      	ldr	r1, [r3, #28]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1a      	ldr	r2, [r3, #32]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2101      	movs	r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2241      	movs	r2, #65	@ 0x41
 80018c6:	2120      	movs	r1, #32
 80018c8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2242      	movs	r2, #66	@ 0x42
 80018d4:	2100      	movs	r1, #0
 80018d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	b002      	add	sp, #8
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	f0ffffff 	.word	0xf0ffffff
 80018e8:	ffff7fff 	.word	0xffff7fff
 80018ec:	fffff7ff 	.word	0xfffff7ff
 80018f0:	02008000 	.word	0x02008000

080018f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b089      	sub	sp, #36	@ 0x24
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	000c      	movs	r4, r1
 80018fe:	0010      	movs	r0, r2
 8001900:	0019      	movs	r1, r3
 8001902:	230a      	movs	r3, #10
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	1c22      	adds	r2, r4, #0
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	2308      	movs	r3, #8
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	1c02      	adds	r2, r0, #0
 8001910:	801a      	strh	r2, [r3, #0]
 8001912:	1dbb      	adds	r3, r7, #6
 8001914:	1c0a      	adds	r2, r1, #0
 8001916:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2241      	movs	r2, #65	@ 0x41
 800191c:	5c9b      	ldrb	r3, [r3, r2]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b20      	cmp	r3, #32
 8001922:	d000      	beq.n	8001926 <HAL_I2C_Mem_Write+0x32>
 8001924:	e10c      	b.n	8001b40 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <HAL_I2C_Mem_Write+0x42>
 800192c:	232c      	movs	r3, #44	@ 0x2c
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e0ff      	b.n	8001b42 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2240      	movs	r2, #64	@ 0x40
 8001946:	5c9b      	ldrb	r3, [r3, r2]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_I2C_Mem_Write+0x5c>
 800194c:	2302      	movs	r3, #2
 800194e:	e0f8      	b.n	8001b42 <HAL_I2C_Mem_Write+0x24e>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2240      	movs	r2, #64	@ 0x40
 8001954:	2101      	movs	r1, #1
 8001956:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001958:	f7ff fc7c 	bl	8001254 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	0219      	lsls	r1, r3, #8
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2319      	movs	r3, #25
 800196c:	2201      	movs	r2, #1
 800196e:	f000 f975 	bl	8001c5c <I2C_WaitOnFlagUntilTimeout>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0e3      	b.n	8001b42 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2241      	movs	r2, #65	@ 0x41
 800197e:	2121      	movs	r1, #33	@ 0x21
 8001980:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2242      	movs	r2, #66	@ 0x42
 8001986:	2140      	movs	r1, #64	@ 0x40
 8001988:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001994:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	222c      	movs	r2, #44	@ 0x2c
 800199a:	18ba      	adds	r2, r7, r2
 800199c:	8812      	ldrh	r2, [r2, #0]
 800199e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019a6:	1dbb      	adds	r3, r7, #6
 80019a8:	881c      	ldrh	r4, [r3, #0]
 80019aa:	2308      	movs	r3, #8
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	881a      	ldrh	r2, [r3, #0]
 80019b0:	230a      	movs	r3, #10
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	8819      	ldrh	r1, [r3, #0]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	0023      	movs	r3, r4
 80019c2:	f000 f8c5 	bl	8001b50 <I2C_RequestMemoryWrite>
 80019c6:	1e03      	subs	r3, r0, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2240      	movs	r2, #64	@ 0x40
 80019ce:	2100      	movs	r1, #0
 80019d0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0b5      	b.n	8001b42 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019da:	b29b      	uxth	r3, r3
 80019dc:	2bff      	cmp	r3, #255	@ 0xff
 80019de:	d911      	bls.n	8001a04 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	22ff      	movs	r2, #255	@ 0xff
 80019e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	045c      	lsls	r4, r3, #17
 80019f0:	230a      	movs	r3, #10
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	8819      	ldrh	r1, [r3, #0]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	2300      	movs	r3, #0
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	0023      	movs	r3, r4
 80019fe:	f000 fb07 	bl	8002010 <I2C_TransferConfig>
 8001a02:	e012      	b.n	8001a2a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	049c      	lsls	r4, r3, #18
 8001a18:	230a      	movs	r3, #10
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	8819      	ldrh	r1, [r3, #0]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	2300      	movs	r3, #0
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	0023      	movs	r3, r4
 8001a26:	f000 faf3 	bl	8002010 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f000 f96b 	bl	8001d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e081      	b.n	8001b42 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d03a      	beq.n	8001aee <HAL_I2C_Mem_Write+0x1fa>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d136      	bne.n	8001aee <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	0013      	movs	r3, r2
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	f000 f8e5 	bl	8001c5c <I2C_WaitOnFlagUntilTimeout>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e053      	b.n	8001b42 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2bff      	cmp	r3, #255	@ 0xff
 8001aa2:	d911      	bls.n	8001ac8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	22ff      	movs	r2, #255	@ 0xff
 8001aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	045c      	lsls	r4, r3, #17
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	8819      	ldrh	r1, [r3, #0]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	0023      	movs	r3, r4
 8001ac2:	f000 faa5 	bl	8002010 <I2C_TransferConfig>
 8001ac6:	e012      	b.n	8001aee <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	049c      	lsls	r4, r3, #18
 8001adc:	230a      	movs	r3, #10
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	8819      	ldrh	r1, [r3, #0]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	0023      	movs	r3, r4
 8001aea:	f000 fa91 	bl	8002010 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d198      	bne.n	8001a2a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	0018      	movs	r0, r3
 8001b00:	f000 f94a 	bl	8001d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e01a      	b.n	8001b42 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2220      	movs	r2, #32
 8001b12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	490b      	ldr	r1, [pc, #44]	@ (8001b4c <HAL_I2C_Mem_Write+0x258>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2241      	movs	r2, #65	@ 0x41
 8001b28:	2120      	movs	r1, #32
 8001b2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2242      	movs	r2, #66	@ 0x42
 8001b30:	2100      	movs	r1, #0
 8001b32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2240      	movs	r2, #64	@ 0x40
 8001b38:	2100      	movs	r1, #0
 8001b3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001b40:	2302      	movs	r3, #2
  }
}
 8001b42:	0018      	movs	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b007      	add	sp, #28
 8001b48:	bd90      	pop	{r4, r7, pc}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	fe00e800 	.word	0xfe00e800

08001b50 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	000c      	movs	r4, r1
 8001b5a:	0010      	movs	r0, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	250a      	movs	r5, #10
 8001b60:	197b      	adds	r3, r7, r5
 8001b62:	1c22      	adds	r2, r4, #0
 8001b64:	801a      	strh	r2, [r3, #0]
 8001b66:	2308      	movs	r3, #8
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	1c02      	adds	r2, r0, #0
 8001b6c:	801a      	strh	r2, [r3, #0]
 8001b6e:	1dbb      	adds	r3, r7, #6
 8001b70:	1c0a      	adds	r2, r1, #0
 8001b72:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b74:	1dbb      	adds	r3, r7, #6
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	2380      	movs	r3, #128	@ 0x80
 8001b7c:	045c      	lsls	r4, r3, #17
 8001b7e:	197b      	adds	r3, r7, r5
 8001b80:	8819      	ldrh	r1, [r3, #0]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <I2C_RequestMemoryWrite+0xc4>)
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	0023      	movs	r3, r4
 8001b8a:	f000 fa41 	bl	8002010 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b90:	6a39      	ldr	r1, [r7, #32]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 f8b9 	bl	8001d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e033      	b.n	8001c0a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ba2:	1dbb      	adds	r3, r7, #6
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d107      	bne.n	8001bba <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001baa:	2308      	movs	r3, #8
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bb8:	e019      	b.n	8001bee <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bba:	2308      	movs	r3, #8
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bce:	6a39      	ldr	r1, [r7, #32]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 f89a 	bl	8001d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd8:	1e03      	subs	r3, r0, #0
 8001bda:	d001      	beq.n	8001be0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e014      	b.n	8001c0a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001be0:	2308      	movs	r3, #8
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001bee:	6a3a      	ldr	r2, [r7, #32]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	0013      	movs	r3, r2
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2180      	movs	r1, #128	@ 0x80
 8001bfc:	f000 f82e 	bl	8001c5c <I2C_WaitOnFlagUntilTimeout>
 8001c00:	1e03      	subs	r3, r0, #0
 8001c02:	d001      	beq.n	8001c08 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b004      	add	sp, #16
 8001c10:	bdb0      	pop	{r4, r5, r7, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	80002000 	.word	0x80002000

08001c18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d103      	bne.n	8001c36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d007      	beq.n	8001c54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2101      	movs	r1, #1
 8001c50:	430a      	orrs	r2, r1
 8001c52:	619a      	str	r2, [r3, #24]
  }
}
 8001c54:	46c0      	nop			@ (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	1dfb      	adds	r3, r7, #7
 8001c6a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c6c:	e03a      	b.n	8001ce4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f000 f8d3 	bl	8001e20 <I2C_IsErrorOccurred>
 8001c7a:	1e03      	subs	r3, r0, #0
 8001c7c:	d001      	beq.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e040      	b.n	8001d04 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	d02d      	beq.n	8001ce4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c88:	f7ff fae4 	bl	8001254 <HAL_GetTick>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d302      	bcc.n	8001c9e <I2C_WaitOnFlagUntilTimeout+0x42>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d122      	bne.n	8001ce4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	425a      	negs	r2, r3
 8001cae:	4153      	adcs	r3, r2
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	001a      	movs	r2, r3
 8001cb4:	1dfb      	adds	r3, r7, #7
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d113      	bne.n	8001ce4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2241      	movs	r2, #65	@ 0x41
 8001ccc:	2120      	movs	r1, #32
 8001cce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2242      	movs	r2, #66	@ 0x42
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2240      	movs	r2, #64	@ 0x40
 8001cdc:	2100      	movs	r1, #0
 8001cde:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e00f      	b.n	8001d04 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	4013      	ands	r3, r2
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	425a      	negs	r2, r3
 8001cf4:	4153      	adcs	r3, r2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d0b5      	beq.n	8001c6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b004      	add	sp, #16
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d18:	e032      	b.n	8001d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 f87d 	bl	8001e20 <I2C_IsErrorOccurred>
 8001d26:	1e03      	subs	r3, r0, #0
 8001d28:	d001      	beq.n	8001d2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e030      	b.n	8001d90 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	3301      	adds	r3, #1
 8001d32:	d025      	beq.n	8001d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d34:	f7ff fa8e 	bl	8001254 <HAL_GetTick>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d302      	bcc.n	8001d4a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11a      	bne.n	8001d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d013      	beq.n	8001d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2241      	movs	r2, #65	@ 0x41
 8001d68:	2120      	movs	r1, #32
 8001d6a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2242      	movs	r2, #66	@ 0x42
 8001d70:	2100      	movs	r1, #0
 8001d72:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2240      	movs	r2, #64	@ 0x40
 8001d78:	2100      	movs	r1, #0
 8001d7a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e007      	b.n	8001d90 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2202      	movs	r2, #2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d1c5      	bne.n	8001d1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b004      	add	sp, #16
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da4:	e02f      	b.n	8001e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f000 f837 	bl	8001e20 <I2C_IsErrorOccurred>
 8001db2:	1e03      	subs	r3, r0, #0
 8001db4:	d001      	beq.n	8001dba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e02d      	b.n	8001e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dba:	f7ff fa4b 	bl	8001254 <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d302      	bcc.n	8001dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d11a      	bne.n	8001e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d013      	beq.n	8001e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	2220      	movs	r2, #32
 8001de4:	431a      	orrs	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2241      	movs	r2, #65	@ 0x41
 8001dee:	2120      	movs	r1, #32
 8001df0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2242      	movs	r2, #66	@ 0x42
 8001df6:	2100      	movs	r1, #0
 8001df8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2240      	movs	r2, #64	@ 0x40
 8001dfe:	2100      	movs	r1, #0
 8001e00:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e007      	b.n	8001e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d1c8      	bne.n	8001da6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b004      	add	sp, #16
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	@ 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2c:	2327      	movs	r3, #39	@ 0x27
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2210      	movs	r2, #16
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d100      	bne.n	8001e4e <I2C_IsErrorOccurred+0x2e>
 8001e4c:	e079      	b.n	8001f42 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2210      	movs	r2, #16
 8001e54:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e56:	e057      	b.n	8001f08 <I2C_IsErrorOccurred+0xe8>
 8001e58:	2227      	movs	r2, #39	@ 0x27
 8001e5a:	18bb      	adds	r3, r7, r2
 8001e5c:	18ba      	adds	r2, r7, r2
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3301      	adds	r3, #1
 8001e66:	d04f      	beq.n	8001f08 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e68:	f7ff f9f4 	bl	8001254 <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d302      	bcc.n	8001e7e <I2C_IsErrorOccurred+0x5e>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d144      	bne.n	8001f08 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	01db      	lsls	r3, r3, #7
 8001e88:	4013      	ands	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e8c:	2013      	movs	r0, #19
 8001e8e:	183b      	adds	r3, r7, r0
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	2142      	movs	r1, #66	@ 0x42
 8001e94:	5c52      	ldrb	r2, [r2, r1]
 8001e96:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	2380      	movs	r3, #128	@ 0x80
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d126      	bne.n	8001efa <I2C_IsErrorOccurred+0xda>
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	2380      	movs	r3, #128	@ 0x80
 8001eb0:	01db      	lsls	r3, r3, #7
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d021      	beq.n	8001efa <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001eb6:	183b      	adds	r3, r7, r0
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d01d      	beq.n	8001efa <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2180      	movs	r1, #128	@ 0x80
 8001eca:	01c9      	lsls	r1, r1, #7
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ed0:	f7ff f9c0 	bl	8001254 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ed8:	e00f      	b.n	8001efa <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001eda:	f7ff f9bb 	bl	8001254 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b19      	cmp	r3, #25
 8001ee6:	d908      	bls.n	8001efa <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	2220      	movs	r2, #32
 8001eec:	4313      	orrs	r3, r2
 8001eee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ef0:	2327      	movs	r3, #39	@ 0x27
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]

              break;
 8001ef8:	e006      	b.n	8001f08 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2220      	movs	r2, #32
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d1e8      	bne.n	8001eda <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d004      	beq.n	8001f20 <I2C_IsErrorOccurred+0x100>
 8001f16:	2327      	movs	r3, #39	@ 0x27
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d09b      	beq.n	8001e58 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f20:	2327      	movs	r3, #39	@ 0x27
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	2204      	movs	r2, #4
 8001f36:	4313      	orrs	r3, r2
 8001f38:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f3a:	2327      	movs	r3, #39	@ 0x27
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4013      	ands	r3, r2
 8001f52:	d00c      	beq.n	8001f6e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2280      	movs	r2, #128	@ 0x80
 8001f62:	0052      	lsls	r2, r2, #1
 8001f64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f66:	2327      	movs	r3, #39	@ 0x27
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4013      	ands	r3, r2
 8001f76:	d00c      	beq.n	8001f92 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2280      	movs	r2, #128	@ 0x80
 8001f86:	00d2      	lsls	r2, r2, #3
 8001f88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f8a:	2327      	movs	r3, #39	@ 0x27
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d00c      	beq.n	8001fb6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2280      	movs	r2, #128	@ 0x80
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fae:	2327      	movs	r3, #39	@ 0x27
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001fb6:	2327      	movs	r3, #39	@ 0x27
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01d      	beq.n	8001ffc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f7ff fe28 	bl	8001c18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	490e      	ldr	r1, [pc, #56]	@ (800200c <I2C_IsErrorOccurred+0x1ec>)
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2241      	movs	r2, #65	@ 0x41
 8001fe8:	2120      	movs	r1, #32
 8001fea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2242      	movs	r2, #66	@ 0x42
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2240      	movs	r2, #64	@ 0x40
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001ffc:	2327      	movs	r3, #39	@ 0x27
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	781b      	ldrb	r3, [r3, #0]
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b00a      	add	sp, #40	@ 0x28
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	fe00e800 	.word	0xfe00e800

08002010 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	0008      	movs	r0, r1
 800201a:	0011      	movs	r1, r2
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	240a      	movs	r4, #10
 8002020:	193b      	adds	r3, r7, r4
 8002022:	1c02      	adds	r2, r0, #0
 8002024:	801a      	strh	r2, [r3, #0]
 8002026:	2009      	movs	r0, #9
 8002028:	183b      	adds	r3, r7, r0
 800202a:	1c0a      	adds	r2, r1, #0
 800202c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800202e:	193b      	adds	r3, r7, r4
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	059b      	lsls	r3, r3, #22
 8002034:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002036:	183b      	adds	r3, r7, r0
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	0419      	lsls	r1, r3, #16
 800203c:	23ff      	movs	r3, #255	@ 0xff
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002042:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204a:	4313      	orrs	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800205a:	0d51      	lsrs	r1, r2, #21
 800205c:	2280      	movs	r2, #128	@ 0x80
 800205e:	00d2      	lsls	r2, r2, #3
 8002060:	400a      	ands	r2, r1
 8002062:	4907      	ldr	r1, [pc, #28]	@ (8002080 <I2C_TransferConfig+0x70>)
 8002064:	430a      	orrs	r2, r1
 8002066:	43d2      	mvns	r2, r2
 8002068:	401a      	ands	r2, r3
 800206a:	0011      	movs	r1, r2
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b007      	add	sp, #28
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	03ff63ff 	.word	0x03ff63ff

08002084 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2241      	movs	r2, #65	@ 0x41
 8002092:	5c9b      	ldrb	r3, [r3, r2]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	d138      	bne.n	800210c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2240      	movs	r2, #64	@ 0x40
 800209e:	5c9b      	ldrb	r3, [r3, r2]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e032      	b.n	800210e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2240      	movs	r2, #64	@ 0x40
 80020ac:	2101      	movs	r1, #1
 80020ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2241      	movs	r2, #65	@ 0x41
 80020b4:	2124      	movs	r1, #36	@ 0x24
 80020b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2101      	movs	r1, #1
 80020c4:	438a      	bics	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4911      	ldr	r1, [pc, #68]	@ (8002118 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020d4:	400a      	ands	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2101      	movs	r1, #1
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2241      	movs	r2, #65	@ 0x41
 80020fc:	2120      	movs	r1, #32
 80020fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2240      	movs	r2, #64	@ 0x40
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
  }
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b002      	add	sp, #8
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	ffffefff 	.word	0xffffefff

0800211c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2241      	movs	r2, #65	@ 0x41
 800212a:	5c9b      	ldrb	r3, [r3, r2]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b20      	cmp	r3, #32
 8002130:	d139      	bne.n	80021a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2240      	movs	r2, #64	@ 0x40
 8002136:	5c9b      	ldrb	r3, [r3, r2]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800213c:	2302      	movs	r3, #2
 800213e:	e033      	b.n	80021a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2240      	movs	r2, #64	@ 0x40
 8002144:	2101      	movs	r1, #1
 8002146:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2241      	movs	r2, #65	@ 0x41
 800214c:	2124      	movs	r1, #36	@ 0x24
 800214e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2101      	movs	r1, #1
 800215c:	438a      	bics	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a11      	ldr	r2, [pc, #68]	@ (80021b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2241      	movs	r2, #65	@ 0x41
 8002196:	2120      	movs	r1, #32
 8002198:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2240      	movs	r2, #64	@ 0x40
 800219e:	2100      	movs	r1, #0
 80021a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
  }
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b004      	add	sp, #16
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	fffff0ff 	.word	0xfffff0ff

080021b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021bc:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a19      	ldr	r2, [pc, #100]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d11f      	bne.n	8002218 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021d8:	4b14      	ldr	r3, [pc, #80]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	0013      	movs	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	189b      	adds	r3, r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4912      	ldr	r1, [pc, #72]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7fd ff8a 	bl	8000100 <__udivsi3>
 80021ec:	0003      	movs	r3, r0
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f2:	e008      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e001      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e009      	b.n	800221a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002206:	4b07      	ldr	r3, [pc, #28]	@ (8002224 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	401a      	ands	r2, r3
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	429a      	cmp	r2, r3
 8002216:	d0ed      	beq.n	80021f4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b004      	add	sp, #16
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	40007000 	.word	0x40007000
 8002228:	fffff9ff 	.word	0xfffff9ff
 800222c:	20000014 	.word	0x20000014
 8002230:	000f4240 	.word	0x000f4240

08002234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e2f3      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	4013      	ands	r3, r2
 800224e:	d100      	bne.n	8002252 <HAL_RCC_OscConfig+0x1e>
 8002250:	e07c      	b.n	800234c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002252:	4bc3      	ldr	r3, [pc, #780]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2238      	movs	r2, #56	@ 0x38
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225c:	4bc0      	ldr	r3, [pc, #768]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2203      	movs	r2, #3
 8002262:	4013      	ands	r3, r2
 8002264:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2b10      	cmp	r3, #16
 800226a:	d102      	bne.n	8002272 <HAL_RCC_OscConfig+0x3e>
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d002      	beq.n	8002278 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d10b      	bne.n	8002290 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	4bb9      	ldr	r3, [pc, #740]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	029b      	lsls	r3, r3, #10
 8002280:	4013      	ands	r3, r2
 8002282:	d062      	beq.n	800234a <HAL_RCC_OscConfig+0x116>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d15e      	bne.n	800234a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e2ce      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	2380      	movs	r3, #128	@ 0x80
 8002296:	025b      	lsls	r3, r3, #9
 8002298:	429a      	cmp	r2, r3
 800229a:	d107      	bne.n	80022ac <HAL_RCC_OscConfig+0x78>
 800229c:	4bb0      	ldr	r3, [pc, #704]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4baf      	ldr	r3, [pc, #700]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80022a2:	2180      	movs	r1, #128	@ 0x80
 80022a4:	0249      	lsls	r1, r1, #9
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e020      	b.n	80022ee <HAL_RCC_OscConfig+0xba>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	23a0      	movs	r3, #160	@ 0xa0
 80022b2:	02db      	lsls	r3, r3, #11
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d10e      	bne.n	80022d6 <HAL_RCC_OscConfig+0xa2>
 80022b8:	4ba9      	ldr	r3, [pc, #676]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4ba8      	ldr	r3, [pc, #672]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80022be:	2180      	movs	r1, #128	@ 0x80
 80022c0:	02c9      	lsls	r1, r1, #11
 80022c2:	430a      	orrs	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	4ba6      	ldr	r3, [pc, #664]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4ba5      	ldr	r3, [pc, #660]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	2180      	movs	r1, #128	@ 0x80
 80022ce:	0249      	lsls	r1, r1, #9
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e00b      	b.n	80022ee <HAL_RCC_OscConfig+0xba>
 80022d6:	4ba2      	ldr	r3, [pc, #648]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4ba1      	ldr	r3, [pc, #644]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80022dc:	49a1      	ldr	r1, [pc, #644]	@ (8002564 <HAL_RCC_OscConfig+0x330>)
 80022de:	400a      	ands	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	4b9f      	ldr	r3, [pc, #636]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b9e      	ldr	r3, [pc, #632]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	499f      	ldr	r1, [pc, #636]	@ (8002568 <HAL_RCC_OscConfig+0x334>)
 80022ea:	400a      	ands	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d014      	beq.n	8002320 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe ffad 	bl	8001254 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002300:	f7fe ffa8 	bl	8001254 <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	@ 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e28d      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002312:	4b93      	ldr	r3, [pc, #588]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	029b      	lsls	r3, r3, #10
 800231a:	4013      	ands	r3, r2
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0xcc>
 800231e:	e015      	b.n	800234c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe ff98 	bl	8001254 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232a:	f7fe ff93 	bl	8001254 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	@ 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e278      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233c:	4b88      	ldr	r3, [pc, #544]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	029b      	lsls	r3, r3, #10
 8002344:	4013      	ands	r3, r2
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0xf6>
 8002348:	e000      	b.n	800234c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2202      	movs	r2, #2
 8002352:	4013      	ands	r3, r2
 8002354:	d100      	bne.n	8002358 <HAL_RCC_OscConfig+0x124>
 8002356:	e099      	b.n	800248c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002358:	4b81      	ldr	r3, [pc, #516]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2238      	movs	r2, #56	@ 0x38
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002362:	4b7f      	ldr	r3, [pc, #508]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2203      	movs	r2, #3
 8002368:	4013      	ands	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b10      	cmp	r3, #16
 8002370:	d102      	bne.n	8002378 <HAL_RCC_OscConfig+0x144>
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d002      	beq.n	800237e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d135      	bne.n	80023ea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237e:	4b78      	ldr	r3, [pc, #480]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	2380      	movs	r3, #128	@ 0x80
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4013      	ands	r3, r2
 8002388:	d005      	beq.n	8002396 <HAL_RCC_OscConfig+0x162>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e24b      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b72      	ldr	r3, [pc, #456]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4a74      	ldr	r2, [pc, #464]	@ (800256c <HAL_RCC_OscConfig+0x338>)
 800239c:	4013      	ands	r3, r2
 800239e:	0019      	movs	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	021a      	lsls	r2, r3, #8
 80023a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d112      	bne.n	80023d8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002570 <HAL_RCC_OscConfig+0x33c>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	4b67      	ldr	r3, [pc, #412]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023c6:	4b66      	ldr	r3, [pc, #408]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0adb      	lsrs	r3, r3, #11
 80023cc:	2207      	movs	r2, #7
 80023ce:	4013      	ands	r3, r2
 80023d0:	4a68      	ldr	r2, [pc, #416]	@ (8002574 <HAL_RCC_OscConfig+0x340>)
 80023d2:	40da      	lsrs	r2, r3
 80023d4:	4b68      	ldr	r3, [pc, #416]	@ (8002578 <HAL_RCC_OscConfig+0x344>)
 80023d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023d8:	4b68      	ldr	r3, [pc, #416]	@ (800257c <HAL_RCC_OscConfig+0x348>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0018      	movs	r0, r3
 80023de:	f7fe fedd 	bl	800119c <HAL_InitTick>
 80023e2:	1e03      	subs	r3, r0, #0
 80023e4:	d051      	beq.n	800248a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e221      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d030      	beq.n	8002454 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002570 <HAL_RCC_OscConfig+0x33c>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	0019      	movs	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	4b57      	ldr	r3, [pc, #348]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 8002402:	430a      	orrs	r2, r1
 8002404:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002406:	4b56      	ldr	r3, [pc, #344]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b55      	ldr	r3, [pc, #340]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800240c:	2180      	movs	r1, #128	@ 0x80
 800240e:	0049      	lsls	r1, r1, #1
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe ff1e 	bl	8001254 <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241e:	f7fe ff19 	bl	8001254 <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1fe      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002430:	4b4b      	ldr	r3, [pc, #300]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4013      	ands	r3, r2
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b48      	ldr	r3, [pc, #288]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a4a      	ldr	r2, [pc, #296]	@ (800256c <HAL_RCC_OscConfig+0x338>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	021a      	lsls	r2, r3, #8
 800244c:	4b44      	ldr	r3, [pc, #272]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	e01b      	b.n	800248c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002454:	4b42      	ldr	r3, [pc, #264]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b41      	ldr	r3, [pc, #260]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800245a:	4949      	ldr	r1, [pc, #292]	@ (8002580 <HAL_RCC_OscConfig+0x34c>)
 800245c:	400a      	ands	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fef8 	bl	8001254 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246a:	f7fe fef3 	bl	8001254 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1d8      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800247c:	4b38      	ldr	r3, [pc, #224]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4013      	ands	r3, r2
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x236>
 8002488:	e000      	b.n	800248c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2208      	movs	r2, #8
 8002492:	4013      	ands	r3, r2
 8002494:	d047      	beq.n	8002526 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002496:	4b32      	ldr	r3, [pc, #200]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2238      	movs	r2, #56	@ 0x38
 800249c:	4013      	ands	r3, r2
 800249e:	2b18      	cmp	r3, #24
 80024a0:	d10a      	bne.n	80024b8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80024a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a6:	2202      	movs	r2, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	d03c      	beq.n	8002526 <HAL_RCC_OscConfig+0x2f2>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d138      	bne.n	8002526 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e1ba      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d019      	beq.n	80024f4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024c0:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80024c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024c4:	4b26      	ldr	r3, [pc, #152]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80024c6:	2101      	movs	r1, #1
 80024c8:	430a      	orrs	r2, r1
 80024ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fec2 	bl	8001254 <HAL_GetTick>
 80024d0:	0003      	movs	r3, r0
 80024d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d6:	f7fe febd 	bl	8001254 <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1a2      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80024ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ec:	2202      	movs	r2, #2
 80024ee:	4013      	ands	r3, r2
 80024f0:	d0f1      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2a2>
 80024f2:	e018      	b.n	8002526 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 80024fa:	2101      	movs	r1, #1
 80024fc:	438a      	bics	r2, r1
 80024fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fea8 	bl	8001254 <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250a:	f7fe fea3 	bl	8001254 <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e188      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800251c:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800251e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002520:	2202      	movs	r2, #2
 8002522:	4013      	ands	r3, r2
 8002524:	d1f1      	bne.n	800250a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2204      	movs	r2, #4
 800252c:	4013      	ands	r3, r2
 800252e:	d100      	bne.n	8002532 <HAL_RCC_OscConfig+0x2fe>
 8002530:	e0c6      	b.n	80026c0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002532:	231f      	movs	r3, #31
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2238      	movs	r2, #56	@ 0x38
 8002540:	4013      	ands	r3, r2
 8002542:	2b20      	cmp	r3, #32
 8002544:	d11e      	bne.n	8002584 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_RCC_OscConfig+0x32c>)
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	2202      	movs	r2, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d100      	bne.n	8002552 <HAL_RCC_OscConfig+0x31e>
 8002550:	e0b6      	b.n	80026c0 <HAL_RCC_OscConfig+0x48c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d000      	beq.n	800255c <HAL_RCC_OscConfig+0x328>
 800255a:	e0b1      	b.n	80026c0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e166      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
 8002560:	40021000 	.word	0x40021000
 8002564:	fffeffff 	.word	0xfffeffff
 8002568:	fffbffff 	.word	0xfffbffff
 800256c:	ffff80ff 	.word	0xffff80ff
 8002570:	ffffc7ff 	.word	0xffffc7ff
 8002574:	00f42400 	.word	0x00f42400
 8002578:	20000014 	.word	0x20000014
 800257c:	20000018 	.word	0x20000018
 8002580:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002584:	4bac      	ldr	r3, [pc, #688]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 8002586:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	055b      	lsls	r3, r3, #21
 800258c:	4013      	ands	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0x360>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x362>
 8002594:	2300      	movs	r3, #0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d011      	beq.n	80025be <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	4ba7      	ldr	r3, [pc, #668]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800259c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800259e:	4ba6      	ldr	r3, [pc, #664]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80025a0:	2180      	movs	r1, #128	@ 0x80
 80025a2:	0549      	lsls	r1, r1, #21
 80025a4:	430a      	orrs	r2, r1
 80025a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025a8:	4ba3      	ldr	r3, [pc, #652]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80025aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025ac:	2380      	movs	r3, #128	@ 0x80
 80025ae:	055b      	lsls	r3, r3, #21
 80025b0:	4013      	ands	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025b6:	231f      	movs	r3, #31
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025be:	4b9f      	ldr	r3, [pc, #636]	@ (800283c <HAL_RCC_OscConfig+0x608>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	d11a      	bne.n	8002600 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ca:	4b9c      	ldr	r3, [pc, #624]	@ (800283c <HAL_RCC_OscConfig+0x608>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b9b      	ldr	r3, [pc, #620]	@ (800283c <HAL_RCC_OscConfig+0x608>)
 80025d0:	2180      	movs	r1, #128	@ 0x80
 80025d2:	0049      	lsls	r1, r1, #1
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fe3c 	bl	8001254 <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e2:	f7fe fe37 	bl	8001254 <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e11c      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f4:	4b91      	ldr	r3, [pc, #580]	@ (800283c <HAL_RCC_OscConfig+0x608>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4013      	ands	r3, r2
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x3e2>
 8002608:	4b8b      	ldr	r3, [pc, #556]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800260a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800260c:	4b8a      	ldr	r3, [pc, #552]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800260e:	2101      	movs	r1, #1
 8002610:	430a      	orrs	r2, r1
 8002612:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002614:	e01c      	b.n	8002650 <HAL_RCC_OscConfig+0x41c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b05      	cmp	r3, #5
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x404>
 800261e:	4b86      	ldr	r3, [pc, #536]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 8002620:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002622:	4b85      	ldr	r3, [pc, #532]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 8002624:	2104      	movs	r1, #4
 8002626:	430a      	orrs	r2, r1
 8002628:	65da      	str	r2, [r3, #92]	@ 0x5c
 800262a:	4b83      	ldr	r3, [pc, #524]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800262c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800262e:	4b82      	ldr	r3, [pc, #520]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 8002630:	2101      	movs	r1, #1
 8002632:	430a      	orrs	r2, r1
 8002634:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002636:	e00b      	b.n	8002650 <HAL_RCC_OscConfig+0x41c>
 8002638:	4b7f      	ldr	r3, [pc, #508]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800263a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800263c:	4b7e      	ldr	r3, [pc, #504]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800263e:	2101      	movs	r1, #1
 8002640:	438a      	bics	r2, r1
 8002642:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002644:	4b7c      	ldr	r3, [pc, #496]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 8002646:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002648:	4b7b      	ldr	r3, [pc, #492]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800264a:	2104      	movs	r1, #4
 800264c:	438a      	bics	r2, r1
 800264e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d014      	beq.n	8002682 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fdfc 	bl	8001254 <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002660:	e009      	b.n	8002676 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	f7fe fdf7 	bl	8001254 <HAL_GetTick>
 8002666:	0002      	movs	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	4a74      	ldr	r2, [pc, #464]	@ (8002840 <HAL_RCC_OscConfig+0x60c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0db      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002676:	4b70      	ldr	r3, [pc, #448]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 8002678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267a:	2202      	movs	r2, #2
 800267c:	4013      	ands	r3, r2
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x42e>
 8002680:	e013      	b.n	80026aa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fde7 	bl	8001254 <HAL_GetTick>
 8002686:	0003      	movs	r3, r0
 8002688:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800268a:	e009      	b.n	80026a0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268c:	f7fe fde2 	bl	8001254 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	4a6a      	ldr	r2, [pc, #424]	@ (8002840 <HAL_RCC_OscConfig+0x60c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0c6      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a0:	4b65      	ldr	r3, [pc, #404]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	2202      	movs	r2, #2
 80026a6:	4013      	ands	r3, r2
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026aa:	231f      	movs	r3, #31
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026b4:	4b60      	ldr	r3, [pc, #384]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80026b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026b8:	4b5f      	ldr	r3, [pc, #380]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80026ba:	4962      	ldr	r1, [pc, #392]	@ (8002844 <HAL_RCC_OscConfig+0x610>)
 80026bc:	400a      	ands	r2, r1
 80026be:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d100      	bne.n	80026ca <HAL_RCC_OscConfig+0x496>
 80026c8:	e0b0      	b.n	800282c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2238      	movs	r2, #56	@ 0x38
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d100      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4a4>
 80026d6:	e078      	b.n	80027ca <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d153      	bne.n	8002788 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e0:	4b55      	ldr	r3, [pc, #340]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b54      	ldr	r3, [pc, #336]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80026e6:	4958      	ldr	r1, [pc, #352]	@ (8002848 <HAL_RCC_OscConfig+0x614>)
 80026e8:	400a      	ands	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7fe fdb2 	bl	8001254 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe fdad 	bl	8001254 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e092      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002708:	4b4b      	ldr	r3, [pc, #300]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	049b      	lsls	r3, r3, #18
 8002710:	4013      	ands	r3, r2
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002714:	4b48      	ldr	r3, [pc, #288]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a4c      	ldr	r2, [pc, #304]	@ (800284c <HAL_RCC_OscConfig+0x618>)
 800271a:	4013      	ands	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1a      	ldr	r2, [r3, #32]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	431a      	orrs	r2, r3
 800273c:	4b3e      	ldr	r3, [pc, #248]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800273e:	430a      	orrs	r2, r1
 8002740:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002742:	4b3d      	ldr	r3, [pc, #244]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b3c      	ldr	r3, [pc, #240]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 8002748:	2180      	movs	r1, #128	@ 0x80
 800274a:	0449      	lsls	r1, r1, #17
 800274c:	430a      	orrs	r2, r1
 800274e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002750:	4b39      	ldr	r3, [pc, #228]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	4b38      	ldr	r3, [pc, #224]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 8002756:	2180      	movs	r1, #128	@ 0x80
 8002758:	0549      	lsls	r1, r1, #21
 800275a:	430a      	orrs	r2, r1
 800275c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7fe fd79 	bl	8001254 <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe fd74 	bl	8001254 <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e059      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277a:	4b2f      	ldr	r3, [pc, #188]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	049b      	lsls	r3, r3, #18
 8002782:	4013      	ands	r3, r2
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x534>
 8002786:	e051      	b.n	800282c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b2b      	ldr	r3, [pc, #172]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 800278e:	492e      	ldr	r1, [pc, #184]	@ (8002848 <HAL_RCC_OscConfig+0x614>)
 8002790:	400a      	ands	r2, r1
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fd5e 	bl	8001254 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279e:	f7fe fd59 	bl	8001254 <HAL_GetTick>
 80027a2:	0002      	movs	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e03e      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b0:	4b21      	ldr	r3, [pc, #132]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2380      	movs	r3, #128	@ 0x80
 80027b6:	049b      	lsls	r3, r3, #18
 80027b8:	4013      	ands	r3, r2
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80027bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80027c2:	4923      	ldr	r1, [pc, #140]	@ (8002850 <HAL_RCC_OscConfig+0x61c>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	60da      	str	r2, [r3, #12]
 80027c8:	e030      	b.n	800282c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e02b      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027d6:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <HAL_RCC_OscConfig+0x604>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2203      	movs	r2, #3
 80027e0:	401a      	ands	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d11e      	bne.n	8002828 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2270      	movs	r2, #112	@ 0x70
 80027ee:	401a      	ands	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d117      	bne.n	8002828 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	23fe      	movs	r3, #254	@ 0xfe
 80027fc:	01db      	lsls	r3, r3, #7
 80027fe:	401a      	ands	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d10e      	bne.n	8002828 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	23f8      	movs	r3, #248	@ 0xf8
 800280e:	039b      	lsls	r3, r3, #14
 8002810:	401a      	ands	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d106      	bne.n	8002828 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	0f5b      	lsrs	r3, r3, #29
 800281e:	075a      	lsls	r2, r3, #29
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	0018      	movs	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	b008      	add	sp, #32
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			@ (mov r8, r8)
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
 8002840:	00001388 	.word	0x00001388
 8002844:	efffffff 	.word	0xefffffff
 8002848:	feffffff 	.word	0xfeffffff
 800284c:	1fc1808c 	.word	0x1fc1808c
 8002850:	effefffc 	.word	0xeffefffc

08002854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0e9      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b76      	ldr	r3, [pc, #472]	@ (8002a44 <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2207      	movs	r2, #7
 800286e:	4013      	ands	r3, r2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d91e      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b73      	ldr	r3, [pc, #460]	@ (8002a44 <HAL_RCC_ClockConfig+0x1f0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2207      	movs	r2, #7
 800287c:	4393      	bics	r3, r2
 800287e:	0019      	movs	r1, r3
 8002880:	4b70      	ldr	r3, [pc, #448]	@ (8002a44 <HAL_RCC_ClockConfig+0x1f0>)
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002888:	f7fe fce4 	bl	8001254 <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002890:	e009      	b.n	80028a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002892:	f7fe fcdf 	bl	8001254 <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	4a6a      	ldr	r2, [pc, #424]	@ (8002a48 <HAL_RCC_ClockConfig+0x1f4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0ca      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028a6:	4b67      	ldr	r3, [pc, #412]	@ (8002a44 <HAL_RCC_ClockConfig+0x1f0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2207      	movs	r2, #7
 80028ac:	4013      	ands	r3, r2
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1ee      	bne.n	8002892 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2202      	movs	r2, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	d015      	beq.n	80028ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2204      	movs	r2, #4
 80028c4:	4013      	ands	r3, r2
 80028c6:	d006      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028c8:	4b60      	ldr	r3, [pc, #384]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b5f      	ldr	r3, [pc, #380]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 80028ce:	21e0      	movs	r1, #224	@ 0xe0
 80028d0:	01c9      	lsls	r1, r1, #7
 80028d2:	430a      	orrs	r2, r1
 80028d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4a5d      	ldr	r2, [pc, #372]	@ (8002a50 <HAL_RCC_ClockConfig+0x1fc>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	4b59      	ldr	r3, [pc, #356]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2201      	movs	r2, #1
 80028f0:	4013      	ands	r3, r2
 80028f2:	d057      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d107      	bne.n	800290c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028fc:	4b53      	ldr	r3, [pc, #332]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	029b      	lsls	r3, r3, #10
 8002904:	4013      	ands	r3, r2
 8002906:	d12b      	bne.n	8002960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e097      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d107      	bne.n	8002924 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002914:	4b4d      	ldr	r3, [pc, #308]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	049b      	lsls	r3, r3, #18
 800291c:	4013      	ands	r3, r2
 800291e:	d11f      	bne.n	8002960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e08b      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292c:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	@ 0x80
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4013      	ands	r3, r2
 8002936:	d113      	bne.n	8002960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e07f      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d106      	bne.n	8002952 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002944:	4b41      	ldr	r3, [pc, #260]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 8002946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002948:	2202      	movs	r2, #2
 800294a:	4013      	ands	r3, r2
 800294c:	d108      	bne.n	8002960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e074      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002952:	4b3e      	ldr	r3, [pc, #248]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 8002954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002956:	2202      	movs	r2, #2
 8002958:	4013      	ands	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e06d      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002960:	4b3a      	ldr	r3, [pc, #232]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2207      	movs	r2, #7
 8002966:	4393      	bics	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4b37      	ldr	r3, [pc, #220]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 8002970:	430a      	orrs	r2, r1
 8002972:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7fe fc6e 	bl	8001254 <HAL_GetTick>
 8002978:	0003      	movs	r3, r0
 800297a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297c:	e009      	b.n	8002992 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297e:	f7fe fc69 	bl	8001254 <HAL_GetTick>
 8002982:	0002      	movs	r2, r0
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	4a2f      	ldr	r2, [pc, #188]	@ (8002a48 <HAL_RCC_ClockConfig+0x1f4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e054      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b2e      	ldr	r3, [pc, #184]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2238      	movs	r2, #56	@ 0x38
 8002998:	401a      	ands	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1ec      	bne.n	800297e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b27      	ldr	r3, [pc, #156]	@ (8002a44 <HAL_RCC_ClockConfig+0x1f0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2207      	movs	r2, #7
 80029aa:	4013      	ands	r3, r2
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d21e      	bcs.n	80029f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b24      	ldr	r3, [pc, #144]	@ (8002a44 <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2207      	movs	r2, #7
 80029b8:	4393      	bics	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	4b21      	ldr	r3, [pc, #132]	@ (8002a44 <HAL_RCC_ClockConfig+0x1f0>)
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029c4:	f7fe fc46 	bl	8001254 <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029cc:	e009      	b.n	80029e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ce:	f7fe fc41 	bl	8001254 <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a48 <HAL_RCC_ClockConfig+0x1f4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e02c      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029e2:	4b18      	ldr	r3, [pc, #96]	@ (8002a44 <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2207      	movs	r2, #7
 80029e8:	4013      	ands	r3, r2
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1ee      	bne.n	80029ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2204      	movs	r2, #4
 80029f6:	4013      	ands	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029fa:	4b14      	ldr	r3, [pc, #80]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4a15      	ldr	r2, [pc, #84]	@ (8002a54 <HAL_RCC_ClockConfig+0x200>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a0e:	f000 f829 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002a12:	0001      	movs	r1, r0
 8002a14:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f8>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	220f      	movs	r2, #15
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <HAL_RCC_ClockConfig+0x204>)
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	58d3      	ldr	r3, [r2, r3]
 8002a24:	221f      	movs	r2, #31
 8002a26:	4013      	ands	r3, r2
 8002a28:	000a      	movs	r2, r1
 8002a2a:	40da      	lsrs	r2, r3
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <HAL_RCC_ClockConfig+0x208>)
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a30:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <HAL_RCC_ClockConfig+0x20c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7fe fbb1 	bl	800119c <HAL_InitTick>
 8002a3a:	0003      	movs	r3, r0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b004      	add	sp, #16
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40022000 	.word	0x40022000
 8002a48:	00001388 	.word	0x00001388
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	fffff0ff 	.word	0xfffff0ff
 8002a54:	ffff8fff 	.word	0xffff8fff
 8002a58:	08005ee4 	.word	0x08005ee4
 8002a5c:	20000014 	.word	0x20000014
 8002a60:	20000018 	.word	0x20000018

08002a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2238      	movs	r2, #56	@ 0x38
 8002a70:	4013      	ands	r3, r2
 8002a72:	d10f      	bne.n	8002a94 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a74:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0adb      	lsrs	r3, r3, #11
 8002a7a:	2207      	movs	r2, #7
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2201      	movs	r2, #1
 8002a80:	409a      	lsls	r2, r3
 8002a82:	0013      	movs	r3, r2
 8002a84:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a86:	6839      	ldr	r1, [r7, #0]
 8002a88:	4835      	ldr	r0, [pc, #212]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a8a:	f7fd fb39 	bl	8000100 <__udivsi3>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	e05d      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a94:	4b31      	ldr	r3, [pc, #196]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2238      	movs	r2, #56	@ 0x38
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d102      	bne.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002aa0:	4b30      	ldr	r3, [pc, #192]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x100>)
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	e054      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2238      	movs	r2, #56	@ 0x38
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d138      	bne.n	8002b24 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002abc:	4b27      	ldr	r3, [pc, #156]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d10d      	bne.n	8002aec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	4824      	ldr	r0, [pc, #144]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ad4:	f7fd fb14 	bl	8000100 <__udivsi3>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	0019      	movs	r1, r3
 8002adc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	227f      	movs	r2, #127	@ 0x7f
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	434b      	muls	r3, r1
 8002ae8:	617b      	str	r3, [r7, #20]
        break;
 8002aea:	e00d      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	481c      	ldr	r0, [pc, #112]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002af0:	f7fd fb06 	bl	8000100 <__udivsi3>
 8002af4:	0003      	movs	r3, r0
 8002af6:	0019      	movs	r1, r3
 8002af8:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	227f      	movs	r2, #127	@ 0x7f
 8002b00:	4013      	ands	r3, r2
 8002b02:	434b      	muls	r3, r1
 8002b04:	617b      	str	r3, [r7, #20]
        break;
 8002b06:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b08:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0f5b      	lsrs	r3, r3, #29
 8002b0e:	2207      	movs	r2, #7
 8002b10:	4013      	ands	r3, r2
 8002b12:	3301      	adds	r3, #1
 8002b14:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	6978      	ldr	r0, [r7, #20]
 8002b1a:	f7fd faf1 	bl	8000100 <__udivsi3>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	e015      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b24:	4b0d      	ldr	r3, [pc, #52]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2238      	movs	r2, #56	@ 0x38
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d103      	bne.n	8002b38 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b38:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2238      	movs	r2, #56	@ 0x38
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b18      	cmp	r3, #24
 8002b42:	d103      	bne.n	8002b4c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b44:	23fa      	movs	r3, #250	@ 0xfa
 8002b46:	01db      	lsls	r3, r3, #7
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	e001      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b50:	693b      	ldr	r3, [r7, #16]
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b006      	add	sp, #24
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	00f42400 	.word	0x00f42400
 8002b64:	007a1200 	.word	0x007a1200

08002b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b70:	2313      	movs	r3, #19
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b78:	2312      	movs	r3, #18
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	029b      	lsls	r3, r3, #10
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d100      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b8c:	e0a3      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8e:	2011      	movs	r0, #17
 8002b90:	183b      	adds	r3, r7, r0
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b96:	4b7f      	ldr	r3, [pc, #508]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	055b      	lsls	r3, r3, #21
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d110      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	4b7c      	ldr	r3, [pc, #496]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ba4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ba6:	4b7b      	ldr	r3, [pc, #492]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ba8:	2180      	movs	r1, #128	@ 0x80
 8002baa:	0549      	lsls	r1, r1, #21
 8002bac:	430a      	orrs	r2, r1
 8002bae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bb0:	4b78      	ldr	r3, [pc, #480]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	055b      	lsls	r3, r3, #21
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bbe:	183b      	adds	r3, r7, r0
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc4:	4b74      	ldr	r3, [pc, #464]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b73      	ldr	r3, [pc, #460]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bca:	2180      	movs	r1, #128	@ 0x80
 8002bcc:	0049      	lsls	r1, r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bd2:	f7fe fb3f 	bl	8001254 <HAL_GetTick>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bdc:	f7fe fb3a 	bl	8001254 <HAL_GetTick>
 8002be0:	0002      	movs	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d904      	bls.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002bea:	2313      	movs	r3, #19
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	2203      	movs	r2, #3
 8002bf0:	701a      	strb	r2, [r3, #0]
        break;
 8002bf2:	e005      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bf4:	4b68      	ldr	r3, [pc, #416]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	2380      	movs	r3, #128	@ 0x80
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d0ed      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c00:	2313      	movs	r3, #19
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d154      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c0a:	4b62      	ldr	r3, [pc, #392]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c0e:	23c0      	movs	r3, #192	@ 0xc0
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d019      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d014      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c26:	4b5b      	ldr	r3, [pc, #364]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	4a5c      	ldr	r2, [pc, #368]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c30:	4b58      	ldr	r3, [pc, #352]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c34:	4b57      	ldr	r3, [pc, #348]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c36:	2180      	movs	r1, #128	@ 0x80
 8002c38:	0249      	lsls	r1, r1, #9
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3e:	4b55      	ldr	r3, [pc, #340]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c42:	4b54      	ldr	r3, [pc, #336]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c44:	4956      	ldr	r1, [pc, #344]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002c46:	400a      	ands	r2, r1
 8002c48:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c4a:	4b52      	ldr	r3, [pc, #328]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	d016      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fafc 	bl	8001254 <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c60:	e00c      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7fe faf7 	bl	8001254 <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	4a4d      	ldr	r2, [pc, #308]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d904      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c72:	2313      	movs	r3, #19
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2203      	movs	r2, #3
 8002c78:	701a      	strb	r2, [r3, #0]
            break;
 8002c7a:	e004      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7c:	4b45      	ldr	r3, [pc, #276]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d0ed      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c86:	2313      	movs	r3, #19
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c90:	4b40      	ldr	r3, [pc, #256]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c94:	4a41      	ldr	r2, [pc, #260]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ca4:	e00c      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ca6:	2312      	movs	r3, #18
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	2213      	movs	r2, #19
 8002cac:	18ba      	adds	r2, r7, r2
 8002cae:	7812      	ldrb	r2, [r2, #0]
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e005      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb4:	2312      	movs	r3, #18
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2213      	movs	r2, #19
 8002cba:	18ba      	adds	r2, r7, r2
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cc0:	2311      	movs	r3, #17
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cca:	4b32      	ldr	r3, [pc, #200]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ccc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cce:	4b31      	ldr	r3, [pc, #196]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cd0:	4935      	ldr	r1, [pc, #212]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4b29      	ldr	r3, [pc, #164]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cfe:	4b25      	ldr	r3, [pc, #148]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d02:	4a2a      	ldr	r2, [pc, #168]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	4b21      	ldr	r3, [pc, #132]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	2380      	movs	r3, #128	@ 0x80
 8002d18:	01db      	lsls	r3, r3, #7
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d015      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	0899      	lsrs	r1, r3, #2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	05db      	lsls	r3, r3, #23
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d3c:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d42:	2180      	movs	r1, #128	@ 0x80
 8002d44:	0249      	lsls	r1, r1, #9
 8002d46:	430a      	orrs	r2, r1
 8002d48:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	2380      	movs	r3, #128	@ 0x80
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	4013      	ands	r3, r2
 8002d54:	d016      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d56:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	4a15      	ldr	r2, [pc, #84]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d66:	430a      	orrs	r2, r1
 8002d68:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	2380      	movs	r3, #128	@ 0x80
 8002d70:	01db      	lsls	r3, r3, #7
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d106      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d76:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d7c:	2180      	movs	r1, #128	@ 0x80
 8002d7e:	0249      	lsls	r1, r1, #9
 8002d80:	430a      	orrs	r2, r1
 8002d82:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002d84:	2312      	movs	r3, #18
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	781b      	ldrb	r3, [r3, #0]
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b006      	add	sp, #24
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	fffffcff 	.word	0xfffffcff
 8002da0:	fffeffff 	.word	0xfffeffff
 8002da4:	00001388 	.word	0x00001388
 8002da8:	efffffff 	.word	0xefffffff
 8002dac:	ffffcfff 	.word	0xffffcfff
 8002db0:	ffff3fff 	.word	0xffff3fff

08002db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e04a      	b.n	8002e5c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	223d      	movs	r2, #61	@ 0x3d
 8002dca:	5c9b      	ldrb	r3, [r3, r2]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d107      	bne.n	8002de2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	223c      	movs	r2, #60	@ 0x3c
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7fe f943 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	223d      	movs	r2, #61	@ 0x3d
 8002de6:	2102      	movs	r1, #2
 8002de8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3304      	adds	r3, #4
 8002df2:	0019      	movs	r1, r3
 8002df4:	0010      	movs	r0, r2
 8002df6:	f000 f9ab 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2248      	movs	r2, #72	@ 0x48
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	223e      	movs	r2, #62	@ 0x3e
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	223f      	movs	r2, #63	@ 0x3f
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2240      	movs	r2, #64	@ 0x40
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2241      	movs	r2, #65	@ 0x41
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2242      	movs	r2, #66	@ 0x42
 8002e26:	2101      	movs	r1, #1
 8002e28:	5499      	strb	r1, [r3, r2]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2243      	movs	r2, #67	@ 0x43
 8002e2e:	2101      	movs	r1, #1
 8002e30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2244      	movs	r2, #68	@ 0x44
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2245      	movs	r2, #69	@ 0x45
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2246      	movs	r2, #70	@ 0x46
 8002e46:	2101      	movs	r1, #1
 8002e48:	5499      	strb	r1, [r3, r2]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2247      	movs	r2, #71	@ 0x47
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	223d      	movs	r2, #61	@ 0x3d
 8002e56:	2101      	movs	r1, #1
 8002e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	223d      	movs	r2, #61	@ 0x3d
 8002e70:	5c9b      	ldrb	r3, [r3, r2]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d001      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e037      	b.n	8002eec <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	223d      	movs	r2, #61	@ 0x3d
 8002e80:	2102      	movs	r1, #2
 8002e82:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2101      	movs	r1, #1
 8002e90:	430a      	orrs	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a16      	ldr	r2, [pc, #88]	@ (8002ef4 <HAL_TIM_Base_Start_IT+0x90>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x44>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a15      	ldr	r2, [pc, #84]	@ (8002ef8 <HAL_TIM_Base_Start_IT+0x94>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d116      	bne.n	8002ed6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4a13      	ldr	r2, [pc, #76]	@ (8002efc <HAL_TIM_Base_Start_IT+0x98>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d016      	beq.n	8002ee8 <HAL_TIM_Base_Start_IT+0x84>
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	2380      	movs	r3, #128	@ 0x80
 8002ebe:	025b      	lsls	r3, r3, #9
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d011      	beq.n	8002ee8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2101      	movs	r1, #1
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed4:	e008      	b.n	8002ee8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e000      	b.n	8002eea <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b004      	add	sp, #16
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	00010007 	.word	0x00010007

08002f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d021      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2202      	movs	r2, #2
 8002f24:	4013      	ands	r3, r2
 8002f26:	d01d      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	4252      	negs	r2, r2
 8002f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2203      	movs	r2, #3
 8002f40:	4013      	ands	r3, r2
 8002f42:	d004      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 f8ea 	bl	8003120 <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e007      	b.n	8002f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 f8dd 	bl	8003110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 f8e9 	bl	8003130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2204      	movs	r2, #4
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d022      	beq.n	8002fb2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4013      	ands	r3, r2
 8002f72:	d01e      	beq.n	8002fb2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2205      	movs	r2, #5
 8002f7a:	4252      	negs	r2, r2
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	23c0      	movs	r3, #192	@ 0xc0
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 f8c3 	bl	8003120 <HAL_TIM_IC_CaptureCallback>
 8002f9a:	e007      	b.n	8002fac <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f000 f8b6 	bl	8003110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 f8c2 	bl	8003130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d021      	beq.n	8002ffe <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d01d      	beq.n	8002ffe <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2209      	movs	r2, #9
 8002fc8:	4252      	negs	r2, r2
 8002fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2204      	movs	r2, #4
 8002fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d004      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f000 f89d 	bl	8003120 <HAL_TIM_IC_CaptureCallback>
 8002fe6:	e007      	b.n	8002ff8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 f890 	bl	8003110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 f89c 	bl	8003130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2210      	movs	r2, #16
 8003002:	4013      	ands	r3, r2
 8003004:	d022      	beq.n	800304c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2210      	movs	r2, #16
 800300a:	4013      	ands	r3, r2
 800300c:	d01e      	beq.n	800304c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2211      	movs	r2, #17
 8003014:	4252      	negs	r2, r2
 8003016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2208      	movs	r2, #8
 800301c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	23c0      	movs	r3, #192	@ 0xc0
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4013      	ands	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	0018      	movs	r0, r3
 8003030:	f000 f876 	bl	8003120 <HAL_TIM_IC_CaptureCallback>
 8003034:	e007      	b.n	8003046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f000 f869 	bl	8003110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	0018      	movs	r0, r3
 8003042:	f000 f875 	bl	8003130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2201      	movs	r2, #1
 8003050:	4013      	ands	r3, r2
 8003052:	d00c      	beq.n	800306e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	4013      	ands	r3, r2
 800305a:	d008      	beq.n	800306e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2202      	movs	r2, #2
 8003062:	4252      	negs	r2, r2
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f7fd f9f9 	bl	8000460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2280      	movs	r2, #128	@ 0x80
 8003072:	4013      	ands	r3, r2
 8003074:	d104      	bne.n	8003080 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	019b      	lsls	r3, r3, #6
 800307c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800307e:	d00b      	beq.n	8003098 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2280      	movs	r2, #128	@ 0x80
 8003084:	4013      	ands	r3, r2
 8003086:	d007      	beq.n	8003098 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1e      	ldr	r2, [pc, #120]	@ (8003108 <HAL_TIM_IRQHandler+0x208>)
 800308e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	0018      	movs	r0, r3
 8003094:	f000 f8de 	bl	8003254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	2380      	movs	r3, #128	@ 0x80
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4013      	ands	r3, r2
 80030a0:	d00b      	beq.n	80030ba <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2280      	movs	r2, #128	@ 0x80
 80030a6:	4013      	ands	r3, r2
 80030a8:	d007      	beq.n	80030ba <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a17      	ldr	r2, [pc, #92]	@ (800310c <HAL_TIM_IRQHandler+0x20c>)
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f000 f8d5 	bl	8003264 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2240      	movs	r2, #64	@ 0x40
 80030be:	4013      	ands	r3, r2
 80030c0:	d00c      	beq.n	80030dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2240      	movs	r2, #64	@ 0x40
 80030c6:	4013      	ands	r3, r2
 80030c8:	d008      	beq.n	80030dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2241      	movs	r2, #65	@ 0x41
 80030d0:	4252      	negs	r2, r2
 80030d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 f832 	bl	8003140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2220      	movs	r2, #32
 80030e0:	4013      	ands	r3, r2
 80030e2:	d00c      	beq.n	80030fe <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	4013      	ands	r3, r2
 80030ea:	d008      	beq.n	80030fe <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2221      	movs	r2, #33	@ 0x21
 80030f2:	4252      	negs	r2, r2
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 f8a3 	bl	8003244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	b004      	add	sp, #16
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	ffffdf7f 	.word	0xffffdf7f
 800310c:	fffffeff 	.word	0xfffffeff

08003110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003118:	46c0      	nop			@ (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003128:	46c0      	nop			@ (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	b002      	add	sp, #8
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003138:	46c0      	nop			@ (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	b002      	add	sp, #8
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003148:	46c0      	nop			@ (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}

08003150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a32      	ldr	r2, [pc, #200]	@ (800322c <TIM_Base_SetConfig+0xdc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_Base_SetConfig+0x20>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a31      	ldr	r2, [pc, #196]	@ (8003230 <TIM_Base_SetConfig+0xe0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d108      	bne.n	8003182 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2270      	movs	r2, #112	@ 0x70
 8003174:	4393      	bics	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a29      	ldr	r2, [pc, #164]	@ (800322c <TIM_Base_SetConfig+0xdc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00f      	beq.n	80031aa <TIM_Base_SetConfig+0x5a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a28      	ldr	r2, [pc, #160]	@ (8003230 <TIM_Base_SetConfig+0xe0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00b      	beq.n	80031aa <TIM_Base_SetConfig+0x5a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a27      	ldr	r2, [pc, #156]	@ (8003234 <TIM_Base_SetConfig+0xe4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d007      	beq.n	80031aa <TIM_Base_SetConfig+0x5a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a26      	ldr	r2, [pc, #152]	@ (8003238 <TIM_Base_SetConfig+0xe8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d003      	beq.n	80031aa <TIM_Base_SetConfig+0x5a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a25      	ldr	r2, [pc, #148]	@ (800323c <TIM_Base_SetConfig+0xec>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d108      	bne.n	80031bc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a24      	ldr	r2, [pc, #144]	@ (8003240 <TIM_Base_SetConfig+0xf0>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2280      	movs	r2, #128	@ 0x80
 80031c0:	4393      	bics	r3, r2
 80031c2:	001a      	movs	r2, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a11      	ldr	r2, [pc, #68]	@ (800322c <TIM_Base_SetConfig+0xdc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0xaa>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a12      	ldr	r2, [pc, #72]	@ (8003238 <TIM_Base_SetConfig+0xe8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0xaa>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a11      	ldr	r2, [pc, #68]	@ (800323c <TIM_Base_SetConfig+0xec>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d103      	bne.n	8003202 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2201      	movs	r2, #1
 800320e:	4013      	ands	r3, r2
 8003210:	2b01      	cmp	r3, #1
 8003212:	d106      	bne.n	8003222 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2201      	movs	r2, #1
 800321a:	4393      	bics	r3, r2
 800321c:	001a      	movs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	611a      	str	r2, [r3, #16]
  }
}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b004      	add	sp, #16
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40000400 	.word	0x40000400
 8003234:	40002000 	.word	0x40002000
 8003238:	40014400 	.word	0x40014400
 800323c:	40014800 	.word	0x40014800
 8003240:	fffffcff 	.word	0xfffffcff

08003244 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800324c:	46c0      	nop			@ (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b002      	add	sp, #8
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800325c:	46c0      	nop			@ (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}

08003274 <memset>:
 8003274:	0003      	movs	r3, r0
 8003276:	1882      	adds	r2, r0, r2
 8003278:	4293      	cmp	r3, r2
 800327a:	d100      	bne.n	800327e <memset+0xa>
 800327c:	4770      	bx	lr
 800327e:	7019      	strb	r1, [r3, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	e7f9      	b.n	8003278 <memset+0x4>

08003284 <__libc_init_array>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	2600      	movs	r6, #0
 8003288:	4c0c      	ldr	r4, [pc, #48]	@ (80032bc <__libc_init_array+0x38>)
 800328a:	4d0d      	ldr	r5, [pc, #52]	@ (80032c0 <__libc_init_array+0x3c>)
 800328c:	1b64      	subs	r4, r4, r5
 800328e:	10a4      	asrs	r4, r4, #2
 8003290:	42a6      	cmp	r6, r4
 8003292:	d109      	bne.n	80032a8 <__libc_init_array+0x24>
 8003294:	2600      	movs	r6, #0
 8003296:	f000 f819 	bl	80032cc <_init>
 800329a:	4c0a      	ldr	r4, [pc, #40]	@ (80032c4 <__libc_init_array+0x40>)
 800329c:	4d0a      	ldr	r5, [pc, #40]	@ (80032c8 <__libc_init_array+0x44>)
 800329e:	1b64      	subs	r4, r4, r5
 80032a0:	10a4      	asrs	r4, r4, #2
 80032a2:	42a6      	cmp	r6, r4
 80032a4:	d105      	bne.n	80032b2 <__libc_init_array+0x2e>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	00b3      	lsls	r3, r6, #2
 80032aa:	58eb      	ldr	r3, [r5, r3]
 80032ac:	4798      	blx	r3
 80032ae:	3601      	adds	r6, #1
 80032b0:	e7ee      	b.n	8003290 <__libc_init_array+0xc>
 80032b2:	00b3      	lsls	r3, r6, #2
 80032b4:	58eb      	ldr	r3, [r5, r3]
 80032b6:	4798      	blx	r3
 80032b8:	3601      	adds	r6, #1
 80032ba:	e7f2      	b.n	80032a2 <__libc_init_array+0x1e>
 80032bc:	08005f24 	.word	0x08005f24
 80032c0:	08005f24 	.word	0x08005f24
 80032c4:	08005f28 	.word	0x08005f28
 80032c8:	08005f24 	.word	0x08005f24

080032cc <_init>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	46c0      	nop			@ (mov r8, r8)
 80032d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d2:	bc08      	pop	{r3}
 80032d4:	469e      	mov	lr, r3
 80032d6:	4770      	bx	lr

080032d8 <_fini>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr
