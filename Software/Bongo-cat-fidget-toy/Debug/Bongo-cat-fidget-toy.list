
Bongo-cat-fidget-toy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a8  080000b8  080000b8  000010b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035d4  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e34  08007e34  000090f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007e34  08007e34  000090f8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007e34  08007e34  000090f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e34  08007e34  00008e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e38  08007e38  00008e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  08007e3c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000674  200000f8  08007f34  000090f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08007f34  0000976c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000090f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f654  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b29  00000000  00000000  00018774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c90  00000000  00000000  0001c2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162bf  00000000  00000000  0001cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130dd  00000000  00000000  00033227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089142  00000000  00000000  00046304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf446  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  000cf48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d33e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000f8 	.word	0x200000f8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004838 	.word	0x08004838

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000fc 	.word	0x200000fc
 80000fc:	08004838 	.word	0x08004838

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <toggle_display_invert>:

/* USER CODE BEGIN PFP */

// timer value = desired_sec * 64e6/prescaler

void toggle_display_invert(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
    display_inverted = !display_inverted;
 8000406:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <toggle_display_invert+0x64>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	425a      	negs	r2, r3
 800040c:	4153      	adcs	r3, r2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	001a      	movs	r2, r3
 8000412:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <toggle_display_invert+0x64>)
 8000414:	701a      	strb	r2, [r3, #0]
    ssd1306_InvertDisplay(display_inverted);
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <toggle_display_invert+0x64>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	0018      	movs	r0, r3
 800041c:	f001 f9ca 	bl	80017b4 <ssd1306_InvertDisplay>

    // Mark data as changed
    data_changed = 1;
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <toggle_display_invert+0x68>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]

    // Visual feedback
    for(int i = 0; i < 2; i++) {
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	e012      	b.n	8000452 <toggle_display_invert+0x52>
        ssd1306_Fill(White);
 800042c:	2001      	movs	r0, #1
 800042e:	f000 ff53 	bl	80012d8 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000432:	f000 ff6b 	bl	800130c <ssd1306_UpdateScreen>
        HAL_Delay(50);
 8000436:	2032      	movs	r0, #50	@ 0x32
 8000438:	f001 fbb4 	bl	8001ba4 <HAL_Delay>
        ssd1306_Fill(Black);
 800043c:	2000      	movs	r0, #0
 800043e:	f000 ff4b 	bl	80012d8 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000442:	f000 ff63 	bl	800130c <ssd1306_UpdateScreen>
        HAL_Delay(50);
 8000446:	2032      	movs	r0, #50	@ 0x32
 8000448:	f001 fbac 	bl	8001ba4 <HAL_Delay>
    for(int i = 0; i < 2; i++) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3301      	adds	r3, #1
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b01      	cmp	r3, #1
 8000456:	dde9      	ble.n	800042c <toggle_display_invert+0x2c>
    }
}
 8000458:	46c0      	nop			@ (mov r8, r8)
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	200001bd 	.word	0x200001bd
 8000468:	200001dc 	.word	0x200001dc

0800046c <draw_animation>:

void draw_animation(char* frame){
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af02      	add	r7, sp, #8
 8000472:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 8000474:	2000      	movs	r0, #0
 8000476:	f000 ff2f 	bl	80012d8 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,frame,128,64,White);
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	2301      	movs	r3, #1
 800047e:	9301      	str	r3, [sp, #4]
 8000480:	2340      	movs	r3, #64	@ 0x40
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	2380      	movs	r3, #128	@ 0x80
 8000486:	2100      	movs	r1, #0
 8000488:	2000      	movs	r0, #0
 800048a:	f001 f8c7 	bl	800161c <ssd1306_DrawBitmap>
}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}

08000496 <draw_animation_erase>:

void draw_animation_erase(char* frame){
 8000496:	b580      	push	{r7, lr}
 8000498:	b084      	sub	sp, #16
 800049a:	af02      	add	r7, sp, #8
 800049c:	6078      	str	r0, [r7, #4]
    ssd1306_DrawBitmap(0,0,frame,128,64,Black);
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	2300      	movs	r3, #0
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	2340      	movs	r3, #64	@ 0x40
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2380      	movs	r3, #128	@ 0x80
 80004aa:	2100      	movs	r1, #0
 80004ac:	2000      	movs	r0, #0
 80004ae:	f001 f8b5 	bl	800161c <ssd1306_DrawBitmap>
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}

080004ba <draw_animation_transparent>:

void draw_animation_transparent(char* frame){
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b084      	sub	sp, #16
 80004be:	af02      	add	r7, sp, #8
 80004c0:	6078      	str	r0, [r7, #4]
    ssd1306_DrawBitmap(0,0,frame,128,64,White);
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	2301      	movs	r3, #1
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2340      	movs	r3, #64	@ 0x40
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	2100      	movs	r1, #0
 80004d0:	2000      	movs	r0, #0
 80004d2:	f001 f8a3 	bl	800161c <ssd1306_DrawBitmap>
}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <readPins>:

void readPins(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
    sw_state_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);
 80004e4:	23a0      	movs	r3, #160	@ 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2140      	movs	r1, #64	@ 0x40
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 ff66 	bl	80023bc <HAL_GPIO_ReadPin>
 80004f0:	0003      	movs	r3, r0
 80004f2:	001a      	movs	r2, r3
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <readPins+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
    sw_state_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <readPins+0x34>)
 80004fa:	2101      	movs	r1, #1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 ff5d 	bl	80023bc <HAL_GPIO_ReadPin>
 8000502:	0003      	movs	r3, r0
 8000504:	001a      	movs	r2, r3
 8000506:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <readPins+0x38>)
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200001b4 	.word	0x200001b4
 8000514:	50000400 	.word	0x50000400
 8000518:	200001b8 	.word	0x200001b8

0800051c <display_tap_count_overlay>:

// Display tap count as overlay
void display_tap_count_overlay(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	@ 0x28
 8000520:	af02      	add	r7, sp, #8
    char buffer[32];
    // Display counts in a single line to save space
    sprintf(buffer, "%lu", total_taps);
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <display_tap_count_overlay+0x38>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	490c      	ldr	r1, [pc, #48]	@ (8000558 <display_tap_count_overlay+0x3c>)
 8000528:	003b      	movs	r3, r7
 800052a:	0018      	movs	r0, r3
 800052c:	f003 fce6 	bl	8003efc <siprintf>
    ssd1306_SetCursor(2, 1);
 8000530:	2101      	movs	r1, #1
 8000532:	2002      	movs	r0, #2
 8000534:	f001 f858 	bl	80015e8 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, ComicSans_11x12, White);
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <display_tap_count_overlay+0x40>)
 800053a:	0038      	movs	r0, r7
 800053c:	2201      	movs	r2, #1
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	6819      	ldr	r1, [r3, #0]
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f001 f823 	bl	8001590 <ssd1306_WriteString>
}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b008      	add	sp, #32
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	200001c0 	.word	0x200001c0
 8000558:	08004860 	.word	0x08004860
 800055c:	08007db4 	.word	0x08007db4

08000560 <display_saved_indicator>:

// Display saved indicator
void display_saved_indicator(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
    // Display "saved!" in bottom right corner
    ssd1306_SetCursor(85, 54);
 8000566:	2136      	movs	r1, #54	@ 0x36
 8000568:	2055      	movs	r0, #85	@ 0x55
 800056a:	f001 f83d 	bl	80015e8 <ssd1306_SetCursor>
    ssd1306_WriteString("saved!", ComicSans_11x12, White);
 800056e:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <display_saved_indicator+0x28>)
 8000570:	4806      	ldr	r0, [pc, #24]	@ (800058c <display_saved_indicator+0x2c>)
 8000572:	2201      	movs	r2, #1
 8000574:	9200      	str	r2, [sp, #0]
 8000576:	6819      	ldr	r1, [r3, #0]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f001 f808 	bl	8001590 <ssd1306_WriteString>
}
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	08007db4 	.word	0x08007db4
 800058c:	08004864 	.word	0x08004864

08000590 <update_display_with_overlays>:

// Update display with overlays
void update_display_with_overlays(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    // Draw overlay on top if enabled
    if (display_mode) {
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <update_display_with_overlays+0x28>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <update_display_with_overlays+0x10>
        display_tap_count_overlay();
 800059c:	f7ff ffbe 	bl	800051c <display_tap_count_overlay>
    }

    // Show saved indicator if active
    if (show_saved_indicator) {
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <update_display_with_overlays+0x2c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <update_display_with_overlays+0x1c>
        display_saved_indicator();
 80005a8:	f7ff ffda 	bl	8000560 <display_saved_indicator>
    }

    ssd1306_UpdateScreen();
 80005ac:	f000 feae 	bl	800130c <ssd1306_UpdateScreen>
}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	200001d0 	.word	0x200001d0
 80005bc:	200001e4 	.word	0x200001e4

080005c0 <handle_display_mode_switch>:

// Handle display mode switching (both buttons held)
uint8_t handle_display_mode_switch(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    if (BOTH_PRESSED) {
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <handle_display_mode_switch+0x88>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d133      	bne.n	8000634 <handle_display_mode_switch+0x74>
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <handle_display_mode_switch+0x8c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d12f      	bne.n	8000634 <handle_display_mode_switch+0x74>
        if (both_pressed_timer == 0) {
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <handle_display_mode_switch+0x90>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d105      	bne.n	80005e8 <handle_display_mode_switch+0x28>
            both_pressed_timer = HAL_GetTick();
 80005dc:	f001 fad8 	bl	8001b90 <HAL_GetTick>
 80005e0:	0002      	movs	r2, r0
 80005e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <handle_display_mode_switch+0x90>)
 80005e4:	601a      	str	r2, [r3, #0]
        if (both_pressed_timer == 0) {
 80005e6:	e029      	b.n	800063c <handle_display_mode_switch+0x7c>
        } else if (HAL_GetTick() - both_pressed_timer >= MODE_SWITCH_TIME) {
 80005e8:	f001 fad2 	bl	8001b90 <HAL_GetTick>
 80005ec:	0002      	movs	r2, r0
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <handle_display_mode_switch+0x90>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <handle_display_mode_switch+0x94>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d920      	bls.n	800063c <handle_display_mode_switch+0x7c>
            display_mode = !display_mode;
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <handle_display_mode_switch+0x98>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	425a      	negs	r2, r3
 8000600:	4153      	adcs	r3, r2
 8000602:	b2db      	uxtb	r3, r3
 8000604:	001a      	movs	r2, r3
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <handle_display_mode_switch+0x98>)
 8000608:	701a      	strb	r2, [r3, #0]
            both_pressed_timer = 0;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <handle_display_mode_switch+0x90>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]

            // Force save when switching modes
            force_save();
 8000610:	f000 fac4 	bl	8000b9c <force_save>

            // Wait for button release
            while(BOTH_PRESSED) {
 8000614:	e004      	b.n	8000620 <handle_display_mode_switch+0x60>
                HAL_Delay(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f001 fac4 	bl	8001ba4 <HAL_Delay>
                readPins();
 800061c:	f7ff ff60 	bl	80004e0 <readPins>
            while(BOTH_PRESSED) {
 8000620:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <handle_display_mode_switch+0x88>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d103      	bne.n	8000630 <handle_display_mode_switch+0x70>
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <handle_display_mode_switch+0x8c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0f2      	beq.n	8000616 <handle_display_mode_switch+0x56>
            }
            return 1; // Mode switched
 8000630:	2301      	movs	r3, #1
 8000632:	e005      	b.n	8000640 <handle_display_mode_switch+0x80>
        }
    } else {
        both_pressed_timer = 0;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <handle_display_mode_switch+0x90>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	e000      	b.n	800063e <handle_display_mode_switch+0x7e>
        if (both_pressed_timer == 0) {
 800063c:	46c0      	nop			@ (mov r8, r8)
    }
    return 0; // No mode switch
 800063e:	2300      	movs	r3, #0
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	200001b4 	.word	0x200001b4
 800064c:	200001b8 	.word	0x200001b8
 8000650:	200001cc 	.word	0x200001cc
 8000654:	00000bb7 	.word	0x00000bb7
 8000658:	200001d0 	.word	0x200001d0

0800065c <handle_invert_toggle>:

// Handle invert toggle (left button held)
uint8_t handle_invert_toggle(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    if (LEFT_PRESSED && !RIGHT_PRESSED && both_pressed_timer == 0) {
 8000660:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <handle_invert_toggle+0x90>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d138      	bne.n	80006da <handle_invert_toggle+0x7e>
 8000668:	4b21      	ldr	r3, [pc, #132]	@ (80006f0 <handle_invert_toggle+0x94>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d134      	bne.n	80006da <handle_invert_toggle+0x7e>
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <handle_invert_toggle+0x90>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d103      	bne.n	8000680 <handle_invert_toggle+0x24>
 8000678:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <handle_invert_toggle+0x94>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d02c      	beq.n	80006da <handle_invert_toggle+0x7e>
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <handle_invert_toggle+0x98>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d128      	bne.n	80006da <handle_invert_toggle+0x7e>
        if (invert_timer == 0) {
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <handle_invert_toggle+0x9c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d105      	bne.n	800069c <handle_invert_toggle+0x40>
            invert_timer = HAL_GetTick();
 8000690:	f001 fa7e 	bl	8001b90 <HAL_GetTick>
 8000694:	0002      	movs	r2, r0
 8000696:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <handle_invert_toggle+0x9c>)
 8000698:	601a      	str	r2, [r3, #0]
        if (invert_timer == 0) {
 800069a:	e022      	b.n	80006e2 <handle_invert_toggle+0x86>
        } else if (HAL_GetTick() - invert_timer >= INVERT_HOLD_TIME) {
 800069c:	f001 fa78 	bl	8001b90 <HAL_GetTick>
 80006a0:	0002      	movs	r2, r0
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <handle_invert_toggle+0x9c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	1ad2      	subs	r2, r2, r3
 80006a8:	23fa      	movs	r3, #250	@ 0xfa
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d318      	bcc.n	80006e2 <handle_invert_toggle+0x86>
            toggle_display_invert();
 80006b0:	f7ff fea6 	bl	8000400 <toggle_display_invert>
            invert_timer = 0;
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <handle_invert_toggle+0x9c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]

            // Wait for button release
            while(LEFT_PRESSED) {
 80006ba:	e004      	b.n	80006c6 <handle_invert_toggle+0x6a>
                HAL_Delay(10);
 80006bc:	200a      	movs	r0, #10
 80006be:	f001 fa71 	bl	8001ba4 <HAL_Delay>
                readPins();
 80006c2:	f7ff ff0d 	bl	80004e0 <readPins>
            while(LEFT_PRESSED) {
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <handle_invert_toggle+0x90>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d103      	bne.n	80006d6 <handle_invert_toggle+0x7a>
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <handle_invert_toggle+0x94>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d0f2      	beq.n	80006bc <handle_invert_toggle+0x60>
            }
            return 1; // Inverted
 80006d6:	2301      	movs	r3, #1
 80006d8:	e005      	b.n	80006e6 <handle_invert_toggle+0x8a>
        }
    } else {
        invert_timer = 0;
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <handle_invert_toggle+0x9c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	e000      	b.n	80006e4 <handle_invert_toggle+0x88>
        if (invert_timer == 0) {
 80006e2:	46c0      	nop			@ (mov r8, r8)
    }
    return 0; // No invert
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	0018      	movs	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200001b4 	.word	0x200001b4
 80006f0:	200001b8 	.word	0x200001b8
 80006f4:	200001cc 	.word	0x200001cc
 80006f8:	200001d4 	.word	0x200001d4

080006fc <register_tap>:

// Register a tap and increment counters
void register_tap(uint8_t is_left) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	0002      	movs	r2, r0
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	701a      	strb	r2, [r3, #0]
    if (is_left) {
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d005      	beq.n	800071c <register_tap+0x20>
        left_taps++;
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <register_tap+0x44>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <register_tap+0x44>)
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	e004      	b.n	8000726 <register_tap+0x2a>
    } else {
        right_taps++;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <register_tap+0x48>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <register_tap+0x48>)
 8000724:	601a      	str	r2, [r3, #0]
    }
    total_taps++;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <register_tap+0x4c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <register_tap+0x4c>)
 800072e:	601a      	str	r2, [r3, #0]
    data_changed = 1;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <register_tap+0x50>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	200001c4 	.word	0x200001c4
 8000744:	200001c8 	.word	0x200001c8
 8000748:	200001c0 	.word	0x200001c0
 800074c:	200001dc 	.word	0x200001dc

08000750 <handle_tap_decay>:

// Handle tap animations and decay
void handle_tap_decay(int32_t *tap_left_cntr, int32_t *tap_right_cntr) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
    if(*tap_left_cntr > 0){
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	dd13      	ble.n	800078a <handle_tap_decay+0x3a>
        if(HAL_GetTick() - *tap_left_cntr > TAP_DECAY_TIME) {
 8000762:	f001 fa15 	bl	8001b90 <HAL_GetTick>
 8000766:	0002      	movs	r2, r0
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000770:	d907      	bls.n	8000782 <handle_tap_decay+0x32>
            draw_animation_erase(&img_tap_left);
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <handle_tap_decay+0x74>)
 8000774:	0018      	movs	r0, r3
 8000776:	f7ff fe8e 	bl	8000496 <draw_animation_erase>
            *tap_left_cntr = 0;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e003      	b.n	800078a <handle_tap_decay+0x3a>
        }
        else{
            draw_animation_transparent(&img_tap_left);
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <handle_tap_decay+0x74>)
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff fe98 	bl	80004ba <draw_animation_transparent>
        }
    }
    if(*tap_right_cntr > 0){
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	dd13      	ble.n	80007ba <handle_tap_decay+0x6a>
        if(HAL_GetTick() - *tap_right_cntr > TAP_DECAY_TIME) {
 8000792:	f001 f9fd 	bl	8001b90 <HAL_GetTick>
 8000796:	0002      	movs	r2, r0
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	2bc8      	cmp	r3, #200	@ 0xc8
 80007a0:	d907      	bls.n	80007b2 <handle_tap_decay+0x62>
            draw_animation_erase(&img_tap_right);
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <handle_tap_decay+0x78>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff fe76 	bl	8000496 <draw_animation_erase>
            *tap_right_cntr = 0;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
        }
        else{
            draw_animation_transparent(&img_tap_right);
        }
    }
}
 80007b0:	e003      	b.n	80007ba <handle_tap_decay+0x6a>
            draw_animation_transparent(&img_tap_right);
 80007b2:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <handle_tap_decay+0x78>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff fe80 	bl	80004ba <draw_animation_transparent>
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	08006c6c 	.word	0x08006c6c
 80007c8:	0800706c 	.word	0x0800706c

080007cc <handle_paw_animations>:

// Handle paw animations based on button states
void handle_paw_animations(uint8_t *left_state, uint8_t *right_state,
                          int32_t *tap_left_cntr, int32_t *tap_right_cntr,
                          int32_t *idle_cntr) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	603b      	str	r3, [r7, #0]
    *idle_cntr = 0;
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]

    if((BOTH_PRESSED) && ((*left_state | *right_state) == 0 || (*left_state ^ *right_state) == 1)){
 80007e0:	4b54      	ldr	r3, [pc, #336]	@ (8000934 <handle_paw_animations+0x168>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d140      	bne.n	800086a <handle_paw_animations+0x9e>
 80007e8:	4b53      	ldr	r3, [pc, #332]	@ (8000938 <handle_paw_animations+0x16c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d13c      	bne.n	800086a <handle_paw_animations+0x9e>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	781a      	ldrb	r2, [r3, #0]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d007      	beq.n	8000810 <handle_paw_animations+0x44>
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4053      	eors	r3, r2
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b01      	cmp	r3, #1
 800080e:	d12c      	bne.n	800086a <handle_paw_animations+0x9e>
        draw_animation(&img_both_down_alt);
 8000810:	4b4a      	ldr	r3, [pc, #296]	@ (800093c <handle_paw_animations+0x170>)
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff fe2a 	bl	800046c <draw_animation>
        if(!*right_state){
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10c      	bne.n	800083a <handle_paw_animations+0x6e>
            draw_animation_transparent(&img_tap_right);
 8000820:	4b47      	ldr	r3, [pc, #284]	@ (8000940 <handle_paw_animations+0x174>)
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff fe49 	bl	80004ba <draw_animation_transparent>
            *tap_right_cntr = HAL_GetTick();
 8000828:	f001 f9b2 	bl	8001b90 <HAL_GetTick>
 800082c:	0003      	movs	r3, r0
 800082e:	001a      	movs	r2, r3
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	601a      	str	r2, [r3, #0]
            register_tap(0); // Right tap
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff ff61 	bl	80006fc <register_tap>
        }
        if(!*left_state){
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10c      	bne.n	800085c <handle_paw_animations+0x90>
            draw_animation_transparent(&img_tap_left);
 8000842:	4b40      	ldr	r3, [pc, #256]	@ (8000944 <handle_paw_animations+0x178>)
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff fe38 	bl	80004ba <draw_animation_transparent>
            *tap_left_cntr = HAL_GetTick();
 800084a:	f001 f9a1 	bl	8001b90 <HAL_GetTick>
 800084e:	0003      	movs	r3, r0
 8000850:	001a      	movs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	601a      	str	r2, [r3, #0]
            register_tap(1); // Left tap
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff50 	bl	80006fc <register_tap>
        }
        *right_state = 1;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
        *left_state = 1;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e05f      	b.n	800092a <handle_paw_animations+0x15e>
    }
    else if(RIGHT_PRESSED){
 800086a:	4b32      	ldr	r3, [pc, #200]	@ (8000934 <handle_paw_animations+0x168>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d12b      	bne.n	80008ca <handle_paw_animations+0xfe>
 8000872:	4b31      	ldr	r3, [pc, #196]	@ (8000938 <handle_paw_animations+0x16c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d127      	bne.n	80008ca <handle_paw_animations+0xfe>
        if(*right_state == 0 || *left_state == 1){
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d003      	beq.n	800088a <handle_paw_animations+0xbe>
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d117      	bne.n	80008ba <handle_paw_animations+0xee>
            draw_animation(&img_right_down_alt);
 800088a:	4b2f      	ldr	r3, [pc, #188]	@ (8000948 <handle_paw_animations+0x17c>)
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff fded 	bl	800046c <draw_animation>
            if(!*right_state){
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10c      	bne.n	80008b4 <handle_paw_animations+0xe8>
                draw_animation_transparent(&img_tap_right);
 800089a:	4b29      	ldr	r3, [pc, #164]	@ (8000940 <handle_paw_animations+0x174>)
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff fe0c 	bl	80004ba <draw_animation_transparent>
                *tap_right_cntr = HAL_GetTick();
 80008a2:	f001 f975 	bl	8001b90 <HAL_GetTick>
 80008a6:	0003      	movs	r3, r0
 80008a8:	001a      	movs	r2, r3
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	601a      	str	r2, [r3, #0]
                register_tap(0); // Right tap
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff ff24 	bl	80006fc <register_tap>
            }
            *right_state = 1;
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
        }
        if(*left_state)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d033      	beq.n	800092a <handle_paw_animations+0x15e>
            *left_state = 0;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
        if(*left_state)
 80008c8:	e02f      	b.n	800092a <handle_paw_animations+0x15e>
    }
    else if(LEFT_PRESSED){
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <handle_paw_animations+0x168>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d12b      	bne.n	800092a <handle_paw_animations+0x15e>
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <handle_paw_animations+0x16c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d127      	bne.n	800092a <handle_paw_animations+0x15e>
        if(*left_state == 0 || *right_state == 1){
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d003      	beq.n	80008ea <handle_paw_animations+0x11e>
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d117      	bne.n	800091a <handle_paw_animations+0x14e>
            draw_animation(&img_left_down_alt);
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <handle_paw_animations+0x180>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff fdbd 	bl	800046c <draw_animation>
            if(!*left_state){
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10c      	bne.n	8000914 <handle_paw_animations+0x148>
                draw_animation_transparent(&img_tap_left);
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <handle_paw_animations+0x178>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fddc 	bl	80004ba <draw_animation_transparent>
                *tap_left_cntr = HAL_GetTick();
 8000902:	f001 f945 	bl	8001b90 <HAL_GetTick>
 8000906:	0003      	movs	r3, r0
 8000908:	001a      	movs	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
                register_tap(1); // Left tap
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff fef4 	bl	80006fc <register_tap>
            }
            *left_state = 1;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
        }
        if(*right_state)
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <handle_paw_animations+0x15e>
            *right_state = 0;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
    }
}
 8000928:	e7ff      	b.n	800092a <handle_paw_animations+0x15e>
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b004      	add	sp, #16
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	200001b4 	.word	0x200001b4
 8000938:	200001b8 	.word	0x200001b8
 800093c:	0800606c 	.word	0x0800606c
 8000940:	0800706c 	.word	0x0800706c
 8000944:	08006c6c 	.word	0x08006c6c
 8000948:	0800686c 	.word	0x0800686c
 800094c:	0800646c 	.word	0x0800646c

08000950 <check_idle_transition>:

// Check if should return to idle state
uint8_t check_idle_transition(int32_t *idle_cntr, uint8_t *left_state, uint8_t *right_state) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
    if(NONE_PRESSED){
 800095c:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <check_idle_transition+0x80>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d130      	bne.n	80009c6 <check_idle_transition+0x76>
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <check_idle_transition+0x84>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d12c      	bne.n	80009c6 <check_idle_transition+0x76>
        draw_animation(&img_both_up);
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <check_idle_transition+0x88>)
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff fd7c 	bl	800046c <draw_animation>
        if(*idle_cntr == 0){
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d105      	bne.n	8000988 <check_idle_transition+0x38>
            *idle_cntr = HAL_GetTick();
 800097c:	f001 f908 	bl	8001b90 <HAL_GetTick>
 8000980:	0003      	movs	r3, r0
 8000982:	001a      	movs	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	601a      	str	r2, [r3, #0]
        }
        if(HAL_GetTick() - *idle_cntr >= IDLE_TIME){
 8000988:	f001 f902 	bl	8001b90 <HAL_GetTick>
 800098c:	0002      	movs	r2, r0
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1ad2      	subs	r2, r2, r3
 8000994:	23fa      	movs	r3, #250	@ 0xfa
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	429a      	cmp	r2, r3
 800099a:	d306      	bcc.n	80009aa <check_idle_transition+0x5a>
            *idle_cntr = 0;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
            // Force save before going to idle
            force_save();
 80009a2:	f000 f8fb 	bl	8000b9c <force_save>
            return 1; // Should transition to idle
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00e      	b.n	80009c8 <check_idle_transition+0x78>
        }
        if(*left_state)
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <check_idle_transition+0x68>
            *left_state = 0;
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
        if(*right_state)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <check_idle_transition+0x76>
            *right_state = 0;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
    }
    return 0; // Stay in current state
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b004      	add	sp, #16
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200001b4 	.word	0x200001b4
 80009d4:	200001b8 	.word	0x200001b8
 80009d8:	0800486c 	.word	0x0800486c

080009dc <handle_boot_overrides>:

// Handle boot-time button overrides
void handle_boot_overrides(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
    readPins();
 80009e0:	f7ff fd7e 	bl	80004e0 <readPins>

    // If left is pressed at boot, toggle invert from saved state
    if(LEFT_PRESSED) {
 80009e4:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <handle_boot_overrides+0x98>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d115      	bne.n	8000a18 <handle_boot_overrides+0x3c>
 80009ec:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <handle_boot_overrides+0x9c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d111      	bne.n	8000a18 <handle_boot_overrides+0x3c>
        toggle_display_invert();
 80009f4:	f7ff fd04 	bl	8000400 <toggle_display_invert>
        force_save();  // Save immediately for boot-time changes
 80009f8:	f000 f8d0 	bl	8000b9c <force_save>
        // Wait for button release
        while(LEFT_PRESSED) {
 80009fc:	e004      	b.n	8000a08 <handle_boot_overrides+0x2c>
            HAL_Delay(10);
 80009fe:	200a      	movs	r0, #10
 8000a00:	f001 f8d0 	bl	8001ba4 <HAL_Delay>
            readPins();
 8000a04:	f7ff fd6c 	bl	80004e0 <readPins>
        while(LEFT_PRESSED) {
 8000a08:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <handle_boot_overrides+0x98>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d103      	bne.n	8000a18 <handle_boot_overrides+0x3c>
 8000a10:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <handle_boot_overrides+0x9c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d0f2      	beq.n	80009fe <handle_boot_overrides+0x22>
        }
    }

    // If right is pressed at boot, reset everything
    if(RIGHT_PRESSED) {
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <handle_boot_overrides+0x98>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d126      	bne.n	8000a6e <handle_boot_overrides+0x92>
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <handle_boot_overrides+0x9c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d122      	bne.n	8000a6e <handle_boot_overrides+0x92>
        reset_all_settings();
 8000a28:	f000 f912 	bl	8000c50 <reset_all_settings>
        ssd1306_InvertDisplay(0);  // Apply default display mode
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fec1 	bl	80017b4 <ssd1306_InvertDisplay>

        // Show feedback
        ssd1306_Fill(White);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 fc50 	bl	80012d8 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000a38:	f000 fc68 	bl	800130c <ssd1306_UpdateScreen>
        HAL_Delay(200);
 8000a3c:	20c8      	movs	r0, #200	@ 0xc8
 8000a3e:	f001 f8b1 	bl	8001ba4 <HAL_Delay>
        ssd1306_Fill(Black);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f000 fc48 	bl	80012d8 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000a48:	f000 fc60 	bl	800130c <ssd1306_UpdateScreen>
        HAL_Delay(200);
 8000a4c:	20c8      	movs	r0, #200	@ 0xc8
 8000a4e:	f001 f8a9 	bl	8001ba4 <HAL_Delay>

        // Wait for button release
        while(RIGHT_PRESSED) {
 8000a52:	e004      	b.n	8000a5e <handle_boot_overrides+0x82>
            HAL_Delay(10);
 8000a54:	200a      	movs	r0, #10
 8000a56:	f001 f8a5 	bl	8001ba4 <HAL_Delay>
            readPins();
 8000a5a:	f7ff fd41 	bl	80004e0 <readPins>
        while(RIGHT_PRESSED) {
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <handle_boot_overrides+0x98>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d103      	bne.n	8000a6e <handle_boot_overrides+0x92>
 8000a66:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <handle_boot_overrides+0x9c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0f2      	beq.n	8000a54 <handle_boot_overrides+0x78>
        }
    }
}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200001b4 	.word	0x200001b4
 8000a78:	200001b8 	.word	0x200001b8

08000a7c <save_settings>:

// Save all settings to flash
void save_settings(void) {
 8000a7c:	b5b0      	push	{r4, r5, r7, lr}
 8000a7e:	b08c      	sub	sp, #48	@ 0x30
 8000a80:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8000a82:	f001 f9df 	bl	8001e44 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError;

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000a86:	2108      	movs	r1, #8
 8000a88:	2018      	movs	r0, #24
 8000a8a:	180b      	adds	r3, r1, r0
 8000a8c:	19db      	adds	r3, r3, r7
 8000a8e:	2202      	movs	r2, #2
 8000a90:	601a      	str	r2, [r3, #0]
    EraseInitStruct.Page = 31;  // Last page for 64KB device
 8000a92:	180b      	adds	r3, r1, r0
 8000a94:	19db      	adds	r3, r3, r7
 8000a96:	221f      	movs	r2, #31
 8000a98:	609a      	str	r2, [r3, #8]
    EraseInitStruct.NbPages = 1;
 8000a9a:	180b      	adds	r3, r1, r0
 8000a9c:	19db      	adds	r3, r3, r7
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	60da      	str	r2, [r3, #12]

    HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000aa2:	231c      	movs	r3, #28
 8000aa4:	18fa      	adds	r2, r7, r3
 8000aa6:	180b      	adds	r3, r1, r0
 8000aa8:	19db      	adds	r3, r3, r7
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 fa7d 	bl	8001fac <HAL_FLASHEx_Erase>

    // Write counters and settings
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000ab2:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <save_settings+0xbc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	491f      	ldr	r1, [pc, #124]	@ (8000b3c <save_settings+0xc0>)
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f001 f970 	bl	8001da8 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_TOTAL_TAPS,
                     total_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <save_settings+0xc4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	491c      	ldr	r1, [pc, #112]	@ (8000b44 <save_settings+0xc8>)
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f001 f965 	bl	8001da8 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_LEFT_TAPS,
                     left_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <save_settings+0xcc>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	4918      	ldr	r1, [pc, #96]	@ (8000b4c <save_settings+0xd0>)
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2001      	movs	r0, #1
 8000af0:	f001 f95a 	bl	8001da8 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_RIGHT_TAPS,
                     right_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <save_settings+0xd4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	001c      	movs	r4, r3
 8000afa:	2300      	movs	r3, #0
 8000afc:	001d      	movs	r5, r3
 8000afe:	4915      	ldr	r1, [pc, #84]	@ (8000b54 <save_settings+0xd8>)
 8000b00:	0022      	movs	r2, r4
 8000b02:	002b      	movs	r3, r5
 8000b04:	2001      	movs	r0, #1
 8000b06:	f001 f94f 	bl	8001da8 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_DISPLAY_INV,
                     (uint64_t)display_inverted);

    HAL_FLASH_Lock();
 8000b0a:	f001 f9bf 	bl	8001e8c <HAL_FLASH_Lock>

    // Update last save time
    last_save_time = HAL_GetTick();
 8000b0e:	f001 f83f 	bl	8001b90 <HAL_GetTick>
 8000b12:	0002      	movs	r2, r0
 8000b14:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <save_settings+0xdc>)
 8000b16:	601a      	str	r2, [r3, #0]
    data_changed = 0;  // Clear the changed flag
 8000b18:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <save_settings+0xe0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]

    // Trigger saved indicator
    show_saved_indicator = 1;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <save_settings+0xe4>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
    saved_indicator_timer = HAL_GetTick();
 8000b24:	f001 f834 	bl	8001b90 <HAL_GetTick>
 8000b28:	0002      	movs	r2, r0
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <save_settings+0xe8>)
 8000b2c:	601a      	str	r2, [r3, #0]
}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b00c      	add	sp, #48	@ 0x30
 8000b34:	bdb0      	pop	{r4, r5, r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	200001c0 	.word	0x200001c0
 8000b3c:	0800f800 	.word	0x0800f800
 8000b40:	200001c4 	.word	0x200001c4
 8000b44:	0800f808 	.word	0x0800f808
 8000b48:	200001c8 	.word	0x200001c8
 8000b4c:	0800f810 	.word	0x0800f810
 8000b50:	200001bd 	.word	0x200001bd
 8000b54:	0800f818 	.word	0x0800f818
 8000b58:	200001d8 	.word	0x200001d8
 8000b5c:	200001dc 	.word	0x200001dc
 8000b60:	200001e4 	.word	0x200001e4
 8000b64:	200001e0 	.word	0x200001e0

08000b68 <check_and_save>:

// Check if it's time to save to flash
void check_and_save(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    if (data_changed && (HAL_GetTick() - last_save_time >= FLASH_SAVE_INTERVAL)) {
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <check_and_save+0x28>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00a      	beq.n	8000b8a <check_and_save+0x22>
 8000b74:	f001 f80c 	bl	8001b90 <HAL_GetTick>
 8000b78:	0002      	movs	r2, r0
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <check_and_save+0x2c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <check_and_save+0x30>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d901      	bls.n	8000b8a <check_and_save+0x22>
        save_settings();
 8000b86:	f7ff ff79 	bl	8000a7c <save_settings>
    }
}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200001dc 	.word	0x200001dc
 8000b94:	200001d8 	.word	0x200001d8
 8000b98:	0000752f 	.word	0x0000752f

08000b9c <force_save>:

// Force save (for important events)
void force_save(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
    if (data_changed) {
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <force_save+0x18>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <force_save+0x10>
        save_settings();
 8000ba8:	f7ff ff68 	bl	8000a7c <save_settings>
    }
}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	200001dc 	.word	0x200001dc

08000bb8 <load_settings>:

// Load all settings from flash
void load_settings(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
    // Load tap counters
    total_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_TOTAL_TAPS);
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <load_settings+0x78>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <load_settings+0x7c>)
 8000bc4:	601a      	str	r2, [r3, #0]
    left_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_LEFT_TAPS);
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <load_settings+0x80>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <load_settings+0x84>)
 8000bcc:	601a      	str	r2, [r3, #0]
    right_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_RIGHT_TAPS);
 8000bce:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <load_settings+0x88>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <load_settings+0x8c>)
 8000bd4:	601a      	str	r2, [r3, #0]

    // Load display invert setting
    uint32_t invert_setting = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_DISPLAY_INV);
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <load_settings+0x90>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	607b      	str	r3, [r7, #4]

    // Check for valid data (not 0xFFFFFFFF)
    if(total_taps == 0xFFFFFFFF) total_taps = 0;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <load_settings+0x7c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	d102      	bne.n	8000bea <load_settings+0x32>
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <load_settings+0x7c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
    if(left_taps == 0xFFFFFFFF) left_taps = 0;
 8000bea:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <load_settings+0x84>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	d102      	bne.n	8000bf8 <load_settings+0x40>
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <load_settings+0x84>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
    if(right_taps == 0xFFFFFFFF) right_taps = 0;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <load_settings+0x8c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	d102      	bne.n	8000c06 <load_settings+0x4e>
 8000c00:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <load_settings+0x8c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]

    // For display_inverted, only check the first byte
    if((invert_setting & 0xFF) != 0xFF) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	22ff      	movs	r2, #255	@ 0xff
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2bff      	cmp	r3, #255	@ 0xff
 8000c0e:	d007      	beq.n	8000c20 <load_settings+0x68>
        display_inverted = (uint8_t)(invert_setting & 0x01);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2201      	movs	r2, #1
 8000c16:	4013      	ands	r3, r2
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <load_settings+0x94>)
 8000c1c:	701a      	strb	r2, [r3, #0]
    } else {
        display_inverted = 0;  // Default to normal display
    }
}
 8000c1e:	e002      	b.n	8000c26 <load_settings+0x6e>
        display_inverted = 0;  // Default to normal display
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <load_settings+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	0800f800 	.word	0x0800f800
 8000c34:	200001c0 	.word	0x200001c0
 8000c38:	0800f808 	.word	0x0800f808
 8000c3c:	200001c4 	.word	0x200001c4
 8000c40:	0800f810 	.word	0x0800f810
 8000c44:	200001c8 	.word	0x200001c8
 8000c48:	0800f818 	.word	0x0800f818
 8000c4c:	200001bd 	.word	0x200001bd

08000c50 <reset_all_settings>:

// Reset all counters and settings
void reset_all_settings(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
    // Don't do flash operations too early
    if (HAL_GetTick() < 100) {
 8000c54:	f000 ff9c 	bl	8001b90 <HAL_GetTick>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	2b63      	cmp	r3, #99	@ 0x63
 8000c5c:	d802      	bhi.n	8000c64 <reset_all_settings+0x14>
        HAL_Delay(100);  // Ensure system is stable
 8000c5e:	2064      	movs	r0, #100	@ 0x64
 8000c60:	f000 ffa0 	bl	8001ba4 <HAL_Delay>
    }

    // Set values to defaults
    total_taps = 0;
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <reset_all_settings+0x38>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
    left_taps = 0;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <reset_all_settings+0x3c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
    right_taps = 0;
 8000c70:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <reset_all_settings+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
    display_inverted = 0;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <reset_all_settings+0x44>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]

    // Add error checking
    save_settings();
 8000c7c:	f7ff fefe 	bl	8000a7c <save_settings>
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	200001c0 	.word	0x200001c0
 8000c8c:	200001c4 	.word	0x200001c4
 8000c90:	200001c8 	.word	0x200001c8
 8000c94:	200001bd 	.word	0x200001bd

08000c98 <update_saved_indicator>:

// Update saved indicator visibility
void update_saved_indicator(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
    if (show_saved_indicator && (HAL_GetTick() - saved_indicator_timer >= SAVED_DISPLAY_TIME)) {
 8000c9c:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <update_saved_indicator+0x2c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00c      	beq.n	8000cbe <update_saved_indicator+0x26>
 8000ca4:	f000 ff74 	bl	8001b90 <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <update_saved_indicator+0x30>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	1ad2      	subs	r2, r2, r3
 8000cb0:	23fa      	movs	r3, #250	@ 0xfa
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d302      	bcc.n	8000cbe <update_saved_indicator+0x26>
        show_saved_indicator = 0;
 8000cb8:	4b02      	ldr	r3, [pc, #8]	@ (8000cc4 <update_saved_indicator+0x2c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
    }
}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200001e4 	.word	0x200001e4
 8000cc8:	200001e0 	.word	0x200001e0

08000ccc <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    if (htim == &htim14)
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d101      	bne.n	8000ce0 <HAL_TIM_PeriodElapsedCallback+0x14>
    {
        readPins();
 8000cdc:	f7ff fc00 	bl	80004e0 <readPins>
    }
}
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000168 	.word	0x20000168

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b089      	sub	sp, #36	@ 0x24
 8000cf0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f000 fed1 	bl	8001a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 f8bf 	bl	8000e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f000 f997 	bl	800102c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cfe:	f000 f92b 	bl	8000f58 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000d02:	f000 f96d 	bl	8000fe0 <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d06:	f000 f912 	bl	8000f2e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000d0a:	2380      	movs	r3, #128	@ 0x80
 8000d0c:	0219      	lsls	r1, r3, #8
 8000d0e:	23a0      	movs	r3, #160	@ 0xa0
 8000d10:	05db      	lsls	r3, r3, #23
 8000d12:	2200      	movs	r2, #0
 8000d14:	0018      	movs	r0, r3
 8000d16:	f001 fb6e 	bl	80023f6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000d1a:	200a      	movs	r0, #10
 8000d1c:	f000 ff42 	bl	8001ba4 <HAL_Delay>
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8000d20:	2380      	movs	r3, #128	@ 0x80
 8000d22:	0219      	lsls	r1, r3, #8
 8000d24:	23a0      	movs	r3, #160	@ 0xa0
 8000d26:	05db      	lsls	r3, r3, #23
 8000d28:	2201      	movs	r2, #1
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f001 fb63 	bl	80023f6 <HAL_GPIO_WritePin>
  ssd1306_Init();
 8000d30:	f000 fa66 	bl	8001200 <ssd1306_Init>

//  display_tap_count_overlay();

  load_settings();
 8000d34:	f7ff ff40 	bl	8000bb8 <load_settings>

  // Apply the loaded display invert setting
  ssd1306_InvertDisplay(display_inverted);
 8000d38:	4b47      	ldr	r3, [pc, #284]	@ (8000e58 <main+0x16c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 fd39 	bl	80017b4 <ssd1306_InvertDisplay>

  // Initialize save time
  last_save_time = HAL_GetTick();
 8000d42:	f000 ff25 	bl	8001b90 <HAL_GetTick>
 8000d46:	0002      	movs	r2, r0
 8000d48:	4b44      	ldr	r3, [pc, #272]	@ (8000e5c <main+0x170>)
 8000d4a:	601a      	str	r2, [r3, #0]

  // Check button states at boot for override options
  handle_boot_overrides();
 8000d4c:	f7ff fe46 	bl	80009dc <handle_boot_overrides>

  state_e state = IDLE;
 8000d50:	2317      	movs	r3, #23
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
  int32_t idle_cntr = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  int32_t tap_left_cntr = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  int32_t tap_right_cntr = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
  uint8_t left_state = 0;
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
  uint8_t right_state = 0;
 8000d6a:	1dbb      	adds	r3, r7, #6
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim14);
 8000d70:	4b3b      	ldr	r3, [pc, #236]	@ (8000e60 <main+0x174>)
 8000d72:	0018      	movs	r0, r3
 8000d74:	f002 feba 	bl	8003aec <HAL_TIM_Base_Start_IT>

  while(1) {
    // Periodic tasks
    check_and_save();
 8000d78:	f7ff fef6 	bl	8000b68 <check_and_save>
    update_saved_indicator();
 8000d7c:	f7ff ff8c 	bl	8000c98 <update_saved_indicator>

    switch(state){
 8000d80:	2317      	movs	r3, #23
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <main+0xa4>
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d031      	beq.n	8000df2 <main+0x106>
 8000d8e:	e061      	b.n	8000e54 <main+0x168>
    case IDLE:
        if(sw_state_left == 0 || sw_state_right == 0){
 8000d90:	4b34      	ldr	r3, [pc, #208]	@ (8000e64 <main+0x178>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <main+0xb4>
 8000d98:	4b33      	ldr	r3, [pc, #204]	@ (8000e68 <main+0x17c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10d      	bne.n	8000dbc <main+0xd0>
            draw_animation(&img_both_up);
 8000da0:	4b32      	ldr	r3, [pc, #200]	@ (8000e6c <main+0x180>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fb62 	bl	800046c <draw_animation>
            ssd1306_UpdateScreen();
 8000da8:	f000 fab0 	bl	800130c <ssd1306_UpdateScreen>
            HAL_Delay(50);
 8000dac:	2032      	movs	r0, #50	@ 0x32
 8000dae:	f000 fef9 	bl	8001ba4 <HAL_Delay>
            state = SWITCH;
 8000db2:	2317      	movs	r3, #23
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
            draw_animation(ani_idle[idle_cnt]);
            update_display_with_overlays();
            idle_cnt = (idle_cnt + 1) % ani_idle_LEN;
            HAL_Delay(100);
        }
        break;
 8000dba:	e04b      	b.n	8000e54 <main+0x168>
            draw_animation(ani_idle[idle_cnt]);
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <main+0x184>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e74 <main+0x188>)
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	58d3      	ldr	r3, [r2, r3]
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff fb4f 	bl	800046c <draw_animation>
            update_display_with_overlays();
 8000dce:	f7ff fbdf 	bl	8000590 <update_display_with_overlays>
            idle_cnt = (idle_cnt + 1) % ani_idle_LEN;
 8000dd2:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <main+0x184>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	2205      	movs	r2, #5
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff fb09 	bl	80003f4 <__aeabi_idivmod>
 8000de2:	000b      	movs	r3, r1
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <main+0x184>)
 8000de8:	701a      	strb	r2, [r3, #0]
            HAL_Delay(100);
 8000dea:	2064      	movs	r0, #100	@ 0x64
 8000dec:	f000 feda 	bl	8001ba4 <HAL_Delay>
        break;
 8000df0:	e030      	b.n	8000e54 <main+0x168>

    case SWITCH:
        // Handle special button combos
        handle_display_mode_switch();
 8000df2:	f7ff fbe5 	bl	80005c0 <handle_display_mode_switch>
        handle_invert_toggle();
 8000df6:	f7ff fc31 	bl	800065c <handle_invert_toggle>

        // Check for idle transition
        if(check_idle_transition(&idle_cntr, &left_state, &right_state)) {
 8000dfa:	1dba      	adds	r2, r7, #6
 8000dfc:	1df9      	adds	r1, r7, #7
 8000dfe:	2310      	movs	r3, #16
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fda4 	bl	8000950 <check_idle_transition>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d004      	beq.n	8000e16 <main+0x12a>
            state = IDLE;
 8000e0c:	2317      	movs	r3, #23
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e013      	b.n	8000e3e <main+0x152>
        }
        // Handle normal paw animations
        else if(!NONE_PRESSED) {
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <main+0x178>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d103      	bne.n	8000e26 <main+0x13a>
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <main+0x17c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d00b      	beq.n	8000e3e <main+0x152>
            handle_paw_animations(&left_state, &right_state,
 8000e26:	2308      	movs	r3, #8
 8000e28:	18fc      	adds	r4, r7, r3
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	18fa      	adds	r2, r7, r3
 8000e2e:	1db9      	adds	r1, r7, #6
 8000e30:	1df8      	adds	r0, r7, #7
 8000e32:	2310      	movs	r3, #16
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	0023      	movs	r3, r4
 8000e3a:	f7ff fcc7 	bl	80007cc <handle_paw_animations>
                                &tap_left_cntr, &tap_right_cntr, &idle_cntr);
        }

        // Handle tap decay animations
        handle_tap_decay(&tap_left_cntr, &tap_right_cntr);
 8000e3e:	2308      	movs	r3, #8
 8000e40:	18fa      	adds	r2, r7, r3
 8000e42:	230c      	movs	r3, #12
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	0011      	movs	r1, r2
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff fc81 	bl	8000750 <handle_tap_decay>

        // Update display with all overlays
        update_display_with_overlays();
 8000e4e:	f7ff fb9f 	bl	8000590 <update_display_with_overlays>
        break;
 8000e52:	46c0      	nop			@ (mov r8, r8)
    check_and_save();
 8000e54:	e790      	b.n	8000d78 <main+0x8c>
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	200001bd 	.word	0x200001bd
 8000e5c:	200001d8 	.word	0x200001d8
 8000e60:	20000168 	.word	0x20000168
 8000e64:	200001b4 	.word	0x200001b4
 8000e68:	200001b8 	.word	0x200001b8
 8000e6c:	0800486c 	.word	0x0800486c
 8000e70:	200001bc 	.word	0x200001bc
 8000e74:	20000000 	.word	0x20000000

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b093      	sub	sp, #76	@ 0x4c
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	2414      	movs	r4, #20
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	0018      	movs	r0, r3
 8000e84:	2334      	movs	r3, #52	@ 0x34
 8000e86:	001a      	movs	r2, r3
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f003 f859 	bl	8003f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	0018      	movs	r0, r3
 8000e92:	2310      	movs	r3, #16
 8000e94:	001a      	movs	r2, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	f003 f852 	bl	8003f40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f001 ffcb 	bl	8002e3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	2280      	movs	r2, #128	@ 0x80
 8000eb0:	0052      	lsls	r2, r2, #1
 8000eb2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000eb4:	0021      	movs	r1, r4
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2240      	movs	r2, #64	@ 0x40
 8000ec0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2202      	movs	r2, #2
 8000ecc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2280      	movs	r2, #128	@ 0x80
 8000ede:	0292      	lsls	r2, r2, #10
 8000ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	0592      	lsls	r2, r2, #22
 8000ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 ffe5 	bl	8002ebc <HAL_RCC_OscConfig>
 8000ef2:	1e03      	subs	r3, r0, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ef6:	f000 f943 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2202      	movs	r2, #2
 8000f04:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2280      	movs	r2, #128	@ 0x80
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2101      	movs	r1, #1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f002 fadf 	bl	80034dc <HAL_RCC_ClockConfig>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f22:	f000 f92d 	bl	8001180 <Error_Handler>
  }
}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b013      	add	sp, #76	@ 0x4c
 8000f2c:	bd90      	pop	{r4, r7, pc}

08000f2e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2004      	movs	r0, #4
 8000f38:	f000 ff04 	bl	8001d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f3c:	2004      	movs	r0, #4
 8000f3e:	f000 ff16 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2013      	movs	r0, #19
 8000f48:	f000 fefc 	bl	8001d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000f4c:	2013      	movs	r0, #19
 8000f4e:	f000 ff0e 	bl	8001d6e <HAL_NVIC_EnableIRQ>
}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd8 <MX_I2C1_Init+0x80>)
 8000f60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00601133;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f64:	4a1d      	ldr	r2, [pc, #116]	@ (8000fdc <MX_I2C1_Init+0x84>)
 8000f66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f8e:	2280      	movs	r2, #128	@ 0x80
 8000f90:	0292      	lsls	r2, r2, #10
 8000f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 fa4a 	bl	8002430 <HAL_I2C_Init>
 8000f9c:	1e03      	subs	r3, r0, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fa0:	f000 f8ee 	bl	8001180 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000fa4:	2380      	movs	r3, #128	@ 0x80
 8000fa6:	015a      	lsls	r2, r3, #5
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 fead 	bl	8002d0c <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	1e03      	subs	r3, r0, #0
 8000fb4:	d001      	beq.n	8000fba <MX_I2C1_Init+0x62>
  {
    Error_Handler();
 8000fb6:	f000 f8e3 	bl	8001180 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_I2C1_Init+0x7c>)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f001 fef0 	bl	8002da4 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	1e03      	subs	r3, r0, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_I2C1_Init+0x74>
  {
    Error_Handler();
 8000fc8:	f000 f8da 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	20000114 	.word	0x20000114
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	00601133 	.word	0x00601133

08000fe0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  htim14.Instance = TIM14;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <MX_TIM14_Init+0x40>)
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <MX_TIM14_Init+0x44>)
 8000fe8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 32-1;      // Was 100-1
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <MX_TIM14_Init+0x40>)
 8000fec:	221f      	movs	r2, #31
 8000fee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <MX_TIM14_Init+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;      // 32MHz/32/10000 = 100Hz
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <MX_TIM14_Init+0x40>)
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <MX_TIM14_Init+0x48>)
 8000ffa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <MX_TIM14_Init+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <MX_TIM14_Init+0x40>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <MX_TIM14_Init+0x40>)
 800100a:	0018      	movs	r0, r3
 800100c:	f002 fd16 	bl	8003a3c <HAL_TIM_Base_Init>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001014:	f000 f8b4 	bl	8001180 <Error_Handler>
  }
}
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	20000168 	.word	0x20000168
 8001024:	40002000 	.word	0x40002000
 8001028:	0000270f 	.word	0x0000270f

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b089      	sub	sp, #36	@ 0x24
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	240c      	movs	r4, #12
 8001034:	193b      	adds	r3, r7, r4
 8001036:	0018      	movs	r0, r3
 8001038:	2314      	movs	r3, #20
 800103a:	001a      	movs	r2, r3
 800103c:	2100      	movs	r1, #0
 800103e:	f002 ff7f 	bl	8003f40 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b4a      	ldr	r3, [pc, #296]	@ (800116c <MX_GPIO_Init+0x140>)
 8001044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001046:	4b49      	ldr	r3, [pc, #292]	@ (800116c <MX_GPIO_Init+0x140>)
 8001048:	2102      	movs	r1, #2
 800104a:	430a      	orrs	r2, r1
 800104c:	635a      	str	r2, [r3, #52]	@ 0x34
 800104e:	4b47      	ldr	r3, [pc, #284]	@ (800116c <MX_GPIO_Init+0x140>)
 8001050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001052:	2202      	movs	r2, #2
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b44      	ldr	r3, [pc, #272]	@ (800116c <MX_GPIO_Init+0x140>)
 800105c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800105e:	4b43      	ldr	r3, [pc, #268]	@ (800116c <MX_GPIO_Init+0x140>)
 8001060:	2104      	movs	r1, #4
 8001062:	430a      	orrs	r2, r1
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
 8001066:	4b41      	ldr	r3, [pc, #260]	@ (800116c <MX_GPIO_Init+0x140>)
 8001068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800106a:	2204      	movs	r2, #4
 800106c:	4013      	ands	r3, r2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b3e      	ldr	r3, [pc, #248]	@ (800116c <MX_GPIO_Init+0x140>)
 8001074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001076:	4b3d      	ldr	r3, [pc, #244]	@ (800116c <MX_GPIO_Init+0x140>)
 8001078:	2101      	movs	r1, #1
 800107a:	430a      	orrs	r2, r1
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34
 800107e:	4b3b      	ldr	r3, [pc, #236]	@ (800116c <MX_GPIO_Init+0x140>)
 8001080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001082:	2201      	movs	r2, #1
 8001084:	4013      	ands	r3, r2
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800108a:	2380      	movs	r3, #128	@ 0x80
 800108c:	0219      	lsls	r1, r3, #8
 800108e:	23a0      	movs	r3, #160	@ 0xa0
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	2200      	movs	r2, #0
 8001094:	0018      	movs	r0, r3
 8001096:	f001 f9ae 	bl	80023f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	4a34      	ldr	r2, [pc, #208]	@ (8001170 <MX_GPIO_Init+0x144>)
 800109e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2203      	movs	r2, #3
 80010a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	4a31      	ldr	r2, [pc, #196]	@ (8001174 <MX_GPIO_Init+0x148>)
 80010b0:	0019      	movs	r1, r3
 80010b2:	0010      	movs	r0, r2
 80010b4:	f001 f81e 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 PA8
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001178 <MX_GPIO_Init+0x14c>)
 80010bc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	2203      	movs	r2, #3
 80010c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	193a      	adds	r2, r7, r4
 80010cc:	23a0      	movs	r3, #160	@ 0xa0
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f001 f80e 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_LEFT_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin;
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	2240      	movs	r2, #64	@ 0x40
 80010dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_LEFT_GPIO_Port, &GPIO_InitStruct);
 80010ea:	193a      	adds	r2, r7, r4
 80010ec:	23a0      	movs	r3, #160	@ 0xa0
 80010ee:	05db      	lsls	r3, r3, #23
 80010f0:	0011      	movs	r1, r2
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 fffe 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800110a:	193b      	adds	r3, r7, r4
 800110c:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <MX_GPIO_Init+0x150>)
 800110e:	0019      	movs	r1, r3
 8001110:	0010      	movs	r0, r2
 8001112:	f000 ffef 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001116:	0021      	movs	r1, r4
 8001118:	187b      	adds	r3, r7, r1
 800111a:	22ff      	movs	r2, #255	@ 0xff
 800111c:	0052      	lsls	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001120:	000c      	movs	r4, r1
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2203      	movs	r2, #3
 8001126:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	193b      	adds	r3, r7, r4
 8001130:	4a12      	ldr	r2, [pc, #72]	@ (800117c <MX_GPIO_Init+0x150>)
 8001132:	0019      	movs	r1, r3
 8001134:	0010      	movs	r0, r2
 8001136:	f000 ffdd 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800113a:	0021      	movs	r1, r4
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2280      	movs	r2, #128	@ 0x80
 8001140:	0212      	lsls	r2, r2, #8
 8001142:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2201      	movs	r2, #1
 8001148:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8001156:	187a      	adds	r2, r7, r1
 8001158:	23a0      	movs	r3, #160	@ 0xa0
 800115a:	05db      	lsls	r3, r3, #23
 800115c:	0011      	movs	r1, r2
 800115e:	0018      	movs	r0, r3
 8001160:	f000 ffc8 	bl	80020f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b009      	add	sp, #36	@ 0x24
 800116a:	bd90      	pop	{r4, r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	0000c040 	.word	0x0000c040
 8001174:	50000800 	.word	0x50000800
 8001178:	00001dbf 	.word	0x00001dbf
 800117c:	50000400 	.word	0x50000400

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	e7fd      	b.n	8001188 <Error_Handler+0x8>

0800118c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af04      	add	r7, sp, #16
 800119e:	0002      	movs	r2, r0
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80011a4:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <ssd1306_WriteCommand+0x30>)
 80011a6:	2301      	movs	r3, #1
 80011a8:	425b      	negs	r3, r3
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	2301      	movs	r3, #1
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	2200      	movs	r2, #0
 80011b8:	2178      	movs	r1, #120	@ 0x78
 80011ba:	f001 f9df 	bl	800257c <HAL_I2C_Mem_Write>
}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	20000114 	.word	0x20000114

080011cc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4808      	ldr	r0, [pc, #32]	@ (80011fc <ssd1306_WriteData+0x30>)
 80011dc:	2201      	movs	r2, #1
 80011de:	4252      	negs	r2, r2
 80011e0:	9202      	str	r2, [sp, #8]
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	2240      	movs	r2, #64	@ 0x40
 80011ec:	2178      	movs	r1, #120	@ 0x78
 80011ee:	f001 f9c5 	bl	800257c <HAL_I2C_Mem_Write>
}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b002      	add	sp, #8
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	20000114 	.word	0x20000114

08001200 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001204:	f7ff ffc2 	bl	800118c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001208:	2064      	movs	r0, #100	@ 0x64
 800120a:	f000 fccb 	bl	8001ba4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800120e:	2000      	movs	r0, #0
 8001210:	f000 faaa 	bl	8001768 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001214:	2020      	movs	r0, #32
 8001216:	f7ff ffbf 	bl	8001198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff ffbc 	bl	8001198 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001220:	20b0      	movs	r0, #176	@ 0xb0
 8001222:	f7ff ffb9 	bl	8001198 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8001226:	20c0      	movs	r0, #192	@ 0xc0
 8001228:	f7ff ffb6 	bl	8001198 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ffb3 	bl	8001198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001232:	2010      	movs	r0, #16
 8001234:	f7ff ffb0 	bl	8001198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001238:	2040      	movs	r0, #64	@ 0x40
 800123a:	f7ff ffad 	bl	8001198 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);//FF
 800123e:	20ff      	movs	r0, #255	@ 0xff
 8001240:	f000 fa79 	bl	8001736 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8001244:	20a0      	movs	r0, #160	@ 0xa0
 8001246:	f7ff ffa7 	bl	8001198 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800124a:	20a6      	movs	r0, #166	@ 0xa6
 800124c:	f7ff ffa4 	bl	8001198 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001250:	20a8      	movs	r0, #168	@ 0xa8
 8001252:	f7ff ffa1 	bl	8001198 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001256:	203f      	movs	r0, #63	@ 0x3f
 8001258:	f7ff ff9e 	bl	8001198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800125c:	20a4      	movs	r0, #164	@ 0xa4
 800125e:	f7ff ff9b 	bl	8001198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001262:	20d3      	movs	r0, #211	@ 0xd3
 8001264:	f7ff ff98 	bl	8001198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff ff95 	bl	8001198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800126e:	20d5      	movs	r0, #213	@ 0xd5
 8001270:	f7ff ff92 	bl	8001198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001274:	20f0      	movs	r0, #240	@ 0xf0
 8001276:	f7ff ff8f 	bl	8001198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800127a:	20d9      	movs	r0, #217	@ 0xd9
 800127c:	f7ff ff8c 	bl	8001198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001280:	2022      	movs	r0, #34	@ 0x22
 8001282:	f7ff ff89 	bl	8001198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001286:	20da      	movs	r0, #218	@ 0xda
 8001288:	f7ff ff86 	bl	8001198 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800128c:	2012      	movs	r0, #18
 800128e:	f7ff ff83 	bl	8001198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001292:	20db      	movs	r0, #219	@ 0xdb
 8001294:	f7ff ff80 	bl	8001198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001298:	2020      	movs	r0, #32
 800129a:	f7ff ff7d 	bl	8001198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800129e:	208d      	movs	r0, #141	@ 0x8d
 80012a0:	f7ff ff7a 	bl	8001198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80012a4:	2014      	movs	r0, #20
 80012a6:	f7ff ff77 	bl	8001198 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fa5c 	bl	8001768 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f000 f811 	bl	80012d8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012b6:	f000 f829 	bl	800130c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <ssd1306_Init+0xd4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <ssd1306_Init+0xd4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012c6:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <ssd1306_Init+0xd4>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	711a      	strb	r2, [r3, #4]
}
 80012cc:	46c0      	nop			@ (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	200005f8 	.word	0x200005f8

080012d8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	0002      	movs	r2, r0
 80012e0:	1dfb      	adds	r3, r7, #7
 80012e2:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012e4:	1dfb      	adds	r3, r7, #7
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <ssd1306_Fill+0x18>
 80012ec:	2300      	movs	r3, #0
 80012ee:	e000      	b.n	80012f2 <ssd1306_Fill+0x1a>
 80012f0:	23ff      	movs	r3, #255	@ 0xff
 80012f2:	2282      	movs	r2, #130	@ 0x82
 80012f4:	00d2      	lsls	r2, r2, #3
 80012f6:	4804      	ldr	r0, [pc, #16]	@ (8001308 <ssd1306_Fill+0x30>)
 80012f8:	0019      	movs	r1, r3
 80012fa:	f002 fe21 	bl	8003f40 <memset>
}
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	200001e8 	.word	0x200001e8

0800130c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	e01e      	b.n	8001358 <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	3b50      	subs	r3, #80	@ 0x50
 8001320:	b2db      	uxtb	r3, r3
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff ff38 	bl	8001198 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff ff35 	bl	8001198 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800132e:	2010      	movs	r0, #16
 8001330:	f7ff ff32 	bl	8001198 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	0013      	movs	r3, r2
 800133a:	019b      	lsls	r3, r3, #6
 800133c:	189b      	adds	r3, r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	001a      	movs	r2, r3
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <ssd1306_UpdateScreen+0x60>)
 8001344:	18d3      	adds	r3, r2, r3
 8001346:	2182      	movs	r1, #130	@ 0x82
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff ff3f 	bl	80011cc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	3201      	adds	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b07      	cmp	r3, #7
 800135e:	d9dc      	bls.n	800131a <ssd1306_UpdateScreen+0xe>
    }
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	200001e8 	.word	0x200001e8

08001370 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	0004      	movs	r4, r0
 8001378:	0008      	movs	r0, r1
 800137a:	0011      	movs	r1, r2
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	1c22      	adds	r2, r4, #0
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	1dbb      	adds	r3, r7, #6
 8001384:	1c02      	adds	r2, r0, #0
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	1d7b      	adds	r3, r7, #5
 800138a:	1c0a      	adds	r2, r1, #0
 800138c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b81      	cmp	r3, #129	@ 0x81
 8001394:	d853      	bhi.n	800143e <ssd1306_DrawPixel+0xce>
 8001396:	1dbb      	adds	r3, r7, #6
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b3f      	cmp	r3, #63	@ 0x3f
 800139c:	d84f      	bhi.n	800143e <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800139e:	1d7b      	adds	r3, r7, #5
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d124      	bne.n	80013f0 <ssd1306_DrawPixel+0x80>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	1dbb      	adds	r3, r7, #6
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	0001      	movs	r1, r0
 80013b4:	000b      	movs	r3, r1
 80013b6:	019b      	lsls	r3, r3, #6
 80013b8:	185b      	adds	r3, r3, r1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	18d3      	adds	r3, r2, r3
 80013be:	4a22      	ldr	r2, [pc, #136]	@ (8001448 <ssd1306_DrawPixel+0xd8>)
 80013c0:	5cd3      	ldrb	r3, [r2, r3]
 80013c2:	b25a      	sxtb	r2, r3
 80013c4:	1dbb      	adds	r3, r7, #6
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2107      	movs	r1, #7
 80013ca:	400b      	ands	r3, r1
 80013cc:	2101      	movs	r1, #1
 80013ce:	4099      	lsls	r1, r3
 80013d0:	000b      	movs	r3, r1
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b25c      	sxtb	r4, r3
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	0001      	movs	r1, r0
 80013de:	000b      	movs	r3, r1
 80013e0:	019b      	lsls	r3, r3, #6
 80013e2:	185b      	adds	r3, r3, r1
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	18d3      	adds	r3, r2, r3
 80013e8:	b2e1      	uxtb	r1, r4
 80013ea:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <ssd1306_DrawPixel+0xd8>)
 80013ec:	54d1      	strb	r1, [r2, r3]
 80013ee:	e027      	b.n	8001440 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781a      	ldrb	r2, [r3, #0]
 80013f4:	1dbb      	adds	r3, r7, #6
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	b2d8      	uxtb	r0, r3
 80013fc:	0001      	movs	r1, r0
 80013fe:	000b      	movs	r3, r1
 8001400:	019b      	lsls	r3, r3, #6
 8001402:	185b      	adds	r3, r3, r1
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	18d3      	adds	r3, r2, r3
 8001408:	4a0f      	ldr	r2, [pc, #60]	@ (8001448 <ssd1306_DrawPixel+0xd8>)
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	b25b      	sxtb	r3, r3
 800140e:	1dba      	adds	r2, r7, #6
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	2107      	movs	r1, #7
 8001414:	400a      	ands	r2, r1
 8001416:	2101      	movs	r1, #1
 8001418:	4091      	lsls	r1, r2
 800141a:	000a      	movs	r2, r1
 800141c:	b252      	sxtb	r2, r2
 800141e:	43d2      	mvns	r2, r2
 8001420:	b252      	sxtb	r2, r2
 8001422:	4013      	ands	r3, r2
 8001424:	b25c      	sxtb	r4, r3
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	0001      	movs	r1, r0
 800142c:	000b      	movs	r3, r1
 800142e:	019b      	lsls	r3, r3, #6
 8001430:	185b      	adds	r3, r3, r1
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	18d3      	adds	r3, r2, r3
 8001436:	b2e1      	uxtb	r1, r4
 8001438:	4a03      	ldr	r2, [pc, #12]	@ (8001448 <ssd1306_DrawPixel+0xd8>)
 800143a:	54d1      	strb	r1, [r2, r3]
 800143c:	e000      	b.n	8001440 <ssd1306_DrawPixel+0xd0>
        return;
 800143e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001440:	46bd      	mov	sp, r7
 8001442:	b003      	add	sp, #12
 8001444:	bd90      	pop	{r4, r7, pc}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	200001e8 	.word	0x200001e8

0800144c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	0004      	movs	r4, r0
 8001454:	0038      	movs	r0, r7
 8001456:	6001      	str	r1, [r0, #0]
 8001458:	6042      	str	r2, [r0, #4]
 800145a:	6083      	str	r3, [r0, #8]
 800145c:	210f      	movs	r1, #15
 800145e:	187b      	adds	r3, r7, r1
 8001460:	1c22      	adds	r2, r4, #0
 8001462:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001464:	000a      	movs	r2, r1
 8001466:	18bb      	adds	r3, r7, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b1f      	cmp	r3, #31
 800146c:	d903      	bls.n	8001476 <ssd1306_WriteChar+0x2a>
 800146e:	18bb      	adds	r3, r7, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b7e      	cmp	r3, #126	@ 0x7e
 8001474:	d901      	bls.n	800147a <ssd1306_WriteChar+0x2e>
        return 0;
 8001476:	2300      	movs	r3, #0
 8001478:	e084      	b.n	8001584 <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800147a:	4b44      	ldr	r3, [pc, #272]	@ (800158c <ssd1306_WriteChar+0x140>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	001a      	movs	r2, r3
 8001480:	003b      	movs	r3, r7
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	18d3      	adds	r3, r2, r3
 8001486:	2b82      	cmp	r3, #130	@ 0x82
 8001488:	dc07      	bgt.n	800149a <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800148a:	4b40      	ldr	r3, [pc, #256]	@ (800158c <ssd1306_WriteChar+0x140>)
 800148c:	885b      	ldrh	r3, [r3, #2]
 800148e:	001a      	movs	r2, r3
 8001490:	003b      	movs	r3, r7
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001496:	2b40      	cmp	r3, #64	@ 0x40
 8001498:	dd01      	ble.n	800149e <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 800149a:	2300      	movs	r3, #0
 800149c:	e072      	b.n	8001584 <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	e051      	b.n	8001548 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 80014a4:	003b      	movs	r3, r7
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	230f      	movs	r3, #15
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	3b20      	subs	r3, #32
 80014b0:	0039      	movs	r1, r7
 80014b2:	7849      	ldrb	r1, [r1, #1]
 80014b4:	434b      	muls	r3, r1
 80014b6:	0019      	movs	r1, r3
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	18cb      	adds	r3, r1, r3
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	18d3      	adds	r3, r2, r3
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	e035      	b.n	8001536 <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	409a      	lsls	r2, r3
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	4013      	ands	r3, r2
 80014d6:	d014      	beq.n	8001502 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014d8:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <ssd1306_WriteChar+0x140>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	18d3      	adds	r3, r2, r3
 80014e4:	b2d8      	uxtb	r0, r3
 80014e6:	4b29      	ldr	r3, [pc, #164]	@ (800158c <ssd1306_WriteChar+0x140>)
 80014e8:	885b      	ldrh	r3, [r3, #2]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	b2d9      	uxtb	r1, r3
 80014f4:	2330      	movs	r3, #48	@ 0x30
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	001a      	movs	r2, r3
 80014fc:	f7ff ff38 	bl	8001370 <ssd1306_DrawPixel>
 8001500:	e016      	b.n	8001530 <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001502:	4b22      	ldr	r3, [pc, #136]	@ (800158c <ssd1306_WriteChar+0x140>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	18d3      	adds	r3, r2, r3
 800150e:	b2d8      	uxtb	r0, r3
 8001510:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <ssd1306_WriteChar+0x140>)
 8001512:	885b      	ldrh	r3, [r3, #2]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	18d3      	adds	r3, r2, r3
 800151c:	b2d9      	uxtb	r1, r3
 800151e:	2330      	movs	r3, #48	@ 0x30
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	425a      	negs	r2, r3
 8001526:	4153      	adcs	r3, r2
 8001528:	b2db      	uxtb	r3, r3
 800152a:	001a      	movs	r2, r3
 800152c:	f7ff ff20 	bl	8001370 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	3301      	adds	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	003b      	movs	r3, r7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	001a      	movs	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	4293      	cmp	r3, r2
 8001540:	d3c3      	bcc.n	80014ca <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3301      	adds	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	003b      	movs	r3, r7
 800154a:	785b      	ldrb	r3, [r3, #1]
 800154c:	001a      	movs	r2, r3
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	4293      	cmp	r3, r2
 8001552:	d3a7      	bcc.n	80014a4 <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001554:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <ssd1306_WriteChar+0x140>)
 8001556:	881a      	ldrh	r2, [r3, #0]
 8001558:	003b      	movs	r3, r7
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <ssd1306_WriteChar+0x126>
 8001560:	003b      	movs	r3, r7
 8001562:	6899      	ldr	r1, [r3, #8]
 8001564:	230f      	movs	r3, #15
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	3b20      	subs	r3, #32
 800156c:	18cb      	adds	r3, r1, r3
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	e001      	b.n	8001576 <ssd1306_WriteChar+0x12a>
 8001572:	003b      	movs	r3, r7
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	189b      	adds	r3, r3, r2
 8001578:	b29a      	uxth	r2, r3
 800157a:	4b04      	ldr	r3, [pc, #16]	@ (800158c <ssd1306_WriteChar+0x140>)
 800157c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800157e:	230f      	movs	r3, #15
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	781b      	ldrb	r3, [r3, #0]
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b009      	add	sp, #36	@ 0x24
 800158a:	bd90      	pop	{r4, r7, pc}
 800158c:	200005f8 	.word	0x200005f8

08001590 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af02      	add	r7, sp, #8
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	0038      	movs	r0, r7
 800159a:	6001      	str	r1, [r0, #0]
 800159c:	6042      	str	r2, [r0, #4]
 800159e:	6083      	str	r3, [r0, #8]
    while (*str) {
 80015a0:	e017      	b.n	80015d2 <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	7818      	ldrb	r0, [r3, #0]
 80015a6:	003b      	movs	r3, r7
 80015a8:	2218      	movs	r2, #24
 80015aa:	18ba      	adds	r2, r7, r2
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	9200      	str	r2, [sp, #0]
 80015b0:	6819      	ldr	r1, [r3, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f7ff ff49 	bl	800144c <ssd1306_WriteChar>
 80015ba:	0003      	movs	r3, r0
 80015bc:	001a      	movs	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d002      	beq.n	80015cc <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	e008      	b.n	80015de <ssd1306_WriteString+0x4e>
        }
        str++;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1e3      	bne.n	80015a2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	781b      	ldrb	r3, [r3, #0]
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b004      	add	sp, #16
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	0002      	movs	r2, r0
 80015f0:	1dfb      	adds	r3, r7, #7
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	1dbb      	adds	r3, r7, #6
 80015f6:	1c0a      	adds	r2, r1, #0
 80015f8:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <ssd1306_SetCursor+0x30>)
 8001602:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001604:	1dbb      	adds	r3, r7, #6
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b03      	ldr	r3, [pc, #12]	@ (8001618 <ssd1306_SetCursor+0x30>)
 800160c:	805a      	strh	r2, [r3, #2]
}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	200005f8 	.word	0x200005f8

0800161c <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	0004      	movs	r4, r0
 8001624:	0008      	movs	r0, r1
 8001626:	603a      	str	r2, [r7, #0]
 8001628:	0019      	movs	r1, r3
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	1c22      	adds	r2, r4, #0
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	1dbb      	adds	r3, r7, #6
 8001632:	1c02      	adds	r2, r0, #0
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	1d7b      	adds	r3, r7, #5
 8001638:	1c0a      	adds	r2, r1, #0
 800163a:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800163c:	1d7b      	adds	r3, r7, #5
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	3307      	adds	r3, #7
 8001642:	2b00      	cmp	r3, #0
 8001644:	da00      	bge.n	8001648 <ssd1306_DrawBitmap+0x2c>
 8001646:	3307      	adds	r3, #7
 8001648:	10db      	asrs	r3, r3, #3
 800164a:	001a      	movs	r2, r3
 800164c:	230a      	movs	r3, #10
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8001652:	230f      	movs	r3, #15
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b81      	cmp	r3, #129	@ 0x81
 8001660:	d865      	bhi.n	800172e <ssd1306_DrawBitmap+0x112>
 8001662:	1dbb      	adds	r3, r7, #6
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b3f      	cmp	r3, #63	@ 0x3f
 8001668:	d861      	bhi.n	800172e <ssd1306_DrawBitmap+0x112>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800166a:	230e      	movs	r3, #14
 800166c:	18fb      	adds	r3, r7, r3
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	e053      	b.n	800171c <ssd1306_DrawBitmap+0x100>
        for (uint8_t i = 0; i < w; i++) {
 8001674:	230d      	movs	r3, #13
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	e03c      	b.n	80016f8 <ssd1306_DrawBitmap+0xdc>
            if (i & 7) {
 800167e:	230d      	movs	r3, #13
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2207      	movs	r2, #7
 8001686:	4013      	ands	r3, r2
 8001688:	d006      	beq.n	8001698 <ssd1306_DrawBitmap+0x7c>
                byte <<= 1;
 800168a:	230f      	movs	r3, #15
 800168c:	18fa      	adds	r2, r7, r3
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	18db      	adds	r3, r3, r3
 8001694:	7013      	strb	r3, [r2, #0]
 8001696:	e014      	b.n	80016c2 <ssd1306_DrawBitmap+0xa6>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001698:	230e      	movs	r3, #14
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	220a      	movs	r2, #10
 80016a0:	18ba      	adds	r2, r7, r2
 80016a2:	2100      	movs	r1, #0
 80016a4:	5e52      	ldrsh	r2, [r2, r1]
 80016a6:	4353      	muls	r3, r2
 80016a8:	220d      	movs	r2, #13
 80016aa:	18ba      	adds	r2, r7, r2
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	08d2      	lsrs	r2, r2, #3
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	189b      	adds	r3, r3, r2
 80016b4:	001a      	movs	r2, r3
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	189a      	adds	r2, r3, r2
 80016ba:	230f      	movs	r3, #15
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 80016c2:	230f      	movs	r3, #15
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da0e      	bge.n	80016ec <ssd1306_DrawBitmap+0xd0>
                ssd1306_DrawPixel(x + i, y, color);
 80016ce:	1dfa      	adds	r2, r7, #7
 80016d0:	230d      	movs	r3, #13
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	7812      	ldrb	r2, [r2, #0]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	18d3      	adds	r3, r2, r3
 80016da:	b2d8      	uxtb	r0, r3
 80016dc:	2324      	movs	r3, #36	@ 0x24
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	1dbb      	adds	r3, r7, #6
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	0019      	movs	r1, r3
 80016e8:	f7ff fe42 	bl	8001370 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80016ec:	210d      	movs	r1, #13
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	3201      	adds	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	230d      	movs	r3, #13
 80016fa:	18fa      	adds	r2, r7, r3
 80016fc:	1d7b      	adds	r3, r7, #5
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d3bb      	bcc.n	800167e <ssd1306_DrawBitmap+0x62>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001706:	210e      	movs	r1, #14
 8001708:	187b      	adds	r3, r7, r1
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	187b      	adds	r3, r7, r1
 800170e:	3201      	adds	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	1dbb      	adds	r3, r7, #6
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	1dbb      	adds	r3, r7, #6
 8001718:	3201      	adds	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	230e      	movs	r3, #14
 800171e:	18fa      	adds	r2, r7, r3
 8001720:	2320      	movs	r3, #32
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d3a3      	bcc.n	8001674 <ssd1306_DrawBitmap+0x58>
            }
        }
    }
    return;
 800172c:	e000      	b.n	8001730 <ssd1306_DrawBitmap+0x114>
        return;
 800172e:	46c0      	nop			@ (mov r8, r8)
}
 8001730:	46bd      	mov	sp, r7
 8001732:	b005      	add	sp, #20
 8001734:	bd90      	pop	{r4, r7, pc}

08001736 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	0002      	movs	r2, r0
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001742:	210f      	movs	r1, #15
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2281      	movs	r2, #129	@ 0x81
 8001748:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800174a:	187b      	adds	r3, r7, r1
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	0018      	movs	r0, r3
 8001750:	f7ff fd22 	bl	8001198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001754:	1dfb      	adds	r3, r7, #7
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff fd1d 	bl	8001198 <ssd1306_WriteCommand>
}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	0002      	movs	r2, r0
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001774:	1dfb      	adds	r3, r7, #7
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d007      	beq.n	800178c <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 800177c:	230f      	movs	r3, #15
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	22af      	movs	r2, #175	@ 0xaf
 8001782:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001784:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <ssd1306_SetDisplayOn+0x48>)
 8001786:	2201      	movs	r2, #1
 8001788:	715a      	strb	r2, [r3, #5]
 800178a:	e006      	b.n	800179a <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 800178c:	230f      	movs	r3, #15
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	22ae      	movs	r2, #174	@ 0xae
 8001792:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <ssd1306_SetDisplayOn+0x48>)
 8001796:	2200      	movs	r2, #0
 8001798:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800179a:	230f      	movs	r3, #15
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff fcf9 	bl	8001198 <ssd1306_WriteCommand>
}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	200005f8 	.word	0x200005f8

080017b4 <ssd1306_InvertDisplay>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_InvertDisplay(uint8_t invert) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	0002      	movs	r2, r0
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	701a      	strb	r2, [r3, #0]
    if (invert) {
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <ssd1306_InvertDisplay+0x1c>
        ssd1306_WriteCommand(0xA7); // Inverted display mode
 80017c8:	20a7      	movs	r0, #167	@ 0xa7
 80017ca:	f7ff fce5 	bl	8001198 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xA6); // Normal display mode
    }
}
 80017ce:	e002      	b.n	80017d6 <ssd1306_InvertDisplay+0x22>
        ssd1306_WriteCommand(0xA6); // Normal display mode
 80017d0:	20a6      	movs	r0, #166	@ 0xa6
 80017d2:	f7ff fce1 	bl	8001198 <ssd1306_WriteCommand>
}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b002      	add	sp, #8
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_MspInit+0x44>)
 80017e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_MspInit+0x44>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	430a      	orrs	r2, r1
 80017f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <HAL_MspInit+0x44>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	2201      	movs	r2, #1
 80017f8:	4013      	ands	r3, r2
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_MspInit+0x44>)
 8001800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001802:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <HAL_MspInit+0x44>)
 8001804:	2180      	movs	r1, #128	@ 0x80
 8001806:	0549      	lsls	r1, r1, #21
 8001808:	430a      	orrs	r2, r1
 800180a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800180c:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <HAL_MspInit+0x44>)
 800180e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	055b      	lsls	r3, r3, #21
 8001814:	4013      	ands	r3, r2
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b091      	sub	sp, #68	@ 0x44
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	232c      	movs	r3, #44	@ 0x2c
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	0018      	movs	r0, r3
 8001836:	2314      	movs	r3, #20
 8001838:	001a      	movs	r2, r3
 800183a:	2100      	movs	r1, #0
 800183c:	f002 fb80 	bl	8003f40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001840:	2414      	movs	r4, #20
 8001842:	193b      	adds	r3, r7, r4
 8001844:	0018      	movs	r0, r3
 8001846:	2318      	movs	r3, #24
 8001848:	001a      	movs	r2, r3
 800184a:	2100      	movs	r1, #0
 800184c:	f002 fb78 	bl	8003f40 <memset>
  if(hi2c->Instance==I2C1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a35      	ldr	r2, [pc, #212]	@ (800192c <HAL_I2C_MspInit+0x104>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d163      	bne.n	8001922 <HAL_I2C_MspInit+0xfa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800185a:	193b      	adds	r3, r7, r4
 800185c:	2220      	movs	r2, #32
 800185e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001860:	193b      	adds	r3, r7, r4
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001866:	193b      	adds	r3, r7, r4
 8001868:	0018      	movs	r0, r3
 800186a:	f001 ffc1 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 800186e:	1e03      	subs	r3, r0, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001872:	f7ff fc85 	bl	8001180 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4b2e      	ldr	r3, [pc, #184]	@ (8001930 <HAL_I2C_MspInit+0x108>)
 8001878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800187a:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <HAL_I2C_MspInit+0x108>)
 800187c:	2102      	movs	r1, #2
 800187e:	430a      	orrs	r2, r1
 8001880:	635a      	str	r2, [r3, #52]	@ 0x34
 8001882:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <HAL_I2C_MspInit+0x108>)
 8001884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <HAL_I2C_MspInit+0x108>)
 8001890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001892:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <HAL_I2C_MspInit+0x108>)
 8001894:	2101      	movs	r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	635a      	str	r2, [r3, #52]	@ 0x34
 800189a:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <HAL_I2C_MspInit+0x108>)
 800189c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189e:	2201      	movs	r2, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a6:	212c      	movs	r1, #44	@ 0x2c
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	2280      	movs	r2, #128	@ 0x80
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b0:	000c      	movs	r4, r1
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	2212      	movs	r2, #18
 80018b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b8:	193b      	adds	r3, r7, r4
 80018ba:	2201      	movs	r2, #1
 80018bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	193b      	adds	r3, r7, r4
 80018c0:	2203      	movs	r2, #3
 80018c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80018c4:	193b      	adds	r3, r7, r4
 80018c6:	2206      	movs	r2, #6
 80018c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	4a19      	ldr	r2, [pc, #100]	@ (8001934 <HAL_I2C_MspInit+0x10c>)
 80018ce:	0019      	movs	r1, r3
 80018d0:	0010      	movs	r0, r2
 80018d2:	f000 fc0f 	bl	80020f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018d6:	0021      	movs	r1, r4
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	2280      	movs	r2, #128	@ 0x80
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2212      	movs	r2, #18
 80018e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2201      	movs	r2, #1
 80018ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2203      	movs	r2, #3
 80018f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2206      	movs	r2, #6
 80018f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	187a      	adds	r2, r7, r1
 80018fa:	23a0      	movs	r3, #160	@ 0xa0
 80018fc:	05db      	lsls	r3, r3, #23
 80018fe:	0011      	movs	r1, r2
 8001900:	0018      	movs	r0, r3
 8001902:	f000 fbf7 	bl	80020f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <HAL_I2C_MspInit+0x108>)
 8001908:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_I2C_MspInit+0x108>)
 800190c:	2180      	movs	r1, #128	@ 0x80
 800190e:	0389      	lsls	r1, r1, #14
 8001910:	430a      	orrs	r2, r1
 8001912:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_I2C_MspInit+0x108>)
 8001916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	039b      	lsls	r3, r3, #14
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b011      	add	sp, #68	@ 0x44
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	40005400 	.word	0x40005400
 8001930:	40021000 	.word	0x40021000
 8001934:	50000400 	.word	0x50000400

08001938 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <HAL_TIM_Base_MspInit+0x38>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10d      	bne.n	8001966 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 800194c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	0209      	lsls	r1, r1, #8
 8001954:	430a      	orrs	r2, r1
 8001956:	641a      	str	r2, [r3, #64]	@ 0x40
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 800195a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	40002000 	.word	0x40002000
 8001974:	40021000 	.word	0x40021000

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800197c:	46c0      	nop			@ (mov r8, r8)
 800197e:	e7fd      	b.n	800197c <NMI_Handler+0x4>

08001980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001984:	46c0      	nop			@ (mov r8, r8)
 8001986:	e7fd      	b.n	8001984 <HardFault_Handler+0x4>

08001988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800198c:	46c0      	nop			@ (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001996:	46c0      	nop			@ (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a0:	f000 f8e4 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a4:	46c0      	nop			@ (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <TIM14_IRQHandler+0x14>)
 80019ba:	0018      	movs	r0, r3
 80019bc:	f002 f8e4 	bl	8003b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80019c0:	46c0      	nop			@ (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	20000168 	.word	0x20000168

080019cc <_sbrk>:
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	18d3      	adds	r3, r2, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
 80019fc:	f002 faa8 	bl	8003f50 <__errno>
 8001a00:	0003      	movs	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	2301      	movs	r3, #1
 8001a08:	425b      	negs	r3, r3
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
 8001a0c:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	18d2      	adds	r2, r2, r3
 8001a1a:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <_sbrk+0x64>)
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b006      	add	sp, #24
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20002000 	.word	0x20002000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	20000600 	.word	0x20000600
 8001a34:	20000770 	.word	0x20000770

08001a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	46c0      	nop			@ (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <Reset_Handler>:
 8001a44:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <LoopForever+0x2>)
 8001a46:	4685      	mov	sp, r0
 8001a48:	f7ff fff6 	bl	8001a38 <SystemInit>
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <LoopForever+0x6>)
 8001a4e:	490d      	ldr	r1, [pc, #52]	@ (8001a84 <LoopForever+0xa>)
 8001a50:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <LoopForever+0xe>)
 8001a52:	2300      	movs	r3, #0
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:
 8001a56:	58d4      	ldr	r4, [r2, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:
 8001a5c:	18c4      	adds	r4, r0, r3
 8001a5e:	428c      	cmp	r4, r1
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <LoopForever+0x12>)
 8001a64:	4c0a      	ldr	r4, [pc, #40]	@ (8001a90 <LoopForever+0x16>)
 8001a66:	2300      	movs	r3, #0
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:
 8001a6e:	42a2      	cmp	r2, r4
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>
 8001a72:	f002 fa73 	bl	8003f5c <__libc_init_array>
 8001a76:	f7ff f939 	bl	8000cec <main>

08001a7a <LoopForever>:
 8001a7a:	e7fe      	b.n	8001a7a <LoopForever>
 8001a7c:	20002000 	.word	0x20002000
 8001a80:	20000000 	.word	0x20000000
 8001a84:	200000f8 	.word	0x200000f8
 8001a88:	08007e3c 	.word	0x08007e3c
 8001a8c:	200000f8 	.word	0x200000f8
 8001a90:	2000076c 	.word	0x2000076c

08001a94 <ADC1_IRQHandler>:
 8001a94:	e7fe      	b.n	8001a94 <ADC1_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a9e:	1dfb      	adds	r3, r7, #7
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_Init+0x3c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <HAL_Init+0x3c>)
 8001aaa:	2180      	movs	r1, #128	@ 0x80
 8001aac:	0049      	lsls	r1, r1, #1
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	f000 f810 	bl	8001ad8 <HAL_InitTick>
 8001ab8:	1e03      	subs	r3, r0, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	e001      	b.n	8001ac8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ac4:	f7ff fe8c 	bl	80017e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781b      	ldrb	r3, [r3, #0]
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <HAL_InitTick+0x88>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d02b      	beq.n	8001b48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001af0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <HAL_InitTick+0x8c>)
 8001af2:	681c      	ldr	r4, [r3, #0]
 8001af4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <HAL_InitTick+0x88>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	0019      	movs	r1, r3
 8001afa:	23fa      	movs	r3, #250	@ 0xfa
 8001afc:	0098      	lsls	r0, r3, #2
 8001afe:	f7fe fb09 	bl	8000114 <__udivsi3>
 8001b02:	0003      	movs	r3, r0
 8001b04:	0019      	movs	r1, r3
 8001b06:	0020      	movs	r0, r4
 8001b08:	f7fe fb04 	bl	8000114 <__udivsi3>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 f93d 	bl	8001d8e <HAL_SYSTICK_Config>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d112      	bne.n	8001b3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d80a      	bhi.n	8001b34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	2301      	movs	r3, #1
 8001b22:	425b      	negs	r3, r3
 8001b24:	2200      	movs	r2, #0
 8001b26:	0018      	movs	r0, r3
 8001b28:	f000 f90c 	bl	8001d44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <HAL_InitTick+0x90>)
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e00d      	b.n	8001b50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b34:	230f      	movs	r3, #15
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	e008      	b.n	8001b50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b3e:	230f      	movs	r3, #15
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	e003      	b.n	8001b50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b48:	230f      	movs	r3, #15
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b50:	230f      	movs	r3, #15
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	781b      	ldrb	r3, [r3, #0]
}
 8001b56:	0018      	movs	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b005      	add	sp, #20
 8001b5c:	bd90      	pop	{r4, r7, pc}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	2000001c 	.word	0x2000001c
 8001b64:	20000014 	.word	0x20000014
 8001b68:	20000018 	.word	0x20000018

08001b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b70:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_IncTick+0x1c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	001a      	movs	r2, r3
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_IncTick+0x20>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	18d2      	adds	r2, r2, r3
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <HAL_IncTick+0x20>)
 8001b7e:	601a      	str	r2, [r3, #0]
}
 8001b80:	46c0      	nop			@ (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			@ (mov r8, r8)
 8001b88:	2000001c 	.word	0x2000001c
 8001b8c:	20000604 	.word	0x20000604

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b02      	ldr	r3, [pc, #8]	@ (8001ba0 <HAL_GetTick+0x10>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	20000604 	.word	0x20000604

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	189b      	adds	r3, r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	f7ff ffe0 	bl	8001b90 <HAL_GetTick>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	46c0      	nop			@ (mov r8, r8)
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b004      	add	sp, #16
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	2000001c 	.word	0x2000001c

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	1dfb      	adds	r3, r7, #7
 8001bf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bf8:	1dfb      	adds	r3, r7, #7
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bfe:	d809      	bhi.n	8001c14 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c00:	1dfb      	adds	r3, r7, #7
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	001a      	movs	r2, r3
 8001c06:	231f      	movs	r3, #31
 8001c08:	401a      	ands	r2, r3
 8001c0a:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <__NVIC_EnableIRQ+0x30>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4091      	lsls	r1, r2
 8001c10:	000a      	movs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c14:	46c0      	nop			@ (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b002      	add	sp, #8
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	0002      	movs	r2, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c34:	d828      	bhi.n	8001c88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c36:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf4 <__NVIC_SetPriority+0xd4>)
 8001c38:	1dfb      	adds	r3, r7, #7
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	33c0      	adds	r3, #192	@ 0xc0
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	589b      	ldr	r3, [r3, r2]
 8001c46:	1dfa      	adds	r2, r7, #7
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	400a      	ands	r2, r1
 8001c50:	00d2      	lsls	r2, r2, #3
 8001c52:	21ff      	movs	r1, #255	@ 0xff
 8001c54:	4091      	lsls	r1, r2
 8001c56:	000a      	movs	r2, r1
 8001c58:	43d2      	mvns	r2, r2
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	22ff      	movs	r2, #255	@ 0xff
 8001c64:	401a      	ands	r2, r3
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	4003      	ands	r3, r0
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c74:	481f      	ldr	r0, [pc, #124]	@ (8001cf4 <__NVIC_SetPriority+0xd4>)
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	33c0      	adds	r3, #192	@ 0xc0
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c86:	e031      	b.n	8001cec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c88:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf8 <__NVIC_SetPriority+0xd8>)
 8001c8a:	1dfb      	adds	r3, r7, #7
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	0019      	movs	r1, r3
 8001c90:	230f      	movs	r3, #15
 8001c92:	400b      	ands	r3, r1
 8001c94:	3b08      	subs	r3, #8
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3306      	adds	r3, #6
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	18d3      	adds	r3, r2, r3
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	1dfa      	adds	r2, r7, #7
 8001ca4:	7812      	ldrb	r2, [r2, #0]
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	2203      	movs	r2, #3
 8001caa:	400a      	ands	r2, r1
 8001cac:	00d2      	lsls	r2, r2, #3
 8001cae:	21ff      	movs	r1, #255	@ 0xff
 8001cb0:	4091      	lsls	r1, r2
 8001cb2:	000a      	movs	r2, r1
 8001cb4:	43d2      	mvns	r2, r2
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	019b      	lsls	r3, r3, #6
 8001cbe:	22ff      	movs	r2, #255	@ 0xff
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	2303      	movs	r3, #3
 8001cca:	4003      	ands	r3, r0
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd0:	4809      	ldr	r0, [pc, #36]	@ (8001cf8 <__NVIC_SetPriority+0xd8>)
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	001c      	movs	r4, r3
 8001cd8:	230f      	movs	r3, #15
 8001cda:	4023      	ands	r3, r4
 8001cdc:	3b08      	subs	r3, #8
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	3306      	adds	r3, #6
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	18c3      	adds	r3, r0, r3
 8001ce8:	3304      	adds	r3, #4
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	46c0      	nop			@ (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b003      	add	sp, #12
 8001cf2:	bd90      	pop	{r4, r7, pc}
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	1e5a      	subs	r2, r3, #1
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	045b      	lsls	r3, r3, #17
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d301      	bcc.n	8001d14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d10:	2301      	movs	r3, #1
 8001d12:	e010      	b.n	8001d36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d14:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <SysTick_Config+0x44>)
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	425b      	negs	r3, r3
 8001d20:	2103      	movs	r1, #3
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff ff7c 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <SysTick_Config+0x44>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <SysTick_Config+0x44>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b002      	add	sp, #8
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	210f      	movs	r1, #15
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	1c02      	adds	r2, r0, #0
 8001d54:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	0011      	movs	r1, r2
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff ff5d 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	0002      	movs	r2, r0
 8001d76:	1dfb      	adds	r3, r7, #7
 8001d78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff ff33 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff ffaf 	bl	8001cfc <SysTick_Config>
 8001d9e:	0003      	movs	r3, r0
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	603a      	str	r2, [r7, #0]
 8001db4:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <HAL_FLASH_Program+0x94>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_FLASH_Program+0x1a>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e038      	b.n	8001e34 <HAL_FLASH_Program+0x8c>
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <HAL_FLASH_Program+0x94>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <HAL_FLASH_Program+0x94>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001dce:	2517      	movs	r5, #23
 8001dd0:	197c      	adds	r4, r7, r5
 8001dd2:	23fa      	movs	r3, #250	@ 0xfa
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 f87a 	bl	8001ed0 <FLASH_WaitForLastOperation>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001de0:	197b      	adds	r3, r7, r5
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d11f      	bne.n	8001e28 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d106      	bne.n	8001dfc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	0008      	movs	r0, r1
 8001df6:	f000 f8b9 	bl	8001f6c <FLASH_Program_DoubleWord>
 8001dfa:	e005      	b.n	8001e08 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	0011      	movs	r1, r2
 8001e02:	0018      	movs	r0, r3
 8001e04:	f002 fd24 	bl	8004850 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e08:	2317      	movs	r3, #23
 8001e0a:	18fc      	adds	r4, r7, r3
 8001e0c:	23fa      	movs	r3, #250	@ 0xfa
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 f85d 	bl	8001ed0 <FLASH_WaitForLastOperation>
 8001e16:	0003      	movs	r3, r0
 8001e18:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <HAL_FLASH_Program+0x98>)
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43d9      	mvns	r1, r3
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <HAL_FLASH_Program+0x98>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e28:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <HAL_FLASH_Program+0x94>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001e2e:	2317      	movs	r3, #23
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	781b      	ldrb	r3, [r3, #0]
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b006      	add	sp, #24
 8001e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3c:	20000608 	.word	0x20000608
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <HAL_FLASH_Unlock+0x3c>)
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da0c      	bge.n	8001e72 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <HAL_FLASH_Unlock+0x3c>)
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <HAL_FLASH_Unlock+0x40>)
 8001e5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <HAL_FLASH_Unlock+0x3c>)
 8001e60:	4a09      	ldr	r2, [pc, #36]	@ (8001e88 <HAL_FLASH_Unlock+0x44>)
 8001e62:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_FLASH_Unlock+0x3c>)
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da02      	bge.n	8001e72 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	781b      	ldrb	r3, [r3, #0]
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b002      	add	sp, #8
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	40022000 	.word	0x40022000
 8001e84:	45670123 	.word	0x45670123
 8001e88:	cdef89ab 	.word	0xcdef89ab

08001e8c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e92:	1dfb      	adds	r3, r7, #7
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e98:	23fa      	movs	r3, #250	@ 0xfa
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f000 f817 	bl	8001ed0 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_FLASH_Lock+0x40>)
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <HAL_FLASH_Lock+0x40>)
 8001ea8:	2180      	movs	r1, #128	@ 0x80
 8001eaa:	0609      	lsls	r1, r1, #24
 8001eac:	430a      	orrs	r2, r1
 8001eae:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_FLASH_Lock+0x40>)
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	da02      	bge.n	8001ebe <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8001eb8:	1dfb      	adds	r3, r7, #7
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b002      	add	sp, #8
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	40022000 	.word	0x40022000

08001ed0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff fe5a 	bl	8001b90 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8001ee0:	2380      	movs	r3, #128	@ 0x80
 8001ee2:	025b      	lsls	r3, r3, #9
 8001ee4:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8001ee6:	e00c      	b.n	8001f02 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3301      	adds	r3, #1
 8001eec:	d009      	beq.n	8001f02 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8001eee:	f7ff fe4f 	bl	8001b90 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d801      	bhi.n	8001f02 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e028      	b.n	8001f54 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8001f02:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <FLASH_WaitForLastOperation+0x8c>)
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d1ed      	bne.n	8001ee8 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8001f0c:	4b13      	ldr	r3, [pc, #76]	@ (8001f5c <FLASH_WaitForLastOperation+0x8c>)
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	4a13      	ldr	r2, [pc, #76]	@ (8001f60 <FLASH_WaitForLastOperation+0x90>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8001f16:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <FLASH_WaitForLastOperation+0x8c>)
 8001f18:	4a12      	ldr	r2, [pc, #72]	@ (8001f64 <FLASH_WaitForLastOperation+0x94>)
 8001f1a:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d011      	beq.n	8001f46 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <FLASH_WaitForLastOperation+0x98>)
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e013      	b.n	8001f54 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	d009      	beq.n	8001f46 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8001f32:	f7ff fe2d 	bl	8001b90 <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d801      	bhi.n	8001f46 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e006      	b.n	8001f54 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8001f46:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <FLASH_WaitForLastOperation+0x8c>)
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	02db      	lsls	r3, r3, #11
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d1ec      	bne.n	8001f2c <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b004      	add	sp, #16
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	000083fa 	.word	0x000083fa
 8001f64:	000083fb 	.word	0x000083fb
 8001f68:	20000608 	.word	0x20000608

08001f6c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	603a      	str	r2, [r7, #0]
 8001f76:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <FLASH_Program_DoubleWord+0x3c>)
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <FLASH_Program_DoubleWord+0x3c>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	430a      	orrs	r2, r1
 8001f82:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001f8a:	f3bf 8f6f 	isb	sy
}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	001c      	movs	r4, r3
 8001f94:	2300      	movs	r3, #0
 8001f96:	001d      	movs	r5, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	0022      	movs	r2, r4
 8001f9e:	601a      	str	r2, [r3, #0]
}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b004      	add	sp, #16
 8001fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001fac:	b5b0      	push	{r4, r5, r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001fb6:	4b35      	ldr	r3, [pc, #212]	@ (800208c <HAL_FLASHEx_Erase+0xe0>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_FLASHEx_Erase+0x16>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e05f      	b.n	8002082 <HAL_FLASHEx_Erase+0xd6>
 8001fc2:	4b32      	ldr	r3, [pc, #200]	@ (800208c <HAL_FLASHEx_Erase+0xe0>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001fc8:	4b30      	ldr	r3, [pc, #192]	@ (800208c <HAL_FLASHEx_Erase+0xe0>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001fce:	250f      	movs	r5, #15
 8001fd0:	197c      	adds	r4, r7, r5
 8001fd2:	23fa      	movs	r3, #250	@ 0xfa
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f7ff ff7a 	bl	8001ed0 <FLASH_WaitForLastOperation>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001fe0:	002c      	movs	r4, r5
 8001fe2:	193b      	adds	r3, r7, r4
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d145      	bne.n	8002076 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2204      	movs	r2, #4
 8001fee:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d10d      	bne.n	8002014 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 f849 	bl	8002094 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002002:	193c      	adds	r4, r7, r4
 8002004:	23fa      	movs	r3, #250	@ 0xfa
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff ff61 	bl	8001ed0 <FLASH_WaitForLastOperation>
 800200e:	0003      	movs	r3, r0
 8002010:	7023      	strb	r3, [r4, #0]
 8002012:	e030      	b.n	8002076 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	4252      	negs	r2, r2
 800201a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	e01a      	b.n	800205a <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	0011      	movs	r1, r2
 800202c:	0018      	movs	r0, r3
 800202e:	f000 f845 	bl	80020bc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002032:	250f      	movs	r5, #15
 8002034:	197c      	adds	r4, r7, r5
 8002036:	23fa      	movs	r3, #250	@ 0xfa
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	0018      	movs	r0, r3
 800203c:	f7ff ff48 	bl	8001ed0 <FLASH_WaitForLastOperation>
 8002040:	0003      	movs	r3, r0
 8002042:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8002044:	197b      	adds	r3, r7, r5
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	601a      	str	r2, [r3, #0]
          break;
 8002052:	e00a      	b.n	800206a <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	3301      	adds	r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	18d3      	adds	r3, r2, r3
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	429a      	cmp	r2, r3
 8002068:	d3dc      	bcc.n	8002024 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800206a:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <HAL_FLASHEx_Erase+0xe4>)
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <HAL_FLASHEx_Erase+0xe4>)
 8002070:	2102      	movs	r1, #2
 8002072:	438a      	bics	r2, r1
 8002074:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002076:	4b05      	ldr	r3, [pc, #20]	@ (800208c <HAL_FLASHEx_Erase+0xe0>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800207c:	230f      	movs	r3, #15
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	781b      	ldrb	r3, [r3, #0]
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b004      	add	sp, #16
 8002088:	bdb0      	pop	{r4, r5, r7, pc}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	20000608 	.word	0x20000608
 8002090:	40022000 	.word	0x40022000

08002094 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <FLASH_MassErase+0x24>)
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <FLASH_MassErase+0x24>)
 80020a6:	2180      	movs	r1, #128	@ 0x80
 80020a8:	0249      	lsls	r1, r1, #9
 80020aa:	430a      	orrs	r2, r1
 80020ac:	615a      	str	r2, [r3, #20]
}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b002      	add	sp, #8
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	40022000 	.word	0x40022000

080020bc <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80020c6:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <FLASH_PageErase+0x2c>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4a08      	ldr	r2, [pc, #32]	@ (80020ec <FLASH_PageErase+0x30>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	00da      	lsls	r2, r3, #3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <FLASH_PageErase+0x2c>)
 80020da:	4905      	ldr	r1, [pc, #20]	@ (80020f0 <FLASH_PageErase+0x34>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	615a      	str	r2, [r3, #20]
}
 80020e0:	46c0      	nop			@ (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b004      	add	sp, #16
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40022000 	.word	0x40022000
 80020ec:	ffffe007 	.word	0xffffe007
 80020f0:	00010002 	.word	0x00010002

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002102:	e147      	b.n	8002394 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4091      	lsls	r1, r2
 800210e:	000a      	movs	r2, r1
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d100      	bne.n	800211c <HAL_GPIO_Init+0x28>
 800211a:	e138      	b.n	800238e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2203      	movs	r2, #3
 8002122:	4013      	ands	r3, r2
 8002124:	2b01      	cmp	r3, #1
 8002126:	d005      	beq.n	8002134 <HAL_GPIO_Init+0x40>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2203      	movs	r2, #3
 800212e:	4013      	ands	r3, r2
 8002130:	2b02      	cmp	r3, #2
 8002132:	d130      	bne.n	8002196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	409a      	lsls	r2, r3
 8002142:	0013      	movs	r3, r2
 8002144:	43da      	mvns	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	409a      	lsls	r2, r3
 8002156:	0013      	movs	r3, r2
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800216a:	2201      	movs	r2, #1
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
 8002170:	0013      	movs	r3, r2
 8002172:	43da      	mvns	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	2201      	movs	r2, #1
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
 8002188:	0013      	movs	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2203      	movs	r2, #3
 800219c:	4013      	ands	r3, r2
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d017      	beq.n	80021d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	409a      	lsls	r2, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	43da      	mvns	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	409a      	lsls	r2, r3
 80021c4:	0013      	movs	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2203      	movs	r2, #3
 80021d8:	4013      	ands	r3, r2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d123      	bne.n	8002226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	58d3      	ldr	r3, [r2, r3]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2207      	movs	r2, #7
 80021f0:	4013      	ands	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	220f      	movs	r2, #15
 80021f6:	409a      	lsls	r2, r3
 80021f8:	0013      	movs	r3, r2
 80021fa:	43da      	mvns	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2107      	movs	r1, #7
 800220a:	400b      	ands	r3, r1
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	409a      	lsls	r2, r3
 8002210:	0013      	movs	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	08da      	lsrs	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3208      	adds	r2, #8
 8002220:	0092      	lsls	r2, r2, #2
 8002222:	6939      	ldr	r1, [r7, #16]
 8002224:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	409a      	lsls	r2, r3
 8002234:	0013      	movs	r3, r2
 8002236:	43da      	mvns	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2203      	movs	r2, #3
 8002244:	401a      	ands	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	409a      	lsls	r2, r3
 800224c:	0013      	movs	r3, r2
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	23c0      	movs	r3, #192	@ 0xc0
 8002260:	029b      	lsls	r3, r3, #10
 8002262:	4013      	ands	r3, r2
 8002264:	d100      	bne.n	8002268 <HAL_GPIO_Init+0x174>
 8002266:	e092      	b.n	800238e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002268:	4a50      	ldr	r2, [pc, #320]	@ (80023ac <HAL_GPIO_Init+0x2b8>)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	3318      	adds	r3, #24
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	589b      	ldr	r3, [r3, r2]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2203      	movs	r2, #3
 800227a:	4013      	ands	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	220f      	movs	r2, #15
 8002280:	409a      	lsls	r2, r3
 8002282:	0013      	movs	r3, r2
 8002284:	43da      	mvns	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	23a0      	movs	r3, #160	@ 0xa0
 8002290:	05db      	lsls	r3, r3, #23
 8002292:	429a      	cmp	r2, r3
 8002294:	d013      	beq.n	80022be <HAL_GPIO_Init+0x1ca>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a45      	ldr	r2, [pc, #276]	@ (80023b0 <HAL_GPIO_Init+0x2bc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00d      	beq.n	80022ba <HAL_GPIO_Init+0x1c6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a44      	ldr	r2, [pc, #272]	@ (80023b4 <HAL_GPIO_Init+0x2c0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <HAL_GPIO_Init+0x1c2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a43      	ldr	r2, [pc, #268]	@ (80023b8 <HAL_GPIO_Init+0x2c4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_GPIO_Init+0x1be>
 80022ae:	2303      	movs	r3, #3
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x1cc>
 80022b2:	2305      	movs	r3, #5
 80022b4:	e004      	b.n	80022c0 <HAL_GPIO_Init+0x1cc>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e002      	b.n	80022c0 <HAL_GPIO_Init+0x1cc>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_GPIO_Init+0x1cc>
 80022be:	2300      	movs	r3, #0
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	2103      	movs	r1, #3
 80022c4:	400a      	ands	r2, r1
 80022c6:	00d2      	lsls	r2, r2, #3
 80022c8:	4093      	lsls	r3, r2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80022d0:	4936      	ldr	r1, [pc, #216]	@ (80023ac <HAL_GPIO_Init+0x2b8>)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3318      	adds	r3, #24
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022de:	4b33      	ldr	r3, [pc, #204]	@ (80023ac <HAL_GPIO_Init+0x2b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43da      	mvns	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	035b      	lsls	r3, r3, #13
 80022f6:	4013      	ands	r3, r2
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002302:	4b2a      	ldr	r3, [pc, #168]	@ (80023ac <HAL_GPIO_Init+0x2b8>)
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002308:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <HAL_GPIO_Init+0x2b8>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43da      	mvns	r2, r3
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	039b      	lsls	r3, r3, #14
 8002320:	4013      	ands	r3, r2
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800232c:	4b1f      	ldr	r3, [pc, #124]	@ (80023ac <HAL_GPIO_Init+0x2b8>)
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002332:	4a1e      	ldr	r2, [pc, #120]	@ (80023ac <HAL_GPIO_Init+0x2b8>)
 8002334:	2384      	movs	r3, #132	@ 0x84
 8002336:	58d3      	ldr	r3, [r2, r3]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43da      	mvns	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	2380      	movs	r3, #128	@ 0x80
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	4013      	ands	r3, r2
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002358:	4914      	ldr	r1, [pc, #80]	@ (80023ac <HAL_GPIO_Init+0x2b8>)
 800235a:	2284      	movs	r2, #132	@ 0x84
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002360:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <HAL_GPIO_Init+0x2b8>)
 8002362:	2380      	movs	r3, #128	@ 0x80
 8002364:	58d3      	ldr	r3, [r2, r3]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43da      	mvns	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	2380      	movs	r3, #128	@ 0x80
 8002378:	025b      	lsls	r3, r3, #9
 800237a:	4013      	ands	r3, r2
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002386:	4909      	ldr	r1, [pc, #36]	@ (80023ac <HAL_GPIO_Init+0x2b8>)
 8002388:	2280      	movs	r2, #128	@ 0x80
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3301      	adds	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	40da      	lsrs	r2, r3
 800239c:	1e13      	subs	r3, r2, #0
 800239e:	d000      	beq.n	80023a2 <HAL_GPIO_Init+0x2ae>
 80023a0:	e6b0      	b.n	8002104 <HAL_GPIO_Init+0x10>
  }
}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	46c0      	nop			@ (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b006      	add	sp, #24
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021800 	.word	0x40021800
 80023b0:	50000400 	.word	0x50000400
 80023b4:	50000800 	.word	0x50000800
 80023b8:	50000c00 	.word	0x50000c00

080023bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	000a      	movs	r2, r1
 80023c6:	1cbb      	adds	r3, r7, #2
 80023c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	1cba      	adds	r2, r7, #2
 80023d0:	8812      	ldrh	r2, [r2, #0]
 80023d2:	4013      	ands	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80023d6:	230f      	movs	r3, #15
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e003      	b.n	80023e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023e0:	230f      	movs	r3, #15
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80023e8:	230f      	movs	r3, #15
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	781b      	ldrb	r3, [r3, #0]
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b004      	add	sp, #16
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	0008      	movs	r0, r1
 8002400:	0011      	movs	r1, r2
 8002402:	1cbb      	adds	r3, r7, #2
 8002404:	1c02      	adds	r2, r0, #0
 8002406:	801a      	strh	r2, [r3, #0]
 8002408:	1c7b      	adds	r3, r7, #1
 800240a:	1c0a      	adds	r2, r1, #0
 800240c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800240e:	1c7b      	adds	r3, r7, #1
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002416:	1cbb      	adds	r3, r7, #2
 8002418:	881a      	ldrh	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800241e:	e003      	b.n	8002428 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002420:	1cbb      	adds	r3, r7, #2
 8002422:	881a      	ldrh	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002428:	46c0      	nop			@ (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b002      	add	sp, #8
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e08f      	b.n	8002562 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2241      	movs	r2, #65	@ 0x41
 8002446:	5c9b      	ldrb	r3, [r3, r2]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2240      	movs	r2, #64	@ 0x40
 8002452:	2100      	movs	r1, #0
 8002454:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff f9e5 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2241      	movs	r2, #65	@ 0x41
 8002462:	2124      	movs	r1, #36	@ 0x24
 8002464:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	438a      	bics	r2, r1
 8002474:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	493b      	ldr	r1, [pc, #236]	@ (800256c <HAL_I2C_Init+0x13c>)
 8002480:	400a      	ands	r2, r1
 8002482:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4938      	ldr	r1, [pc, #224]	@ (8002570 <HAL_I2C_Init+0x140>)
 8002490:	400a      	ands	r2, r1
 8002492:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d108      	bne.n	80024ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2180      	movs	r1, #128	@ 0x80
 80024a6:	0209      	lsls	r1, r1, #8
 80024a8:	430a      	orrs	r2, r1
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	e007      	b.n	80024be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2184      	movs	r1, #132	@ 0x84
 80024b8:	0209      	lsls	r1, r1, #8
 80024ba:	430a      	orrs	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d109      	bne.n	80024da <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2180      	movs	r1, #128	@ 0x80
 80024d2:	0109      	lsls	r1, r1, #4
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	e007      	b.n	80024ea <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4923      	ldr	r1, [pc, #140]	@ (8002574 <HAL_I2C_Init+0x144>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4920      	ldr	r1, [pc, #128]	@ (8002578 <HAL_I2C_Init+0x148>)
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	491a      	ldr	r1, [pc, #104]	@ (8002570 <HAL_I2C_Init+0x140>)
 8002506:	400a      	ands	r2, r1
 8002508:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	431a      	orrs	r2, r3
 8002514:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69d9      	ldr	r1, [r3, #28]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1a      	ldr	r2, [r3, #32]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2101      	movs	r1, #1
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2241      	movs	r2, #65	@ 0x41
 800254e:	2120      	movs	r1, #32
 8002550:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2242      	movs	r2, #66	@ 0x42
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b002      	add	sp, #8
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	f0ffffff 	.word	0xf0ffffff
 8002570:	ffff7fff 	.word	0xffff7fff
 8002574:	fffff7ff 	.word	0xfffff7ff
 8002578:	02008000 	.word	0x02008000

0800257c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b089      	sub	sp, #36	@ 0x24
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	000c      	movs	r4, r1
 8002586:	0010      	movs	r0, r2
 8002588:	0019      	movs	r1, r3
 800258a:	230a      	movs	r3, #10
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	1c22      	adds	r2, r4, #0
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	2308      	movs	r3, #8
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	1c02      	adds	r2, r0, #0
 8002598:	801a      	strh	r2, [r3, #0]
 800259a:	1dbb      	adds	r3, r7, #6
 800259c:	1c0a      	adds	r2, r1, #0
 800259e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2241      	movs	r2, #65	@ 0x41
 80025a4:	5c9b      	ldrb	r3, [r3, r2]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d000      	beq.n	80025ae <HAL_I2C_Mem_Write+0x32>
 80025ac:	e10c      	b.n	80027c8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_I2C_Mem_Write+0x42>
 80025b4:	232c      	movs	r3, #44	@ 0x2c
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d105      	bne.n	80025ca <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2280      	movs	r2, #128	@ 0x80
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e0ff      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2240      	movs	r2, #64	@ 0x40
 80025ce:	5c9b      	ldrb	r3, [r3, r2]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_I2C_Mem_Write+0x5c>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e0f8      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2240      	movs	r2, #64	@ 0x40
 80025dc:	2101      	movs	r1, #1
 80025de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025e0:	f7ff fad6 	bl	8001b90 <HAL_GetTick>
 80025e4:	0003      	movs	r3, r0
 80025e6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	0219      	lsls	r1, r3, #8
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2319      	movs	r3, #25
 80025f4:	2201      	movs	r2, #1
 80025f6:	f000 f975 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0e3      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2241      	movs	r2, #65	@ 0x41
 8002606:	2121      	movs	r1, #33	@ 0x21
 8002608:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2242      	movs	r2, #66	@ 0x42
 800260e:	2140      	movs	r1, #64	@ 0x40
 8002610:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800261c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	222c      	movs	r2, #44	@ 0x2c
 8002622:	18ba      	adds	r2, r7, r2
 8002624:	8812      	ldrh	r2, [r2, #0]
 8002626:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800262e:	1dbb      	adds	r3, r7, #6
 8002630:	881c      	ldrh	r4, [r3, #0]
 8002632:	2308      	movs	r3, #8
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	230a      	movs	r3, #10
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	8819      	ldrh	r1, [r3, #0]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	0023      	movs	r3, r4
 800264a:	f000 f8c5 	bl	80027d8 <I2C_RequestMemoryWrite>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d005      	beq.n	800265e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2240      	movs	r2, #64	@ 0x40
 8002656:	2100      	movs	r1, #0
 8002658:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0b5      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	2bff      	cmp	r3, #255	@ 0xff
 8002666:	d911      	bls.n	800268c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	22ff      	movs	r2, #255	@ 0xff
 800266c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002672:	b2da      	uxtb	r2, r3
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	045c      	lsls	r4, r3, #17
 8002678:	230a      	movs	r3, #10
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	8819      	ldrh	r1, [r3, #0]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	2300      	movs	r3, #0
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	0023      	movs	r3, r4
 8002686:	f000 fb07 	bl	8002c98 <I2C_TransferConfig>
 800268a:	e012      	b.n	80026b2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269a:	b2da      	uxtb	r2, r3
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	049c      	lsls	r4, r3, #18
 80026a0:	230a      	movs	r3, #10
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	8819      	ldrh	r1, [r3, #0]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	2300      	movs	r3, #0
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	0023      	movs	r3, r4
 80026ae:	f000 faf3 	bl	8002c98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f96b 	bl	8002994 <I2C_WaitOnTXISFlagUntilTimeout>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e081      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d03a      	beq.n	8002776 <HAL_I2C_Mem_Write+0x1fa>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d136      	bne.n	8002776 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	0013      	movs	r3, r2
 8002712:	2200      	movs	r2, #0
 8002714:	2180      	movs	r1, #128	@ 0x80
 8002716:	f000 f8e5 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e053      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	2bff      	cmp	r3, #255	@ 0xff
 800272a:	d911      	bls.n	8002750 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	22ff      	movs	r2, #255	@ 0xff
 8002730:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002736:	b2da      	uxtb	r2, r3
 8002738:	2380      	movs	r3, #128	@ 0x80
 800273a:	045c      	lsls	r4, r3, #17
 800273c:	230a      	movs	r3, #10
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	8819      	ldrh	r1, [r3, #0]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	2300      	movs	r3, #0
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	0023      	movs	r3, r4
 800274a:	f000 faa5 	bl	8002c98 <I2C_TransferConfig>
 800274e:	e012      	b.n	8002776 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275e:	b2da      	uxtb	r2, r3
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	049c      	lsls	r4, r3, #18
 8002764:	230a      	movs	r3, #10
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	8819      	ldrh	r1, [r3, #0]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	2300      	movs	r3, #0
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	0023      	movs	r3, r4
 8002772:	f000 fa91 	bl	8002c98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d198      	bne.n	80026b2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	0018      	movs	r0, r3
 8002788:	f000 f94a 	bl	8002a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e01a      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2220      	movs	r2, #32
 800279a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	490b      	ldr	r1, [pc, #44]	@ (80027d4 <HAL_I2C_Mem_Write+0x258>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2241      	movs	r2, #65	@ 0x41
 80027b0:	2120      	movs	r1, #32
 80027b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2242      	movs	r2, #66	@ 0x42
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2240      	movs	r2, #64	@ 0x40
 80027c0:	2100      	movs	r1, #0
 80027c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b007      	add	sp, #28
 80027d0:	bd90      	pop	{r4, r7, pc}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	fe00e800 	.word	0xfe00e800

080027d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027d8:	b5b0      	push	{r4, r5, r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	000c      	movs	r4, r1
 80027e2:	0010      	movs	r0, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	250a      	movs	r5, #10
 80027e8:	197b      	adds	r3, r7, r5
 80027ea:	1c22      	adds	r2, r4, #0
 80027ec:	801a      	strh	r2, [r3, #0]
 80027ee:	2308      	movs	r3, #8
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	1c02      	adds	r2, r0, #0
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	1dbb      	adds	r3, r7, #6
 80027f8:	1c0a      	adds	r2, r1, #0
 80027fa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027fc:	1dbb      	adds	r3, r7, #6
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	045c      	lsls	r4, r3, #17
 8002806:	197b      	adds	r3, r7, r5
 8002808:	8819      	ldrh	r1, [r3, #0]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	4b23      	ldr	r3, [pc, #140]	@ (800289c <I2C_RequestMemoryWrite+0xc4>)
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	0023      	movs	r3, r4
 8002812:	f000 fa41 	bl	8002c98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002818:	6a39      	ldr	r1, [r7, #32]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 f8b9 	bl	8002994 <I2C_WaitOnTXISFlagUntilTimeout>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d001      	beq.n	800282a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e033      	b.n	8002892 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800282a:	1dbb      	adds	r3, r7, #6
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002832:	2308      	movs	r3, #8
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002840:	e019      	b.n	8002876 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002842:	2308      	movs	r3, #8
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	b29b      	uxth	r3, r3
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002856:	6a39      	ldr	r1, [r7, #32]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f89a 	bl	8002994 <I2C_WaitOnTXISFlagUntilTimeout>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d001      	beq.n	8002868 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e014      	b.n	8002892 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002868:	2308      	movs	r3, #8
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	0013      	movs	r3, r2
 8002880:	2200      	movs	r2, #0
 8002882:	2180      	movs	r1, #128	@ 0x80
 8002884:	f000 f82e 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002888:	1e03      	subs	r3, r0, #0
 800288a:	d001      	beq.n	8002890 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	0018      	movs	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	b004      	add	sp, #16
 8002898:	bdb0      	pop	{r4, r5, r7, pc}
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	80002000 	.word	0x80002000

080028a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2202      	movs	r2, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d103      	bne.n	80028be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2201      	movs	r2, #1
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d007      	beq.n	80028dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	619a      	str	r2, [r3, #24]
  }
}
 80028dc:	46c0      	nop			@ (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b002      	add	sp, #8
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	1dfb      	adds	r3, r7, #7
 80028f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f4:	e03a      	b.n	800296c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	6839      	ldr	r1, [r7, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 f8d3 	bl	8002aa8 <I2C_IsErrorOccurred>
 8002902:	1e03      	subs	r3, r0, #0
 8002904:	d001      	beq.n	800290a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e040      	b.n	800298c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	d02d      	beq.n	800296c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002910:	f7ff f93e 	bl	8001b90 <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d302      	bcc.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d122      	bne.n	800296c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	425a      	negs	r2, r3
 8002936:	4153      	adcs	r3, r2
 8002938:	b2db      	uxtb	r3, r3
 800293a:	001a      	movs	r2, r3
 800293c:	1dfb      	adds	r3, r7, #7
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d113      	bne.n	800296c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002948:	2220      	movs	r2, #32
 800294a:	431a      	orrs	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2241      	movs	r2, #65	@ 0x41
 8002954:	2120      	movs	r1, #32
 8002956:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2242      	movs	r2, #66	@ 0x42
 800295c:	2100      	movs	r1, #0
 800295e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2240      	movs	r2, #64	@ 0x40
 8002964:	2100      	movs	r1, #0
 8002966:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e00f      	b.n	800298c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	4013      	ands	r3, r2
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	425a      	negs	r2, r3
 800297c:	4153      	adcs	r3, r2
 800297e:	b2db      	uxtb	r3, r3
 8002980:	001a      	movs	r2, r3
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d0b5      	beq.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b004      	add	sp, #16
 8002992:	bd80      	pop	{r7, pc}

08002994 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029a0:	e032      	b.n	8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 f87d 	bl	8002aa8 <I2C_IsErrorOccurred>
 80029ae:	1e03      	subs	r3, r0, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e030      	b.n	8002a18 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3301      	adds	r3, #1
 80029ba:	d025      	beq.n	8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029bc:	f7ff f8e8 	bl	8001b90 <HAL_GetTick>
 80029c0:	0002      	movs	r2, r0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d302      	bcc.n	80029d2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11a      	bne.n	8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2202      	movs	r2, #2
 80029da:	4013      	ands	r3, r2
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d013      	beq.n	8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e4:	2220      	movs	r2, #32
 80029e6:	431a      	orrs	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2241      	movs	r2, #65	@ 0x41
 80029f0:	2120      	movs	r1, #32
 80029f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2242      	movs	r2, #66	@ 0x42
 80029f8:	2100      	movs	r1, #0
 80029fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2240      	movs	r2, #64	@ 0x40
 8002a00:	2100      	movs	r1, #0
 8002a02:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e007      	b.n	8002a18 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d1c5      	bne.n	80029a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b004      	add	sp, #16
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a2c:	e02f      	b.n	8002a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 f837 	bl	8002aa8 <I2C_IsErrorOccurred>
 8002a3a:	1e03      	subs	r3, r0, #0
 8002a3c:	d001      	beq.n	8002a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e02d      	b.n	8002a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7ff f8a5 	bl	8001b90 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11a      	bne.n	8002a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d013      	beq.n	8002a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2241      	movs	r2, #65	@ 0x41
 8002a76:	2120      	movs	r1, #32
 8002a78:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2242      	movs	r2, #66	@ 0x42
 8002a7e:	2100      	movs	r1, #0
 8002a80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2240      	movs	r2, #64	@ 0x40
 8002a86:	2100      	movs	r1, #0
 8002a88:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e007      	b.n	8002a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2220      	movs	r2, #32
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d1c8      	bne.n	8002a2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b004      	add	sp, #16
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	@ 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab4:	2327      	movs	r3, #39	@ 0x27
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2210      	movs	r2, #16
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d100      	bne.n	8002ad6 <I2C_IsErrorOccurred+0x2e>
 8002ad4:	e079      	b.n	8002bca <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2210      	movs	r2, #16
 8002adc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ade:	e057      	b.n	8002b90 <I2C_IsErrorOccurred+0xe8>
 8002ae0:	2227      	movs	r2, #39	@ 0x27
 8002ae2:	18bb      	adds	r3, r7, r2
 8002ae4:	18ba      	adds	r2, r7, r2
 8002ae6:	7812      	ldrb	r2, [r2, #0]
 8002ae8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3301      	adds	r3, #1
 8002aee:	d04f      	beq.n	8002b90 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	f7ff f84e 	bl	8001b90 <HAL_GetTick>
 8002af4:	0002      	movs	r2, r0
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d302      	bcc.n	8002b06 <I2C_IsErrorOccurred+0x5e>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d144      	bne.n	8002b90 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	01db      	lsls	r3, r3, #7
 8002b10:	4013      	ands	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b14:	2013      	movs	r0, #19
 8002b16:	183b      	adds	r3, r7, r0
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	2142      	movs	r1, #66	@ 0x42
 8002b1c:	5c52      	ldrb	r2, [r2, r1]
 8002b1e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	2380      	movs	r3, #128	@ 0x80
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d126      	bne.n	8002b82 <I2C_IsErrorOccurred+0xda>
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	01db      	lsls	r3, r3, #7
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d021      	beq.n	8002b82 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002b3e:	183b      	adds	r3, r7, r0
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d01d      	beq.n	8002b82 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2180      	movs	r1, #128	@ 0x80
 8002b52:	01c9      	lsls	r1, r1, #7
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b58:	f7ff f81a 	bl	8001b90 <HAL_GetTick>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b60:	e00f      	b.n	8002b82 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b62:	f7ff f815 	bl	8001b90 <HAL_GetTick>
 8002b66:	0002      	movs	r2, r0
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b19      	cmp	r3, #25
 8002b6e:	d908      	bls.n	8002b82 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	2220      	movs	r2, #32
 8002b74:	4313      	orrs	r3, r2
 8002b76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b78:	2327      	movs	r3, #39	@ 0x27
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]

              break;
 8002b80:	e006      	b.n	8002b90 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d1e8      	bne.n	8002b62 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2220      	movs	r2, #32
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d004      	beq.n	8002ba8 <I2C_IsErrorOccurred+0x100>
 8002b9e:	2327      	movs	r3, #39	@ 0x27
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d09b      	beq.n	8002ae0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ba8:	2327      	movs	r3, #39	@ 0x27
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bc2:	2327      	movs	r3, #39	@ 0x27
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	2380      	movs	r3, #128	@ 0x80
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d00c      	beq.n	8002bf6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	2201      	movs	r2, #1
 8002be0:	4313      	orrs	r3, r2
 8002be2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2280      	movs	r2, #128	@ 0x80
 8002bea:	0052      	lsls	r2, r2, #1
 8002bec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bee:	2327      	movs	r3, #39	@ 0x27
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	2380      	movs	r3, #128	@ 0x80
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d00c      	beq.n	8002c1a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2208      	movs	r2, #8
 8002c04:	4313      	orrs	r3, r2
 8002c06:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2280      	movs	r2, #128	@ 0x80
 8002c0e:	00d2      	lsls	r2, r2, #3
 8002c10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c12:	2327      	movs	r3, #39	@ 0x27
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d00c      	beq.n	8002c3e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	2202      	movs	r2, #2
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2280      	movs	r2, #128	@ 0x80
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c36:	2327      	movs	r3, #39	@ 0x27
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002c3e:	2327      	movs	r3, #39	@ 0x27
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01d      	beq.n	8002c84 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f7ff fe28 	bl	80028a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	490e      	ldr	r1, [pc, #56]	@ (8002c94 <I2C_IsErrorOccurred+0x1ec>)
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2241      	movs	r2, #65	@ 0x41
 8002c70:	2120      	movs	r1, #32
 8002c72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2242      	movs	r2, #66	@ 0x42
 8002c78:	2100      	movs	r1, #0
 8002c7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2240      	movs	r2, #64	@ 0x40
 8002c80:	2100      	movs	r1, #0
 8002c82:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002c84:	2327      	movs	r3, #39	@ 0x27
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	781b      	ldrb	r3, [r3, #0]
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b00a      	add	sp, #40	@ 0x28
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	fe00e800 	.word	0xfe00e800

08002c98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	0008      	movs	r0, r1
 8002ca2:	0011      	movs	r1, r2
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	240a      	movs	r4, #10
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	1c02      	adds	r2, r0, #0
 8002cac:	801a      	strh	r2, [r3, #0]
 8002cae:	2009      	movs	r0, #9
 8002cb0:	183b      	adds	r3, r7, r0
 8002cb2:	1c0a      	adds	r2, r1, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	059b      	lsls	r3, r3, #22
 8002cbc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cbe:	183b      	adds	r3, r7, r0
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	0419      	lsls	r1, r3, #16
 8002cc4:	23ff      	movs	r3, #255	@ 0xff
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ce2:	0d51      	lsrs	r1, r2, #21
 8002ce4:	2280      	movs	r2, #128	@ 0x80
 8002ce6:	00d2      	lsls	r2, r2, #3
 8002ce8:	400a      	ands	r2, r1
 8002cea:	4907      	ldr	r1, [pc, #28]	@ (8002d08 <I2C_TransferConfig+0x70>)
 8002cec:	430a      	orrs	r2, r1
 8002cee:	43d2      	mvns	r2, r2
 8002cf0:	401a      	ands	r2, r3
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b007      	add	sp, #28
 8002d04:	bd90      	pop	{r4, r7, pc}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	03ff63ff 	.word	0x03ff63ff

08002d0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2241      	movs	r2, #65	@ 0x41
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d138      	bne.n	8002d94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2240      	movs	r2, #64	@ 0x40
 8002d26:	5c9b      	ldrb	r3, [r3, r2]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e032      	b.n	8002d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2240      	movs	r2, #64	@ 0x40
 8002d34:	2101      	movs	r1, #1
 8002d36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2241      	movs	r2, #65	@ 0x41
 8002d3c:	2124      	movs	r1, #36	@ 0x24
 8002d3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4911      	ldr	r1, [pc, #68]	@ (8002da0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2241      	movs	r2, #65	@ 0x41
 8002d84:	2120      	movs	r1, #32
 8002d86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2240      	movs	r2, #64	@ 0x40
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	0018      	movs	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			@ (mov r8, r8)
 8002da0:	ffffefff 	.word	0xffffefff

08002da4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2241      	movs	r2, #65	@ 0x41
 8002db2:	5c9b      	ldrb	r3, [r3, r2]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d139      	bne.n	8002e2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2240      	movs	r2, #64	@ 0x40
 8002dbe:	5c9b      	ldrb	r3, [r3, r2]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e033      	b.n	8002e30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2240      	movs	r2, #64	@ 0x40
 8002dcc:	2101      	movs	r1, #1
 8002dce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2241      	movs	r2, #65	@ 0x41
 8002dd4:	2124      	movs	r1, #36	@ 0x24
 8002dd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2101      	movs	r1, #1
 8002de4:	438a      	bics	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a11      	ldr	r2, [pc, #68]	@ (8002e38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2241      	movs	r2, #65	@ 0x41
 8002e1e:	2120      	movs	r1, #32
 8002e20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2240      	movs	r2, #64	@ 0x40
 8002e26:	2100      	movs	r1, #0
 8002e28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
  }
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b004      	add	sp, #16
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	fffff0ff 	.word	0xfffff0ff

08002e3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e44:	4b19      	ldr	r3, [pc, #100]	@ (8002eac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a19      	ldr	r2, [pc, #100]	@ (8002eb0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	4b17      	ldr	r3, [pc, #92]	@ (8002eac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	2380      	movs	r3, #128	@ 0x80
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d11f      	bne.n	8002ea0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002e60:	4b14      	ldr	r3, [pc, #80]	@ (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	0013      	movs	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	189b      	adds	r3, r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4912      	ldr	r1, [pc, #72]	@ (8002eb8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7fd f950 	bl	8000114 <__udivsi3>
 8002e74:	0003      	movs	r3, r0
 8002e76:	3301      	adds	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e7a:	e008      	b.n	8002e8e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	e001      	b.n	8002e8e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e009      	b.n	8002ea2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	401a      	ands	r2, r3
 8002e98:	2380      	movs	r3, #128	@ 0x80
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d0ed      	beq.n	8002e7c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b004      	add	sp, #16
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			@ (mov r8, r8)
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	fffff9ff 	.word	0xfffff9ff
 8002eb4:	20000014 	.word	0x20000014
 8002eb8:	000f4240 	.word	0x000f4240

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e2f3      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d100      	bne.n	8002eda <HAL_RCC_OscConfig+0x1e>
 8002ed8:	e07c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eda:	4bc3      	ldr	r3, [pc, #780]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2238      	movs	r2, #56	@ 0x38
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee4:	4bc0      	ldr	r3, [pc, #768]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	4013      	ands	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d102      	bne.n	8002efa <HAL_RCC_OscConfig+0x3e>
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d002      	beq.n	8002f00 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	4bb9      	ldr	r3, [pc, #740]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	029b      	lsls	r3, r3, #10
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d062      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x116>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d15e      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e2ce      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	025b      	lsls	r3, r3, #9
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_OscConfig+0x78>
 8002f24:	4bb0      	ldr	r3, [pc, #704]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4baf      	ldr	r3, [pc, #700]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f2a:	2180      	movs	r1, #128	@ 0x80
 8002f2c:	0249      	lsls	r1, r1, #9
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e020      	b.n	8002f76 <HAL_RCC_OscConfig+0xba>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	23a0      	movs	r3, #160	@ 0xa0
 8002f3a:	02db      	lsls	r3, r3, #11
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d10e      	bne.n	8002f5e <HAL_RCC_OscConfig+0xa2>
 8002f40:	4ba9      	ldr	r3, [pc, #676]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4ba8      	ldr	r3, [pc, #672]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f46:	2180      	movs	r1, #128	@ 0x80
 8002f48:	02c9      	lsls	r1, r1, #11
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	4ba6      	ldr	r3, [pc, #664]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4ba5      	ldr	r3, [pc, #660]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f54:	2180      	movs	r1, #128	@ 0x80
 8002f56:	0249      	lsls	r1, r1, #9
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e00b      	b.n	8002f76 <HAL_RCC_OscConfig+0xba>
 8002f5e:	4ba2      	ldr	r3, [pc, #648]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4ba1      	ldr	r3, [pc, #644]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f64:	49a1      	ldr	r1, [pc, #644]	@ (80031ec <HAL_RCC_OscConfig+0x330>)
 8002f66:	400a      	ands	r2, r1
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	4b9f      	ldr	r3, [pc, #636]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4b9e      	ldr	r3, [pc, #632]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f70:	499f      	ldr	r1, [pc, #636]	@ (80031f0 <HAL_RCC_OscConfig+0x334>)
 8002f72:	400a      	ands	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d014      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fe07 	bl	8001b90 <HAL_GetTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe fe02 	bl	8001b90 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	@ 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e28d      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f9a:	4b93      	ldr	r3, [pc, #588]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	2380      	movs	r3, #128	@ 0x80
 8002fa0:	029b      	lsls	r3, r3, #10
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0xcc>
 8002fa6:	e015      	b.n	8002fd4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fdf2 	bl	8001b90 <HAL_GetTick>
 8002fac:	0003      	movs	r3, r0
 8002fae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb2:	f7fe fded 	bl	8001b90 <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b64      	cmp	r3, #100	@ 0x64
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e278      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fc4:	4b88      	ldr	r3, [pc, #544]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	029b      	lsls	r3, r3, #10
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0xf6>
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d100      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x124>
 8002fde:	e099      	b.n	8003114 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe0:	4b81      	ldr	r3, [pc, #516]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2238      	movs	r2, #56	@ 0x38
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fea:	4b7f      	ldr	r3, [pc, #508]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2203      	movs	r2, #3
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d102      	bne.n	8003000 <HAL_RCC_OscConfig+0x144>
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d002      	beq.n	8003006 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d135      	bne.n	8003072 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003006:	4b78      	ldr	r3, [pc, #480]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	2380      	movs	r3, #128	@ 0x80
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4013      	ands	r3, r2
 8003010:	d005      	beq.n	800301e <HAL_RCC_OscConfig+0x162>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e24b      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b72      	ldr	r3, [pc, #456]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a74      	ldr	r2, [pc, #464]	@ (80031f4 <HAL_RCC_OscConfig+0x338>)
 8003024:	4013      	ands	r3, r2
 8003026:	0019      	movs	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	4b6e      	ldr	r3, [pc, #440]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d112      	bne.n	8003060 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800303a:	4b6b      	ldr	r3, [pc, #428]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a6e      	ldr	r2, [pc, #440]	@ (80031f8 <HAL_RCC_OscConfig+0x33c>)
 8003040:	4013      	ands	r3, r2
 8003042:	0019      	movs	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	4b67      	ldr	r3, [pc, #412]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 800304a:	430a      	orrs	r2, r1
 800304c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800304e:	4b66      	ldr	r3, [pc, #408]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	0adb      	lsrs	r3, r3, #11
 8003054:	2207      	movs	r2, #7
 8003056:	4013      	ands	r3, r2
 8003058:	4a68      	ldr	r2, [pc, #416]	@ (80031fc <HAL_RCC_OscConfig+0x340>)
 800305a:	40da      	lsrs	r2, r3
 800305c:	4b68      	ldr	r3, [pc, #416]	@ (8003200 <HAL_RCC_OscConfig+0x344>)
 800305e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003060:	4b68      	ldr	r3, [pc, #416]	@ (8003204 <HAL_RCC_OscConfig+0x348>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0018      	movs	r0, r3
 8003066:	f7fe fd37 	bl	8001ad8 <HAL_InitTick>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d051      	beq.n	8003112 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e221      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d030      	beq.n	80030dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800307a:	4b5b      	ldr	r3, [pc, #364]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a5e      	ldr	r2, [pc, #376]	@ (80031f8 <HAL_RCC_OscConfig+0x33c>)
 8003080:	4013      	ands	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	4b57      	ldr	r3, [pc, #348]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 800308a:	430a      	orrs	r2, r1
 800308c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800308e:	4b56      	ldr	r3, [pc, #344]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b55      	ldr	r3, [pc, #340]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8003094:	2180      	movs	r1, #128	@ 0x80
 8003096:	0049      	lsls	r1, r1, #1
 8003098:	430a      	orrs	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fd78 	bl	8001b90 <HAL_GetTick>
 80030a0:	0003      	movs	r3, r0
 80030a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fe fd73 	bl	8001b90 <HAL_GetTick>
 80030aa:	0002      	movs	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1fe      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b8:	4b4b      	ldr	r3, [pc, #300]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4013      	ands	r3, r2
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b48      	ldr	r3, [pc, #288]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a4a      	ldr	r2, [pc, #296]	@ (80031f4 <HAL_RCC_OscConfig+0x338>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	021a      	lsls	r2, r3, #8
 80030d4:	4b44      	ldr	r3, [pc, #272]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	e01b      	b.n	8003114 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80030dc:	4b42      	ldr	r3, [pc, #264]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b41      	ldr	r3, [pc, #260]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 80030e2:	4949      	ldr	r1, [pc, #292]	@ (8003208 <HAL_RCC_OscConfig+0x34c>)
 80030e4:	400a      	ands	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fd52 	bl	8001b90 <HAL_GetTick>
 80030ec:	0003      	movs	r3, r0
 80030ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f2:	f7fe fd4d 	bl	8001b90 <HAL_GetTick>
 80030f6:	0002      	movs	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e1d8      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003104:	4b38      	ldr	r3, [pc, #224]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4013      	ands	r3, r2
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x236>
 8003110:	e000      	b.n	8003114 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003112:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2208      	movs	r2, #8
 800311a:	4013      	ands	r3, r2
 800311c:	d047      	beq.n	80031ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800311e:	4b32      	ldr	r3, [pc, #200]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2238      	movs	r2, #56	@ 0x38
 8003124:	4013      	ands	r3, r2
 8003126:	2b18      	cmp	r3, #24
 8003128:	d10a      	bne.n	8003140 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800312a:	4b2f      	ldr	r3, [pc, #188]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 800312c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312e:	2202      	movs	r2, #2
 8003130:	4013      	ands	r3, r2
 8003132:	d03c      	beq.n	80031ae <HAL_RCC_OscConfig+0x2f2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d138      	bne.n	80031ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e1ba      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d019      	beq.n	800317c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003148:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 800314a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800314c:	4b26      	ldr	r3, [pc, #152]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 800314e:	2101      	movs	r1, #1
 8003150:	430a      	orrs	r2, r1
 8003152:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe fd1c 	bl	8001b90 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315e:	f7fe fd17 	bl	8001b90 <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1a2      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003170:	4b1d      	ldr	r3, [pc, #116]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8003172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003174:	2202      	movs	r2, #2
 8003176:	4013      	ands	r3, r2
 8003178:	d0f1      	beq.n	800315e <HAL_RCC_OscConfig+0x2a2>
 800317a:	e018      	b.n	80031ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800317c:	4b1a      	ldr	r3, [pc, #104]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 800317e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003180:	4b19      	ldr	r3, [pc, #100]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 8003182:	2101      	movs	r1, #1
 8003184:	438a      	bics	r2, r1
 8003186:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fd02 	bl	8001b90 <HAL_GetTick>
 800318c:	0003      	movs	r3, r0
 800318e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003192:	f7fe fcfd 	bl	8001b90 <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e188      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a4:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 80031a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a8:	2202      	movs	r2, #2
 80031aa:	4013      	ands	r3, r2
 80031ac:	d1f1      	bne.n	8003192 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2204      	movs	r2, #4
 80031b4:	4013      	ands	r3, r2
 80031b6:	d100      	bne.n	80031ba <HAL_RCC_OscConfig+0x2fe>
 80031b8:	e0c6      	b.n	8003348 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ba:	231f      	movs	r3, #31
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031c2:	4b09      	ldr	r3, [pc, #36]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2238      	movs	r2, #56	@ 0x38
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d11e      	bne.n	800320c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80031ce:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <HAL_RCC_OscConfig+0x32c>)
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	2202      	movs	r2, #2
 80031d4:	4013      	ands	r3, r2
 80031d6:	d100      	bne.n	80031da <HAL_RCC_OscConfig+0x31e>
 80031d8:	e0b6      	b.n	8003348 <HAL_RCC_OscConfig+0x48c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d000      	beq.n	80031e4 <HAL_RCC_OscConfig+0x328>
 80031e2:	e0b1      	b.n	8003348 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e166      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
 80031e8:	40021000 	.word	0x40021000
 80031ec:	fffeffff 	.word	0xfffeffff
 80031f0:	fffbffff 	.word	0xfffbffff
 80031f4:	ffff80ff 	.word	0xffff80ff
 80031f8:	ffffc7ff 	.word	0xffffc7ff
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	20000014 	.word	0x20000014
 8003204:	20000018 	.word	0x20000018
 8003208:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800320c:	4bac      	ldr	r3, [pc, #688]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 800320e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	055b      	lsls	r3, r3, #21
 8003214:	4013      	ands	r3, r2
 8003216:	d101      	bne.n	800321c <HAL_RCC_OscConfig+0x360>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x362>
 800321c:	2300      	movs	r3, #0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d011      	beq.n	8003246 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	4ba7      	ldr	r3, [pc, #668]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003226:	4ba6      	ldr	r3, [pc, #664]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003228:	2180      	movs	r1, #128	@ 0x80
 800322a:	0549      	lsls	r1, r1, #21
 800322c:	430a      	orrs	r2, r1
 800322e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003230:	4ba3      	ldr	r3, [pc, #652]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003232:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	055b      	lsls	r3, r3, #21
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800323e:	231f      	movs	r3, #31
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003246:	4b9f      	ldr	r3, [pc, #636]	@ (80034c4 <HAL_RCC_OscConfig+0x608>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	2380      	movs	r3, #128	@ 0x80
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4013      	ands	r3, r2
 8003250:	d11a      	bne.n	8003288 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003252:	4b9c      	ldr	r3, [pc, #624]	@ (80034c4 <HAL_RCC_OscConfig+0x608>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b9b      	ldr	r3, [pc, #620]	@ (80034c4 <HAL_RCC_OscConfig+0x608>)
 8003258:	2180      	movs	r1, #128	@ 0x80
 800325a:	0049      	lsls	r1, r1, #1
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003260:	f7fe fc96 	bl	8001b90 <HAL_GetTick>
 8003264:	0003      	movs	r3, r0
 8003266:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326a:	f7fe fc91 	bl	8001b90 <HAL_GetTick>
 800326e:	0002      	movs	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e11c      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327c:	4b91      	ldr	r3, [pc, #580]	@ (80034c4 <HAL_RCC_OscConfig+0x608>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	2380      	movs	r3, #128	@ 0x80
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4013      	ands	r3, r2
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x3e2>
 8003290:	4b8b      	ldr	r3, [pc, #556]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003292:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003294:	4b8a      	ldr	r3, [pc, #552]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003296:	2101      	movs	r1, #1
 8003298:	430a      	orrs	r2, r1
 800329a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800329c:	e01c      	b.n	80032d8 <HAL_RCC_OscConfig+0x41c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x404>
 80032a6:	4b86      	ldr	r3, [pc, #536]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80032a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032aa:	4b85      	ldr	r3, [pc, #532]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80032ac:	2104      	movs	r1, #4
 80032ae:	430a      	orrs	r2, r1
 80032b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032b2:	4b83      	ldr	r3, [pc, #524]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80032b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032b6:	4b82      	ldr	r3, [pc, #520]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80032b8:	2101      	movs	r1, #1
 80032ba:	430a      	orrs	r2, r1
 80032bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0x41c>
 80032c0:	4b7f      	ldr	r3, [pc, #508]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80032c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032c4:	4b7e      	ldr	r3, [pc, #504]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80032c6:	2101      	movs	r1, #1
 80032c8:	438a      	bics	r2, r1
 80032ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032cc:	4b7c      	ldr	r3, [pc, #496]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80032ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032d0:	4b7b      	ldr	r3, [pc, #492]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80032d2:	2104      	movs	r1, #4
 80032d4:	438a      	bics	r2, r1
 80032d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d014      	beq.n	800330a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe fc56 	bl	8001b90 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e8:	e009      	b.n	80032fe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fe fc51 	bl	8001b90 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	4a74      	ldr	r2, [pc, #464]	@ (80034c8 <HAL_RCC_OscConfig+0x60c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0db      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fe:	4b70      	ldr	r3, [pc, #448]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003302:	2202      	movs	r2, #2
 8003304:	4013      	ands	r3, r2
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x42e>
 8003308:	e013      	b.n	8003332 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fe fc41 	bl	8001b90 <HAL_GetTick>
 800330e:	0003      	movs	r3, r0
 8003310:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003312:	e009      	b.n	8003328 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe fc3c 	bl	8001b90 <HAL_GetTick>
 8003318:	0002      	movs	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	4a6a      	ldr	r2, [pc, #424]	@ (80034c8 <HAL_RCC_OscConfig+0x60c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0c6      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003328:	4b65      	ldr	r3, [pc, #404]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 800332a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332c:	2202      	movs	r2, #2
 800332e:	4013      	ands	r3, r2
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003332:	231f      	movs	r3, #31
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800333c:	4b60      	ldr	r3, [pc, #384]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 800333e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003340:	4b5f      	ldr	r3, [pc, #380]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003342:	4962      	ldr	r1, [pc, #392]	@ (80034cc <HAL_RCC_OscConfig+0x610>)
 8003344:	400a      	ands	r2, r1
 8003346:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d100      	bne.n	8003352 <HAL_RCC_OscConfig+0x496>
 8003350:	e0b0      	b.n	80034b4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003352:	4b5b      	ldr	r3, [pc, #364]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2238      	movs	r2, #56	@ 0x38
 8003358:	4013      	ands	r3, r2
 800335a:	2b10      	cmp	r3, #16
 800335c:	d100      	bne.n	8003360 <HAL_RCC_OscConfig+0x4a4>
 800335e:	e078      	b.n	8003452 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d153      	bne.n	8003410 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003368:	4b55      	ldr	r3, [pc, #340]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b54      	ldr	r3, [pc, #336]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 800336e:	4958      	ldr	r1, [pc, #352]	@ (80034d0 <HAL_RCC_OscConfig+0x614>)
 8003370:	400a      	ands	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe fc0c 	bl	8001b90 <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337e:	f7fe fc07 	bl	8001b90 <HAL_GetTick>
 8003382:	0002      	movs	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e092      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003390:	4b4b      	ldr	r3, [pc, #300]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2380      	movs	r3, #128	@ 0x80
 8003396:	049b      	lsls	r3, r3, #18
 8003398:	4013      	ands	r3, r2
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800339c:	4b48      	ldr	r3, [pc, #288]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a4c      	ldr	r2, [pc, #304]	@ (80034d4 <HAL_RCC_OscConfig+0x618>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	0019      	movs	r1, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1a      	ldr	r2, [r3, #32]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	431a      	orrs	r2, r3
 80033c4:	4b3e      	ldr	r3, [pc, #248]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80033c6:	430a      	orrs	r2, r1
 80033c8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ca:	4b3d      	ldr	r3, [pc, #244]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b3c      	ldr	r3, [pc, #240]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80033d0:	2180      	movs	r1, #128	@ 0x80
 80033d2:	0449      	lsls	r1, r1, #17
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80033d8:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	4b38      	ldr	r3, [pc, #224]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 80033de:	2180      	movs	r1, #128	@ 0x80
 80033e0:	0549      	lsls	r1, r1, #21
 80033e2:	430a      	orrs	r2, r1
 80033e4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fe fbd3 	bl	8001b90 <HAL_GetTick>
 80033ea:	0003      	movs	r3, r0
 80033ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe fbce 	bl	8001b90 <HAL_GetTick>
 80033f4:	0002      	movs	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e059      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	4b2f      	ldr	r3, [pc, #188]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	2380      	movs	r3, #128	@ 0x80
 8003408:	049b      	lsls	r3, r3, #18
 800340a:	4013      	ands	r3, r2
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x534>
 800340e:	e051      	b.n	80034b4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003410:	4b2b      	ldr	r3, [pc, #172]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b2a      	ldr	r3, [pc, #168]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003416:	492e      	ldr	r1, [pc, #184]	@ (80034d0 <HAL_RCC_OscConfig+0x614>)
 8003418:	400a      	ands	r2, r1
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe fbb8 	bl	8001b90 <HAL_GetTick>
 8003420:	0003      	movs	r3, r0
 8003422:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003426:	f7fe fbb3 	bl	8001b90 <HAL_GetTick>
 800342a:	0002      	movs	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e03e      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003438:	4b21      	ldr	r3, [pc, #132]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2380      	movs	r3, #128	@ 0x80
 800343e:	049b      	lsls	r3, r3, #18
 8003440:	4013      	ands	r3, r2
 8003442:	d1f0      	bne.n	8003426 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003444:	4b1e      	ldr	r3, [pc, #120]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	4b1d      	ldr	r3, [pc, #116]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 800344a:	4923      	ldr	r1, [pc, #140]	@ (80034d8 <HAL_RCC_OscConfig+0x61c>)
 800344c:	400a      	ands	r2, r1
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	e030      	b.n	80034b4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e02b      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800345e:	4b18      	ldr	r3, [pc, #96]	@ (80034c0 <HAL_RCC_OscConfig+0x604>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2203      	movs	r2, #3
 8003468:	401a      	ands	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	429a      	cmp	r2, r3
 8003470:	d11e      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2270      	movs	r2, #112	@ 0x70
 8003476:	401a      	ands	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d117      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	23fe      	movs	r3, #254	@ 0xfe
 8003484:	01db      	lsls	r3, r3, #7
 8003486:	401a      	ands	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d10e      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	23f8      	movs	r3, #248	@ 0xf8
 8003496:	039b      	lsls	r3, r3, #14
 8003498:	401a      	ands	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d106      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	0f5b      	lsrs	r3, r3, #29
 80034a6:	075a      	lsls	r2, r3, #29
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b008      	add	sp, #32
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
 80034c8:	00001388 	.word	0x00001388
 80034cc:	efffffff 	.word	0xefffffff
 80034d0:	feffffff 	.word	0xfeffffff
 80034d4:	1fc1808c 	.word	0x1fc1808c
 80034d8:	effefffc 	.word	0xeffefffc

080034dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0e9      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f0:	4b76      	ldr	r3, [pc, #472]	@ (80036cc <HAL_RCC_ClockConfig+0x1f0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2207      	movs	r2, #7
 80034f6:	4013      	ands	r3, r2
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d91e      	bls.n	800353c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b73      	ldr	r3, [pc, #460]	@ (80036cc <HAL_RCC_ClockConfig+0x1f0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2207      	movs	r2, #7
 8003504:	4393      	bics	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	4b70      	ldr	r3, [pc, #448]	@ (80036cc <HAL_RCC_ClockConfig+0x1f0>)
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003510:	f7fe fb3e 	bl	8001b90 <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003518:	e009      	b.n	800352e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351a:	f7fe fb39 	bl	8001b90 <HAL_GetTick>
 800351e:	0002      	movs	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	4a6a      	ldr	r2, [pc, #424]	@ (80036d0 <HAL_RCC_ClockConfig+0x1f4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e0ca      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800352e:	4b67      	ldr	r3, [pc, #412]	@ (80036cc <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2207      	movs	r2, #7
 8003534:	4013      	ands	r3, r2
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d1ee      	bne.n	800351a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2202      	movs	r2, #2
 8003542:	4013      	ands	r3, r2
 8003544:	d015      	beq.n	8003572 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2204      	movs	r2, #4
 800354c:	4013      	ands	r3, r2
 800354e:	d006      	beq.n	800355e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003550:	4b60      	ldr	r3, [pc, #384]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	4b5f      	ldr	r3, [pc, #380]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003556:	21e0      	movs	r1, #224	@ 0xe0
 8003558:	01c9      	lsls	r1, r1, #7
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355e:	4b5d      	ldr	r3, [pc, #372]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	4a5d      	ldr	r2, [pc, #372]	@ (80036d8 <HAL_RCC_ClockConfig+0x1fc>)
 8003564:	4013      	ands	r3, r2
 8003566:	0019      	movs	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b59      	ldr	r3, [pc, #356]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2201      	movs	r2, #1
 8003578:	4013      	ands	r3, r2
 800357a:	d057      	beq.n	800362c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d107      	bne.n	8003594 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003584:	4b53      	ldr	r3, [pc, #332]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2380      	movs	r3, #128	@ 0x80
 800358a:	029b      	lsls	r3, r3, #10
 800358c:	4013      	ands	r3, r2
 800358e:	d12b      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e097      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d107      	bne.n	80035ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359c:	4b4d      	ldr	r3, [pc, #308]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	049b      	lsls	r3, r3, #18
 80035a4:	4013      	ands	r3, r2
 80035a6:	d11f      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e08b      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035b4:	4b47      	ldr	r3, [pc, #284]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	2380      	movs	r3, #128	@ 0x80
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4013      	ands	r3, r2
 80035be:	d113      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e07f      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d106      	bne.n	80035da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035cc:	4b41      	ldr	r3, [pc, #260]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 80035ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d0:	2202      	movs	r2, #2
 80035d2:	4013      	ands	r3, r2
 80035d4:	d108      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e074      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035da:	4b3e      	ldr	r3, [pc, #248]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	2202      	movs	r2, #2
 80035e0:	4013      	ands	r3, r2
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e06d      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035e8:	4b3a      	ldr	r3, [pc, #232]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2207      	movs	r2, #7
 80035ee:	4393      	bics	r3, r2
 80035f0:	0019      	movs	r1, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	4b37      	ldr	r3, [pc, #220]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 80035f8:	430a      	orrs	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035fc:	f7fe fac8 	bl	8001b90 <HAL_GetTick>
 8003600:	0003      	movs	r3, r0
 8003602:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003604:	e009      	b.n	800361a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003606:	f7fe fac3 	bl	8001b90 <HAL_GetTick>
 800360a:	0002      	movs	r2, r0
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	4a2f      	ldr	r2, [pc, #188]	@ (80036d0 <HAL_RCC_ClockConfig+0x1f4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e054      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361a:	4b2e      	ldr	r3, [pc, #184]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2238      	movs	r2, #56	@ 0x38
 8003620:	401a      	ands	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	429a      	cmp	r2, r3
 800362a:	d1ec      	bne.n	8003606 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800362c:	4b27      	ldr	r3, [pc, #156]	@ (80036cc <HAL_RCC_ClockConfig+0x1f0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2207      	movs	r2, #7
 8003632:	4013      	ands	r3, r2
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d21e      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b24      	ldr	r3, [pc, #144]	@ (80036cc <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2207      	movs	r2, #7
 8003640:	4393      	bics	r3, r2
 8003642:	0019      	movs	r1, r3
 8003644:	4b21      	ldr	r3, [pc, #132]	@ (80036cc <HAL_RCC_ClockConfig+0x1f0>)
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800364c:	f7fe faa0 	bl	8001b90 <HAL_GetTick>
 8003650:	0003      	movs	r3, r0
 8003652:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003654:	e009      	b.n	800366a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003656:	f7fe fa9b 	bl	8001b90 <HAL_GetTick>
 800365a:	0002      	movs	r2, r0
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	4a1b      	ldr	r2, [pc, #108]	@ (80036d0 <HAL_RCC_ClockConfig+0x1f4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e02c      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800366a:	4b18      	ldr	r3, [pc, #96]	@ (80036cc <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2207      	movs	r2, #7
 8003670:	4013      	ands	r3, r2
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d1ee      	bne.n	8003656 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2204      	movs	r2, #4
 800367e:	4013      	ands	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003682:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	4a15      	ldr	r2, [pc, #84]	@ (80036dc <HAL_RCC_ClockConfig+0x200>)
 8003688:	4013      	ands	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003692:	430a      	orrs	r2, r1
 8003694:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003696:	f000 f829 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 800369a:	0001      	movs	r1, r0
 800369c:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f8>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	220f      	movs	r2, #15
 80036a4:	401a      	ands	r2, r3
 80036a6:	4b0e      	ldr	r3, [pc, #56]	@ (80036e0 <HAL_RCC_ClockConfig+0x204>)
 80036a8:	0092      	lsls	r2, r2, #2
 80036aa:	58d3      	ldr	r3, [r2, r3]
 80036ac:	221f      	movs	r2, #31
 80036ae:	4013      	ands	r3, r2
 80036b0:	000a      	movs	r2, r1
 80036b2:	40da      	lsrs	r2, r3
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_RCC_ClockConfig+0x208>)
 80036b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036b8:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <HAL_RCC_ClockConfig+0x20c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0018      	movs	r0, r3
 80036be:	f7fe fa0b 	bl	8001ad8 <HAL_InitTick>
 80036c2:	0003      	movs	r3, r0
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b004      	add	sp, #16
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40022000 	.word	0x40022000
 80036d0:	00001388 	.word	0x00001388
 80036d4:	40021000 	.word	0x40021000
 80036d8:	fffff0ff 	.word	0xfffff0ff
 80036dc:	ffff8fff 	.word	0xffff8fff
 80036e0:	08007dc0 	.word	0x08007dc0
 80036e4:	20000014 	.word	0x20000014
 80036e8:	20000018 	.word	0x20000018

080036ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036f2:	4b3c      	ldr	r3, [pc, #240]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2238      	movs	r2, #56	@ 0x38
 80036f8:	4013      	ands	r3, r2
 80036fa:	d10f      	bne.n	800371c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036fc:	4b39      	ldr	r3, [pc, #228]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	0adb      	lsrs	r3, r3, #11
 8003702:	2207      	movs	r2, #7
 8003704:	4013      	ands	r3, r2
 8003706:	2201      	movs	r2, #1
 8003708:	409a      	lsls	r2, r3
 800370a:	0013      	movs	r3, r2
 800370c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	4835      	ldr	r0, [pc, #212]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003712:	f7fc fcff 	bl	8000114 <__udivsi3>
 8003716:	0003      	movs	r3, r0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	e05d      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800371c:	4b31      	ldr	r3, [pc, #196]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2238      	movs	r2, #56	@ 0x38
 8003722:	4013      	ands	r3, r2
 8003724:	2b08      	cmp	r3, #8
 8003726:	d102      	bne.n	800372e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003728:	4b30      	ldr	r3, [pc, #192]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x100>)
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	e054      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372e:	4b2d      	ldr	r3, [pc, #180]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2238      	movs	r2, #56	@ 0x38
 8003734:	4013      	ands	r3, r2
 8003736:	2b10      	cmp	r3, #16
 8003738:	d138      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800373a:	4b2a      	ldr	r3, [pc, #168]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2203      	movs	r2, #3
 8003740:	4013      	ands	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003744:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	2207      	movs	r2, #7
 800374c:	4013      	ands	r3, r2
 800374e:	3301      	adds	r3, #1
 8003750:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d10d      	bne.n	8003774 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	4824      	ldr	r0, [pc, #144]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x100>)
 800375c:	f7fc fcda 	bl	8000114 <__udivsi3>
 8003760:	0003      	movs	r3, r0
 8003762:	0019      	movs	r1, r3
 8003764:	4b1f      	ldr	r3, [pc, #124]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	227f      	movs	r2, #127	@ 0x7f
 800376c:	4013      	ands	r3, r2
 800376e:	434b      	muls	r3, r1
 8003770:	617b      	str	r3, [r7, #20]
        break;
 8003772:	e00d      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	481c      	ldr	r0, [pc, #112]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003778:	f7fc fccc 	bl	8000114 <__udivsi3>
 800377c:	0003      	movs	r3, r0
 800377e:	0019      	movs	r1, r3
 8003780:	4b18      	ldr	r3, [pc, #96]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	227f      	movs	r2, #127	@ 0x7f
 8003788:	4013      	ands	r3, r2
 800378a:	434b      	muls	r3, r1
 800378c:	617b      	str	r3, [r7, #20]
        break;
 800378e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003790:	4b14      	ldr	r3, [pc, #80]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	0f5b      	lsrs	r3, r3, #29
 8003796:	2207      	movs	r2, #7
 8003798:	4013      	ands	r3, r2
 800379a:	3301      	adds	r3, #1
 800379c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	6978      	ldr	r0, [r7, #20]
 80037a2:	f7fc fcb7 	bl	8000114 <__udivsi3>
 80037a6:	0003      	movs	r3, r0
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	e015      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80037ac:	4b0d      	ldr	r3, [pc, #52]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2238      	movs	r2, #56	@ 0x38
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d103      	bne.n	80037c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80037b8:	2380      	movs	r3, #128	@ 0x80
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80037c0:	4b08      	ldr	r3, [pc, #32]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2238      	movs	r2, #56	@ 0x38
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b18      	cmp	r3, #24
 80037ca:	d103      	bne.n	80037d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80037cc:	23fa      	movs	r3, #250	@ 0xfa
 80037ce:	01db      	lsls	r3, r3, #7
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	e001      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037d8:	693b      	ldr	r3, [r7, #16]
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b006      	add	sp, #24
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	40021000 	.word	0x40021000
 80037e8:	00f42400 	.word	0x00f42400
 80037ec:	007a1200 	.word	0x007a1200

080037f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80037f8:	2313      	movs	r3, #19
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003800:	2312      	movs	r3, #18
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	029b      	lsls	r3, r3, #10
 8003810:	4013      	ands	r3, r2
 8003812:	d100      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003814:	e0a3      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003816:	2011      	movs	r0, #17
 8003818:	183b      	adds	r3, r7, r0
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800381e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003822:	2380      	movs	r3, #128	@ 0x80
 8003824:	055b      	lsls	r3, r3, #21
 8003826:	4013      	ands	r3, r2
 8003828:	d110      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800382c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800382e:	4b7b      	ldr	r3, [pc, #492]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003830:	2180      	movs	r1, #128	@ 0x80
 8003832:	0549      	lsls	r1, r1, #21
 8003834:	430a      	orrs	r2, r1
 8003836:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003838:	4b78      	ldr	r3, [pc, #480]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800383a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800383c:	2380      	movs	r3, #128	@ 0x80
 800383e:	055b      	lsls	r3, r3, #21
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003846:	183b      	adds	r3, r7, r0
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800384c:	4b74      	ldr	r3, [pc, #464]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b73      	ldr	r3, [pc, #460]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003852:	2180      	movs	r1, #128	@ 0x80
 8003854:	0049      	lsls	r1, r1, #1
 8003856:	430a      	orrs	r2, r1
 8003858:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800385a:	f7fe f999 	bl	8001b90 <HAL_GetTick>
 800385e:	0003      	movs	r3, r0
 8003860:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003862:	e00b      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003864:	f7fe f994 	bl	8001b90 <HAL_GetTick>
 8003868:	0002      	movs	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d904      	bls.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003872:	2313      	movs	r3, #19
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	2203      	movs	r2, #3
 8003878:	701a      	strb	r2, [r3, #0]
        break;
 800387a:	e005      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800387c:	4b68      	ldr	r3, [pc, #416]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	2380      	movs	r3, #128	@ 0x80
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4013      	ands	r3, r2
 8003886:	d0ed      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003888:	2313      	movs	r3, #19
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d154      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003892:	4b62      	ldr	r3, [pc, #392]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003894:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003896:	23c0      	movs	r3, #192	@ 0xc0
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4013      	ands	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d019      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d014      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038ae:	4b5b      	ldr	r3, [pc, #364]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038b8:	4b58      	ldr	r3, [pc, #352]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038bc:	4b57      	ldr	r3, [pc, #348]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038be:	2180      	movs	r1, #128	@ 0x80
 80038c0:	0249      	lsls	r1, r1, #9
 80038c2:	430a      	orrs	r2, r1
 80038c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038c6:	4b55      	ldr	r3, [pc, #340]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038ca:	4b54      	ldr	r3, [pc, #336]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038cc:	4956      	ldr	r1, [pc, #344]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80038ce:	400a      	ands	r2, r1
 80038d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038d2:	4b52      	ldr	r3, [pc, #328]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2201      	movs	r2, #1
 80038dc:	4013      	ands	r3, r2
 80038de:	d016      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fe f956 	bl	8001b90 <HAL_GetTick>
 80038e4:	0003      	movs	r3, r0
 80038e6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e8:	e00c      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	f7fe f951 	bl	8001b90 <HAL_GetTick>
 80038ee:	0002      	movs	r2, r0
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	4a4d      	ldr	r2, [pc, #308]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d904      	bls.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80038fa:	2313      	movs	r3, #19
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	2203      	movs	r2, #3
 8003900:	701a      	strb	r2, [r3, #0]
            break;
 8003902:	e004      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003904:	4b45      	ldr	r3, [pc, #276]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003908:	2202      	movs	r2, #2
 800390a:	4013      	ands	r3, r2
 800390c:	d0ed      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800390e:	2313      	movs	r3, #19
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003918:	4b40      	ldr	r3, [pc, #256]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	4a41      	ldr	r2, [pc, #260]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800391e:	4013      	ands	r3, r2
 8003920:	0019      	movs	r1, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	4b3d      	ldr	r3, [pc, #244]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003928:	430a      	orrs	r2, r1
 800392a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800392c:	e00c      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800392e:	2312      	movs	r3, #18
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2213      	movs	r2, #19
 8003934:	18ba      	adds	r2, r7, r2
 8003936:	7812      	ldrb	r2, [r2, #0]
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e005      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	2312      	movs	r3, #18
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	2213      	movs	r2, #19
 8003942:	18ba      	adds	r2, r7, r2
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003948:	2311      	movs	r3, #17
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d105      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003952:	4b32      	ldr	r3, [pc, #200]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003956:	4b31      	ldr	r3, [pc, #196]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003958:	4935      	ldr	r1, [pc, #212]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800395a:	400a      	ands	r2, r1
 800395c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	4013      	ands	r3, r2
 8003966:	d009      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003968:	4b2c      	ldr	r3, [pc, #176]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800396a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396c:	2203      	movs	r2, #3
 800396e:	4393      	bics	r3, r2
 8003970:	0019      	movs	r1, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4b29      	ldr	r3, [pc, #164]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003978:	430a      	orrs	r2, r1
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2220      	movs	r2, #32
 8003982:	4013      	ands	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003986:	4b25      	ldr	r3, [pc, #148]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800398c:	4013      	ands	r3, r2
 800398e:	0019      	movs	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	4b21      	ldr	r3, [pc, #132]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003996:	430a      	orrs	r2, r1
 8003998:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	01db      	lsls	r3, r3, #7
 80039a2:	4013      	ands	r3, r2
 80039a4:	d015      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039a6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	0899      	lsrs	r1, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039b4:	430a      	orrs	r2, r1
 80039b6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	2380      	movs	r3, #128	@ 0x80
 80039be:	05db      	lsls	r3, r3, #23
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d106      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80039c4:	4b15      	ldr	r3, [pc, #84]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	4b14      	ldr	r3, [pc, #80]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039ca:	2180      	movs	r1, #128	@ 0x80
 80039cc:	0249      	lsls	r1, r1, #9
 80039ce:	430a      	orrs	r2, r1
 80039d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	2380      	movs	r3, #128	@ 0x80
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	4013      	ands	r3, r2
 80039dc:	d016      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80039de:	4b0f      	ldr	r3, [pc, #60]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e2:	4a15      	ldr	r2, [pc, #84]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039ee:	430a      	orrs	r2, r1
 80039f0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	2380      	movs	r3, #128	@ 0x80
 80039f8:	01db      	lsls	r3, r3, #7
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d106      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80039fe:	4b07      	ldr	r3, [pc, #28]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	4b06      	ldr	r3, [pc, #24]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a04:	2180      	movs	r1, #128	@ 0x80
 8003a06:	0249      	lsls	r1, r1, #9
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003a0c:	2312      	movs	r3, #18
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	781b      	ldrb	r3, [r3, #0]
}
 8003a12:	0018      	movs	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b006      	add	sp, #24
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40007000 	.word	0x40007000
 8003a24:	fffffcff 	.word	0xfffffcff
 8003a28:	fffeffff 	.word	0xfffeffff
 8003a2c:	00001388 	.word	0x00001388
 8003a30:	efffffff 	.word	0xefffffff
 8003a34:	ffffcfff 	.word	0xffffcfff
 8003a38:	ffff3fff 	.word	0xffff3fff

08003a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e04a      	b.n	8003ae4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	223d      	movs	r2, #61	@ 0x3d
 8003a52:	5c9b      	ldrb	r3, [r3, r2]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d107      	bne.n	8003a6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	223c      	movs	r2, #60	@ 0x3c
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7fd ff67 	bl	8001938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	223d      	movs	r2, #61	@ 0x3d
 8003a6e:	2102      	movs	r1, #2
 8003a70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	0010      	movs	r0, r2
 8003a7e:	f000 f9ab 	bl	8003dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2248      	movs	r2, #72	@ 0x48
 8003a86:	2101      	movs	r1, #1
 8003a88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	223e      	movs	r2, #62	@ 0x3e
 8003a8e:	2101      	movs	r1, #1
 8003a90:	5499      	strb	r1, [r3, r2]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	223f      	movs	r2, #63	@ 0x3f
 8003a96:	2101      	movs	r1, #1
 8003a98:	5499      	strb	r1, [r3, r2]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2240      	movs	r2, #64	@ 0x40
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	5499      	strb	r1, [r3, r2]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2241      	movs	r2, #65	@ 0x41
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	5499      	strb	r1, [r3, r2]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2242      	movs	r2, #66	@ 0x42
 8003aae:	2101      	movs	r1, #1
 8003ab0:	5499      	strb	r1, [r3, r2]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2243      	movs	r2, #67	@ 0x43
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2244      	movs	r2, #68	@ 0x44
 8003abe:	2101      	movs	r1, #1
 8003ac0:	5499      	strb	r1, [r3, r2]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2245      	movs	r2, #69	@ 0x45
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	5499      	strb	r1, [r3, r2]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2246      	movs	r2, #70	@ 0x46
 8003ace:	2101      	movs	r1, #1
 8003ad0:	5499      	strb	r1, [r3, r2]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2247      	movs	r2, #71	@ 0x47
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	223d      	movs	r2, #61	@ 0x3d
 8003ade:	2101      	movs	r1, #1
 8003ae0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	223d      	movs	r2, #61	@ 0x3d
 8003af8:	5c9b      	ldrb	r3, [r3, r2]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d001      	beq.n	8003b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e037      	b.n	8003b74 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	223d      	movs	r2, #61	@ 0x3d
 8003b08:	2102      	movs	r1, #2
 8003b0a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2101      	movs	r1, #1
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <HAL_TIM_Base_Start_IT+0x90>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x44>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a15      	ldr	r2, [pc, #84]	@ (8003b80 <HAL_TIM_Base_Start_IT+0x94>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d116      	bne.n	8003b5e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	4a13      	ldr	r2, [pc, #76]	@ (8003b84 <HAL_TIM_Base_Start_IT+0x98>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d016      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x84>
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	2380      	movs	r3, #128	@ 0x80
 8003b46:	025b      	lsls	r3, r3, #9
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d011      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2101      	movs	r1, #1
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	e008      	b.n	8003b70 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2101      	movs	r1, #1
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e000      	b.n	8003b72 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b70:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b004      	add	sp, #16
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40000400 	.word	0x40000400
 8003b84:	00010007 	.word	0x00010007

08003b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d021      	beq.n	8003bec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2202      	movs	r2, #2
 8003bac:	4013      	ands	r3, r2
 8003bae:	d01d      	beq.n	8003bec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	4252      	negs	r2, r2
 8003bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d004      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f000 f8ea 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 8003bd4:	e007      	b.n	8003be6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 f8dd 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f000 f8e9 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d01e      	beq.n	8003c3a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2205      	movs	r2, #5
 8003c02:	4252      	negs	r2, r2
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	23c0      	movs	r3, #192	@ 0xc0
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4013      	ands	r3, r2
 8003c18:	d004      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f000 f8c3 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 8003c22:	e007      	b.n	8003c34 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 f8b6 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f000 f8c2 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d021      	beq.n	8003c86 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2208      	movs	r2, #8
 8003c46:	4013      	ands	r3, r2
 8003c48:	d01d      	beq.n	8003c86 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2209      	movs	r2, #9
 8003c50:	4252      	negs	r2, r2
 8003c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2204      	movs	r2, #4
 8003c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2203      	movs	r2, #3
 8003c62:	4013      	ands	r3, r2
 8003c64:	d004      	beq.n	8003c70 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f000 f89d 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 8003c6e:	e007      	b.n	8003c80 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f000 f890 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f000 f89c 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d022      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2210      	movs	r2, #16
 8003c92:	4013      	ands	r3, r2
 8003c94:	d01e      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2211      	movs	r2, #17
 8003c9c:	4252      	negs	r2, r2
 8003c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	23c0      	movs	r3, #192	@ 0xc0
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 f876 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 8003cbc:	e007      	b.n	8003cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f000 f869 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f000 f875 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d00c      	beq.n	8003cf6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d008      	beq.n	8003cf6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	4252      	negs	r2, r2
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7fc ffeb 	bl	8000ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2280      	movs	r2, #128	@ 0x80
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d104      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	2380      	movs	r3, #128	@ 0x80
 8003d02:	019b      	lsls	r3, r3, #6
 8003d04:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003d06:	d00b      	beq.n	8003d20 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2280      	movs	r2, #128	@ 0x80
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d007      	beq.n	8003d20 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1e      	ldr	r2, [pc, #120]	@ (8003d90 <HAL_TIM_IRQHandler+0x208>)
 8003d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f000 f8de 	bl	8003edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4013      	ands	r3, r2
 8003d28:	d00b      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2280      	movs	r2, #128	@ 0x80
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d007      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a17      	ldr	r2, [pc, #92]	@ (8003d94 <HAL_TIM_IRQHandler+0x20c>)
 8003d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f000 f8d5 	bl	8003eec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2240      	movs	r2, #64	@ 0x40
 8003d46:	4013      	ands	r3, r2
 8003d48:	d00c      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2240      	movs	r2, #64	@ 0x40
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d008      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2241      	movs	r2, #65	@ 0x41
 8003d58:	4252      	negs	r2, r2
 8003d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f000 f832 	bl	8003dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2220      	movs	r2, #32
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d00c      	beq.n	8003d86 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	4013      	ands	r3, r2
 8003d72:	d008      	beq.n	8003d86 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2221      	movs	r2, #33	@ 0x21
 8003d7a:	4252      	negs	r2, r2
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f000 f8a3 	bl	8003ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b004      	add	sp, #16
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	ffffdf7f 	.word	0xffffdf7f
 8003d94:	fffffeff 	.word	0xfffffeff

08003d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003da0:	46c0      	nop			@ (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc0:	46c0      	nop			@ (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd0:	46c0      	nop			@ (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a32      	ldr	r2, [pc, #200]	@ (8003eb4 <TIM_Base_SetConfig+0xdc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0x20>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a31      	ldr	r2, [pc, #196]	@ (8003eb8 <TIM_Base_SetConfig+0xe0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2270      	movs	r2, #112	@ 0x70
 8003dfc:	4393      	bics	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a29      	ldr	r2, [pc, #164]	@ (8003eb4 <TIM_Base_SetConfig+0xdc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00f      	beq.n	8003e32 <TIM_Base_SetConfig+0x5a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a28      	ldr	r2, [pc, #160]	@ (8003eb8 <TIM_Base_SetConfig+0xe0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00b      	beq.n	8003e32 <TIM_Base_SetConfig+0x5a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a27      	ldr	r2, [pc, #156]	@ (8003ebc <TIM_Base_SetConfig+0xe4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d007      	beq.n	8003e32 <TIM_Base_SetConfig+0x5a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a26      	ldr	r2, [pc, #152]	@ (8003ec0 <TIM_Base_SetConfig+0xe8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d003      	beq.n	8003e32 <TIM_Base_SetConfig+0x5a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a25      	ldr	r2, [pc, #148]	@ (8003ec4 <TIM_Base_SetConfig+0xec>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d108      	bne.n	8003e44 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a24      	ldr	r2, [pc, #144]	@ (8003ec8 <TIM_Base_SetConfig+0xf0>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2280      	movs	r2, #128	@ 0x80
 8003e48:	4393      	bics	r3, r2
 8003e4a:	001a      	movs	r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a11      	ldr	r2, [pc, #68]	@ (8003eb4 <TIM_Base_SetConfig+0xdc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d007      	beq.n	8003e82 <TIM_Base_SetConfig+0xaa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a12      	ldr	r2, [pc, #72]	@ (8003ec0 <TIM_Base_SetConfig+0xe8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d003      	beq.n	8003e82 <TIM_Base_SetConfig+0xaa>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a11      	ldr	r2, [pc, #68]	@ (8003ec4 <TIM_Base_SetConfig+0xec>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d103      	bne.n	8003e8a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2201      	movs	r2, #1
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d106      	bne.n	8003eaa <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	4393      	bics	r3, r2
 8003ea4:	001a      	movs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	611a      	str	r2, [r3, #16]
  }
}
 8003eaa:	46c0      	nop			@ (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b004      	add	sp, #16
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40002000 	.word	0x40002000
 8003ec0:	40014400 	.word	0x40014400
 8003ec4:	40014800 	.word	0x40014800
 8003ec8:	fffffcff 	.word	0xfffffcff

08003ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed4:	46c0      	nop			@ (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ee4:	46c0      	nop			@ (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ef4:	46c0      	nop			@ (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b002      	add	sp, #8
 8003efa:	bd80      	pop	{r7, pc}

08003efc <siprintf>:
 8003efc:	b40e      	push	{r1, r2, r3}
 8003efe:	b510      	push	{r4, lr}
 8003f00:	2400      	movs	r4, #0
 8003f02:	490c      	ldr	r1, [pc, #48]	@ (8003f34 <siprintf+0x38>)
 8003f04:	b09d      	sub	sp, #116	@ 0x74
 8003f06:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003f08:	9002      	str	r0, [sp, #8]
 8003f0a:	9006      	str	r0, [sp, #24]
 8003f0c:	9107      	str	r1, [sp, #28]
 8003f0e:	9104      	str	r1, [sp, #16]
 8003f10:	4809      	ldr	r0, [pc, #36]	@ (8003f38 <siprintf+0x3c>)
 8003f12:	490a      	ldr	r1, [pc, #40]	@ (8003f3c <siprintf+0x40>)
 8003f14:	cb04      	ldmia	r3!, {r2}
 8003f16:	9105      	str	r1, [sp, #20]
 8003f18:	6800      	ldr	r0, [r0, #0]
 8003f1a:	a902      	add	r1, sp, #8
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003f20:	f000 f9a8 	bl	8004274 <_svfiprintf_r>
 8003f24:	9b02      	ldr	r3, [sp, #8]
 8003f26:	701c      	strb	r4, [r3, #0]
 8003f28:	b01d      	add	sp, #116	@ 0x74
 8003f2a:	bc10      	pop	{r4}
 8003f2c:	bc08      	pop	{r3}
 8003f2e:	b003      	add	sp, #12
 8003f30:	4718      	bx	r3
 8003f32:	46c0      	nop			@ (mov r8, r8)
 8003f34:	7fffffff 	.word	0x7fffffff
 8003f38:	20000020 	.word	0x20000020
 8003f3c:	ffff0208 	.word	0xffff0208

08003f40 <memset>:
 8003f40:	0003      	movs	r3, r0
 8003f42:	1882      	adds	r2, r0, r2
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d100      	bne.n	8003f4a <memset+0xa>
 8003f48:	4770      	bx	lr
 8003f4a:	7019      	strb	r1, [r3, #0]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	e7f9      	b.n	8003f44 <memset+0x4>

08003f50 <__errno>:
 8003f50:	4b01      	ldr	r3, [pc, #4]	@ (8003f58 <__errno+0x8>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	4770      	bx	lr
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	20000020 	.word	0x20000020

08003f5c <__libc_init_array>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	2600      	movs	r6, #0
 8003f60:	4c0c      	ldr	r4, [pc, #48]	@ (8003f94 <__libc_init_array+0x38>)
 8003f62:	4d0d      	ldr	r5, [pc, #52]	@ (8003f98 <__libc_init_array+0x3c>)
 8003f64:	1b64      	subs	r4, r4, r5
 8003f66:	10a4      	asrs	r4, r4, #2
 8003f68:	42a6      	cmp	r6, r4
 8003f6a:	d109      	bne.n	8003f80 <__libc_init_array+0x24>
 8003f6c:	2600      	movs	r6, #0
 8003f6e:	f000 fc63 	bl	8004838 <_init>
 8003f72:	4c0a      	ldr	r4, [pc, #40]	@ (8003f9c <__libc_init_array+0x40>)
 8003f74:	4d0a      	ldr	r5, [pc, #40]	@ (8003fa0 <__libc_init_array+0x44>)
 8003f76:	1b64      	subs	r4, r4, r5
 8003f78:	10a4      	asrs	r4, r4, #2
 8003f7a:	42a6      	cmp	r6, r4
 8003f7c:	d105      	bne.n	8003f8a <__libc_init_array+0x2e>
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	00b3      	lsls	r3, r6, #2
 8003f82:	58eb      	ldr	r3, [r5, r3]
 8003f84:	4798      	blx	r3
 8003f86:	3601      	adds	r6, #1
 8003f88:	e7ee      	b.n	8003f68 <__libc_init_array+0xc>
 8003f8a:	00b3      	lsls	r3, r6, #2
 8003f8c:	58eb      	ldr	r3, [r5, r3]
 8003f8e:	4798      	blx	r3
 8003f90:	3601      	adds	r6, #1
 8003f92:	e7f2      	b.n	8003f7a <__libc_init_array+0x1e>
 8003f94:	08007e34 	.word	0x08007e34
 8003f98:	08007e34 	.word	0x08007e34
 8003f9c:	08007e38 	.word	0x08007e38
 8003fa0:	08007e34 	.word	0x08007e34

08003fa4 <__retarget_lock_acquire_recursive>:
 8003fa4:	4770      	bx	lr

08003fa6 <__retarget_lock_release_recursive>:
 8003fa6:	4770      	bx	lr

08003fa8 <memcpy>:
 8003fa8:	2300      	movs	r3, #0
 8003faa:	b510      	push	{r4, lr}
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d100      	bne.n	8003fb2 <memcpy+0xa>
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	5ccc      	ldrb	r4, [r1, r3]
 8003fb4:	54c4      	strb	r4, [r0, r3]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	e7f8      	b.n	8003fac <memcpy+0x4>
	...

08003fbc <_free_r>:
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	0005      	movs	r5, r0
 8003fc0:	1e0c      	subs	r4, r1, #0
 8003fc2:	d010      	beq.n	8003fe6 <_free_r+0x2a>
 8003fc4:	3c04      	subs	r4, #4
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	da00      	bge.n	8003fce <_free_r+0x12>
 8003fcc:	18e4      	adds	r4, r4, r3
 8003fce:	0028      	movs	r0, r5
 8003fd0:	f000 f8e0 	bl	8004194 <__malloc_lock>
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800404c <_free_r+0x90>)
 8003fd6:	6813      	ldr	r3, [r2, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <_free_r+0x2c>
 8003fdc:	6063      	str	r3, [r4, #4]
 8003fde:	6014      	str	r4, [r2, #0]
 8003fe0:	0028      	movs	r0, r5
 8003fe2:	f000 f8df 	bl	80041a4 <__malloc_unlock>
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	d908      	bls.n	8003ffe <_free_r+0x42>
 8003fec:	6820      	ldr	r0, [r4, #0]
 8003fee:	1821      	adds	r1, r4, r0
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	d1f3      	bne.n	8003fdc <_free_r+0x20>
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	1809      	adds	r1, r1, r0
 8003ffa:	6021      	str	r1, [r4, #0]
 8003ffc:	e7ee      	b.n	8003fdc <_free_r+0x20>
 8003ffe:	001a      	movs	r2, r3
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <_free_r+0x4e>
 8004006:	42a3      	cmp	r3, r4
 8004008:	d9f9      	bls.n	8003ffe <_free_r+0x42>
 800400a:	6811      	ldr	r1, [r2, #0]
 800400c:	1850      	adds	r0, r2, r1
 800400e:	42a0      	cmp	r0, r4
 8004010:	d10b      	bne.n	800402a <_free_r+0x6e>
 8004012:	6820      	ldr	r0, [r4, #0]
 8004014:	1809      	adds	r1, r1, r0
 8004016:	1850      	adds	r0, r2, r1
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	4283      	cmp	r3, r0
 800401c:	d1e0      	bne.n	8003fe0 <_free_r+0x24>
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	1841      	adds	r1, r0, r1
 8004024:	6011      	str	r1, [r2, #0]
 8004026:	6053      	str	r3, [r2, #4]
 8004028:	e7da      	b.n	8003fe0 <_free_r+0x24>
 800402a:	42a0      	cmp	r0, r4
 800402c:	d902      	bls.n	8004034 <_free_r+0x78>
 800402e:	230c      	movs	r3, #12
 8004030:	602b      	str	r3, [r5, #0]
 8004032:	e7d5      	b.n	8003fe0 <_free_r+0x24>
 8004034:	6820      	ldr	r0, [r4, #0]
 8004036:	1821      	adds	r1, r4, r0
 8004038:	428b      	cmp	r3, r1
 800403a:	d103      	bne.n	8004044 <_free_r+0x88>
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	1809      	adds	r1, r1, r0
 8004042:	6021      	str	r1, [r4, #0]
 8004044:	6063      	str	r3, [r4, #4]
 8004046:	6054      	str	r4, [r2, #4]
 8004048:	e7ca      	b.n	8003fe0 <_free_r+0x24>
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	20000768 	.word	0x20000768

08004050 <sbrk_aligned>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	4e0f      	ldr	r6, [pc, #60]	@ (8004090 <sbrk_aligned+0x40>)
 8004054:	000d      	movs	r5, r1
 8004056:	6831      	ldr	r1, [r6, #0]
 8004058:	0004      	movs	r4, r0
 800405a:	2900      	cmp	r1, #0
 800405c:	d102      	bne.n	8004064 <sbrk_aligned+0x14>
 800405e:	f000 fb95 	bl	800478c <_sbrk_r>
 8004062:	6030      	str	r0, [r6, #0]
 8004064:	0029      	movs	r1, r5
 8004066:	0020      	movs	r0, r4
 8004068:	f000 fb90 	bl	800478c <_sbrk_r>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d103      	bne.n	8004078 <sbrk_aligned+0x28>
 8004070:	2501      	movs	r5, #1
 8004072:	426d      	negs	r5, r5
 8004074:	0028      	movs	r0, r5
 8004076:	bd70      	pop	{r4, r5, r6, pc}
 8004078:	2303      	movs	r3, #3
 800407a:	1cc5      	adds	r5, r0, #3
 800407c:	439d      	bics	r5, r3
 800407e:	42a8      	cmp	r0, r5
 8004080:	d0f8      	beq.n	8004074 <sbrk_aligned+0x24>
 8004082:	1a29      	subs	r1, r5, r0
 8004084:	0020      	movs	r0, r4
 8004086:	f000 fb81 	bl	800478c <_sbrk_r>
 800408a:	3001      	adds	r0, #1
 800408c:	d1f2      	bne.n	8004074 <sbrk_aligned+0x24>
 800408e:	e7ef      	b.n	8004070 <sbrk_aligned+0x20>
 8004090:	20000764 	.word	0x20000764

08004094 <_malloc_r>:
 8004094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004096:	2203      	movs	r2, #3
 8004098:	1ccb      	adds	r3, r1, #3
 800409a:	4393      	bics	r3, r2
 800409c:	3308      	adds	r3, #8
 800409e:	0005      	movs	r5, r0
 80040a0:	001f      	movs	r7, r3
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d234      	bcs.n	8004110 <_malloc_r+0x7c>
 80040a6:	270c      	movs	r7, #12
 80040a8:	42b9      	cmp	r1, r7
 80040aa:	d833      	bhi.n	8004114 <_malloc_r+0x80>
 80040ac:	0028      	movs	r0, r5
 80040ae:	f000 f871 	bl	8004194 <__malloc_lock>
 80040b2:	4e37      	ldr	r6, [pc, #220]	@ (8004190 <_malloc_r+0xfc>)
 80040b4:	6833      	ldr	r3, [r6, #0]
 80040b6:	001c      	movs	r4, r3
 80040b8:	2c00      	cmp	r4, #0
 80040ba:	d12f      	bne.n	800411c <_malloc_r+0x88>
 80040bc:	0039      	movs	r1, r7
 80040be:	0028      	movs	r0, r5
 80040c0:	f7ff ffc6 	bl	8004050 <sbrk_aligned>
 80040c4:	0004      	movs	r4, r0
 80040c6:	1c43      	adds	r3, r0, #1
 80040c8:	d15f      	bne.n	800418a <_malloc_r+0xf6>
 80040ca:	6834      	ldr	r4, [r6, #0]
 80040cc:	9400      	str	r4, [sp, #0]
 80040ce:	9b00      	ldr	r3, [sp, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d14a      	bne.n	800416a <_malloc_r+0xd6>
 80040d4:	2c00      	cmp	r4, #0
 80040d6:	d052      	beq.n	800417e <_malloc_r+0xea>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	0028      	movs	r0, r5
 80040dc:	18e3      	adds	r3, r4, r3
 80040de:	9900      	ldr	r1, [sp, #0]
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	f000 fb53 	bl	800478c <_sbrk_r>
 80040e6:	9b01      	ldr	r3, [sp, #4]
 80040e8:	4283      	cmp	r3, r0
 80040ea:	d148      	bne.n	800417e <_malloc_r+0xea>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	0028      	movs	r0, r5
 80040f0:	1aff      	subs	r7, r7, r3
 80040f2:	0039      	movs	r1, r7
 80040f4:	f7ff ffac 	bl	8004050 <sbrk_aligned>
 80040f8:	3001      	adds	r0, #1
 80040fa:	d040      	beq.n	800417e <_malloc_r+0xea>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	19db      	adds	r3, r3, r7
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	6833      	ldr	r3, [r6, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	2a00      	cmp	r2, #0
 8004108:	d133      	bne.n	8004172 <_malloc_r+0xde>
 800410a:	9b00      	ldr	r3, [sp, #0]
 800410c:	6033      	str	r3, [r6, #0]
 800410e:	e019      	b.n	8004144 <_malloc_r+0xb0>
 8004110:	2b00      	cmp	r3, #0
 8004112:	dac9      	bge.n	80040a8 <_malloc_r+0x14>
 8004114:	230c      	movs	r3, #12
 8004116:	602b      	str	r3, [r5, #0]
 8004118:	2000      	movs	r0, #0
 800411a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800411c:	6821      	ldr	r1, [r4, #0]
 800411e:	1bc9      	subs	r1, r1, r7
 8004120:	d420      	bmi.n	8004164 <_malloc_r+0xd0>
 8004122:	290b      	cmp	r1, #11
 8004124:	d90a      	bls.n	800413c <_malloc_r+0xa8>
 8004126:	19e2      	adds	r2, r4, r7
 8004128:	6027      	str	r7, [r4, #0]
 800412a:	42a3      	cmp	r3, r4
 800412c:	d104      	bne.n	8004138 <_malloc_r+0xa4>
 800412e:	6032      	str	r2, [r6, #0]
 8004130:	6863      	ldr	r3, [r4, #4]
 8004132:	6011      	str	r1, [r2, #0]
 8004134:	6053      	str	r3, [r2, #4]
 8004136:	e005      	b.n	8004144 <_malloc_r+0xb0>
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	e7f9      	b.n	8004130 <_malloc_r+0x9c>
 800413c:	6862      	ldr	r2, [r4, #4]
 800413e:	42a3      	cmp	r3, r4
 8004140:	d10e      	bne.n	8004160 <_malloc_r+0xcc>
 8004142:	6032      	str	r2, [r6, #0]
 8004144:	0028      	movs	r0, r5
 8004146:	f000 f82d 	bl	80041a4 <__malloc_unlock>
 800414a:	0020      	movs	r0, r4
 800414c:	2207      	movs	r2, #7
 800414e:	300b      	adds	r0, #11
 8004150:	1d23      	adds	r3, r4, #4
 8004152:	4390      	bics	r0, r2
 8004154:	1ac2      	subs	r2, r0, r3
 8004156:	4298      	cmp	r0, r3
 8004158:	d0df      	beq.n	800411a <_malloc_r+0x86>
 800415a:	1a1b      	subs	r3, r3, r0
 800415c:	50a3      	str	r3, [r4, r2]
 800415e:	e7dc      	b.n	800411a <_malloc_r+0x86>
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	e7ef      	b.n	8004144 <_malloc_r+0xb0>
 8004164:	0023      	movs	r3, r4
 8004166:	6864      	ldr	r4, [r4, #4]
 8004168:	e7a6      	b.n	80040b8 <_malloc_r+0x24>
 800416a:	9c00      	ldr	r4, [sp, #0]
 800416c:	6863      	ldr	r3, [r4, #4]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	e7ad      	b.n	80040ce <_malloc_r+0x3a>
 8004172:	001a      	movs	r2, r3
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	42a3      	cmp	r3, r4
 8004178:	d1fb      	bne.n	8004172 <_malloc_r+0xde>
 800417a:	2300      	movs	r3, #0
 800417c:	e7da      	b.n	8004134 <_malloc_r+0xa0>
 800417e:	230c      	movs	r3, #12
 8004180:	0028      	movs	r0, r5
 8004182:	602b      	str	r3, [r5, #0]
 8004184:	f000 f80e 	bl	80041a4 <__malloc_unlock>
 8004188:	e7c6      	b.n	8004118 <_malloc_r+0x84>
 800418a:	6007      	str	r7, [r0, #0]
 800418c:	e7da      	b.n	8004144 <_malloc_r+0xb0>
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	20000768 	.word	0x20000768

08004194 <__malloc_lock>:
 8004194:	b510      	push	{r4, lr}
 8004196:	4802      	ldr	r0, [pc, #8]	@ (80041a0 <__malloc_lock+0xc>)
 8004198:	f7ff ff04 	bl	8003fa4 <__retarget_lock_acquire_recursive>
 800419c:	bd10      	pop	{r4, pc}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	20000760 	.word	0x20000760

080041a4 <__malloc_unlock>:
 80041a4:	b510      	push	{r4, lr}
 80041a6:	4802      	ldr	r0, [pc, #8]	@ (80041b0 <__malloc_unlock+0xc>)
 80041a8:	f7ff fefd 	bl	8003fa6 <__retarget_lock_release_recursive>
 80041ac:	bd10      	pop	{r4, pc}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	20000760 	.word	0x20000760

080041b4 <__ssputs_r>:
 80041b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b6:	688e      	ldr	r6, [r1, #8]
 80041b8:	b085      	sub	sp, #20
 80041ba:	001f      	movs	r7, r3
 80041bc:	000c      	movs	r4, r1
 80041be:	680b      	ldr	r3, [r1, #0]
 80041c0:	9002      	str	r0, [sp, #8]
 80041c2:	9203      	str	r2, [sp, #12]
 80041c4:	42be      	cmp	r6, r7
 80041c6:	d830      	bhi.n	800422a <__ssputs_r+0x76>
 80041c8:	210c      	movs	r1, #12
 80041ca:	5e62      	ldrsh	r2, [r4, r1]
 80041cc:	2190      	movs	r1, #144	@ 0x90
 80041ce:	00c9      	lsls	r1, r1, #3
 80041d0:	420a      	tst	r2, r1
 80041d2:	d028      	beq.n	8004226 <__ssputs_r+0x72>
 80041d4:	2003      	movs	r0, #3
 80041d6:	6921      	ldr	r1, [r4, #16]
 80041d8:	1a5b      	subs	r3, r3, r1
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	6963      	ldr	r3, [r4, #20]
 80041de:	4343      	muls	r3, r0
 80041e0:	9801      	ldr	r0, [sp, #4]
 80041e2:	0fdd      	lsrs	r5, r3, #31
 80041e4:	18ed      	adds	r5, r5, r3
 80041e6:	1c7b      	adds	r3, r7, #1
 80041e8:	181b      	adds	r3, r3, r0
 80041ea:	106d      	asrs	r5, r5, #1
 80041ec:	42ab      	cmp	r3, r5
 80041ee:	d900      	bls.n	80041f2 <__ssputs_r+0x3e>
 80041f0:	001d      	movs	r5, r3
 80041f2:	0552      	lsls	r2, r2, #21
 80041f4:	d528      	bpl.n	8004248 <__ssputs_r+0x94>
 80041f6:	0029      	movs	r1, r5
 80041f8:	9802      	ldr	r0, [sp, #8]
 80041fa:	f7ff ff4b 	bl	8004094 <_malloc_r>
 80041fe:	1e06      	subs	r6, r0, #0
 8004200:	d02c      	beq.n	800425c <__ssputs_r+0xa8>
 8004202:	9a01      	ldr	r2, [sp, #4]
 8004204:	6921      	ldr	r1, [r4, #16]
 8004206:	f7ff fecf 	bl	8003fa8 <memcpy>
 800420a:	89a2      	ldrh	r2, [r4, #12]
 800420c:	4b18      	ldr	r3, [pc, #96]	@ (8004270 <__ssputs_r+0xbc>)
 800420e:	401a      	ands	r2, r3
 8004210:	2380      	movs	r3, #128	@ 0x80
 8004212:	4313      	orrs	r3, r2
 8004214:	81a3      	strh	r3, [r4, #12]
 8004216:	9b01      	ldr	r3, [sp, #4]
 8004218:	6126      	str	r6, [r4, #16]
 800421a:	18f6      	adds	r6, r6, r3
 800421c:	6026      	str	r6, [r4, #0]
 800421e:	003e      	movs	r6, r7
 8004220:	6165      	str	r5, [r4, #20]
 8004222:	1aed      	subs	r5, r5, r3
 8004224:	60a5      	str	r5, [r4, #8]
 8004226:	42be      	cmp	r6, r7
 8004228:	d900      	bls.n	800422c <__ssputs_r+0x78>
 800422a:	003e      	movs	r6, r7
 800422c:	0032      	movs	r2, r6
 800422e:	9903      	ldr	r1, [sp, #12]
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	f000 fa99 	bl	8004768 <memmove>
 8004236:	2000      	movs	r0, #0
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	1b9b      	subs	r3, r3, r6
 800423c:	60a3      	str	r3, [r4, #8]
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	199b      	adds	r3, r3, r6
 8004242:	6023      	str	r3, [r4, #0]
 8004244:	b005      	add	sp, #20
 8004246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004248:	002a      	movs	r2, r5
 800424a:	9802      	ldr	r0, [sp, #8]
 800424c:	f000 fabb 	bl	80047c6 <_realloc_r>
 8004250:	1e06      	subs	r6, r0, #0
 8004252:	d1e0      	bne.n	8004216 <__ssputs_r+0x62>
 8004254:	6921      	ldr	r1, [r4, #16]
 8004256:	9802      	ldr	r0, [sp, #8]
 8004258:	f7ff feb0 	bl	8003fbc <_free_r>
 800425c:	230c      	movs	r3, #12
 800425e:	2001      	movs	r0, #1
 8004260:	9a02      	ldr	r2, [sp, #8]
 8004262:	4240      	negs	r0, r0
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	89a2      	ldrh	r2, [r4, #12]
 8004268:	3334      	adds	r3, #52	@ 0x34
 800426a:	4313      	orrs	r3, r2
 800426c:	81a3      	strh	r3, [r4, #12]
 800426e:	e7e9      	b.n	8004244 <__ssputs_r+0x90>
 8004270:	fffffb7f 	.word	0xfffffb7f

08004274 <_svfiprintf_r>:
 8004274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004276:	b0a1      	sub	sp, #132	@ 0x84
 8004278:	9003      	str	r0, [sp, #12]
 800427a:	001d      	movs	r5, r3
 800427c:	898b      	ldrh	r3, [r1, #12]
 800427e:	000f      	movs	r7, r1
 8004280:	0016      	movs	r6, r2
 8004282:	061b      	lsls	r3, r3, #24
 8004284:	d511      	bpl.n	80042aa <_svfiprintf_r+0x36>
 8004286:	690b      	ldr	r3, [r1, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10e      	bne.n	80042aa <_svfiprintf_r+0x36>
 800428c:	2140      	movs	r1, #64	@ 0x40
 800428e:	f7ff ff01 	bl	8004094 <_malloc_r>
 8004292:	6038      	str	r0, [r7, #0]
 8004294:	6138      	str	r0, [r7, #16]
 8004296:	2800      	cmp	r0, #0
 8004298:	d105      	bne.n	80042a6 <_svfiprintf_r+0x32>
 800429a:	230c      	movs	r3, #12
 800429c:	9a03      	ldr	r2, [sp, #12]
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	2001      	movs	r0, #1
 80042a2:	4240      	negs	r0, r0
 80042a4:	e0cf      	b.n	8004446 <_svfiprintf_r+0x1d2>
 80042a6:	2340      	movs	r3, #64	@ 0x40
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	2300      	movs	r3, #0
 80042ac:	ac08      	add	r4, sp, #32
 80042ae:	6163      	str	r3, [r4, #20]
 80042b0:	3320      	adds	r3, #32
 80042b2:	7663      	strb	r3, [r4, #25]
 80042b4:	3310      	adds	r3, #16
 80042b6:	76a3      	strb	r3, [r4, #26]
 80042b8:	9507      	str	r5, [sp, #28]
 80042ba:	0035      	movs	r5, r6
 80042bc:	782b      	ldrb	r3, [r5, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <_svfiprintf_r+0x52>
 80042c2:	2b25      	cmp	r3, #37	@ 0x25
 80042c4:	d148      	bne.n	8004358 <_svfiprintf_r+0xe4>
 80042c6:	1bab      	subs	r3, r5, r6
 80042c8:	9305      	str	r3, [sp, #20]
 80042ca:	42b5      	cmp	r5, r6
 80042cc:	d00b      	beq.n	80042e6 <_svfiprintf_r+0x72>
 80042ce:	0032      	movs	r2, r6
 80042d0:	0039      	movs	r1, r7
 80042d2:	9803      	ldr	r0, [sp, #12]
 80042d4:	f7ff ff6e 	bl	80041b4 <__ssputs_r>
 80042d8:	3001      	adds	r0, #1
 80042da:	d100      	bne.n	80042de <_svfiprintf_r+0x6a>
 80042dc:	e0ae      	b.n	800443c <_svfiprintf_r+0x1c8>
 80042de:	6963      	ldr	r3, [r4, #20]
 80042e0:	9a05      	ldr	r2, [sp, #20]
 80042e2:	189b      	adds	r3, r3, r2
 80042e4:	6163      	str	r3, [r4, #20]
 80042e6:	782b      	ldrb	r3, [r5, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d100      	bne.n	80042ee <_svfiprintf_r+0x7a>
 80042ec:	e0a6      	b.n	800443c <_svfiprintf_r+0x1c8>
 80042ee:	2201      	movs	r2, #1
 80042f0:	2300      	movs	r3, #0
 80042f2:	4252      	negs	r2, r2
 80042f4:	6062      	str	r2, [r4, #4]
 80042f6:	a904      	add	r1, sp, #16
 80042f8:	3254      	adds	r2, #84	@ 0x54
 80042fa:	1852      	adds	r2, r2, r1
 80042fc:	1c6e      	adds	r6, r5, #1
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	60e3      	str	r3, [r4, #12]
 8004302:	60a3      	str	r3, [r4, #8]
 8004304:	7013      	strb	r3, [r2, #0]
 8004306:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004308:	4b54      	ldr	r3, [pc, #336]	@ (800445c <_svfiprintf_r+0x1e8>)
 800430a:	2205      	movs	r2, #5
 800430c:	0018      	movs	r0, r3
 800430e:	7831      	ldrb	r1, [r6, #0]
 8004310:	9305      	str	r3, [sp, #20]
 8004312:	f000 fa4d 	bl	80047b0 <memchr>
 8004316:	1c75      	adds	r5, r6, #1
 8004318:	2800      	cmp	r0, #0
 800431a:	d11f      	bne.n	800435c <_svfiprintf_r+0xe8>
 800431c:	6822      	ldr	r2, [r4, #0]
 800431e:	06d3      	lsls	r3, r2, #27
 8004320:	d504      	bpl.n	800432c <_svfiprintf_r+0xb8>
 8004322:	2353      	movs	r3, #83	@ 0x53
 8004324:	a904      	add	r1, sp, #16
 8004326:	185b      	adds	r3, r3, r1
 8004328:	2120      	movs	r1, #32
 800432a:	7019      	strb	r1, [r3, #0]
 800432c:	0713      	lsls	r3, r2, #28
 800432e:	d504      	bpl.n	800433a <_svfiprintf_r+0xc6>
 8004330:	2353      	movs	r3, #83	@ 0x53
 8004332:	a904      	add	r1, sp, #16
 8004334:	185b      	adds	r3, r3, r1
 8004336:	212b      	movs	r1, #43	@ 0x2b
 8004338:	7019      	strb	r1, [r3, #0]
 800433a:	7833      	ldrb	r3, [r6, #0]
 800433c:	2b2a      	cmp	r3, #42	@ 0x2a
 800433e:	d016      	beq.n	800436e <_svfiprintf_r+0xfa>
 8004340:	0035      	movs	r5, r6
 8004342:	2100      	movs	r1, #0
 8004344:	200a      	movs	r0, #10
 8004346:	68e3      	ldr	r3, [r4, #12]
 8004348:	782a      	ldrb	r2, [r5, #0]
 800434a:	1c6e      	adds	r6, r5, #1
 800434c:	3a30      	subs	r2, #48	@ 0x30
 800434e:	2a09      	cmp	r2, #9
 8004350:	d950      	bls.n	80043f4 <_svfiprintf_r+0x180>
 8004352:	2900      	cmp	r1, #0
 8004354:	d111      	bne.n	800437a <_svfiprintf_r+0x106>
 8004356:	e017      	b.n	8004388 <_svfiprintf_r+0x114>
 8004358:	3501      	adds	r5, #1
 800435a:	e7af      	b.n	80042bc <_svfiprintf_r+0x48>
 800435c:	9b05      	ldr	r3, [sp, #20]
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	1ac0      	subs	r0, r0, r3
 8004362:	2301      	movs	r3, #1
 8004364:	4083      	lsls	r3, r0
 8004366:	4313      	orrs	r3, r2
 8004368:	002e      	movs	r6, r5
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	e7cc      	b.n	8004308 <_svfiprintf_r+0x94>
 800436e:	9b07      	ldr	r3, [sp, #28]
 8004370:	1d19      	adds	r1, r3, #4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	9107      	str	r1, [sp, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	db01      	blt.n	800437e <_svfiprintf_r+0x10a>
 800437a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800437c:	e004      	b.n	8004388 <_svfiprintf_r+0x114>
 800437e:	425b      	negs	r3, r3
 8004380:	60e3      	str	r3, [r4, #12]
 8004382:	2302      	movs	r3, #2
 8004384:	4313      	orrs	r3, r2
 8004386:	6023      	str	r3, [r4, #0]
 8004388:	782b      	ldrb	r3, [r5, #0]
 800438a:	2b2e      	cmp	r3, #46	@ 0x2e
 800438c:	d10c      	bne.n	80043a8 <_svfiprintf_r+0x134>
 800438e:	786b      	ldrb	r3, [r5, #1]
 8004390:	2b2a      	cmp	r3, #42	@ 0x2a
 8004392:	d134      	bne.n	80043fe <_svfiprintf_r+0x18a>
 8004394:	9b07      	ldr	r3, [sp, #28]
 8004396:	3502      	adds	r5, #2
 8004398:	1d1a      	adds	r2, r3, #4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	9207      	str	r2, [sp, #28]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da01      	bge.n	80043a6 <_svfiprintf_r+0x132>
 80043a2:	2301      	movs	r3, #1
 80043a4:	425b      	negs	r3, r3
 80043a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80043a8:	4e2d      	ldr	r6, [pc, #180]	@ (8004460 <_svfiprintf_r+0x1ec>)
 80043aa:	2203      	movs	r2, #3
 80043ac:	0030      	movs	r0, r6
 80043ae:	7829      	ldrb	r1, [r5, #0]
 80043b0:	f000 f9fe 	bl	80047b0 <memchr>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d006      	beq.n	80043c6 <_svfiprintf_r+0x152>
 80043b8:	2340      	movs	r3, #64	@ 0x40
 80043ba:	1b80      	subs	r0, r0, r6
 80043bc:	4083      	lsls	r3, r0
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	3501      	adds	r5, #1
 80043c2:	4313      	orrs	r3, r2
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	7829      	ldrb	r1, [r5, #0]
 80043c8:	2206      	movs	r2, #6
 80043ca:	4826      	ldr	r0, [pc, #152]	@ (8004464 <_svfiprintf_r+0x1f0>)
 80043cc:	1c6e      	adds	r6, r5, #1
 80043ce:	7621      	strb	r1, [r4, #24]
 80043d0:	f000 f9ee 	bl	80047b0 <memchr>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d038      	beq.n	800444a <_svfiprintf_r+0x1d6>
 80043d8:	4b23      	ldr	r3, [pc, #140]	@ (8004468 <_svfiprintf_r+0x1f4>)
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d122      	bne.n	8004424 <_svfiprintf_r+0x1b0>
 80043de:	2207      	movs	r2, #7
 80043e0:	9b07      	ldr	r3, [sp, #28]
 80043e2:	3307      	adds	r3, #7
 80043e4:	4393      	bics	r3, r2
 80043e6:	3308      	adds	r3, #8
 80043e8:	9307      	str	r3, [sp, #28]
 80043ea:	6963      	ldr	r3, [r4, #20]
 80043ec:	9a04      	ldr	r2, [sp, #16]
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	6163      	str	r3, [r4, #20]
 80043f2:	e762      	b.n	80042ba <_svfiprintf_r+0x46>
 80043f4:	4343      	muls	r3, r0
 80043f6:	0035      	movs	r5, r6
 80043f8:	2101      	movs	r1, #1
 80043fa:	189b      	adds	r3, r3, r2
 80043fc:	e7a4      	b.n	8004348 <_svfiprintf_r+0xd4>
 80043fe:	2300      	movs	r3, #0
 8004400:	200a      	movs	r0, #10
 8004402:	0019      	movs	r1, r3
 8004404:	3501      	adds	r5, #1
 8004406:	6063      	str	r3, [r4, #4]
 8004408:	782a      	ldrb	r2, [r5, #0]
 800440a:	1c6e      	adds	r6, r5, #1
 800440c:	3a30      	subs	r2, #48	@ 0x30
 800440e:	2a09      	cmp	r2, #9
 8004410:	d903      	bls.n	800441a <_svfiprintf_r+0x1a6>
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0c8      	beq.n	80043a8 <_svfiprintf_r+0x134>
 8004416:	9109      	str	r1, [sp, #36]	@ 0x24
 8004418:	e7c6      	b.n	80043a8 <_svfiprintf_r+0x134>
 800441a:	4341      	muls	r1, r0
 800441c:	0035      	movs	r5, r6
 800441e:	2301      	movs	r3, #1
 8004420:	1889      	adds	r1, r1, r2
 8004422:	e7f1      	b.n	8004408 <_svfiprintf_r+0x194>
 8004424:	aa07      	add	r2, sp, #28
 8004426:	9200      	str	r2, [sp, #0]
 8004428:	0021      	movs	r1, r4
 800442a:	003a      	movs	r2, r7
 800442c:	4b0f      	ldr	r3, [pc, #60]	@ (800446c <_svfiprintf_r+0x1f8>)
 800442e:	9803      	ldr	r0, [sp, #12]
 8004430:	e000      	b.n	8004434 <_svfiprintf_r+0x1c0>
 8004432:	bf00      	nop
 8004434:	9004      	str	r0, [sp, #16]
 8004436:	9b04      	ldr	r3, [sp, #16]
 8004438:	3301      	adds	r3, #1
 800443a:	d1d6      	bne.n	80043ea <_svfiprintf_r+0x176>
 800443c:	89bb      	ldrh	r3, [r7, #12]
 800443e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004440:	065b      	lsls	r3, r3, #25
 8004442:	d500      	bpl.n	8004446 <_svfiprintf_r+0x1d2>
 8004444:	e72c      	b.n	80042a0 <_svfiprintf_r+0x2c>
 8004446:	b021      	add	sp, #132	@ 0x84
 8004448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800444a:	aa07      	add	r2, sp, #28
 800444c:	9200      	str	r2, [sp, #0]
 800444e:	0021      	movs	r1, r4
 8004450:	003a      	movs	r2, r7
 8004452:	4b06      	ldr	r3, [pc, #24]	@ (800446c <_svfiprintf_r+0x1f8>)
 8004454:	9803      	ldr	r0, [sp, #12]
 8004456:	f000 f87b 	bl	8004550 <_printf_i>
 800445a:	e7eb      	b.n	8004434 <_svfiprintf_r+0x1c0>
 800445c:	08007e00 	.word	0x08007e00
 8004460:	08007e06 	.word	0x08007e06
 8004464:	08007e0a 	.word	0x08007e0a
 8004468:	00000000 	.word	0x00000000
 800446c:	080041b5 	.word	0x080041b5

08004470 <_printf_common>:
 8004470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004472:	0016      	movs	r6, r2
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	688a      	ldr	r2, [r1, #8]
 8004478:	690b      	ldr	r3, [r1, #16]
 800447a:	000c      	movs	r4, r1
 800447c:	9000      	str	r0, [sp, #0]
 800447e:	4293      	cmp	r3, r2
 8004480:	da00      	bge.n	8004484 <_printf_common+0x14>
 8004482:	0013      	movs	r3, r2
 8004484:	0022      	movs	r2, r4
 8004486:	6033      	str	r3, [r6, #0]
 8004488:	3243      	adds	r2, #67	@ 0x43
 800448a:	7812      	ldrb	r2, [r2, #0]
 800448c:	2a00      	cmp	r2, #0
 800448e:	d001      	beq.n	8004494 <_printf_common+0x24>
 8004490:	3301      	adds	r3, #1
 8004492:	6033      	str	r3, [r6, #0]
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	069b      	lsls	r3, r3, #26
 8004498:	d502      	bpl.n	80044a0 <_printf_common+0x30>
 800449a:	6833      	ldr	r3, [r6, #0]
 800449c:	3302      	adds	r3, #2
 800449e:	6033      	str	r3, [r6, #0]
 80044a0:	6822      	ldr	r2, [r4, #0]
 80044a2:	2306      	movs	r3, #6
 80044a4:	0015      	movs	r5, r2
 80044a6:	401d      	ands	r5, r3
 80044a8:	421a      	tst	r2, r3
 80044aa:	d027      	beq.n	80044fc <_printf_common+0x8c>
 80044ac:	0023      	movs	r3, r4
 80044ae:	3343      	adds	r3, #67	@ 0x43
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	1e5a      	subs	r2, r3, #1
 80044b4:	4193      	sbcs	r3, r2
 80044b6:	6822      	ldr	r2, [r4, #0]
 80044b8:	0692      	lsls	r2, r2, #26
 80044ba:	d430      	bmi.n	800451e <_printf_common+0xae>
 80044bc:	0022      	movs	r2, r4
 80044be:	9901      	ldr	r1, [sp, #4]
 80044c0:	9800      	ldr	r0, [sp, #0]
 80044c2:	9d08      	ldr	r5, [sp, #32]
 80044c4:	3243      	adds	r2, #67	@ 0x43
 80044c6:	47a8      	blx	r5
 80044c8:	3001      	adds	r0, #1
 80044ca:	d025      	beq.n	8004518 <_printf_common+0xa8>
 80044cc:	2206      	movs	r2, #6
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	2500      	movs	r5, #0
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d105      	bne.n	80044e4 <_printf_common+0x74>
 80044d8:	6833      	ldr	r3, [r6, #0]
 80044da:	68e5      	ldr	r5, [r4, #12]
 80044dc:	1aed      	subs	r5, r5, r3
 80044de:	43eb      	mvns	r3, r5
 80044e0:	17db      	asrs	r3, r3, #31
 80044e2:	401d      	ands	r5, r3
 80044e4:	68a3      	ldr	r3, [r4, #8]
 80044e6:	6922      	ldr	r2, [r4, #16]
 80044e8:	4293      	cmp	r3, r2
 80044ea:	dd01      	ble.n	80044f0 <_printf_common+0x80>
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	18ed      	adds	r5, r5, r3
 80044f0:	2600      	movs	r6, #0
 80044f2:	42b5      	cmp	r5, r6
 80044f4:	d120      	bne.n	8004538 <_printf_common+0xc8>
 80044f6:	2000      	movs	r0, #0
 80044f8:	e010      	b.n	800451c <_printf_common+0xac>
 80044fa:	3501      	adds	r5, #1
 80044fc:	68e3      	ldr	r3, [r4, #12]
 80044fe:	6832      	ldr	r2, [r6, #0]
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	42ab      	cmp	r3, r5
 8004504:	ddd2      	ble.n	80044ac <_printf_common+0x3c>
 8004506:	0022      	movs	r2, r4
 8004508:	2301      	movs	r3, #1
 800450a:	9901      	ldr	r1, [sp, #4]
 800450c:	9800      	ldr	r0, [sp, #0]
 800450e:	9f08      	ldr	r7, [sp, #32]
 8004510:	3219      	adds	r2, #25
 8004512:	47b8      	blx	r7
 8004514:	3001      	adds	r0, #1
 8004516:	d1f0      	bne.n	80044fa <_printf_common+0x8a>
 8004518:	2001      	movs	r0, #1
 800451a:	4240      	negs	r0, r0
 800451c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800451e:	2030      	movs	r0, #48	@ 0x30
 8004520:	18e1      	adds	r1, r4, r3
 8004522:	3143      	adds	r1, #67	@ 0x43
 8004524:	7008      	strb	r0, [r1, #0]
 8004526:	0021      	movs	r1, r4
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	3145      	adds	r1, #69	@ 0x45
 800452c:	7809      	ldrb	r1, [r1, #0]
 800452e:	18a2      	adds	r2, r4, r2
 8004530:	3243      	adds	r2, #67	@ 0x43
 8004532:	3302      	adds	r3, #2
 8004534:	7011      	strb	r1, [r2, #0]
 8004536:	e7c1      	b.n	80044bc <_printf_common+0x4c>
 8004538:	0022      	movs	r2, r4
 800453a:	2301      	movs	r3, #1
 800453c:	9901      	ldr	r1, [sp, #4]
 800453e:	9800      	ldr	r0, [sp, #0]
 8004540:	9f08      	ldr	r7, [sp, #32]
 8004542:	321a      	adds	r2, #26
 8004544:	47b8      	blx	r7
 8004546:	3001      	adds	r0, #1
 8004548:	d0e6      	beq.n	8004518 <_printf_common+0xa8>
 800454a:	3601      	adds	r6, #1
 800454c:	e7d1      	b.n	80044f2 <_printf_common+0x82>
	...

08004550 <_printf_i>:
 8004550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004552:	b08b      	sub	sp, #44	@ 0x2c
 8004554:	9206      	str	r2, [sp, #24]
 8004556:	000a      	movs	r2, r1
 8004558:	3243      	adds	r2, #67	@ 0x43
 800455a:	9307      	str	r3, [sp, #28]
 800455c:	9005      	str	r0, [sp, #20]
 800455e:	9203      	str	r2, [sp, #12]
 8004560:	7e0a      	ldrb	r2, [r1, #24]
 8004562:	000c      	movs	r4, r1
 8004564:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004566:	2a78      	cmp	r2, #120	@ 0x78
 8004568:	d809      	bhi.n	800457e <_printf_i+0x2e>
 800456a:	2a62      	cmp	r2, #98	@ 0x62
 800456c:	d80b      	bhi.n	8004586 <_printf_i+0x36>
 800456e:	2a00      	cmp	r2, #0
 8004570:	d100      	bne.n	8004574 <_printf_i+0x24>
 8004572:	e0ba      	b.n	80046ea <_printf_i+0x19a>
 8004574:	497a      	ldr	r1, [pc, #488]	@ (8004760 <_printf_i+0x210>)
 8004576:	9104      	str	r1, [sp, #16]
 8004578:	2a58      	cmp	r2, #88	@ 0x58
 800457a:	d100      	bne.n	800457e <_printf_i+0x2e>
 800457c:	e08e      	b.n	800469c <_printf_i+0x14c>
 800457e:	0025      	movs	r5, r4
 8004580:	3542      	adds	r5, #66	@ 0x42
 8004582:	702a      	strb	r2, [r5, #0]
 8004584:	e022      	b.n	80045cc <_printf_i+0x7c>
 8004586:	0010      	movs	r0, r2
 8004588:	3863      	subs	r0, #99	@ 0x63
 800458a:	2815      	cmp	r0, #21
 800458c:	d8f7      	bhi.n	800457e <_printf_i+0x2e>
 800458e:	f7fb fdb7 	bl	8000100 <__gnu_thumb1_case_shi>
 8004592:	0016      	.short	0x0016
 8004594:	fff6001f 	.word	0xfff6001f
 8004598:	fff6fff6 	.word	0xfff6fff6
 800459c:	001ffff6 	.word	0x001ffff6
 80045a0:	fff6fff6 	.word	0xfff6fff6
 80045a4:	fff6fff6 	.word	0xfff6fff6
 80045a8:	0036009f 	.word	0x0036009f
 80045ac:	fff6007e 	.word	0xfff6007e
 80045b0:	00b0fff6 	.word	0x00b0fff6
 80045b4:	0036fff6 	.word	0x0036fff6
 80045b8:	fff6fff6 	.word	0xfff6fff6
 80045bc:	0082      	.short	0x0082
 80045be:	0025      	movs	r5, r4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	3542      	adds	r5, #66	@ 0x42
 80045c4:	1d11      	adds	r1, r2, #4
 80045c6:	6019      	str	r1, [r3, #0]
 80045c8:	6813      	ldr	r3, [r2, #0]
 80045ca:	702b      	strb	r3, [r5, #0]
 80045cc:	2301      	movs	r3, #1
 80045ce:	e09e      	b.n	800470e <_printf_i+0x1be>
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	6809      	ldr	r1, [r1, #0]
 80045d4:	1d02      	adds	r2, r0, #4
 80045d6:	060d      	lsls	r5, r1, #24
 80045d8:	d50b      	bpl.n	80045f2 <_printf_i+0xa2>
 80045da:	6806      	ldr	r6, [r0, #0]
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	2e00      	cmp	r6, #0
 80045e0:	da03      	bge.n	80045ea <_printf_i+0x9a>
 80045e2:	232d      	movs	r3, #45	@ 0x2d
 80045e4:	9a03      	ldr	r2, [sp, #12]
 80045e6:	4276      	negs	r6, r6
 80045e8:	7013      	strb	r3, [r2, #0]
 80045ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004760 <_printf_i+0x210>)
 80045ec:	270a      	movs	r7, #10
 80045ee:	9304      	str	r3, [sp, #16]
 80045f0:	e018      	b.n	8004624 <_printf_i+0xd4>
 80045f2:	6806      	ldr	r6, [r0, #0]
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	0649      	lsls	r1, r1, #25
 80045f8:	d5f1      	bpl.n	80045de <_printf_i+0x8e>
 80045fa:	b236      	sxth	r6, r6
 80045fc:	e7ef      	b.n	80045de <_printf_i+0x8e>
 80045fe:	6808      	ldr	r0, [r1, #0]
 8004600:	6819      	ldr	r1, [r3, #0]
 8004602:	c940      	ldmia	r1!, {r6}
 8004604:	0605      	lsls	r5, r0, #24
 8004606:	d402      	bmi.n	800460e <_printf_i+0xbe>
 8004608:	0640      	lsls	r0, r0, #25
 800460a:	d500      	bpl.n	800460e <_printf_i+0xbe>
 800460c:	b2b6      	uxth	r6, r6
 800460e:	6019      	str	r1, [r3, #0]
 8004610:	4b53      	ldr	r3, [pc, #332]	@ (8004760 <_printf_i+0x210>)
 8004612:	270a      	movs	r7, #10
 8004614:	9304      	str	r3, [sp, #16]
 8004616:	2a6f      	cmp	r2, #111	@ 0x6f
 8004618:	d100      	bne.n	800461c <_printf_i+0xcc>
 800461a:	3f02      	subs	r7, #2
 800461c:	0023      	movs	r3, r4
 800461e:	2200      	movs	r2, #0
 8004620:	3343      	adds	r3, #67	@ 0x43
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	60a3      	str	r3, [r4, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	db06      	blt.n	800463a <_printf_i+0xea>
 800462c:	2104      	movs	r1, #4
 800462e:	6822      	ldr	r2, [r4, #0]
 8004630:	9d03      	ldr	r5, [sp, #12]
 8004632:	438a      	bics	r2, r1
 8004634:	6022      	str	r2, [r4, #0]
 8004636:	4333      	orrs	r3, r6
 8004638:	d00c      	beq.n	8004654 <_printf_i+0x104>
 800463a:	9d03      	ldr	r5, [sp, #12]
 800463c:	0030      	movs	r0, r6
 800463e:	0039      	movs	r1, r7
 8004640:	f7fb fdee 	bl	8000220 <__aeabi_uidivmod>
 8004644:	9b04      	ldr	r3, [sp, #16]
 8004646:	3d01      	subs	r5, #1
 8004648:	5c5b      	ldrb	r3, [r3, r1]
 800464a:	702b      	strb	r3, [r5, #0]
 800464c:	0033      	movs	r3, r6
 800464e:	0006      	movs	r6, r0
 8004650:	429f      	cmp	r7, r3
 8004652:	d9f3      	bls.n	800463c <_printf_i+0xec>
 8004654:	2f08      	cmp	r7, #8
 8004656:	d109      	bne.n	800466c <_printf_i+0x11c>
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	07db      	lsls	r3, r3, #31
 800465c:	d506      	bpl.n	800466c <_printf_i+0x11c>
 800465e:	6862      	ldr	r2, [r4, #4]
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	429a      	cmp	r2, r3
 8004664:	dc02      	bgt.n	800466c <_printf_i+0x11c>
 8004666:	2330      	movs	r3, #48	@ 0x30
 8004668:	3d01      	subs	r5, #1
 800466a:	702b      	strb	r3, [r5, #0]
 800466c:	9b03      	ldr	r3, [sp, #12]
 800466e:	1b5b      	subs	r3, r3, r5
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	9b07      	ldr	r3, [sp, #28]
 8004674:	0021      	movs	r1, r4
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	9805      	ldr	r0, [sp, #20]
 800467a:	9b06      	ldr	r3, [sp, #24]
 800467c:	aa09      	add	r2, sp, #36	@ 0x24
 800467e:	f7ff fef7 	bl	8004470 <_printf_common>
 8004682:	3001      	adds	r0, #1
 8004684:	d148      	bne.n	8004718 <_printf_i+0x1c8>
 8004686:	2001      	movs	r0, #1
 8004688:	4240      	negs	r0, r0
 800468a:	b00b      	add	sp, #44	@ 0x2c
 800468c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800468e:	2220      	movs	r2, #32
 8004690:	6809      	ldr	r1, [r1, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	6022      	str	r2, [r4, #0]
 8004696:	2278      	movs	r2, #120	@ 0x78
 8004698:	4932      	ldr	r1, [pc, #200]	@ (8004764 <_printf_i+0x214>)
 800469a:	9104      	str	r1, [sp, #16]
 800469c:	0021      	movs	r1, r4
 800469e:	3145      	adds	r1, #69	@ 0x45
 80046a0:	700a      	strb	r2, [r1, #0]
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	6822      	ldr	r2, [r4, #0]
 80046a6:	c940      	ldmia	r1!, {r6}
 80046a8:	0610      	lsls	r0, r2, #24
 80046aa:	d402      	bmi.n	80046b2 <_printf_i+0x162>
 80046ac:	0650      	lsls	r0, r2, #25
 80046ae:	d500      	bpl.n	80046b2 <_printf_i+0x162>
 80046b0:	b2b6      	uxth	r6, r6
 80046b2:	6019      	str	r1, [r3, #0]
 80046b4:	07d3      	lsls	r3, r2, #31
 80046b6:	d502      	bpl.n	80046be <_printf_i+0x16e>
 80046b8:	2320      	movs	r3, #32
 80046ba:	4313      	orrs	r3, r2
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	2e00      	cmp	r6, #0
 80046c0:	d001      	beq.n	80046c6 <_printf_i+0x176>
 80046c2:	2710      	movs	r7, #16
 80046c4:	e7aa      	b.n	800461c <_printf_i+0xcc>
 80046c6:	2220      	movs	r2, #32
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	4393      	bics	r3, r2
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	e7f8      	b.n	80046c2 <_printf_i+0x172>
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	680d      	ldr	r5, [r1, #0]
 80046d4:	1d10      	adds	r0, r2, #4
 80046d6:	6949      	ldr	r1, [r1, #20]
 80046d8:	6018      	str	r0, [r3, #0]
 80046da:	6813      	ldr	r3, [r2, #0]
 80046dc:	062e      	lsls	r6, r5, #24
 80046de:	d501      	bpl.n	80046e4 <_printf_i+0x194>
 80046e0:	6019      	str	r1, [r3, #0]
 80046e2:	e002      	b.n	80046ea <_printf_i+0x19a>
 80046e4:	066d      	lsls	r5, r5, #25
 80046e6:	d5fb      	bpl.n	80046e0 <_printf_i+0x190>
 80046e8:	8019      	strh	r1, [r3, #0]
 80046ea:	2300      	movs	r3, #0
 80046ec:	9d03      	ldr	r5, [sp, #12]
 80046ee:	6123      	str	r3, [r4, #16]
 80046f0:	e7bf      	b.n	8004672 <_printf_i+0x122>
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	1d11      	adds	r1, r2, #4
 80046f6:	6019      	str	r1, [r3, #0]
 80046f8:	6815      	ldr	r5, [r2, #0]
 80046fa:	2100      	movs	r1, #0
 80046fc:	0028      	movs	r0, r5
 80046fe:	6862      	ldr	r2, [r4, #4]
 8004700:	f000 f856 	bl	80047b0 <memchr>
 8004704:	2800      	cmp	r0, #0
 8004706:	d001      	beq.n	800470c <_printf_i+0x1bc>
 8004708:	1b40      	subs	r0, r0, r5
 800470a:	6060      	str	r0, [r4, #4]
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	6123      	str	r3, [r4, #16]
 8004710:	2300      	movs	r3, #0
 8004712:	9a03      	ldr	r2, [sp, #12]
 8004714:	7013      	strb	r3, [r2, #0]
 8004716:	e7ac      	b.n	8004672 <_printf_i+0x122>
 8004718:	002a      	movs	r2, r5
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	9906      	ldr	r1, [sp, #24]
 800471e:	9805      	ldr	r0, [sp, #20]
 8004720:	9d07      	ldr	r5, [sp, #28]
 8004722:	47a8      	blx	r5
 8004724:	3001      	adds	r0, #1
 8004726:	d0ae      	beq.n	8004686 <_printf_i+0x136>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	079b      	lsls	r3, r3, #30
 800472c:	d415      	bmi.n	800475a <_printf_i+0x20a>
 800472e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004730:	68e0      	ldr	r0, [r4, #12]
 8004732:	4298      	cmp	r0, r3
 8004734:	daa9      	bge.n	800468a <_printf_i+0x13a>
 8004736:	0018      	movs	r0, r3
 8004738:	e7a7      	b.n	800468a <_printf_i+0x13a>
 800473a:	0022      	movs	r2, r4
 800473c:	2301      	movs	r3, #1
 800473e:	9906      	ldr	r1, [sp, #24]
 8004740:	9805      	ldr	r0, [sp, #20]
 8004742:	9e07      	ldr	r6, [sp, #28]
 8004744:	3219      	adds	r2, #25
 8004746:	47b0      	blx	r6
 8004748:	3001      	adds	r0, #1
 800474a:	d09c      	beq.n	8004686 <_printf_i+0x136>
 800474c:	3501      	adds	r5, #1
 800474e:	68e3      	ldr	r3, [r4, #12]
 8004750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	42ab      	cmp	r3, r5
 8004756:	dcf0      	bgt.n	800473a <_printf_i+0x1ea>
 8004758:	e7e9      	b.n	800472e <_printf_i+0x1de>
 800475a:	2500      	movs	r5, #0
 800475c:	e7f7      	b.n	800474e <_printf_i+0x1fe>
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	08007e11 	.word	0x08007e11
 8004764:	08007e22 	.word	0x08007e22

08004768 <memmove>:
 8004768:	b510      	push	{r4, lr}
 800476a:	4288      	cmp	r0, r1
 800476c:	d902      	bls.n	8004774 <memmove+0xc>
 800476e:	188b      	adds	r3, r1, r2
 8004770:	4298      	cmp	r0, r3
 8004772:	d308      	bcc.n	8004786 <memmove+0x1e>
 8004774:	2300      	movs	r3, #0
 8004776:	429a      	cmp	r2, r3
 8004778:	d007      	beq.n	800478a <memmove+0x22>
 800477a:	5ccc      	ldrb	r4, [r1, r3]
 800477c:	54c4      	strb	r4, [r0, r3]
 800477e:	3301      	adds	r3, #1
 8004780:	e7f9      	b.n	8004776 <memmove+0xe>
 8004782:	5c8b      	ldrb	r3, [r1, r2]
 8004784:	5483      	strb	r3, [r0, r2]
 8004786:	3a01      	subs	r2, #1
 8004788:	d2fb      	bcs.n	8004782 <memmove+0x1a>
 800478a:	bd10      	pop	{r4, pc}

0800478c <_sbrk_r>:
 800478c:	2300      	movs	r3, #0
 800478e:	b570      	push	{r4, r5, r6, lr}
 8004790:	4d06      	ldr	r5, [pc, #24]	@ (80047ac <_sbrk_r+0x20>)
 8004792:	0004      	movs	r4, r0
 8004794:	0008      	movs	r0, r1
 8004796:	602b      	str	r3, [r5, #0]
 8004798:	f7fd f918 	bl	80019cc <_sbrk>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d103      	bne.n	80047a8 <_sbrk_r+0x1c>
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d000      	beq.n	80047a8 <_sbrk_r+0x1c>
 80047a6:	6023      	str	r3, [r4, #0]
 80047a8:	bd70      	pop	{r4, r5, r6, pc}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	2000075c 	.word	0x2000075c

080047b0 <memchr>:
 80047b0:	b2c9      	uxtb	r1, r1
 80047b2:	1882      	adds	r2, r0, r2
 80047b4:	4290      	cmp	r0, r2
 80047b6:	d101      	bne.n	80047bc <memchr+0xc>
 80047b8:	2000      	movs	r0, #0
 80047ba:	4770      	bx	lr
 80047bc:	7803      	ldrb	r3, [r0, #0]
 80047be:	428b      	cmp	r3, r1
 80047c0:	d0fb      	beq.n	80047ba <memchr+0xa>
 80047c2:	3001      	adds	r0, #1
 80047c4:	e7f6      	b.n	80047b4 <memchr+0x4>

080047c6 <_realloc_r>:
 80047c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047c8:	0006      	movs	r6, r0
 80047ca:	000c      	movs	r4, r1
 80047cc:	0015      	movs	r5, r2
 80047ce:	2900      	cmp	r1, #0
 80047d0:	d105      	bne.n	80047de <_realloc_r+0x18>
 80047d2:	0011      	movs	r1, r2
 80047d4:	f7ff fc5e 	bl	8004094 <_malloc_r>
 80047d8:	0004      	movs	r4, r0
 80047da:	0020      	movs	r0, r4
 80047dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047de:	2a00      	cmp	r2, #0
 80047e0:	d103      	bne.n	80047ea <_realloc_r+0x24>
 80047e2:	f7ff fbeb 	bl	8003fbc <_free_r>
 80047e6:	002c      	movs	r4, r5
 80047e8:	e7f7      	b.n	80047da <_realloc_r+0x14>
 80047ea:	f000 f81c 	bl	8004826 <_malloc_usable_size_r>
 80047ee:	0007      	movs	r7, r0
 80047f0:	4285      	cmp	r5, r0
 80047f2:	d802      	bhi.n	80047fa <_realloc_r+0x34>
 80047f4:	0843      	lsrs	r3, r0, #1
 80047f6:	42ab      	cmp	r3, r5
 80047f8:	d3ef      	bcc.n	80047da <_realloc_r+0x14>
 80047fa:	0029      	movs	r1, r5
 80047fc:	0030      	movs	r0, r6
 80047fe:	f7ff fc49 	bl	8004094 <_malloc_r>
 8004802:	9001      	str	r0, [sp, #4]
 8004804:	2800      	cmp	r0, #0
 8004806:	d101      	bne.n	800480c <_realloc_r+0x46>
 8004808:	9c01      	ldr	r4, [sp, #4]
 800480a:	e7e6      	b.n	80047da <_realloc_r+0x14>
 800480c:	002a      	movs	r2, r5
 800480e:	42bd      	cmp	r5, r7
 8004810:	d900      	bls.n	8004814 <_realloc_r+0x4e>
 8004812:	003a      	movs	r2, r7
 8004814:	0021      	movs	r1, r4
 8004816:	9801      	ldr	r0, [sp, #4]
 8004818:	f7ff fbc6 	bl	8003fa8 <memcpy>
 800481c:	0021      	movs	r1, r4
 800481e:	0030      	movs	r0, r6
 8004820:	f7ff fbcc 	bl	8003fbc <_free_r>
 8004824:	e7f0      	b.n	8004808 <_realloc_r+0x42>

08004826 <_malloc_usable_size_r>:
 8004826:	1f0b      	subs	r3, r1, #4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	1f18      	subs	r0, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	da01      	bge.n	8004834 <_malloc_usable_size_r+0xe>
 8004830:	580b      	ldr	r3, [r1, r0]
 8004832:	18c0      	adds	r0, r0, r3
 8004834:	4770      	bx	lr
	...

08004838 <_init>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr

08004844 <_fini>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr

08004850 <__FLASH_Program_Fast_veneer>:
 8004850:	b401      	push	{r0}
 8004852:	4802      	ldr	r0, [pc, #8]	@ (800485c <__FLASH_Program_Fast_veneer+0xc>)
 8004854:	4684      	mov	ip, r0
 8004856:	bc01      	pop	{r0}
 8004858:	4760      	bx	ip
 800485a:	bf00      	nop
 800485c:	20000071 	.word	0x20000071

Disassembly of section .data:

20000000 <ani_idle>:
20000000:	08004c6c 0800506c 0800546c 0800586c     lL..lP..lT..lX..
20000010:	08005c6c                                l\..

20000014 <SystemCoreClock>:
20000014:	00f42400                                .$..

20000018 <uwTickPrio>:
20000018:	00000004                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <_impure_ptr>:
20000020:	20000024                                $.. 

20000024 <_impure_data>:
20000024:	00000000 20000624 2000068c 200006f4     ....$.. ... ... 
	...

20000070 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000070:	b580      	push	{r7, lr}
20000072:	b088      	sub	sp, #32
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
20000078:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000007a:	231f      	movs	r3, #31
2000007c:	18fb      	adds	r3, r7, r3
2000007e:	2200      	movs	r2, #0
20000080:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000086:	683b      	ldr	r3, [r7, #0]
20000088:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000008a:	4b1a      	ldr	r3, [pc, #104]	@ (200000f4 <FLASH_Program_Fast+0x84>)
2000008c:	695a      	ldr	r2, [r3, #20]
2000008e:	4b19      	ldr	r3, [pc, #100]	@ (200000f4 <FLASH_Program_Fast+0x84>)
20000090:	2180      	movs	r1, #128	@ 0x80
20000092:	02c9      	lsls	r1, r1, #11
20000094:	430a      	orrs	r2, r1
20000096:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000098:	f3ef 8310 	mrs	r3, PRIMASK
2000009c:	60fb      	str	r3, [r7, #12]
  return(result);
2000009e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000a2:	b672      	cpsid	i
}
200000a4:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000a6:	e00f      	b.n	200000c8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000a8:	697a      	ldr	r2, [r7, #20]
200000aa:	69bb      	ldr	r3, [r7, #24]
200000ac:	6812      	ldr	r2, [r2, #0]
200000ae:	601a      	str	r2, [r3, #0]
    src += 4U;
200000b0:	697b      	ldr	r3, [r7, #20]
200000b2:	3304      	adds	r3, #4
200000b4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000b6:	69bb      	ldr	r3, [r7, #24]
200000b8:	3304      	adds	r3, #4
200000ba:	61bb      	str	r3, [r7, #24]
    index++;
200000bc:	211f      	movs	r1, #31
200000be:	187b      	adds	r3, r7, r1
200000c0:	781a      	ldrb	r2, [r3, #0]
200000c2:	187b      	adds	r3, r7, r1
200000c4:	3201      	adds	r2, #1
200000c6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000c8:	231f      	movs	r3, #31
200000ca:	18fb      	adds	r3, r7, r3
200000cc:	781b      	ldrb	r3, [r3, #0]
200000ce:	2b3f      	cmp	r3, #63	@ 0x3f
200000d0:	d9ea      	bls.n	200000a8 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000d2:	46c0      	nop			@ (mov r8, r8)
200000d4:	4b07      	ldr	r3, [pc, #28]	@ (200000f4 <FLASH_Program_Fast+0x84>)
200000d6:	691a      	ldr	r2, [r3, #16]
200000d8:	2380      	movs	r3, #128	@ 0x80
200000da:	025b      	lsls	r3, r3, #9
200000dc:	4013      	ands	r3, r2
200000de:	d1f9      	bne.n	200000d4 <FLASH_Program_Fast+0x64>
200000e0:	693b      	ldr	r3, [r7, #16]
200000e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e4:	68bb      	ldr	r3, [r7, #8]
200000e6:	f383 8810 	msr	PRIMASK, r3
}
200000ea:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000ec:	46c0      	nop			@ (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	b008      	add	sp, #32
200000f2:	bd80      	pop	{r7, pc}
200000f4:	40022000 	.word	0x40022000
