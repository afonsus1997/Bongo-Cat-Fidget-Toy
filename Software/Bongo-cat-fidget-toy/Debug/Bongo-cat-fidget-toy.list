
Bongo-cat-fidget-toy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003014  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002440  080030cc  080030cc  000040cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800550c  0800550c  00007020  2**0
                  CONTENTS
  4 .ARM          00000000  0800550c  0800550c  00007020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800550c  0800550c  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800550c  0800550c  0000650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005510  08005510  00006510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08005514  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000020  08005534  00007020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08005534  00007504  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e089  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002356  00000000  00000000  000150d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00017428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2e  00000000  00000000  00018270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001566b  00000000  00000000  00018d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118ad  00000000  00000000  0002e409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ac4  00000000  00000000  0003fcb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c777a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003404  00000000  00000000  000c77c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000cabc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000020 	.word	0x20000020
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080030b4 	.word	0x080030b4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000024 	.word	0x20000024
 80000fc:	080030b4 	.word	0x080030b4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <draw_animation>:
int sw_state_right;

uint8_t idle_cnt;


void draw_animation(char* frame){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af02      	add	r7, sp, #8
 80003f2:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 faf7 	bl	80009e8 <ssd1306_Fill>
	ssd1306_DrawBitmap(0,0,frame,128,64,White);
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	2301      	movs	r3, #1
 80003fe:	9301      	str	r3, [sp, #4]
 8000400:	2340      	movs	r3, #64	@ 0x40
 8000402:	9300      	str	r3, [sp, #0]
 8000404:	2380      	movs	r3, #128	@ 0x80
 8000406:	2100      	movs	r1, #0
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fba7 	bl	8000b5c <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 800040e:	f000 fb05 	bl	8000a1c <ssd1306_UpdateScreen>
}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
//  // Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim14 )
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	4b0d      	ldr	r3, [pc, #52]	@ (800045c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000428:	429a      	cmp	r2, r3
 800042a:	d112      	bne.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		sw_state_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);
 800042c:	23a0      	movs	r3, #160	@ 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	2140      	movs	r1, #64	@ 0x40
 8000432:	0018      	movs	r0, r3
 8000434:	f001 f870 	bl	8001518 <HAL_GPIO_ReadPin>
 8000438:	0003      	movs	r3, r0
 800043a:	001a      	movs	r2, r3
 800043c:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800043e:	601a      	str	r2, [r3, #0]
		sw_state_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);
 8000440:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000442:	2101      	movs	r1, #1
 8000444:	0018      	movs	r0, r3
 8000446:	f001 f867 	bl	8001518 <HAL_GPIO_ReadPin>
 800044a:	0003      	movs	r3, r0
 800044c:	001a      	movs	r2, r3
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000450:	601a      	str	r2, [r3, #0]
	}
}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b002      	add	sp, #8
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	20000090 	.word	0x20000090
 8000460:	200000dc 	.word	0x200000dc
 8000464:	50000400 	.word	0x50000400
 8000468:	200000e0 	.word	0x200000e0

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000472:	f000 fd65 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000476:	f000 f8a3 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047a:	f000 f97d 	bl	8000778 <MX_GPIO_Init>
  MX_I2C1_Init();
 800047e:	f000 f90f 	bl	80006a0 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000482:	f000 f953 	bl	800072c <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000486:	f000 f8f5 	bl	8000674 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800048a:	f000 fa41 	bl	8000910 <ssd1306_Init>
//    ssd1306_TestAll();

  state_e state = IDLE;
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
  int32_t idle_cntr = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	603b      	str	r3, [r7, #0]

  HAL_TIM_Base_Start_IT(&htim14);
 8000498:	4b40      	ldr	r3, [pc, #256]	@ (800059c <main+0x130>)
 800049a:	0018      	movs	r0, r3
 800049c:	f002 fbd6 	bl	8002c4c <HAL_TIM_Base_Start_IT>
  while(1) {
	switch(state){
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d002      	beq.n	80004ae <main+0x42>
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d02c      	beq.n	8000506 <main+0x9a>
 80004ac:	e7f8      	b.n	80004a0 <main+0x34>
	case IDLE:
		if(sw_state_left == 0 || sw_state_right == 0){
 80004ae:	4b3c      	ldr	r3, [pc, #240]	@ (80005a0 <main+0x134>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d003      	beq.n	80004be <main+0x52>
 80004b6:	4b3b      	ldr	r3, [pc, #236]	@ (80005a4 <main+0x138>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d10a      	bne.n	80004d4 <main+0x68>
			draw_animation(&img_both_up);
 80004be:	4b3a      	ldr	r3, [pc, #232]	@ (80005a8 <main+0x13c>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f7ff ff93 	bl	80003ec <draw_animation>
			HAL_Delay(50);
 80004c6:	2032      	movs	r0, #50	@ 0x32
 80004c8:	f000 fdc0 	bl	800104c <HAL_Delay>
			state = SWITCH;
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	2201      	movs	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
		}else {
			  draw_animation(ani_idle[idle_cnt]);
			  idle_cnt = (idle_cnt + 1 ) % ani_idle_LEN;
			  HAL_Delay(100);
		}
		break;
 80004d2:	e062      	b.n	800059a <main+0x12e>
			  draw_animation(ani_idle[idle_cnt]);
 80004d4:	4b35      	ldr	r3, [pc, #212]	@ (80005ac <main+0x140>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	001a      	movs	r2, r3
 80004da:	4b35      	ldr	r3, [pc, #212]	@ (80005b0 <main+0x144>)
 80004dc:	0092      	lsls	r2, r2, #2
 80004de:	58d3      	ldr	r3, [r2, r3]
 80004e0:	0018      	movs	r0, r3
 80004e2:	f7ff ff83 	bl	80003ec <draw_animation>
			  idle_cnt = (idle_cnt + 1 ) % ani_idle_LEN;
 80004e6:	4b31      	ldr	r3, [pc, #196]	@ (80005ac <main+0x140>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	2205      	movs	r2, #5
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f7ff ff75 	bl	80003e0 <__aeabi_idivmod>
 80004f6:	000b      	movs	r3, r1
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4b2c      	ldr	r3, [pc, #176]	@ (80005ac <main+0x140>)
 80004fc:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(100);
 80004fe:	2064      	movs	r0, #100	@ 0x64
 8000500:	f000 fda4 	bl	800104c <HAL_Delay>
		break;
 8000504:	e049      	b.n	800059a <main+0x12e>
	case SWITCH:
		if(sw_state_left == 1 && sw_state_right == 1){
 8000506:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <main+0x134>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d11d      	bne.n	800054a <main+0xde>
 800050e:	4b25      	ldr	r3, [pc, #148]	@ (80005a4 <main+0x138>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d119      	bne.n	800054a <main+0xde>
			draw_animation(&img_both_up);
 8000516:	4b24      	ldr	r3, [pc, #144]	@ (80005a8 <main+0x13c>)
 8000518:	0018      	movs	r0, r3
 800051a:	f7ff ff67 	bl	80003ec <draw_animation>
			if(idle_cntr == 0){
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d103      	bne.n	800052c <main+0xc0>
				idle_cntr = HAL_GetTick();
 8000524:	f000 fd88 	bl	8001038 <HAL_GetTick>
 8000528:	0003      	movs	r3, r0
 800052a:	603b      	str	r3, [r7, #0]
			}
			if(HAL_GetTick() - idle_cntr >= 2000){
 800052c:	f000 fd84 	bl	8001038 <HAL_GetTick>
 8000530:	0002      	movs	r2, r0
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	1ad2      	subs	r2, r2, r3
 8000536:	23fa      	movs	r3, #250	@ 0xfa
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	429a      	cmp	r2, r3
 800053c:	d32c      	bcc.n	8000598 <main+0x12c>
				idle_cntr = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	603b      	str	r3, [r7, #0]
				state = IDLE;
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
			if(HAL_GetTick() - idle_cntr >= 2000){
 8000548:	e026      	b.n	8000598 <main+0x12c>
			}
		}
		else {
			idle_cntr = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
			if(sw_state_left == 0 && sw_state_right == 0)
 800054e:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <main+0x134>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d107      	bne.n	8000566 <main+0xfa>
 8000556:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <main+0x138>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d103      	bne.n	8000566 <main+0xfa>
				draw_animation(&img_both_down);
 800055e:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <main+0x148>)
 8000560:	0018      	movs	r0, r3
 8000562:	f7ff ff43 	bl	80003ec <draw_animation>
			if(sw_state_left == 1 && sw_state_right == 0)
 8000566:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <main+0x134>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d107      	bne.n	800057e <main+0x112>
 800056e:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <main+0x138>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d103      	bne.n	800057e <main+0x112>
				draw_animation(&img_right_down);
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <main+0x14c>)
 8000578:	0018      	movs	r0, r3
 800057a:	f7ff ff37 	bl	80003ec <draw_animation>
			if(sw_state_left == 0 && sw_state_right == 1)
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <main+0x134>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d108      	bne.n	8000598 <main+0x12c>
 8000586:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <main+0x138>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d104      	bne.n	8000598 <main+0x12c>
				draw_animation(&img_left_down);
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <main+0x150>)
 8000590:	0018      	movs	r0, r3
 8000592:	f7ff ff2b 	bl	80003ec <draw_animation>
		}

//		HAL_Delay(100);
		break;
 8000596:	e7ff      	b.n	8000598 <main+0x12c>
 8000598:	46c0      	nop			@ (mov r8, r8)
	switch(state){
 800059a:	e781      	b.n	80004a0 <main+0x34>
 800059c:	20000090 	.word	0x20000090
 80005a0:	200000dc 	.word	0x200000dc
 80005a4:	200000e0 	.word	0x200000e0
 80005a8:	080034cc 	.word	0x080034cc
 80005ac:	200000e4 	.word	0x200000e4
 80005b0:	20000000 	.word	0x20000000
 80005b4:	080030cc 	.word	0x080030cc
 80005b8:	080050cc 	.word	0x080050cc
 80005bc:	08004ccc 	.word	0x08004ccc

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b093      	sub	sp, #76	@ 0x4c
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	2414      	movs	r4, #20
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	0018      	movs	r0, r3
 80005cc:	2334      	movs	r3, #52	@ 0x34
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f002 fd43 	bl	800305c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	0018      	movs	r0, r3
 80005da:	2310      	movs	r3, #16
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f002 fd3c 	bl	800305c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 fcd7 	bl	8001f9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2202      	movs	r2, #2
 80005f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	0052      	lsls	r2, r2, #1
 80005fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005fc:	0021      	movs	r1, r4
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2240      	movs	r2, #64	@ 0x40
 8000608:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2202      	movs	r2, #2
 800060e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2202      	movs	r2, #2
 8000614:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2208      	movs	r2, #8
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2280      	movs	r2, #128	@ 0x80
 8000626:	0292      	lsls	r2, r2, #10
 8000628:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2280      	movs	r2, #128	@ 0x80
 800062e:	0592      	lsls	r2, r2, #22
 8000630:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	187b      	adds	r3, r7, r1
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fcf1 	bl	800201c <HAL_RCC_OscConfig>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800063e:	f000 f927 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2207      	movs	r2, #7
 8000646:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2202      	movs	r2, #2
 800064c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2102      	movs	r1, #2
 800065e:	0018      	movs	r0, r3
 8000660:	f001 ffec 	bl	800263c <HAL_RCC_ClockConfig>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000668:	f000 f912 	bl	8000890 <Error_Handler>
  }
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b013      	add	sp, #76	@ 0x4c
 8000672:	bd90      	pop	{r4, r7, pc}

08000674 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	2004      	movs	r0, #4
 800067e:	f000 fdb5 	bl	80011ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000682:	2004      	movs	r0, #4
 8000684:	f000 fdc7 	bl	8001216 <HAL_NVIC_EnableIRQ>
  /* TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2013      	movs	r0, #19
 800068e:	f000 fdad 	bl	80011ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000692:	2013      	movs	r0, #19
 8000694:	f000 fdbf 	bl	8001216 <HAL_NVIC_EnableIRQ>
}
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <MX_I2C1_Init+0x80>)
 80006a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000724 <MX_I2C1_Init+0x84>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300B29;
 80006aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <MX_I2C1_Init+0x80>)
 80006ac:	4a1e      	ldr	r2, [pc, #120]	@ (8000728 <MX_I2C1_Init+0x88>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_I2C1_Init+0x80>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_I2C1_Init+0x80>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_I2C1_Init+0x80>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_I2C1_Init+0x80>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_I2C1_Init+0x80>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_I2C1_Init+0x80>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2C1_Init+0x80>)
 80006d6:	2280      	movs	r2, #128	@ 0x80
 80006d8:	0292      	lsls	r2, r2, #10
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_I2C1_Init+0x80>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 ff38 	bl	8001554 <HAL_I2C_Init>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f8d2 	bl	8000890 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_I2C1_Init+0x80>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 fb9d 	bl	8001e30 <HAL_I2CEx_ConfigAnalogFilter>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006fa:	f000 f8c9 	bl	8000890 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_I2C1_Init+0x80>)
 8000700:	2100      	movs	r1, #0
 8000702:	0018      	movs	r0, r3
 8000704:	f001 fbe0 	bl	8001ec8 <HAL_I2CEx_ConfigDigitalFilter>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800070c:	f000 f8c0 	bl	8000890 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000710:	2380      	movs	r3, #128	@ 0x80
 8000712:	035b      	lsls	r3, r3, #13
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fc23 	bl	8001f60 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000003c 	.word	0x2000003c
 8000724:	40005400 	.word	0x40005400
 8000728:	00300b29 	.word	0x00300b29

0800072c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_TIM14_Init+0x40>)
 8000732:	4a0f      	ldr	r2, [pc, #60]	@ (8000770 <MX_TIM14_Init+0x44>)
 8000734:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 100-1;
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <MX_TIM14_Init+0x40>)
 8000738:	2263      	movs	r2, #99	@ 0x63
 800073a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_TIM14_Init+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 64000-1;
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <MX_TIM14_Init+0x40>)
 8000744:	4a0b      	ldr	r2, [pc, #44]	@ (8000774 <MX_TIM14_Init+0x48>)
 8000746:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_TIM14_Init+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b07      	ldr	r3, [pc, #28]	@ (800076c <MX_TIM14_Init+0x40>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <MX_TIM14_Init+0x40>)
 8000756:	0018      	movs	r0, r3
 8000758:	f002 fa20 	bl	8002b9c <HAL_TIM_Base_Init>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000760:	f000 f896 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	20000090 	.word	0x20000090
 8000770:	40002000 	.word	0x40002000
 8000774:	0000f9ff 	.word	0x0000f9ff

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b089      	sub	sp, #36	@ 0x24
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	240c      	movs	r4, #12
 8000780:	193b      	adds	r3, r7, r4
 8000782:	0018      	movs	r0, r3
 8000784:	2314      	movs	r3, #20
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f002 fc67 	bl	800305c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b3b      	ldr	r3, [pc, #236]	@ (800087c <MX_GPIO_Init+0x104>)
 8000790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000792:	4b3a      	ldr	r3, [pc, #232]	@ (800087c <MX_GPIO_Init+0x104>)
 8000794:	2102      	movs	r1, #2
 8000796:	430a      	orrs	r2, r1
 8000798:	635a      	str	r2, [r3, #52]	@ 0x34
 800079a:	4b38      	ldr	r3, [pc, #224]	@ (800087c <MX_GPIO_Init+0x104>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800079e:	2202      	movs	r2, #2
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b35      	ldr	r3, [pc, #212]	@ (800087c <MX_GPIO_Init+0x104>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007aa:	4b34      	ldr	r3, [pc, #208]	@ (800087c <MX_GPIO_Init+0x104>)
 80007ac:	2104      	movs	r1, #4
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007b2:	4b32      	ldr	r3, [pc, #200]	@ (800087c <MX_GPIO_Init+0x104>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007b6:	2204      	movs	r2, #4
 80007b8:	4013      	ands	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b2f      	ldr	r3, [pc, #188]	@ (800087c <MX_GPIO_Init+0x104>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c2:	4b2e      	ldr	r3, [pc, #184]	@ (800087c <MX_GPIO_Init+0x104>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ca:	4b2c      	ldr	r3, [pc, #176]	@ (800087c <MX_GPIO_Init+0x104>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	4a29      	ldr	r2, [pc, #164]	@ (8000880 <MX_GPIO_Init+0x108>)
 80007da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2203      	movs	r2, #3
 80007e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	4a26      	ldr	r2, [pc, #152]	@ (8000884 <MX_GPIO_Init+0x10c>)
 80007ec:	0019      	movs	r1, r3
 80007ee:	0010      	movs	r0, r2
 80007f0:	f000 fd2e 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 PA8
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	4a24      	ldr	r2, [pc, #144]	@ (8000888 <MX_GPIO_Init+0x110>)
 80007f8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2203      	movs	r2, #3
 80007fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	193a      	adds	r2, r7, r4
 8000808:	23a0      	movs	r3, #160	@ 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	0011      	movs	r1, r2
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fd1e 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_LEFT_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2240      	movs	r2, #64	@ 0x40
 8000818:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000826:	193a      	adds	r2, r7, r4
 8000828:	23a0      	movs	r3, #160	@ 0xa0
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fd0e 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000846:	193b      	adds	r3, r7, r4
 8000848:	4a10      	ldr	r2, [pc, #64]	@ (800088c <MX_GPIO_Init+0x114>)
 800084a:	0019      	movs	r1, r3
 800084c:	0010      	movs	r0, r2
 800084e:	f000 fcff 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000852:	0021      	movs	r1, r4
 8000854:	187b      	adds	r3, r7, r1
 8000856:	22ff      	movs	r2, #255	@ 0xff
 8000858:	0052      	lsls	r2, r2, #1
 800085a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2203      	movs	r2, #3
 8000860:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	187b      	adds	r3, r7, r1
 800086a:	4a08      	ldr	r2, [pc, #32]	@ (800088c <MX_GPIO_Init+0x114>)
 800086c:	0019      	movs	r1, r3
 800086e:	0010      	movs	r0, r2
 8000870:	f000 fcee 	bl	8001250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b009      	add	sp, #36	@ 0x24
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	0000c040 	.word	0x0000c040
 8000884:	50000800 	.word	0x50000800
 8000888:	00009dbf 	.word	0x00009dbf
 800088c:	50000400 	.word	0x50000400

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	e7fd      	b.n	8000898 <Error_Handler+0x8>

0800089c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	0002      	movs	r2, r0
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80008b4:	4808      	ldr	r0, [pc, #32]	@ (80008d8 <ssd1306_WriteCommand+0x30>)
 80008b6:	2301      	movs	r3, #1
 80008b8:	425b      	negs	r3, r3
 80008ba:	9302      	str	r3, [sp, #8]
 80008bc:	2301      	movs	r3, #1
 80008be:	9301      	str	r3, [sp, #4]
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	2301      	movs	r3, #1
 80008c6:	2200      	movs	r2, #0
 80008c8:	2178      	movs	r1, #120	@ 0x78
 80008ca:	f000 fee9 	bl	80016a0 <HAL_I2C_Mem_Write>
}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	2000003c 	.word	0x2000003c

080008dc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af04      	add	r7, sp, #16
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	4808      	ldr	r0, [pc, #32]	@ (800090c <ssd1306_WriteData+0x30>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	4252      	negs	r2, r2
 80008f0:	9202      	str	r2, [sp, #8]
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2301      	movs	r3, #1
 80008fa:	2240      	movs	r2, #64	@ 0x40
 80008fc:	2178      	movs	r1, #120	@ 0x78
 80008fe:	f000 fecf 	bl	80016a0 <HAL_I2C_Mem_Write>
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b002      	add	sp, #8
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	2000003c 	.word	0x2000003c

08000910 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000914:	f7ff ffc2 	bl	800089c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000918:	2064      	movs	r0, #100	@ 0x64
 800091a:	f000 fb97 	bl	800104c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f9c2 	bl	8000ca8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000924:	2020      	movs	r0, #32
 8000926:	f7ff ffbf 	bl	80008a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff ffbc 	bl	80008a8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000930:	20b0      	movs	r0, #176	@ 0xb0
 8000932:	f7ff ffb9 	bl	80008a8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8000936:	20c0      	movs	r0, #192	@ 0xc0
 8000938:	f7ff ffb6 	bl	80008a8 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff ffb3 	bl	80008a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000942:	2010      	movs	r0, #16
 8000944:	f7ff ffb0 	bl	80008a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000948:	2040      	movs	r0, #64	@ 0x40
 800094a:	f7ff ffad 	bl	80008a8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);//FF
 800094e:	20ff      	movs	r0, #255	@ 0xff
 8000950:	f000 f991 	bl	8000c76 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8000954:	20a0      	movs	r0, #160	@ 0xa0
 8000956:	f7ff ffa7 	bl	80008a8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800095a:	20a6      	movs	r0, #166	@ 0xa6
 800095c:	f7ff ffa4 	bl	80008a8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000960:	20a8      	movs	r0, #168	@ 0xa8
 8000962:	f7ff ffa1 	bl	80008a8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000966:	203f      	movs	r0, #63	@ 0x3f
 8000968:	f7ff ff9e 	bl	80008a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800096c:	20a4      	movs	r0, #164	@ 0xa4
 800096e:	f7ff ff9b 	bl	80008a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000972:	20d3      	movs	r0, #211	@ 0xd3
 8000974:	f7ff ff98 	bl	80008a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff95 	bl	80008a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800097e:	20d5      	movs	r0, #213	@ 0xd5
 8000980:	f7ff ff92 	bl	80008a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000984:	20f0      	movs	r0, #240	@ 0xf0
 8000986:	f7ff ff8f 	bl	80008a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800098a:	20d9      	movs	r0, #217	@ 0xd9
 800098c:	f7ff ff8c 	bl	80008a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000990:	2022      	movs	r0, #34	@ 0x22
 8000992:	f7ff ff89 	bl	80008a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000996:	20da      	movs	r0, #218	@ 0xda
 8000998:	f7ff ff86 	bl	80008a8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800099c:	2012      	movs	r0, #18
 800099e:	f7ff ff83 	bl	80008a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80009a2:	20db      	movs	r0, #219	@ 0xdb
 80009a4:	f7ff ff80 	bl	80008a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80009a8:	2020      	movs	r0, #32
 80009aa:	f7ff ff7d 	bl	80008a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80009ae:	208d      	movs	r0, #141	@ 0x8d
 80009b0:	f7ff ff7a 	bl	80008a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80009b4:	2014      	movs	r0, #20
 80009b6:	f7ff ff77 	bl	80008a8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 f974 	bl	8000ca8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 f811 	bl	80009e8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80009c6:	f000 f829 	bl	8000a1c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <ssd1306_Init+0xd4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80009d0:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <ssd1306_Init+0xd4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80009d6:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <ssd1306_Init+0xd4>)
 80009d8:	2201      	movs	r2, #1
 80009da:	711a      	strb	r2, [r3, #4]
}
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	200004f8 	.word	0x200004f8

080009e8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	0002      	movs	r2, r0
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <ssd1306_Fill+0x18>
 80009fc:	2300      	movs	r3, #0
 80009fe:	e000      	b.n	8000a02 <ssd1306_Fill+0x1a>
 8000a00:	23ff      	movs	r3, #255	@ 0xff
 8000a02:	2282      	movs	r2, #130	@ 0x82
 8000a04:	00d2      	lsls	r2, r2, #3
 8000a06:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <ssd1306_Fill+0x30>)
 8000a08:	0019      	movs	r1, r3
 8000a0a:	f002 fb27 	bl	800305c <memset>
}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	200000e8 	.word	0x200000e8

08000a1c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	e01e      	b.n	8000a68 <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	3b50      	subs	r3, #80	@ 0x50
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff ff38 	bl	80008a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff ff35 	bl	80008a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000a3e:	2010      	movs	r0, #16
 8000a40:	f7ff ff32 	bl	80008a8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	0013      	movs	r3, r2
 8000a4a:	019b      	lsls	r3, r3, #6
 8000a4c:	189b      	adds	r3, r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	001a      	movs	r2, r3
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <ssd1306_UpdateScreen+0x60>)
 8000a54:	18d3      	adds	r3, r2, r3
 8000a56:	2182      	movs	r1, #130	@ 0x82
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff ff3f 	bl	80008dc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	3201      	adds	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b07      	cmp	r3, #7
 8000a6e:	d9dc      	bls.n	8000a2a <ssd1306_UpdateScreen+0xe>
    }
}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b002      	add	sp, #8
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	200000e8 	.word	0x200000e8

08000a80 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	0004      	movs	r4, r0
 8000a88:	0008      	movs	r0, r1
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	1c22      	adds	r2, r4, #0
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	1dbb      	adds	r3, r7, #6
 8000a94:	1c02      	adds	r2, r0, #0
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	1d7b      	adds	r3, r7, #5
 8000a9a:	1c0a      	adds	r2, r1, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b81      	cmp	r3, #129	@ 0x81
 8000aa4:	d853      	bhi.n	8000b4e <ssd1306_DrawPixel+0xce>
 8000aa6:	1dbb      	adds	r3, r7, #6
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b3f      	cmp	r3, #63	@ 0x3f
 8000aac:	d84f      	bhi.n	8000b4e <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000aae:	1d7b      	adds	r3, r7, #5
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d124      	bne.n	8000b00 <ssd1306_DrawPixel+0x80>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	1dbb      	adds	r3, r7, #6
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	08db      	lsrs	r3, r3, #3
 8000ac0:	b2d8      	uxtb	r0, r3
 8000ac2:	0001      	movs	r1, r0
 8000ac4:	000b      	movs	r3, r1
 8000ac6:	019b      	lsls	r3, r3, #6
 8000ac8:	185b      	adds	r3, r3, r1
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	18d3      	adds	r3, r2, r3
 8000ace:	4a22      	ldr	r2, [pc, #136]	@ (8000b58 <ssd1306_DrawPixel+0xd8>)
 8000ad0:	5cd3      	ldrb	r3, [r2, r3]
 8000ad2:	b25a      	sxtb	r2, r3
 8000ad4:	1dbb      	adds	r3, r7, #6
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2107      	movs	r1, #7
 8000ada:	400b      	ands	r3, r1
 8000adc:	2101      	movs	r1, #1
 8000ade:	4099      	lsls	r1, r3
 8000ae0:	000b      	movs	r3, r1
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b25c      	sxtb	r4, r3
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	0001      	movs	r1, r0
 8000aee:	000b      	movs	r3, r1
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	185b      	adds	r3, r3, r1
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	18d3      	adds	r3, r2, r3
 8000af8:	b2e1      	uxtb	r1, r4
 8000afa:	4a17      	ldr	r2, [pc, #92]	@ (8000b58 <ssd1306_DrawPixel+0xd8>)
 8000afc:	54d1      	strb	r1, [r2, r3]
 8000afe:	e027      	b.n	8000b50 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	1dbb      	adds	r3, r7, #6
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	b2d8      	uxtb	r0, r3
 8000b0c:	0001      	movs	r1, r0
 8000b0e:	000b      	movs	r3, r1
 8000b10:	019b      	lsls	r3, r3, #6
 8000b12:	185b      	adds	r3, r3, r1
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	18d3      	adds	r3, r2, r3
 8000b18:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <ssd1306_DrawPixel+0xd8>)
 8000b1a:	5cd3      	ldrb	r3, [r2, r3]
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	1dba      	adds	r2, r7, #6
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	2107      	movs	r1, #7
 8000b24:	400a      	ands	r2, r1
 8000b26:	2101      	movs	r1, #1
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	b252      	sxtb	r2, r2
 8000b2e:	43d2      	mvns	r2, r2
 8000b30:	b252      	sxtb	r2, r2
 8000b32:	4013      	ands	r3, r2
 8000b34:	b25c      	sxtb	r4, r3
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	0001      	movs	r1, r0
 8000b3c:	000b      	movs	r3, r1
 8000b3e:	019b      	lsls	r3, r3, #6
 8000b40:	185b      	adds	r3, r3, r1
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	18d3      	adds	r3, r2, r3
 8000b46:	b2e1      	uxtb	r1, r4
 8000b48:	4a03      	ldr	r2, [pc, #12]	@ (8000b58 <ssd1306_DrawPixel+0xd8>)
 8000b4a:	54d1      	strb	r1, [r2, r3]
 8000b4c:	e000      	b.n	8000b50 <ssd1306_DrawPixel+0xd0>
        return;
 8000b4e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b003      	add	sp, #12
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	200000e8 	.word	0x200000e8

08000b5c <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	0004      	movs	r4, r0
 8000b64:	0008      	movs	r0, r1
 8000b66:	603a      	str	r2, [r7, #0]
 8000b68:	0019      	movs	r1, r3
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	1c22      	adds	r2, r4, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	1dbb      	adds	r3, r7, #6
 8000b72:	1c02      	adds	r2, r0, #0
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	1d7b      	adds	r3, r7, #5
 8000b78:	1c0a      	adds	r2, r1, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000b7c:	1d7b      	adds	r3, r7, #5
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	3307      	adds	r3, #7
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	da00      	bge.n	8000b88 <ssd1306_DrawBitmap+0x2c>
 8000b86:	3307      	adds	r3, #7
 8000b88:	10db      	asrs	r3, r3, #3
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8000b92:	230f      	movs	r3, #15
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b81      	cmp	r3, #129	@ 0x81
 8000ba0:	d865      	bhi.n	8000c6e <ssd1306_DrawBitmap+0x112>
 8000ba2:	1dbb      	adds	r3, r7, #6
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ba8:	d861      	bhi.n	8000c6e <ssd1306_DrawBitmap+0x112>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000baa:	230e      	movs	r3, #14
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e053      	b.n	8000c5c <ssd1306_DrawBitmap+0x100>
        for (uint8_t i = 0; i < w; i++) {
 8000bb4:	230d      	movs	r3, #13
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	e03c      	b.n	8000c38 <ssd1306_DrawBitmap+0xdc>
            if (i & 7) {
 8000bbe:	230d      	movs	r3, #13
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d006      	beq.n	8000bd8 <ssd1306_DrawBitmap+0x7c>
                byte <<= 1;
 8000bca:	230f      	movs	r3, #15
 8000bcc:	18fa      	adds	r2, r7, r3
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	18db      	adds	r3, r3, r3
 8000bd4:	7013      	strb	r3, [r2, #0]
 8000bd6:	e014      	b.n	8000c02 <ssd1306_DrawBitmap+0xa6>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000bd8:	230e      	movs	r3, #14
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	220a      	movs	r2, #10
 8000be0:	18ba      	adds	r2, r7, r2
 8000be2:	2100      	movs	r1, #0
 8000be4:	5e52      	ldrsh	r2, [r2, r1]
 8000be6:	4353      	muls	r3, r2
 8000be8:	220d      	movs	r2, #13
 8000bea:	18ba      	adds	r2, r7, r2
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	08d2      	lsrs	r2, r2, #3
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	189b      	adds	r3, r3, r2
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	189a      	adds	r2, r3, r2
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 8000c02:	230f      	movs	r3, #15
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	da0e      	bge.n	8000c2c <ssd1306_DrawBitmap+0xd0>
                ssd1306_DrawPixel(x + i, y, color);
 8000c0e:	1dfa      	adds	r2, r7, #7
 8000c10:	230d      	movs	r3, #13
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	18d3      	adds	r3, r2, r3
 8000c1a:	b2d8      	uxtb	r0, r3
 8000c1c:	2324      	movs	r3, #36	@ 0x24
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	1dbb      	adds	r3, r7, #6
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	0019      	movs	r1, r3
 8000c28:	f7ff ff2a 	bl	8000a80 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000c2c:	210d      	movs	r1, #13
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	3201      	adds	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
 8000c38:	230d      	movs	r3, #13
 8000c3a:	18fa      	adds	r2, r7, r3
 8000c3c:	1d7b      	adds	r3, r7, #5
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3bb      	bcc.n	8000bbe <ssd1306_DrawBitmap+0x62>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000c46:	210e      	movs	r1, #14
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	3201      	adds	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	1dbb      	adds	r3, r7, #6
 8000c54:	781a      	ldrb	r2, [r3, #0]
 8000c56:	1dbb      	adds	r3, r7, #6
 8000c58:	3201      	adds	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	230e      	movs	r3, #14
 8000c5e:	18fa      	adds	r2, r7, r3
 8000c60:	2320      	movs	r3, #32
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d3a3      	bcc.n	8000bb4 <ssd1306_DrawBitmap+0x58>
            }
        }
    }
    return;
 8000c6c:	e000      	b.n	8000c70 <ssd1306_DrawBitmap+0x114>
        return;
 8000c6e:	46c0      	nop			@ (mov r8, r8)
}
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b005      	add	sp, #20
 8000c74:	bd90      	pop	{r4, r7, pc}

08000c76 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	0002      	movs	r2, r0
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000c82:	210f      	movs	r1, #15
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2281      	movs	r2, #129	@ 0x81
 8000c88:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff fe0a 	bl	80008a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000c94:	1dfb      	adds	r3, r7, #7
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff fe05 	bl	80008a8 <ssd1306_WriteCommand>
}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	0002      	movs	r2, r0
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d007      	beq.n	8000ccc <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	22af      	movs	r2, #175	@ 0xaf
 8000cc2:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <ssd1306_SetDisplayOn+0x48>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	715a      	strb	r2, [r3, #5]
 8000cca:	e006      	b.n	8000cda <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	22ae      	movs	r2, #174	@ 0xae
 8000cd2:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <ssd1306_SetDisplayOn+0x48>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000cda:	230f      	movs	r3, #15
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff fde1 	bl	80008a8 <ssd1306_WriteCommand>
}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b004      	add	sp, #16
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	200004f8 	.word	0x200004f8

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <HAL_MspInit+0x44>)
 8000cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_MspInit+0x44>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	430a      	orrs	r2, r1
 8000d04:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <HAL_MspInit+0x44>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_MspInit+0x44>)
 8000d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <HAL_MspInit+0x44>)
 8000d18:	2180      	movs	r1, #128	@ 0x80
 8000d1a:	0549      	lsls	r1, r1, #21
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <HAL_MspInit+0x44>)
 8000d22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	055b      	lsls	r3, r3, #21
 8000d28:	4013      	ands	r3, r2
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b091      	sub	sp, #68	@ 0x44
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	232c      	movs	r3, #44	@ 0x2c
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f002 f984 	bl	800305c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	2414      	movs	r4, #20
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	2318      	movs	r3, #24
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f002 f97c 	bl	800305c <memset>
  if(hi2c->Instance==I2C1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a35      	ldr	r2, [pc, #212]	@ (8000e40 <HAL_I2C_MspInit+0x104>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d163      	bne.n	8000e36 <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2220      	movs	r2, #32
 8000d72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fde7 	bl	8002950 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d86:	f7ff fd83 	bl	8000890 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e44 <HAL_I2C_MspInit+0x108>)
 8000d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e44 <HAL_I2C_MspInit+0x108>)
 8000d90:	2102      	movs	r1, #2
 8000d92:	430a      	orrs	r2, r1
 8000d94:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d96:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <HAL_I2C_MspInit+0x108>)
 8000d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <HAL_I2C_MspInit+0x108>)
 8000da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000da6:	4b27      	ldr	r3, [pc, #156]	@ (8000e44 <HAL_I2C_MspInit+0x108>)
 8000da8:	2101      	movs	r1, #1
 8000daa:	430a      	orrs	r2, r1
 8000dac:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dae:	4b25      	ldr	r3, [pc, #148]	@ (8000e44 <HAL_I2C_MspInit+0x108>)
 8000db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db2:	2201      	movs	r2, #1
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dba:	212c      	movs	r1, #44	@ 0x2c
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2280      	movs	r2, #128	@ 0x80
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc4:	000c      	movs	r4, r1
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	2212      	movs	r2, #18
 8000dca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2201      	movs	r2, #1
 8000dd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	2206      	movs	r2, #6
 8000ddc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <HAL_I2C_MspInit+0x10c>)
 8000de2:	0019      	movs	r1, r3
 8000de4:	0010      	movs	r0, r2
 8000de6:	f000 fa33 	bl	8001250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dea:	0021      	movs	r1, r4
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2280      	movs	r2, #128	@ 0x80
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2212      	movs	r2, #18
 8000df8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2203      	movs	r2, #3
 8000e04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2206      	movs	r2, #6
 8000e0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	187a      	adds	r2, r7, r1
 8000e0e:	23a0      	movs	r3, #160	@ 0xa0
 8000e10:	05db      	lsls	r3, r3, #23
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 fa1b 	bl	8001250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_I2C_MspInit+0x108>)
 8000e1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <HAL_I2C_MspInit+0x108>)
 8000e20:	2180      	movs	r1, #128	@ 0x80
 8000e22:	0389      	lsls	r1, r1, #14
 8000e24:	430a      	orrs	r2, r1
 8000e26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_I2C_MspInit+0x108>)
 8000e2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e2c:	2380      	movs	r3, #128	@ 0x80
 8000e2e:	039b      	lsls	r3, r3, #14
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b011      	add	sp, #68	@ 0x44
 8000e3c:	bd90      	pop	{r4, r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	40005400 	.word	0x40005400
 8000e44:	40021000 	.word	0x40021000
 8000e48:	50000400 	.word	0x50000400

08000e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <HAL_TIM_Base_MspInit+0x38>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10d      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <HAL_TIM_Base_MspInit+0x3c>)
 8000e60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_TIM_Base_MspInit+0x3c>)
 8000e64:	2180      	movs	r1, #128	@ 0x80
 8000e66:	0209      	lsls	r1, r1, #8
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_TIM_Base_MspInit+0x3c>)
 8000e6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e70:	2380      	movs	r3, #128	@ 0x80
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	40002000 	.word	0x40002000
 8000e88:	40021000 	.word	0x40021000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e90:	46c0      	nop			@ (mov r8, r8)
 8000e92:	e7fd      	b.n	8000e90 <NMI_Handler+0x4>

08000e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	e7fd      	b.n	8000e98 <HardFault_Handler+0x4>

08000e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 f8ae 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb8:	46c0      	nop			@ (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <TIM14_IRQHandler+0x14>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 ff0a 	bl	8002ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	20000090 	.word	0x20000090

08000ee0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eec:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef0:	f7ff fff6 	bl	8000ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	@ (8000f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <LoopForever+0xe>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f38 <LoopForever+0x16>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f1a:	f002 f8a7 	bl	800306c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f1e:	f7ff faa5 	bl	800046c <main>

08000f22 <LoopForever>:

LoopForever:
  b LoopForever
 8000f22:	e7fe      	b.n	8000f22 <LoopForever>
  ldr   r0, =_estack
 8000f24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000f30:	08005514 	.word	0x08005514
  ldr r2, =_sbss
 8000f34:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000f38:	20000504 	.word	0x20000504

08000f3c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <HAL_Init+0x3c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <HAL_Init+0x3c>)
 8000f52:	2180      	movs	r1, #128	@ 0x80
 8000f54:	0049      	lsls	r1, r1, #1
 8000f56:	430a      	orrs	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f000 f810 	bl	8000f80 <HAL_InitTick>
 8000f60:	1e03      	subs	r3, r0, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	e001      	b.n	8000f70 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f7ff fec2 	bl	8000cf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	781b      	ldrb	r3, [r3, #0]
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40022000 	.word	0x40022000

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <HAL_InitTick+0x88>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d02b      	beq.n	8000ff0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f98:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <HAL_InitTick+0x8c>)
 8000f9a:	681c      	ldr	r4, [r3, #0]
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <HAL_InitTick+0x88>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	23fa      	movs	r3, #250	@ 0xfa
 8000fa4:	0098      	lsls	r0, r3, #2
 8000fa6:	f7ff f8ab 	bl	8000100 <__udivsi3>
 8000faa:	0003      	movs	r3, r0
 8000fac:	0019      	movs	r1, r3
 8000fae:	0020      	movs	r0, r4
 8000fb0:	f7ff f8a6 	bl	8000100 <__udivsi3>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 f93d 	bl	8001236 <HAL_SYSTICK_Config>
 8000fbc:	1e03      	subs	r3, r0, #0
 8000fbe:	d112      	bne.n	8000fe6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d80a      	bhi.n	8000fdc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	425b      	negs	r3, r3
 8000fcc:	2200      	movs	r2, #0
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 f90c 	bl	80011ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <HAL_InitTick+0x90>)
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e00d      	b.n	8000ff8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	e008      	b.n	8000ff8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e003      	b.n	8000ff8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	781b      	ldrb	r3, [r3, #0]
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b005      	add	sp, #20
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	2000001c 	.word	0x2000001c
 800100c:	20000014 	.word	0x20000014
 8001010:	20000018 	.word	0x20000018

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <HAL_IncTick+0x1c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	001a      	movs	r2, r3
 800101e:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <HAL_IncTick+0x20>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	18d2      	adds	r2, r2, r3
 8001024:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <HAL_IncTick+0x20>)
 8001026:	601a      	str	r2, [r3, #0]
}
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	2000001c 	.word	0x2000001c
 8001034:	20000500 	.word	0x20000500

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b02      	ldr	r3, [pc, #8]	@ (8001048 <HAL_GetTick+0x10>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	20000500 	.word	0x20000500

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff fff0 	bl	8001038 <HAL_GetTick>
 8001058:	0003      	movs	r3, r0
 800105a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3301      	adds	r3, #1
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_Delay+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	001a      	movs	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	189b      	adds	r3, r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	f7ff ffe0 	bl	8001038 <HAL_GetTick>
 8001078:	0002      	movs	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b004      	add	sp, #16
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	2000001c 	.word	0x2000001c

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	0002      	movs	r2, r0
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80010a6:	d809      	bhi.n	80010bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a8:	1dfb      	adds	r3, r7, #7
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	001a      	movs	r2, r3
 80010ae:	231f      	movs	r3, #31
 80010b0:	401a      	ands	r2, r3
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <__NVIC_EnableIRQ+0x30>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	4091      	lsls	r1, r2
 80010b8:	000a      	movs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	0002      	movs	r2, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b7f      	cmp	r3, #127	@ 0x7f
 80010dc:	d828      	bhi.n	8001130 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010de:	4a2f      	ldr	r2, [pc, #188]	@ (800119c <__NVIC_SetPriority+0xd4>)
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	33c0      	adds	r3, #192	@ 0xc0
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	589b      	ldr	r3, [r3, r2]
 80010ee:	1dfa      	adds	r2, r7, #7
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	0011      	movs	r1, r2
 80010f4:	2203      	movs	r2, #3
 80010f6:	400a      	ands	r2, r1
 80010f8:	00d2      	lsls	r2, r2, #3
 80010fa:	21ff      	movs	r1, #255	@ 0xff
 80010fc:	4091      	lsls	r1, r2
 80010fe:	000a      	movs	r2, r1
 8001100:	43d2      	mvns	r2, r2
 8001102:	401a      	ands	r2, r3
 8001104:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	019b      	lsls	r3, r3, #6
 800110a:	22ff      	movs	r2, #255	@ 0xff
 800110c:	401a      	ands	r2, r3
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	0018      	movs	r0, r3
 8001114:	2303      	movs	r3, #3
 8001116:	4003      	ands	r3, r0
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800111c:	481f      	ldr	r0, [pc, #124]	@ (800119c <__NVIC_SetPriority+0xd4>)
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b25b      	sxtb	r3, r3
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	430a      	orrs	r2, r1
 8001128:	33c0      	adds	r3, #192	@ 0xc0
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800112e:	e031      	b.n	8001194 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001130:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <__NVIC_SetPriority+0xd8>)
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	0019      	movs	r1, r3
 8001138:	230f      	movs	r3, #15
 800113a:	400b      	ands	r3, r1
 800113c:	3b08      	subs	r3, #8
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3306      	adds	r3, #6
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	18d3      	adds	r3, r2, r3
 8001146:	3304      	adds	r3, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1dfa      	adds	r2, r7, #7
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	0011      	movs	r1, r2
 8001150:	2203      	movs	r2, #3
 8001152:	400a      	ands	r2, r1
 8001154:	00d2      	lsls	r2, r2, #3
 8001156:	21ff      	movs	r1, #255	@ 0xff
 8001158:	4091      	lsls	r1, r2
 800115a:	000a      	movs	r2, r1
 800115c:	43d2      	mvns	r2, r2
 800115e:	401a      	ands	r2, r3
 8001160:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	22ff      	movs	r2, #255	@ 0xff
 8001168:	401a      	ands	r2, r3
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	0018      	movs	r0, r3
 8001170:	2303      	movs	r3, #3
 8001172:	4003      	ands	r3, r0
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001178:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <__NVIC_SetPriority+0xd8>)
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	001c      	movs	r4, r3
 8001180:	230f      	movs	r3, #15
 8001182:	4023      	ands	r3, r4
 8001184:	3b08      	subs	r3, #8
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	430a      	orrs	r2, r1
 800118a:	3306      	adds	r3, #6
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	18c3      	adds	r3, r0, r3
 8001190:	3304      	adds	r3, #4
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b003      	add	sp, #12
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	1e5a      	subs	r2, r3, #1
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	045b      	lsls	r3, r3, #17
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d301      	bcc.n	80011bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b8:	2301      	movs	r3, #1
 80011ba:	e010      	b.n	80011de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <SysTick_Config+0x44>)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	3a01      	subs	r2, #1
 80011c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c4:	2301      	movs	r3, #1
 80011c6:	425b      	negs	r3, r3
 80011c8:	2103      	movs	r1, #3
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff ff7c 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <SysTick_Config+0x44>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <SysTick_Config+0x44>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	210f      	movs	r1, #15
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	1c02      	adds	r2, r0, #0
 80011fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	187b      	adds	r3, r7, r1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b25b      	sxtb	r3, r3
 8001206:	0011      	movs	r1, r2
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	0002      	movs	r2, r0
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b25b      	sxtb	r3, r3
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff ff33 	bl	8001094 <__NVIC_EnableIRQ>
}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff ffaf 	bl	80011a4 <SysTick_Config>
 8001246:	0003      	movs	r3, r0
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	e147      	b.n	80014f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2101      	movs	r1, #1
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	4013      	ands	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d100      	bne.n	8001278 <HAL_GPIO_Init+0x28>
 8001276:	e138      	b.n	80014ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2203      	movs	r2, #3
 800127e:	4013      	ands	r3, r2
 8001280:	2b01      	cmp	r3, #1
 8001282:	d005      	beq.n	8001290 <HAL_GPIO_Init+0x40>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	4013      	ands	r3, r2
 800128c:	2b02      	cmp	r3, #2
 800128e:	d130      	bne.n	80012f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012c6:	2201      	movs	r2, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	2201      	movs	r2, #1
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2203      	movs	r2, #3
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d017      	beq.n	800132e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	4013      	ands	r3, r2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d123      	bne.n	8001382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	58d3      	ldr	r3, [r2, r3]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2207      	movs	r2, #7
 800134c:	4013      	ands	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	43da      	mvns	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2107      	movs	r1, #7
 8001366:	400b      	ands	r3, r1
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	6939      	ldr	r1, [r7, #16]
 8001380:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	43da      	mvns	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	401a      	ands	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	23c0      	movs	r3, #192	@ 0xc0
 80013bc:	029b      	lsls	r3, r3, #10
 80013be:	4013      	ands	r3, r2
 80013c0:	d100      	bne.n	80013c4 <HAL_GPIO_Init+0x174>
 80013c2:	e092      	b.n	80014ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013c4:	4a50      	ldr	r2, [pc, #320]	@ (8001508 <HAL_GPIO_Init+0x2b8>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3318      	adds	r3, #24
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	589b      	ldr	r3, [r3, r2]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2203      	movs	r2, #3
 80013d6:	4013      	ands	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	220f      	movs	r2, #15
 80013dc:	409a      	lsls	r2, r3
 80013de:	0013      	movs	r3, r2
 80013e0:	43da      	mvns	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	23a0      	movs	r3, #160	@ 0xa0
 80013ec:	05db      	lsls	r3, r3, #23
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x1ca>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a45      	ldr	r2, [pc, #276]	@ (800150c <HAL_GPIO_Init+0x2bc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x1c6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a44      	ldr	r2, [pc, #272]	@ (8001510 <HAL_GPIO_Init+0x2c0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x1c2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a43      	ldr	r2, [pc, #268]	@ (8001514 <HAL_GPIO_Init+0x2c4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x1be>
 800140a:	2303      	movs	r3, #3
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x1cc>
 800140e:	2305      	movs	r3, #5
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x1cc>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x1cc>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x1cc>
 800141a:	2300      	movs	r3, #0
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	2103      	movs	r1, #3
 8001420:	400a      	ands	r2, r1
 8001422:	00d2      	lsls	r2, r2, #3
 8001424:	4093      	lsls	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800142c:	4936      	ldr	r1, [pc, #216]	@ (8001508 <HAL_GPIO_Init+0x2b8>)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3318      	adds	r3, #24
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800143a:	4b33      	ldr	r3, [pc, #204]	@ (8001508 <HAL_GPIO_Init+0x2b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	2380      	movs	r3, #128	@ 0x80
 8001450:	035b      	lsls	r3, r3, #13
 8001452:	4013      	ands	r3, r2
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <HAL_GPIO_Init+0x2b8>)
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001464:	4b28      	ldr	r3, [pc, #160]	@ (8001508 <HAL_GPIO_Init+0x2b8>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43da      	mvns	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	039b      	lsls	r3, r3, #14
 800147c:	4013      	ands	r3, r2
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <HAL_GPIO_Init+0x2b8>)
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800148e:	4a1e      	ldr	r2, [pc, #120]	@ (8001508 <HAL_GPIO_Init+0x2b8>)
 8001490:	2384      	movs	r3, #132	@ 0x84
 8001492:	58d3      	ldr	r3, [r2, r3]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43da      	mvns	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	029b      	lsls	r3, r3, #10
 80014a8:	4013      	ands	r3, r2
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014b4:	4914      	ldr	r1, [pc, #80]	@ (8001508 <HAL_GPIO_Init+0x2b8>)
 80014b6:	2284      	movs	r2, #132	@ 0x84
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014bc:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <HAL_GPIO_Init+0x2b8>)
 80014be:	2380      	movs	r3, #128	@ 0x80
 80014c0:	58d3      	ldr	r3, [r2, r3]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43da      	mvns	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	025b      	lsls	r3, r3, #9
 80014d6:	4013      	ands	r3, r2
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014e2:	4909      	ldr	r1, [pc, #36]	@ (8001508 <HAL_GPIO_Init+0x2b8>)
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	40da      	lsrs	r2, r3
 80014f8:	1e13      	subs	r3, r2, #0
 80014fa:	d000      	beq.n	80014fe <HAL_GPIO_Init+0x2ae>
 80014fc:	e6b0      	b.n	8001260 <HAL_GPIO_Init+0x10>
  }
}
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	46c0      	nop			@ (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b006      	add	sp, #24
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021800 	.word	0x40021800
 800150c:	50000400 	.word	0x50000400
 8001510:	50000800 	.word	0x50000800
 8001514:	50000c00 	.word	0x50000c00

08001518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	000a      	movs	r2, r1
 8001522:	1cbb      	adds	r3, r7, #2
 8001524:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	1cba      	adds	r2, r7, #2
 800152c:	8812      	ldrh	r2, [r2, #0]
 800152e:	4013      	ands	r3, r2
 8001530:	d004      	beq.n	800153c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001532:	230f      	movs	r3, #15
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
 800153a:	e003      	b.n	8001544 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800153c:	230f      	movs	r3, #15
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001544:	230f      	movs	r3, #15
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	781b      	ldrb	r3, [r3, #0]
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b004      	add	sp, #16
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e08f      	b.n	8001686 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2241      	movs	r2, #65	@ 0x41
 800156a:	5c9b      	ldrb	r3, [r3, r2]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d107      	bne.n	8001582 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2240      	movs	r2, #64	@ 0x40
 8001576:	2100      	movs	r1, #0
 8001578:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff fbdd 	bl	8000d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2241      	movs	r2, #65	@ 0x41
 8001586:	2124      	movs	r1, #36	@ 0x24
 8001588:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	438a      	bics	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	493b      	ldr	r1, [pc, #236]	@ (8001690 <HAL_I2C_Init+0x13c>)
 80015a4:	400a      	ands	r2, r1
 80015a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4938      	ldr	r1, [pc, #224]	@ (8001694 <HAL_I2C_Init+0x140>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2180      	movs	r1, #128	@ 0x80
 80015ca:	0209      	lsls	r1, r1, #8
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	e007      	b.n	80015e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2184      	movs	r1, #132	@ 0x84
 80015dc:	0209      	lsls	r1, r1, #8
 80015de:	430a      	orrs	r2, r1
 80015e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d109      	bne.n	80015fe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2180      	movs	r1, #128	@ 0x80
 80015f6:	0109      	lsls	r1, r1, #4
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	e007      	b.n	800160e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4923      	ldr	r1, [pc, #140]	@ (8001698 <HAL_I2C_Init+0x144>)
 800160a:	400a      	ands	r2, r1
 800160c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4920      	ldr	r1, [pc, #128]	@ (800169c <HAL_I2C_Init+0x148>)
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	491a      	ldr	r1, [pc, #104]	@ (8001694 <HAL_I2C_Init+0x140>)
 800162a:	400a      	ands	r2, r1
 800162c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	431a      	orrs	r2, r3
 8001638:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69d9      	ldr	r1, [r3, #28]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2101      	movs	r1, #1
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2241      	movs	r2, #65	@ 0x41
 8001672:	2120      	movs	r1, #32
 8001674:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2242      	movs	r2, #66	@ 0x42
 8001680:	2100      	movs	r1, #0
 8001682:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b002      	add	sp, #8
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	f0ffffff 	.word	0xf0ffffff
 8001694:	ffff7fff 	.word	0xffff7fff
 8001698:	fffff7ff 	.word	0xfffff7ff
 800169c:	02008000 	.word	0x02008000

080016a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b089      	sub	sp, #36	@ 0x24
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	000c      	movs	r4, r1
 80016aa:	0010      	movs	r0, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	230a      	movs	r3, #10
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	1c22      	adds	r2, r4, #0
 80016b4:	801a      	strh	r2, [r3, #0]
 80016b6:	2308      	movs	r3, #8
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	1c02      	adds	r2, r0, #0
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	1dbb      	adds	r3, r7, #6
 80016c0:	1c0a      	adds	r2, r1, #0
 80016c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2241      	movs	r2, #65	@ 0x41
 80016c8:	5c9b      	ldrb	r3, [r3, r2]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d000      	beq.n	80016d2 <HAL_I2C_Mem_Write+0x32>
 80016d0:	e10c      	b.n	80018ec <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80016d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <HAL_I2C_Mem_Write+0x42>
 80016d8:	232c      	movs	r3, #44	@ 0x2c
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d105      	bne.n	80016ee <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2280      	movs	r2, #128	@ 0x80
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0ff      	b.n	80018ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2240      	movs	r2, #64	@ 0x40
 80016f2:	5c9b      	ldrb	r3, [r3, r2]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_I2C_Mem_Write+0x5c>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e0f8      	b.n	80018ee <HAL_I2C_Mem_Write+0x24e>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2240      	movs	r2, #64	@ 0x40
 8001700:	2101      	movs	r1, #1
 8001702:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001704:	f7ff fc98 	bl	8001038 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800170c:	2380      	movs	r3, #128	@ 0x80
 800170e:	0219      	lsls	r1, r3, #8
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2319      	movs	r3, #25
 8001718:	2201      	movs	r2, #1
 800171a:	f000 f975 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d001      	beq.n	8001726 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0e3      	b.n	80018ee <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2241      	movs	r2, #65	@ 0x41
 800172a:	2121      	movs	r1, #33	@ 0x21
 800172c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2242      	movs	r2, #66	@ 0x42
 8001732:	2140      	movs	r1, #64	@ 0x40
 8001734:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	222c      	movs	r2, #44	@ 0x2c
 8001746:	18ba      	adds	r2, r7, r2
 8001748:	8812      	ldrh	r2, [r2, #0]
 800174a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001752:	1dbb      	adds	r3, r7, #6
 8001754:	881c      	ldrh	r4, [r3, #0]
 8001756:	2308      	movs	r3, #8
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	230a      	movs	r3, #10
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	8819      	ldrh	r1, [r3, #0]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	0023      	movs	r3, r4
 800176e:	f000 f8c5 	bl	80018fc <I2C_RequestMemoryWrite>
 8001772:	1e03      	subs	r3, r0, #0
 8001774:	d005      	beq.n	8001782 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2240      	movs	r2, #64	@ 0x40
 800177a:	2100      	movs	r1, #0
 800177c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0b5      	b.n	80018ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001786:	b29b      	uxth	r3, r3
 8001788:	2bff      	cmp	r3, #255	@ 0xff
 800178a:	d911      	bls.n	80017b0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	22ff      	movs	r2, #255	@ 0xff
 8001790:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001796:	b2da      	uxtb	r2, r3
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	045c      	lsls	r4, r3, #17
 800179c:	230a      	movs	r3, #10
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	8819      	ldrh	r1, [r3, #0]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	2300      	movs	r3, #0
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	0023      	movs	r3, r4
 80017aa:	f000 fb07 	bl	8001dbc <I2C_TransferConfig>
 80017ae:	e012      	b.n	80017d6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	049c      	lsls	r4, r3, #18
 80017c4:	230a      	movs	r3, #10
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	8819      	ldrh	r1, [r3, #0]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	2300      	movs	r3, #0
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	0023      	movs	r3, r4
 80017d2:	f000 faf3 	bl	8001dbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	0018      	movs	r0, r3
 80017de:	f000 f96b 	bl	8001ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e081      	b.n	80018ee <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d03a      	beq.n	800189a <HAL_I2C_Mem_Write+0x1fa>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001828:	2b00      	cmp	r3, #0
 800182a:	d136      	bne.n	800189a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800182c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	0013      	movs	r3, r2
 8001836:	2200      	movs	r2, #0
 8001838:	2180      	movs	r1, #128	@ 0x80
 800183a:	f000 f8e5 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e053      	b.n	80018ee <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	2bff      	cmp	r3, #255	@ 0xff
 800184e:	d911      	bls.n	8001874 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	22ff      	movs	r2, #255	@ 0xff
 8001854:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185a:	b2da      	uxtb	r2, r3
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	045c      	lsls	r4, r3, #17
 8001860:	230a      	movs	r3, #10
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	8819      	ldrh	r1, [r3, #0]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	2300      	movs	r3, #0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	0023      	movs	r3, r4
 800186e:	f000 faa5 	bl	8001dbc <I2C_TransferConfig>
 8001872:	e012      	b.n	800189a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001882:	b2da      	uxtb	r2, r3
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	049c      	lsls	r4, r3, #18
 8001888:	230a      	movs	r3, #10
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	8819      	ldrh	r1, [r3, #0]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	2300      	movs	r3, #0
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	0023      	movs	r3, r4
 8001896:	f000 fa91 	bl	8001dbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d198      	bne.n	80017d6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 f94a 	bl	8001b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e01a      	b.n	80018ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2220      	movs	r2, #32
 80018be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	490b      	ldr	r1, [pc, #44]	@ (80018f8 <HAL_I2C_Mem_Write+0x258>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2241      	movs	r2, #65	@ 0x41
 80018d4:	2120      	movs	r1, #32
 80018d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2242      	movs	r2, #66	@ 0x42
 80018dc:	2100      	movs	r1, #0
 80018de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2240      	movs	r2, #64	@ 0x40
 80018e4:	2100      	movs	r1, #0
 80018e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	e000      	b.n	80018ee <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80018ec:	2302      	movs	r3, #2
  }
}
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b007      	add	sp, #28
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	fe00e800 	.word	0xfe00e800

080018fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80018fc:	b5b0      	push	{r4, r5, r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af02      	add	r7, sp, #8
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	000c      	movs	r4, r1
 8001906:	0010      	movs	r0, r2
 8001908:	0019      	movs	r1, r3
 800190a:	250a      	movs	r5, #10
 800190c:	197b      	adds	r3, r7, r5
 800190e:	1c22      	adds	r2, r4, #0
 8001910:	801a      	strh	r2, [r3, #0]
 8001912:	2308      	movs	r3, #8
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	1c02      	adds	r2, r0, #0
 8001918:	801a      	strh	r2, [r3, #0]
 800191a:	1dbb      	adds	r3, r7, #6
 800191c:	1c0a      	adds	r2, r1, #0
 800191e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001920:	1dbb      	adds	r3, r7, #6
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	2380      	movs	r3, #128	@ 0x80
 8001928:	045c      	lsls	r4, r3, #17
 800192a:	197b      	adds	r3, r7, r5
 800192c:	8819      	ldrh	r1, [r3, #0]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	4b23      	ldr	r3, [pc, #140]	@ (80019c0 <I2C_RequestMemoryWrite+0xc4>)
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	0023      	movs	r3, r4
 8001936:	f000 fa41 	bl	8001dbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800193a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193c:	6a39      	ldr	r1, [r7, #32]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	0018      	movs	r0, r3
 8001942:	f000 f8b9 	bl	8001ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001946:	1e03      	subs	r3, r0, #0
 8001948:	d001      	beq.n	800194e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e033      	b.n	80019b6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800194e:	1dbb      	adds	r3, r7, #6
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001956:	2308      	movs	r3, #8
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	629a      	str	r2, [r3, #40]	@ 0x28
 8001964:	e019      	b.n	800199a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001966:	2308      	movs	r3, #8
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	b29b      	uxth	r3, r3
 8001970:	b2da      	uxtb	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800197a:	6a39      	ldr	r1, [r7, #32]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	0018      	movs	r0, r3
 8001980:	f000 f89a 	bl	8001ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001984:	1e03      	subs	r3, r0, #0
 8001986:	d001      	beq.n	800198c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e014      	b.n	80019b6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800198c:	2308      	movs	r3, #8
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800199a:	6a3a      	ldr	r2, [r7, #32]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	0013      	movs	r3, r2
 80019a4:	2200      	movs	r2, #0
 80019a6:	2180      	movs	r1, #128	@ 0x80
 80019a8:	f000 f82e 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 80019ac:	1e03      	subs	r3, r0, #0
 80019ae:	d001      	beq.n	80019b4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b004      	add	sp, #16
 80019bc:	bdb0      	pop	{r4, r5, r7, pc}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	80002000 	.word	0x80002000

080019c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d103      	bne.n	80019e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2200      	movs	r2, #0
 80019e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d007      	beq.n	8001a00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2101      	movs	r1, #1
 80019fc:	430a      	orrs	r2, r1
 80019fe:	619a      	str	r2, [r3, #24]
  }
}
 8001a00:	46c0      	nop			@ (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	1dfb      	adds	r3, r7, #7
 8001a16:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a18:	e03a      	b.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	6839      	ldr	r1, [r7, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f000 f8d3 	bl	8001bcc <I2C_IsErrorOccurred>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d001      	beq.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e040      	b.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	d02d      	beq.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d302      	bcc.n	8001a4a <I2C_WaitOnFlagUntilTimeout+0x42>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d122      	bne.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	4013      	ands	r3, r2
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	425a      	negs	r2, r3
 8001a5a:	4153      	adcs	r3, r2
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	001a      	movs	r2, r3
 8001a60:	1dfb      	adds	r3, r7, #7
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d113      	bne.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2241      	movs	r2, #65	@ 0x41
 8001a78:	2120      	movs	r1, #32
 8001a7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2242      	movs	r2, #66	@ 0x42
 8001a80:	2100      	movs	r1, #0
 8001a82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2240      	movs	r2, #64	@ 0x40
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e00f      	b.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	425a      	negs	r2, r3
 8001aa0:	4153      	adcs	r3, r2
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	001a      	movs	r2, r3
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d0b5      	beq.n	8001a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b004      	add	sp, #16
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ac4:	e032      	b.n	8001b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f000 f87d 	bl	8001bcc <I2C_IsErrorOccurred>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d001      	beq.n	8001ada <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e030      	b.n	8001b3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3301      	adds	r3, #1
 8001ade:	d025      	beq.n	8001b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae0:	f7ff faaa 	bl	8001038 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d302      	bcc.n	8001af6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d11a      	bne.n	8001b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d013      	beq.n	8001b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b08:	2220      	movs	r2, #32
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2241      	movs	r2, #65	@ 0x41
 8001b14:	2120      	movs	r1, #32
 8001b16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2242      	movs	r2, #66	@ 0x42
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2240      	movs	r2, #64	@ 0x40
 8001b24:	2100      	movs	r1, #0
 8001b26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e007      	b.n	8001b3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d1c5      	bne.n	8001ac6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b50:	e02f      	b.n	8001bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 f837 	bl	8001bcc <I2C_IsErrorOccurred>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d001      	beq.n	8001b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e02d      	b.n	8001bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b66:	f7ff fa67 	bl	8001038 <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d302      	bcc.n	8001b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d11a      	bne.n	8001bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2220      	movs	r2, #32
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d013      	beq.n	8001bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	2220      	movs	r2, #32
 8001b90:	431a      	orrs	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2241      	movs	r2, #65	@ 0x41
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2242      	movs	r2, #66	@ 0x42
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2240      	movs	r2, #64	@ 0x40
 8001baa:	2100      	movs	r1, #0
 8001bac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e007      	b.n	8001bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	d1c8      	bne.n	8001b52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b004      	add	sp, #16
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	@ 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd8:	2327      	movs	r3, #39	@ 0x27
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d100      	bne.n	8001bfa <I2C_IsErrorOccurred+0x2e>
 8001bf8:	e079      	b.n	8001cee <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2210      	movs	r2, #16
 8001c00:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c02:	e057      	b.n	8001cb4 <I2C_IsErrorOccurred+0xe8>
 8001c04:	2227      	movs	r2, #39	@ 0x27
 8001c06:	18bb      	adds	r3, r7, r2
 8001c08:	18ba      	adds	r2, r7, r2
 8001c0a:	7812      	ldrb	r2, [r2, #0]
 8001c0c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3301      	adds	r3, #1
 8001c12:	d04f      	beq.n	8001cb4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c14:	f7ff fa10 	bl	8001038 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d302      	bcc.n	8001c2a <I2C_IsErrorOccurred+0x5e>
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d144      	bne.n	8001cb4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	01db      	lsls	r3, r3, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c38:	2013      	movs	r0, #19
 8001c3a:	183b      	adds	r3, r7, r0
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	2142      	movs	r1, #66	@ 0x42
 8001c40:	5c52      	ldrb	r2, [r2, r1]
 8001c42:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	2380      	movs	r3, #128	@ 0x80
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	401a      	ands	r2, r3
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d126      	bne.n	8001ca6 <I2C_IsErrorOccurred+0xda>
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	2380      	movs	r3, #128	@ 0x80
 8001c5c:	01db      	lsls	r3, r3, #7
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d021      	beq.n	8001ca6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001c62:	183b      	adds	r3, r7, r0
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d01d      	beq.n	8001ca6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2180      	movs	r1, #128	@ 0x80
 8001c76:	01c9      	lsls	r1, r1, #7
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c7c:	f7ff f9dc 	bl	8001038 <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c84:	e00f      	b.n	8001ca6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c86:	f7ff f9d7 	bl	8001038 <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b19      	cmp	r3, #25
 8001c92:	d908      	bls.n	8001ca6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	2220      	movs	r2, #32
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c9c:	2327      	movs	r3, #39	@ 0x27
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]

              break;
 8001ca4:	e006      	b.n	8001cb4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2220      	movs	r2, #32
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d1e8      	bne.n	8001c86 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d004      	beq.n	8001ccc <I2C_IsErrorOccurred+0x100>
 8001cc2:	2327      	movs	r3, #39	@ 0x27
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d09b      	beq.n	8001c04 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ccc:	2327      	movs	r3, #39	@ 0x27
 8001cce:	18fb      	adds	r3, r7, r3
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ce6:	2327      	movs	r3, #39	@ 0x27
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	2380      	movs	r3, #128	@ 0x80
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d00c      	beq.n	8001d1a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	2201      	movs	r2, #1
 8001d04:	4313      	orrs	r3, r2
 8001d06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2280      	movs	r2, #128	@ 0x80
 8001d0e:	0052      	lsls	r2, r2, #1
 8001d10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d12:	2327      	movs	r3, #39	@ 0x27
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4013      	ands	r3, r2
 8001d22:	d00c      	beq.n	8001d3e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	2208      	movs	r2, #8
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2280      	movs	r2, #128	@ 0x80
 8001d32:	00d2      	lsls	r2, r2, #3
 8001d34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d36:	2327      	movs	r3, #39	@ 0x27
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	d00c      	beq.n	8001d62 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2280      	movs	r2, #128	@ 0x80
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d5a:	2327      	movs	r3, #39	@ 0x27
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001d62:	2327      	movs	r3, #39	@ 0x27
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01d      	beq.n	8001da8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7ff fe28 	bl	80019c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	490e      	ldr	r1, [pc, #56]	@ (8001db8 <I2C_IsErrorOccurred+0x1ec>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2241      	movs	r2, #65	@ 0x41
 8001d94:	2120      	movs	r1, #32
 8001d96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2242      	movs	r2, #66	@ 0x42
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2240      	movs	r2, #64	@ 0x40
 8001da4:	2100      	movs	r1, #0
 8001da6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001da8:	2327      	movs	r3, #39	@ 0x27
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	781b      	ldrb	r3, [r3, #0]
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b00a      	add	sp, #40	@ 0x28
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	fe00e800 	.word	0xfe00e800

08001dbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	0008      	movs	r0, r1
 8001dc6:	0011      	movs	r1, r2
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	240a      	movs	r4, #10
 8001dcc:	193b      	adds	r3, r7, r4
 8001dce:	1c02      	adds	r2, r0, #0
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	2009      	movs	r0, #9
 8001dd4:	183b      	adds	r3, r7, r0
 8001dd6:	1c0a      	adds	r2, r1, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dda:	193b      	adds	r3, r7, r4
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	059b      	lsls	r3, r3, #22
 8001de0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	0419      	lsls	r1, r3, #16
 8001de8:	23ff      	movs	r3, #255	@ 0xff
 8001dea:	041b      	lsls	r3, r3, #16
 8001dec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df6:	4313      	orrs	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e06:	0d51      	lsrs	r1, r2, #21
 8001e08:	2280      	movs	r2, #128	@ 0x80
 8001e0a:	00d2      	lsls	r2, r2, #3
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	4907      	ldr	r1, [pc, #28]	@ (8001e2c <I2C_TransferConfig+0x70>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	43d2      	mvns	r2, r2
 8001e14:	401a      	ands	r2, r3
 8001e16:	0011      	movs	r1, r2
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b007      	add	sp, #28
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	03ff63ff 	.word	0x03ff63ff

08001e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2241      	movs	r2, #65	@ 0x41
 8001e3e:	5c9b      	ldrb	r3, [r3, r2]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d138      	bne.n	8001eb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2240      	movs	r2, #64	@ 0x40
 8001e4a:	5c9b      	ldrb	r3, [r3, r2]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e032      	b.n	8001eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2240      	movs	r2, #64	@ 0x40
 8001e58:	2101      	movs	r1, #1
 8001e5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2241      	movs	r2, #65	@ 0x41
 8001e60:	2124      	movs	r1, #36	@ 0x24
 8001e62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4911      	ldr	r1, [pc, #68]	@ (8001ec4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2241      	movs	r2, #65	@ 0x41
 8001ea8:	2120      	movs	r1, #32
 8001eaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2240      	movs	r2, #64	@ 0x40
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	ffffefff 	.word	0xffffefff

08001ec8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2241      	movs	r2, #65	@ 0x41
 8001ed6:	5c9b      	ldrb	r3, [r3, r2]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d139      	bne.n	8001f52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2240      	movs	r2, #64	@ 0x40
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e033      	b.n	8001f54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2240      	movs	r2, #64	@ 0x40
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2241      	movs	r2, #65	@ 0x41
 8001ef8:	2124      	movs	r1, #36	@ 0x24
 8001efa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a11      	ldr	r2, [pc, #68]	@ (8001f5c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2241      	movs	r2, #65	@ 0x41
 8001f42:	2120      	movs	r1, #32
 8001f44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2240      	movs	r2, #64	@ 0x40
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
  }
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b004      	add	sp, #16
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	fffff0ff 	.word	0xfffff0ff

08001f60 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f68:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8001f6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8001f6e:	2101      	movs	r1, #1
 8001f70:	430a      	orrs	r2, r1
 8001f72:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f74:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	46c0      	nop			@ (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b004      	add	sp, #16
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010000 	.word	0x40010000

08001f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001fa4:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	@ (8002010 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	4b17      	ldr	r3, [pc, #92]	@ (800200c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d11f      	bne.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	189b      	adds	r3, r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4912      	ldr	r1, [pc, #72]	@ (8002018 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7fe f896 	bl	8000100 <__udivsi3>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fda:	e008      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e001      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e009      	b.n	8002002 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fee:	4b07      	ldr	r3, [pc, #28]	@ (800200c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	2380      	movs	r3, #128	@ 0x80
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d0ed      	beq.n	8001fdc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b004      	add	sp, #16
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	40007000 	.word	0x40007000
 8002010:	fffff9ff 	.word	0xfffff9ff
 8002014:	20000014 	.word	0x20000014
 8002018:	000f4240 	.word	0x000f4240

0800201c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e2f3      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d100      	bne.n	800203a <HAL_RCC_OscConfig+0x1e>
 8002038:	e07c      	b.n	8002134 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203a:	4bc3      	ldr	r3, [pc, #780]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2238      	movs	r2, #56	@ 0x38
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002044:	4bc0      	ldr	r3, [pc, #768]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2203      	movs	r2, #3
 800204a:	4013      	ands	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b10      	cmp	r3, #16
 8002052:	d102      	bne.n	800205a <HAL_RCC_OscConfig+0x3e>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d002      	beq.n	8002060 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d10b      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	4bb9      	ldr	r3, [pc, #740]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	029b      	lsls	r3, r3, #10
 8002068:	4013      	ands	r3, r2
 800206a:	d062      	beq.n	8002132 <HAL_RCC_OscConfig+0x116>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d15e      	bne.n	8002132 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e2ce      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	025b      	lsls	r3, r3, #9
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_RCC_OscConfig+0x78>
 8002084:	4bb0      	ldr	r3, [pc, #704]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4baf      	ldr	r3, [pc, #700]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	0249      	lsls	r1, r1, #9
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e020      	b.n	80020d6 <HAL_RCC_OscConfig+0xba>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	23a0      	movs	r3, #160	@ 0xa0
 800209a:	02db      	lsls	r3, r3, #11
 800209c:	429a      	cmp	r2, r3
 800209e:	d10e      	bne.n	80020be <HAL_RCC_OscConfig+0xa2>
 80020a0:	4ba9      	ldr	r3, [pc, #676]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4ba8      	ldr	r3, [pc, #672]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020a6:	2180      	movs	r1, #128	@ 0x80
 80020a8:	02c9      	lsls	r1, r1, #11
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	4ba6      	ldr	r3, [pc, #664]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4ba5      	ldr	r3, [pc, #660]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020b4:	2180      	movs	r1, #128	@ 0x80
 80020b6:	0249      	lsls	r1, r1, #9
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e00b      	b.n	80020d6 <HAL_RCC_OscConfig+0xba>
 80020be:	4ba2      	ldr	r3, [pc, #648]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4ba1      	ldr	r3, [pc, #644]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020c4:	49a1      	ldr	r1, [pc, #644]	@ (800234c <HAL_RCC_OscConfig+0x330>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	4b9f      	ldr	r3, [pc, #636]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b9e      	ldr	r3, [pc, #632]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020d0:	499f      	ldr	r1, [pc, #636]	@ (8002350 <HAL_RCC_OscConfig+0x334>)
 80020d2:	400a      	ands	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d014      	beq.n	8002108 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7fe ffab 	bl	8001038 <HAL_GetTick>
 80020e2:	0003      	movs	r3, r0
 80020e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe ffa6 	bl	8001038 <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e28d      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020fa:	4b93      	ldr	r3, [pc, #588]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	029b      	lsls	r3, r3, #10
 8002102:	4013      	ands	r3, r2
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xcc>
 8002106:	e015      	b.n	8002134 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe ff96 	bl	8001038 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002112:	f7fe ff91 	bl	8001038 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b64      	cmp	r3, #100	@ 0x64
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e278      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002124:	4b88      	ldr	r3, [pc, #544]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	029b      	lsls	r3, r3, #10
 800212c:	4013      	ands	r3, r2
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0xf6>
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002132:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	d100      	bne.n	8002140 <HAL_RCC_OscConfig+0x124>
 800213e:	e099      	b.n	8002274 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002140:	4b81      	ldr	r3, [pc, #516]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2238      	movs	r2, #56	@ 0x38
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800214a:	4b7f      	ldr	r3, [pc, #508]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2203      	movs	r2, #3
 8002150:	4013      	ands	r3, r2
 8002152:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d102      	bne.n	8002160 <HAL_RCC_OscConfig+0x144>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d002      	beq.n	8002166 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d135      	bne.n	80021d2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002166:	4b78      	ldr	r3, [pc, #480]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	@ 0x80
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4013      	ands	r3, r2
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x162>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e24b      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b72      	ldr	r3, [pc, #456]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4a74      	ldr	r2, [pc, #464]	@ (8002354 <HAL_RCC_OscConfig+0x338>)
 8002184:	4013      	ands	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	021a      	lsls	r2, r3, #8
 800218e:	4b6e      	ldr	r3, [pc, #440]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002190:	430a      	orrs	r2, r1
 8002192:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d112      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800219a:	4b6b      	ldr	r3, [pc, #428]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a6e      	ldr	r2, [pc, #440]	@ (8002358 <HAL_RCC_OscConfig+0x33c>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	4b67      	ldr	r3, [pc, #412]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021ae:	4b66      	ldr	r3, [pc, #408]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0adb      	lsrs	r3, r3, #11
 80021b4:	2207      	movs	r2, #7
 80021b6:	4013      	ands	r3, r2
 80021b8:	4a68      	ldr	r2, [pc, #416]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80021ba:	40da      	lsrs	r2, r3
 80021bc:	4b68      	ldr	r3, [pc, #416]	@ (8002360 <HAL_RCC_OscConfig+0x344>)
 80021be:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021c0:	4b68      	ldr	r3, [pc, #416]	@ (8002364 <HAL_RCC_OscConfig+0x348>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7fe fedb 	bl	8000f80 <HAL_InitTick>
 80021ca:	1e03      	subs	r3, r0, #0
 80021cc:	d051      	beq.n	8002272 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e221      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d030      	beq.n	800223c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021da:	4b5b      	ldr	r3, [pc, #364]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a5e      	ldr	r2, [pc, #376]	@ (8002358 <HAL_RCC_OscConfig+0x33c>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	4b57      	ldr	r3, [pc, #348]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80021ee:	4b56      	ldr	r3, [pc, #344]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b55      	ldr	r3, [pc, #340]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021f4:	2180      	movs	r1, #128	@ 0x80
 80021f6:	0049      	lsls	r1, r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe ff1c 	bl	8001038 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002206:	f7fe ff17 	bl	8001038 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1fe      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002218:	4b4b      	ldr	r3, [pc, #300]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4013      	ands	r3, r2
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b48      	ldr	r3, [pc, #288]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a4a      	ldr	r2, [pc, #296]	@ (8002354 <HAL_RCC_OscConfig+0x338>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	021a      	lsls	r2, r3, #8
 8002234:	4b44      	ldr	r3, [pc, #272]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	e01b      	b.n	8002274 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800223c:	4b42      	ldr	r3, [pc, #264]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002242:	4949      	ldr	r1, [pc, #292]	@ (8002368 <HAL_RCC_OscConfig+0x34c>)
 8002244:	400a      	ands	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe fef6 	bl	8001038 <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002252:	f7fe fef1 	bl	8001038 <HAL_GetTick>
 8002256:	0002      	movs	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e1d8      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002264:	4b38      	ldr	r3, [pc, #224]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4013      	ands	r3, r2
 800226e:	d1f0      	bne.n	8002252 <HAL_RCC_OscConfig+0x236>
 8002270:	e000      	b.n	8002274 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002272:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2208      	movs	r2, #8
 800227a:	4013      	ands	r3, r2
 800227c:	d047      	beq.n	800230e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800227e:	4b32      	ldr	r3, [pc, #200]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2238      	movs	r2, #56	@ 0x38
 8002284:	4013      	ands	r3, r2
 8002286:	2b18      	cmp	r3, #24
 8002288:	d10a      	bne.n	80022a0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800228a:	4b2f      	ldr	r3, [pc, #188]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 800228c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228e:	2202      	movs	r2, #2
 8002290:	4013      	ands	r3, r2
 8002292:	d03c      	beq.n	800230e <HAL_RCC_OscConfig+0x2f2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d138      	bne.n	800230e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e1ba      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d019      	beq.n	80022dc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80022a8:	4b27      	ldr	r3, [pc, #156]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80022aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ac:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80022ae:	2101      	movs	r1, #1
 80022b0:	430a      	orrs	r2, r1
 80022b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe fec0 	bl	8001038 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022be:	f7fe febb 	bl	8001038 <HAL_GetTick>
 80022c2:	0002      	movs	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e1a2      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80022d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d4:	2202      	movs	r2, #2
 80022d6:	4013      	ands	r3, r2
 80022d8:	d0f1      	beq.n	80022be <HAL_RCC_OscConfig+0x2a2>
 80022da:	e018      	b.n	800230e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80022dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80022de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 80022e2:	2101      	movs	r1, #1
 80022e4:	438a      	bics	r2, r1
 80022e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fea6 	bl	8001038 <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f2:	f7fe fea1 	bl	8001038 <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e188      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002304:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002308:	2202      	movs	r2, #2
 800230a:	4013      	ands	r3, r2
 800230c:	d1f1      	bne.n	80022f2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2204      	movs	r2, #4
 8002314:	4013      	ands	r3, r2
 8002316:	d100      	bne.n	800231a <HAL_RCC_OscConfig+0x2fe>
 8002318:	e0c6      	b.n	80024a8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231a:	231f      	movs	r3, #31
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2238      	movs	r2, #56	@ 0x38
 8002328:	4013      	ands	r3, r2
 800232a:	2b20      	cmp	r3, #32
 800232c:	d11e      	bne.n	800236c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002332:	2202      	movs	r2, #2
 8002334:	4013      	ands	r3, r2
 8002336:	d100      	bne.n	800233a <HAL_RCC_OscConfig+0x31e>
 8002338:	e0b6      	b.n	80024a8 <HAL_RCC_OscConfig+0x48c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d000      	beq.n	8002344 <HAL_RCC_OscConfig+0x328>
 8002342:	e0b1      	b.n	80024a8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e166      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
 8002348:	40021000 	.word	0x40021000
 800234c:	fffeffff 	.word	0xfffeffff
 8002350:	fffbffff 	.word	0xfffbffff
 8002354:	ffff80ff 	.word	0xffff80ff
 8002358:	ffffc7ff 	.word	0xffffc7ff
 800235c:	00f42400 	.word	0x00f42400
 8002360:	20000014 	.word	0x20000014
 8002364:	20000018 	.word	0x20000018
 8002368:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800236c:	4bac      	ldr	r3, [pc, #688]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 800236e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	055b      	lsls	r3, r3, #21
 8002374:	4013      	ands	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_RCC_OscConfig+0x360>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x362>
 800237c:	2300      	movs	r3, #0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d011      	beq.n	80023a6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	4ba7      	ldr	r3, [pc, #668]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002384:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002386:	4ba6      	ldr	r3, [pc, #664]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002388:	2180      	movs	r1, #128	@ 0x80
 800238a:	0549      	lsls	r1, r1, #21
 800238c:	430a      	orrs	r2, r1
 800238e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002390:	4ba3      	ldr	r3, [pc, #652]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	055b      	lsls	r3, r3, #21
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800239e:	231f      	movs	r3, #31
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a6:	4b9f      	ldr	r3, [pc, #636]	@ (8002624 <HAL_RCC_OscConfig+0x608>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	d11a      	bne.n	80023e8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b2:	4b9c      	ldr	r3, [pc, #624]	@ (8002624 <HAL_RCC_OscConfig+0x608>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b9b      	ldr	r3, [pc, #620]	@ (8002624 <HAL_RCC_OscConfig+0x608>)
 80023b8:	2180      	movs	r1, #128	@ 0x80
 80023ba:	0049      	lsls	r1, r1, #1
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fe3a 	bl	8001038 <HAL_GetTick>
 80023c4:	0003      	movs	r3, r0
 80023c6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7fe fe35 	bl	8001038 <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e11c      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023dc:	4b91      	ldr	r3, [pc, #580]	@ (8002624 <HAL_RCC_OscConfig+0x608>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4013      	ands	r3, r2
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x3e2>
 80023f0:	4b8b      	ldr	r3, [pc, #556]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 80023f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023f4:	4b8a      	ldr	r3, [pc, #552]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 80023f6:	2101      	movs	r1, #1
 80023f8:	430a      	orrs	r2, r1
 80023fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023fc:	e01c      	b.n	8002438 <HAL_RCC_OscConfig+0x41c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b05      	cmp	r3, #5
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x404>
 8002406:	4b86      	ldr	r3, [pc, #536]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002408:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800240a:	4b85      	ldr	r3, [pc, #532]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 800240c:	2104      	movs	r1, #4
 800240e:	430a      	orrs	r2, r1
 8002410:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002412:	4b83      	ldr	r3, [pc, #524]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002414:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002416:	4b82      	ldr	r3, [pc, #520]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002418:	2101      	movs	r1, #1
 800241a:	430a      	orrs	r2, r1
 800241c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800241e:	e00b      	b.n	8002438 <HAL_RCC_OscConfig+0x41c>
 8002420:	4b7f      	ldr	r3, [pc, #508]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002422:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002424:	4b7e      	ldr	r3, [pc, #504]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002426:	2101      	movs	r1, #1
 8002428:	438a      	bics	r2, r1
 800242a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800242c:	4b7c      	ldr	r3, [pc, #496]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 800242e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002430:	4b7b      	ldr	r3, [pc, #492]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002432:	2104      	movs	r1, #4
 8002434:	438a      	bics	r2, r1
 8002436:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d014      	beq.n	800246a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fdfa 	bl	8001038 <HAL_GetTick>
 8002444:	0003      	movs	r3, r0
 8002446:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002448:	e009      	b.n	800245e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fe fdf5 	bl	8001038 <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	4a74      	ldr	r2, [pc, #464]	@ (8002628 <HAL_RCC_OscConfig+0x60c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0db      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245e:	4b70      	ldr	r3, [pc, #448]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002462:	2202      	movs	r2, #2
 8002464:	4013      	ands	r3, r2
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x42e>
 8002468:	e013      	b.n	8002492 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe fde5 	bl	8001038 <HAL_GetTick>
 800246e:	0003      	movs	r3, r0
 8002470:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002472:	e009      	b.n	8002488 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002474:	f7fe fde0 	bl	8001038 <HAL_GetTick>
 8002478:	0002      	movs	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	4a6a      	ldr	r2, [pc, #424]	@ (8002628 <HAL_RCC_OscConfig+0x60c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0c6      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002488:	4b65      	ldr	r3, [pc, #404]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 800248a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248c:	2202      	movs	r2, #2
 800248e:	4013      	ands	r3, r2
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002492:	231f      	movs	r3, #31
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d105      	bne.n	80024a8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800249c:	4b60      	ldr	r3, [pc, #384]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 800249e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 80024a2:	4962      	ldr	r1, [pc, #392]	@ (800262c <HAL_RCC_OscConfig+0x610>)
 80024a4:	400a      	ands	r2, r1
 80024a6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d100      	bne.n	80024b2 <HAL_RCC_OscConfig+0x496>
 80024b0:	e0b0      	b.n	8002614 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2238      	movs	r2, #56	@ 0x38
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d100      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4a4>
 80024be:	e078      	b.n	80025b2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d153      	bne.n	8002570 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b55      	ldr	r3, [pc, #340]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b54      	ldr	r3, [pc, #336]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 80024ce:	4958      	ldr	r1, [pc, #352]	@ (8002630 <HAL_RCC_OscConfig+0x614>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fdb0 	bl	8001038 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe fdab 	bl	8001038 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e092      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	049b      	lsls	r3, r3, #18
 80024f8:	4013      	ands	r3, r2
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024fc:	4b48      	ldr	r3, [pc, #288]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a4c      	ldr	r2, [pc, #304]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 8002502:	4013      	ands	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1a      	ldr	r2, [r3, #32]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	431a      	orrs	r2, r3
 8002524:	4b3e      	ldr	r3, [pc, #248]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002526:	430a      	orrs	r2, r1
 8002528:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252a:	4b3d      	ldr	r3, [pc, #244]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b3c      	ldr	r3, [pc, #240]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002530:	2180      	movs	r1, #128	@ 0x80
 8002532:	0449      	lsls	r1, r1, #17
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002538:	4b39      	ldr	r3, [pc, #228]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	4b38      	ldr	r3, [pc, #224]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 800253e:	2180      	movs	r1, #128	@ 0x80
 8002540:	0549      	lsls	r1, r1, #21
 8002542:	430a      	orrs	r2, r1
 8002544:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe fd77 	bl	8001038 <HAL_GetTick>
 800254a:	0003      	movs	r3, r0
 800254c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fd72 	bl	8001038 <HAL_GetTick>
 8002554:	0002      	movs	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e059      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002562:	4b2f      	ldr	r3, [pc, #188]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	049b      	lsls	r3, r3, #18
 800256a:	4013      	ands	r3, r2
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x534>
 800256e:	e051      	b.n	8002614 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002570:	4b2b      	ldr	r3, [pc, #172]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b2a      	ldr	r3, [pc, #168]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 8002576:	492e      	ldr	r1, [pc, #184]	@ (8002630 <HAL_RCC_OscConfig+0x614>)
 8002578:	400a      	ands	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe fd5c 	bl	8001038 <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fd57 	bl	8001038 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e03e      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002598:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	049b      	lsls	r3, r3, #18
 80025a0:	4013      	ands	r3, r2
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80025a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 80025aa:	4923      	ldr	r1, [pc, #140]	@ (8002638 <HAL_RCC_OscConfig+0x61c>)
 80025ac:	400a      	ands	r2, r1
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	e030      	b.n	8002614 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e02b      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80025be:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <HAL_RCC_OscConfig+0x604>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2203      	movs	r2, #3
 80025c8:	401a      	ands	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d11e      	bne.n	8002610 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2270      	movs	r2, #112	@ 0x70
 80025d6:	401a      	ands	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d117      	bne.n	8002610 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	23fe      	movs	r3, #254	@ 0xfe
 80025e4:	01db      	lsls	r3, r3, #7
 80025e6:	401a      	ands	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d10e      	bne.n	8002610 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	23f8      	movs	r3, #248	@ 0xf8
 80025f6:	039b      	lsls	r3, r3, #14
 80025f8:	401a      	ands	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	0f5b      	lsrs	r3, r3, #29
 8002606:	075a      	lsls	r2, r3, #29
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	b008      	add	sp, #32
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	40021000 	.word	0x40021000
 8002624:	40007000 	.word	0x40007000
 8002628:	00001388 	.word	0x00001388
 800262c:	efffffff 	.word	0xefffffff
 8002630:	feffffff 	.word	0xfeffffff
 8002634:	1fc1808c 	.word	0x1fc1808c
 8002638:	effefffc 	.word	0xeffefffc

0800263c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0e9      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002650:	4b76      	ldr	r3, [pc, #472]	@ (800282c <HAL_RCC_ClockConfig+0x1f0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2207      	movs	r2, #7
 8002656:	4013      	ands	r3, r2
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d91e      	bls.n	800269c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b73      	ldr	r3, [pc, #460]	@ (800282c <HAL_RCC_ClockConfig+0x1f0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2207      	movs	r2, #7
 8002664:	4393      	bics	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	4b70      	ldr	r3, [pc, #448]	@ (800282c <HAL_RCC_ClockConfig+0x1f0>)
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002670:	f7fe fce2 	bl	8001038 <HAL_GetTick>
 8002674:	0003      	movs	r3, r0
 8002676:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002678:	e009      	b.n	800268e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267a:	f7fe fcdd 	bl	8001038 <HAL_GetTick>
 800267e:	0002      	movs	r2, r0
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	4a6a      	ldr	r2, [pc, #424]	@ (8002830 <HAL_RCC_ClockConfig+0x1f4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0ca      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800268e:	4b67      	ldr	r3, [pc, #412]	@ (800282c <HAL_RCC_ClockConfig+0x1f0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2207      	movs	r2, #7
 8002694:	4013      	ands	r3, r2
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d1ee      	bne.n	800267a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2202      	movs	r2, #2
 80026a2:	4013      	ands	r3, r2
 80026a4:	d015      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2204      	movs	r2, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	d006      	beq.n	80026be <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026b0:	4b60      	ldr	r3, [pc, #384]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 80026b6:	21e0      	movs	r1, #224	@ 0xe0
 80026b8:	01c9      	lsls	r1, r1, #7
 80026ba:	430a      	orrs	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026be:	4b5d      	ldr	r3, [pc, #372]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002838 <HAL_RCC_ClockConfig+0x1fc>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	0019      	movs	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	4b59      	ldr	r3, [pc, #356]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 80026ce:	430a      	orrs	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	d057      	beq.n	800278c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e4:	4b53      	ldr	r3, [pc, #332]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2380      	movs	r3, #128	@ 0x80
 80026ea:	029b      	lsls	r3, r3, #10
 80026ec:	4013      	ands	r3, r2
 80026ee:	d12b      	bne.n	8002748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e097      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d107      	bne.n	800270c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	@ 0x80
 8002702:	049b      	lsls	r3, r3, #18
 8002704:	4013      	ands	r3, r2
 8002706:	d11f      	bne.n	8002748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e08b      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002714:	4b47      	ldr	r3, [pc, #284]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	2380      	movs	r3, #128	@ 0x80
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4013      	ands	r3, r2
 800271e:	d113      	bne.n	8002748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e07f      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d106      	bne.n	800273a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800272c:	4b41      	ldr	r3, [pc, #260]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 800272e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002730:	2202      	movs	r2, #2
 8002732:	4013      	ands	r3, r2
 8002734:	d108      	bne.n	8002748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e074      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273a:	4b3e      	ldr	r3, [pc, #248]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 800273c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273e:	2202      	movs	r2, #2
 8002740:	4013      	ands	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e06d      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002748:	4b3a      	ldr	r3, [pc, #232]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2207      	movs	r2, #7
 800274e:	4393      	bics	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4b37      	ldr	r3, [pc, #220]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 8002758:	430a      	orrs	r2, r1
 800275a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275c:	f7fe fc6c 	bl	8001038 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002764:	e009      	b.n	800277a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002766:	f7fe fc67 	bl	8001038 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	4a2f      	ldr	r2, [pc, #188]	@ (8002830 <HAL_RCC_ClockConfig+0x1f4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e054      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	4b2e      	ldr	r3, [pc, #184]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2238      	movs	r2, #56	@ 0x38
 8002780:	401a      	ands	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	429a      	cmp	r2, r3
 800278a:	d1ec      	bne.n	8002766 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b27      	ldr	r3, [pc, #156]	@ (800282c <HAL_RCC_ClockConfig+0x1f0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2207      	movs	r2, #7
 8002792:	4013      	ands	r3, r2
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d21e      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b24      	ldr	r3, [pc, #144]	@ (800282c <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2207      	movs	r2, #7
 80027a0:	4393      	bics	r3, r2
 80027a2:	0019      	movs	r1, r3
 80027a4:	4b21      	ldr	r3, [pc, #132]	@ (800282c <HAL_RCC_ClockConfig+0x1f0>)
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027ac:	f7fe fc44 	bl	8001038 <HAL_GetTick>
 80027b0:	0003      	movs	r3, r0
 80027b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027b4:	e009      	b.n	80027ca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b6:	f7fe fc3f 	bl	8001038 <HAL_GetTick>
 80027ba:	0002      	movs	r2, r0
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002830 <HAL_RCC_ClockConfig+0x1f4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e02c      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027ca:	4b18      	ldr	r3, [pc, #96]	@ (800282c <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2207      	movs	r2, #7
 80027d0:	4013      	ands	r3, r2
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1ee      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2204      	movs	r2, #4
 80027de:	4013      	ands	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027e2:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	4a15      	ldr	r2, [pc, #84]	@ (800283c <HAL_RCC_ClockConfig+0x200>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80027f6:	f000 f829 	bl	800284c <HAL_RCC_GetSysClockFreq>
 80027fa:	0001      	movs	r1, r0
 80027fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <HAL_RCC_ClockConfig+0x1f8>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	220f      	movs	r2, #15
 8002804:	401a      	ands	r2, r3
 8002806:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <HAL_RCC_ClockConfig+0x204>)
 8002808:	0092      	lsls	r2, r2, #2
 800280a:	58d3      	ldr	r3, [r2, r3]
 800280c:	221f      	movs	r2, #31
 800280e:	4013      	ands	r3, r2
 8002810:	000a      	movs	r2, r1
 8002812:	40da      	lsrs	r2, r3
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_RCC_ClockConfig+0x208>)
 8002816:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_RCC_ClockConfig+0x20c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0018      	movs	r0, r3
 800281e:	f7fe fbaf 	bl	8000f80 <HAL_InitTick>
 8002822:	0003      	movs	r3, r0
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40022000 	.word	0x40022000
 8002830:	00001388 	.word	0x00001388
 8002834:	40021000 	.word	0x40021000
 8002838:	fffff0ff 	.word	0xfffff0ff
 800283c:	ffff8fff 	.word	0xffff8fff
 8002840:	080054cc 	.word	0x080054cc
 8002844:	20000014 	.word	0x20000014
 8002848:	20000018 	.word	0x20000018

0800284c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002852:	4b3c      	ldr	r3, [pc, #240]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2238      	movs	r2, #56	@ 0x38
 8002858:	4013      	ands	r3, r2
 800285a:	d10f      	bne.n	800287c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800285c:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xf8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0adb      	lsrs	r3, r3, #11
 8002862:	2207      	movs	r2, #7
 8002864:	4013      	ands	r3, r2
 8002866:	2201      	movs	r2, #1
 8002868:	409a      	lsls	r2, r3
 800286a:	0013      	movs	r3, r2
 800286c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800286e:	6839      	ldr	r1, [r7, #0]
 8002870:	4835      	ldr	r0, [pc, #212]	@ (8002948 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002872:	f7fd fc45 	bl	8000100 <__udivsi3>
 8002876:	0003      	movs	r3, r0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	e05d      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800287c:	4b31      	ldr	r3, [pc, #196]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xf8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2238      	movs	r2, #56	@ 0x38
 8002882:	4013      	ands	r3, r2
 8002884:	2b08      	cmp	r3, #8
 8002886:	d102      	bne.n	800288e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002888:	4b30      	ldr	r3, [pc, #192]	@ (800294c <HAL_RCC_GetSysClockFreq+0x100>)
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	e054      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800288e:	4b2d      	ldr	r3, [pc, #180]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2238      	movs	r2, #56	@ 0x38
 8002894:	4013      	ands	r3, r2
 8002896:	2b10      	cmp	r3, #16
 8002898:	d138      	bne.n	800290c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800289a:	4b2a      	ldr	r3, [pc, #168]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xf8>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2203      	movs	r2, #3
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028a4:	4b27      	ldr	r3, [pc, #156]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	2207      	movs	r2, #7
 80028ac:	4013      	ands	r3, r2
 80028ae:	3301      	adds	r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d10d      	bne.n	80028d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	4824      	ldr	r0, [pc, #144]	@ (800294c <HAL_RCC_GetSysClockFreq+0x100>)
 80028bc:	f7fd fc20 	bl	8000100 <__udivsi3>
 80028c0:	0003      	movs	r3, r0
 80028c2:	0019      	movs	r1, r3
 80028c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	227f      	movs	r2, #127	@ 0x7f
 80028cc:	4013      	ands	r3, r2
 80028ce:	434b      	muls	r3, r1
 80028d0:	617b      	str	r3, [r7, #20]
        break;
 80028d2:	e00d      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	481c      	ldr	r0, [pc, #112]	@ (8002948 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028d8:	f7fd fc12 	bl	8000100 <__udivsi3>
 80028dc:	0003      	movs	r3, r0
 80028de:	0019      	movs	r1, r3
 80028e0:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	227f      	movs	r2, #127	@ 0x7f
 80028e8:	4013      	ands	r3, r2
 80028ea:	434b      	muls	r3, r1
 80028ec:	617b      	str	r3, [r7, #20]
        break;
 80028ee:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80028f0:	4b14      	ldr	r3, [pc, #80]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0f5b      	lsrs	r3, r3, #29
 80028f6:	2207      	movs	r2, #7
 80028f8:	4013      	ands	r3, r2
 80028fa:	3301      	adds	r3, #1
 80028fc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	6978      	ldr	r0, [r7, #20]
 8002902:	f7fd fbfd 	bl	8000100 <__udivsi3>
 8002906:	0003      	movs	r3, r0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	e015      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800290c:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xf8>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2238      	movs	r2, #56	@ 0x38
 8002912:	4013      	ands	r3, r2
 8002914:	2b20      	cmp	r3, #32
 8002916:	d103      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	e00b      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2238      	movs	r2, #56	@ 0x38
 8002926:	4013      	ands	r3, r2
 8002928:	2b18      	cmp	r3, #24
 800292a:	d103      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800292c:	23fa      	movs	r3, #250	@ 0xfa
 800292e:	01db      	lsls	r3, r3, #7
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	e001      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002938:	693b      	ldr	r3, [r7, #16]
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b006      	add	sp, #24
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			@ (mov r8, r8)
 8002944:	40021000 	.word	0x40021000
 8002948:	00f42400 	.word	0x00f42400
 800294c:	007a1200 	.word	0x007a1200

08002950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002958:	2313      	movs	r3, #19
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002960:	2312      	movs	r3, #18
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	029b      	lsls	r3, r3, #10
 8002970:	4013      	ands	r3, r2
 8002972:	d100      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002974:	e0a3      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2011      	movs	r0, #17
 8002978:	183b      	adds	r3, r7, r0
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	055b      	lsls	r3, r3, #21
 8002986:	4013      	ands	r3, r2
 8002988:	d110      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800298c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800298e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002990:	2180      	movs	r1, #128	@ 0x80
 8002992:	0549      	lsls	r1, r1, #21
 8002994:	430a      	orrs	r2, r1
 8002996:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002998:	4b78      	ldr	r3, [pc, #480]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800299a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	055b      	lsls	r3, r3, #21
 80029a0:	4013      	ands	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ac:	4b74      	ldr	r3, [pc, #464]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b73      	ldr	r3, [pc, #460]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029b2:	2180      	movs	r1, #128	@ 0x80
 80029b4:	0049      	lsls	r1, r1, #1
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ba:	f7fe fb3d 	bl	8001038 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c2:	e00b      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c4:	f7fe fb38 	bl	8001038 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d904      	bls.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80029d2:	2313      	movs	r3, #19
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	2203      	movs	r2, #3
 80029d8:	701a      	strb	r2, [r3, #0]
        break;
 80029da:	e005      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029dc:	4b68      	ldr	r3, [pc, #416]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4013      	ands	r3, r2
 80029e6:	d0ed      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80029e8:	2313      	movs	r3, #19
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d154      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029f2:	4b62      	ldr	r3, [pc, #392]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029f6:	23c0      	movs	r3, #192	@ 0xc0
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d019      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d014      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a12:	4a5c      	ldr	r2, [pc, #368]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a18:	4b58      	ldr	r3, [pc, #352]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a1c:	4b57      	ldr	r3, [pc, #348]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a1e:	2180      	movs	r1, #128	@ 0x80
 8002a20:	0249      	lsls	r1, r1, #9
 8002a22:	430a      	orrs	r2, r1
 8002a24:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a26:	4b55      	ldr	r3, [pc, #340]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a2a:	4b54      	ldr	r3, [pc, #336]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a2c:	4956      	ldr	r1, [pc, #344]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002a2e:	400a      	ands	r2, r1
 8002a30:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a32:	4b52      	ldr	r3, [pc, #328]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d016      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fafa 	bl	8001038 <HAL_GetTick>
 8002a44:	0003      	movs	r3, r0
 8002a46:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a48:	e00c      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7fe faf5 	bl	8001038 <HAL_GetTick>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	4a4d      	ldr	r2, [pc, #308]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d904      	bls.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002a5a:	2313      	movs	r3, #19
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	2203      	movs	r2, #3
 8002a60:	701a      	strb	r2, [r3, #0]
            break;
 8002a62:	e004      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a64:	4b45      	ldr	r3, [pc, #276]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a68:	2202      	movs	r2, #2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d0ed      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a6e:	2313      	movs	r3, #19
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a78:	4b40      	ldr	r3, [pc, #256]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	4a41      	ldr	r2, [pc, #260]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	4b3d      	ldr	r3, [pc, #244]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a8c:	e00c      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a8e:	2312      	movs	r3, #18
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	2213      	movs	r2, #19
 8002a94:	18ba      	adds	r2, r7, r2
 8002a96:	7812      	ldrb	r2, [r2, #0]
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e005      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9c:	2312      	movs	r3, #18
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2213      	movs	r2, #19
 8002aa2:	18ba      	adds	r2, r7, r2
 8002aa4:	7812      	ldrb	r2, [r2, #0]
 8002aa6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aa8:	2311      	movs	r3, #17
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b32      	ldr	r3, [pc, #200]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ab4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ab6:	4b31      	ldr	r3, [pc, #196]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ab8:	4935      	ldr	r1, [pc, #212]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aba:	400a      	ands	r2, r1
 8002abc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d009      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002acc:	2203      	movs	r2, #3
 8002ace:	4393      	bics	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4b29      	ldr	r3, [pc, #164]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d009      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae6:	4b25      	ldr	r3, [pc, #148]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aea:	4a2a      	ldr	r2, [pc, #168]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002af6:	430a      	orrs	r2, r1
 8002af8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	01db      	lsls	r3, r3, #7
 8002b02:	4013      	ands	r3, r2
 8002b04:	d015      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b06:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	0899      	lsrs	r1, r3, #2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	05db      	lsls	r3, r3, #23
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d106      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b24:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b2a:	2180      	movs	r1, #128	@ 0x80
 8002b2c:	0249      	lsls	r1, r1, #9
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d016      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	4a15      	ldr	r2, [pc, #84]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	0019      	movs	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	2380      	movs	r3, #128	@ 0x80
 8002b58:	01db      	lsls	r3, r3, #7
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b5e:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b64:	2180      	movs	r1, #128	@ 0x80
 8002b66:	0249      	lsls	r1, r1, #9
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002b6c:	2312      	movs	r3, #18
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	781b      	ldrb	r3, [r3, #0]
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b006      	add	sp, #24
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40007000 	.word	0x40007000
 8002b84:	fffffcff 	.word	0xfffffcff
 8002b88:	fffeffff 	.word	0xfffeffff
 8002b8c:	00001388 	.word	0x00001388
 8002b90:	efffffff 	.word	0xefffffff
 8002b94:	ffffcfff 	.word	0xffffcfff
 8002b98:	ffff3fff 	.word	0xffff3fff

08002b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e04a      	b.n	8002c44 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	223d      	movs	r2, #61	@ 0x3d
 8002bb2:	5c9b      	ldrb	r3, [r3, r2]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d107      	bne.n	8002bca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223c      	movs	r2, #60	@ 0x3c
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7fe f941 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	223d      	movs	r2, #61	@ 0x3d
 8002bce:	2102      	movs	r1, #2
 8002bd0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	0019      	movs	r1, r3
 8002bdc:	0010      	movs	r0, r2
 8002bde:	f000 f9ab 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2248      	movs	r2, #72	@ 0x48
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	223e      	movs	r2, #62	@ 0x3e
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	223f      	movs	r2, #63	@ 0x3f
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2240      	movs	r2, #64	@ 0x40
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2241      	movs	r2, #65	@ 0x41
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2242      	movs	r2, #66	@ 0x42
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2243      	movs	r2, #67	@ 0x43
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2244      	movs	r2, #68	@ 0x44
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2245      	movs	r2, #69	@ 0x45
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2246      	movs	r2, #70	@ 0x46
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2247      	movs	r2, #71	@ 0x47
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	223d      	movs	r2, #61	@ 0x3d
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b002      	add	sp, #8
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	223d      	movs	r2, #61	@ 0x3d
 8002c58:	5c9b      	ldrb	r3, [r3, r2]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d001      	beq.n	8002c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e037      	b.n	8002cd4 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	223d      	movs	r2, #61	@ 0x3d
 8002c68:	2102      	movs	r1, #2
 8002c6a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2101      	movs	r1, #1
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <HAL_TIM_Base_Start_IT+0x90>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <HAL_TIM_Base_Start_IT+0x44>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ce0 <HAL_TIM_Base_Start_IT+0x94>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d116      	bne.n	8002cbe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	4a13      	ldr	r2, [pc, #76]	@ (8002ce4 <HAL_TIM_Base_Start_IT+0x98>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d016      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0x84>
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	2380      	movs	r3, #128	@ 0x80
 8002ca6:	025b      	lsls	r3, r3, #9
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d011      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbc:	e008      	b.n	8002cd0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	e000      	b.n	8002cd2 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b004      	add	sp, #16
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	40000400 	.word	0x40000400
 8002ce4:	00010007 	.word	0x00010007

08002ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2202      	movs	r2, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	d021      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d01d      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2203      	movs	r2, #3
 8002d16:	4252      	negs	r2, r2
 8002d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2203      	movs	r2, #3
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f8ea 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e007      	b.n	8002d46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 f8dd 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 f8e9 	bl	8002f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2204      	movs	r2, #4
 8002d50:	4013      	ands	r3, r2
 8002d52:	d022      	beq.n	8002d9a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2204      	movs	r2, #4
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d01e      	beq.n	8002d9a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2205      	movs	r2, #5
 8002d62:	4252      	negs	r2, r2
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	23c0      	movs	r3, #192	@ 0xc0
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4013      	ands	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f000 f8c3 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 8002d82:	e007      	b.n	8002d94 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 f8b6 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 f8c2 	bl	8002f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d021      	beq.n	8002de6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2208      	movs	r2, #8
 8002da6:	4013      	ands	r3, r2
 8002da8:	d01d      	beq.n	8002de6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2209      	movs	r2, #9
 8002db0:	4252      	negs	r2, r2
 8002db2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2204      	movs	r2, #4
 8002db8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f000 f89d 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 8002dce:	e007      	b.n	8002de0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 f890 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 f89c 	bl	8002f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2210      	movs	r2, #16
 8002dea:	4013      	ands	r3, r2
 8002dec:	d022      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2210      	movs	r2, #16
 8002df2:	4013      	ands	r3, r2
 8002df4:	d01e      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2211      	movs	r2, #17
 8002dfc:	4252      	negs	r2, r2
 8002dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2208      	movs	r2, #8
 8002e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	23c0      	movs	r3, #192	@ 0xc0
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4013      	ands	r3, r2
 8002e12:	d004      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	0018      	movs	r0, r3
 8002e18:	f000 f876 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 8002e1c:	e007      	b.n	8002e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 f869 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 f875 	bl	8002f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2201      	movs	r2, #1
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d00c      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4013      	ands	r3, r2
 8002e42:	d008      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	4252      	negs	r2, r2
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7fd fae3 	bl	800041c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2280      	movs	r2, #128	@ 0x80
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d104      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	2380      	movs	r3, #128	@ 0x80
 8002e62:	019b      	lsls	r3, r3, #6
 8002e64:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e66:	d00b      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2280      	movs	r2, #128	@ 0x80
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef0 <HAL_TIM_IRQHandler+0x208>)
 8002e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f8de 	bl	800303c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4013      	ands	r3, r2
 8002e88:	d00b      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2280      	movs	r2, #128	@ 0x80
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a17      	ldr	r2, [pc, #92]	@ (8002ef4 <HAL_TIM_IRQHandler+0x20c>)
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f000 f8d5 	bl	800304c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2240      	movs	r2, #64	@ 0x40
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2240      	movs	r2, #64	@ 0x40
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d008      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2241      	movs	r2, #65	@ 0x41
 8002eb8:	4252      	negs	r2, r2
 8002eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 f832 	bl	8002f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d00c      	beq.n	8002ee6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d008      	beq.n	8002ee6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2221      	movs	r2, #33	@ 0x21
 8002eda:	4252      	negs	r2, r2
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f000 f8a3 	bl	800302c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b004      	add	sp, #16
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	ffffdf7f 	.word	0xffffdf7f
 8002ef4:	fffffeff 	.word	0xfffffeff

08002ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f00:	46c0      	nop			@ (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f10:	46c0      	nop			@ (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f20:	46c0      	nop			@ (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f30:	46c0      	nop			@ (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a32      	ldr	r2, [pc, #200]	@ (8003014 <TIM_Base_SetConfig+0xdc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <TIM_Base_SetConfig+0x20>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a31      	ldr	r2, [pc, #196]	@ (8003018 <TIM_Base_SetConfig+0xe0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d108      	bne.n	8002f6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2270      	movs	r2, #112	@ 0x70
 8002f5c:	4393      	bics	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a29      	ldr	r2, [pc, #164]	@ (8003014 <TIM_Base_SetConfig+0xdc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00f      	beq.n	8002f92 <TIM_Base_SetConfig+0x5a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a28      	ldr	r2, [pc, #160]	@ (8003018 <TIM_Base_SetConfig+0xe0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00b      	beq.n	8002f92 <TIM_Base_SetConfig+0x5a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a27      	ldr	r2, [pc, #156]	@ (800301c <TIM_Base_SetConfig+0xe4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d007      	beq.n	8002f92 <TIM_Base_SetConfig+0x5a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a26      	ldr	r2, [pc, #152]	@ (8003020 <TIM_Base_SetConfig+0xe8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d003      	beq.n	8002f92 <TIM_Base_SetConfig+0x5a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a25      	ldr	r2, [pc, #148]	@ (8003024 <TIM_Base_SetConfig+0xec>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d108      	bne.n	8002fa4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a24      	ldr	r2, [pc, #144]	@ (8003028 <TIM_Base_SetConfig+0xf0>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2280      	movs	r2, #128	@ 0x80
 8002fa8:	4393      	bics	r3, r2
 8002faa:	001a      	movs	r2, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a11      	ldr	r2, [pc, #68]	@ (8003014 <TIM_Base_SetConfig+0xdc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d007      	beq.n	8002fe2 <TIM_Base_SetConfig+0xaa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a12      	ldr	r2, [pc, #72]	@ (8003020 <TIM_Base_SetConfig+0xe8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d003      	beq.n	8002fe2 <TIM_Base_SetConfig+0xaa>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a11      	ldr	r2, [pc, #68]	@ (8003024 <TIM_Base_SetConfig+0xec>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d103      	bne.n	8002fea <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d106      	bne.n	800300a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2201      	movs	r2, #1
 8003002:	4393      	bics	r3, r2
 8003004:	001a      	movs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	611a      	str	r2, [r3, #16]
  }
}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	b004      	add	sp, #16
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	40012c00 	.word	0x40012c00
 8003018:	40000400 	.word	0x40000400
 800301c:	40002000 	.word	0x40002000
 8003020:	40014400 	.word	0x40014400
 8003024:	40014800 	.word	0x40014800
 8003028:	fffffcff 	.word	0xfffffcff

0800302c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003034:	46c0      	nop			@ (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003044:	46c0      	nop			@ (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}

0800305c <memset>:
 800305c:	0003      	movs	r3, r0
 800305e:	1882      	adds	r2, r0, r2
 8003060:	4293      	cmp	r3, r2
 8003062:	d100      	bne.n	8003066 <memset+0xa>
 8003064:	4770      	bx	lr
 8003066:	7019      	strb	r1, [r3, #0]
 8003068:	3301      	adds	r3, #1
 800306a:	e7f9      	b.n	8003060 <memset+0x4>

0800306c <__libc_init_array>:
 800306c:	b570      	push	{r4, r5, r6, lr}
 800306e:	2600      	movs	r6, #0
 8003070:	4c0c      	ldr	r4, [pc, #48]	@ (80030a4 <__libc_init_array+0x38>)
 8003072:	4d0d      	ldr	r5, [pc, #52]	@ (80030a8 <__libc_init_array+0x3c>)
 8003074:	1b64      	subs	r4, r4, r5
 8003076:	10a4      	asrs	r4, r4, #2
 8003078:	42a6      	cmp	r6, r4
 800307a:	d109      	bne.n	8003090 <__libc_init_array+0x24>
 800307c:	2600      	movs	r6, #0
 800307e:	f000 f819 	bl	80030b4 <_init>
 8003082:	4c0a      	ldr	r4, [pc, #40]	@ (80030ac <__libc_init_array+0x40>)
 8003084:	4d0a      	ldr	r5, [pc, #40]	@ (80030b0 <__libc_init_array+0x44>)
 8003086:	1b64      	subs	r4, r4, r5
 8003088:	10a4      	asrs	r4, r4, #2
 800308a:	42a6      	cmp	r6, r4
 800308c:	d105      	bne.n	800309a <__libc_init_array+0x2e>
 800308e:	bd70      	pop	{r4, r5, r6, pc}
 8003090:	00b3      	lsls	r3, r6, #2
 8003092:	58eb      	ldr	r3, [r5, r3]
 8003094:	4798      	blx	r3
 8003096:	3601      	adds	r6, #1
 8003098:	e7ee      	b.n	8003078 <__libc_init_array+0xc>
 800309a:	00b3      	lsls	r3, r6, #2
 800309c:	58eb      	ldr	r3, [r5, r3]
 800309e:	4798      	blx	r3
 80030a0:	3601      	adds	r6, #1
 80030a2:	e7f2      	b.n	800308a <__libc_init_array+0x1e>
 80030a4:	0800550c 	.word	0x0800550c
 80030a8:	0800550c 	.word	0x0800550c
 80030ac:	08005510 	.word	0x08005510
 80030b0:	0800550c 	.word	0x0800550c

080030b4 <_init>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ba:	bc08      	pop	{r3}
 80030bc:	469e      	mov	lr, r3
 80030be:	4770      	bx	lr

080030c0 <_fini>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr
