
Bongo-cat-fidget-toy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c40  08003368  08003368  00004368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa8  08005fa8  00007020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005fa8  08005fa8  00007020  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005fa8  08005fa8  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa8  08005fa8  00006fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fac  08005fac  00006fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08005fb0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000020  08005fd0  00007020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08005fd0  00007504  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1df  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238a  00000000  00000000  00015227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  000175b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4c  00000000  00000000  00018428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156e9  00000000  00000000  00018f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010af1  00000000  00000000  0002e65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e80  00000000  00000000  0003f14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6fce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000349c  00000000  00000000  000c7014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000ca4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000020 	.word	0x20000020
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003350 	.word	0x08003350

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000024 	.word	0x20000024
 80000fc:	08003350 	.word	0x08003350

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <toggle_display_invert>:

uint8_t idle_cnt;

uint8_t display_inverted = 0;  // Add this flag

void toggle_display_invert(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    display_inverted = !display_inverted;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <toggle_display_invert+0x30>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	425a      	negs	r2, r3
 80003f6:	4153      	adcs	r3, r2
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	001a      	movs	r2, r3
 80003fc:	4b07      	ldr	r3, [pc, #28]	@ (800041c <toggle_display_invert+0x30>)
 80003fe:	701a      	strb	r2, [r3, #0]
    if (display_inverted) {
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <toggle_display_invert+0x30>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d003      	beq.n	8000410 <toggle_display_invert+0x24>
        ssd1306_InvertDisplay(1);  // Hardware invert ON
 8000408:	2001      	movs	r0, #1
 800040a:	f000 fdad 	bl	8000f68 <ssd1306_InvertDisplay>
    } else {
        ssd1306_InvertDisplay(0);  // Hardware invert OFF
    }
}
 800040e:	e002      	b.n	8000416 <toggle_display_invert+0x2a>
        ssd1306_InvertDisplay(0);  // Hardware invert OFF
 8000410:	2000      	movs	r0, #0
 8000412:	f000 fda9 	bl	8000f68 <ssd1306_InvertDisplay>
}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	200000e5 	.word	0x200000e5

08000420 <draw_animation>:

void draw_animation(char* frame){
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af02      	add	r7, sp, #8
 8000426:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8000428:	2000      	movs	r0, #0
 800042a:	f000 fc17 	bl	8000c5c <ssd1306_Fill>
	ssd1306_DrawBitmap(0,0,frame,128,64,White);
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	2301      	movs	r3, #1
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	2340      	movs	r3, #64	@ 0x40
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2380      	movs	r3, #128	@ 0x80
 800043a:	2100      	movs	r1, #0
 800043c:	2000      	movs	r0, #0
 800043e:	f000 fcc7 	bl	8000dd0 <ssd1306_DrawBitmap>
}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}

0800044a <draw_animation_erase>:

void draw_animation_erase(char* frame){
 800044a:	b580      	push	{r7, lr}
 800044c:	b084      	sub	sp, #16
 800044e:	af02      	add	r7, sp, #8
 8000450:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(0,0,frame,128,64,Black);
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	2300      	movs	r3, #0
 8000456:	9301      	str	r3, [sp, #4]
 8000458:	2340      	movs	r3, #64	@ 0x40
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	2380      	movs	r3, #128	@ 0x80
 800045e:	2100      	movs	r1, #0
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fcb5 	bl	8000dd0 <ssd1306_DrawBitmap>
}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}

0800046e <draw_animation_transparent>:

void draw_animation_transparent(char* frame){
 800046e:	b580      	push	{r7, lr}
 8000470:	b084      	sub	sp, #16
 8000472:	af02      	add	r7, sp, #8
 8000474:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(0,0,frame,128,64,White);
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	2301      	movs	r3, #1
 800047a:	9301      	str	r3, [sp, #4]
 800047c:	2340      	movs	r3, #64	@ 0x40
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2380      	movs	r3, #128	@ 0x80
 8000482:	2100      	movs	r1, #0
 8000484:	2000      	movs	r0, #0
 8000486:	f000 fca3 	bl	8000dd0 <ssd1306_DrawBitmap>
}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <readPins>:

void readPins(){
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	sw_state_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);
 8000498:	23a0      	movs	r3, #160	@ 0xa0
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	2140      	movs	r1, #64	@ 0x40
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 f98a 	bl	80017b8 <HAL_GPIO_ReadPin>
 80004a4:	0003      	movs	r3, r0
 80004a6:	001a      	movs	r2, r3
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <readPins+0x30>)
 80004aa:	601a      	str	r2, [r3, #0]
	sw_state_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);
 80004ac:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <readPins+0x34>)
 80004ae:	2101      	movs	r1, #1
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 f981 	bl	80017b8 <HAL_GPIO_ReadPin>
 80004b6:	0003      	movs	r3, r0
 80004b8:	001a      	movs	r2, r3
 80004ba:	4b04      	ldr	r3, [pc, #16]	@ (80004cc <readPins+0x38>)
 80004bc:	601a      	str	r2, [r3, #0]
}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200000dc 	.word	0x200000dc
 80004c8:	50000400 	.word	0x50000400
 80004cc:	200000e0 	.word	0x200000e0

080004d0 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
//  // Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim14 )
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80004dc:	429a      	cmp	r2, r3
 80004de:	d101      	bne.n	80004e4 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		readPins();
 80004e0:	f7ff ffd8 	bl	8000494 <readPins>
	}
}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b002      	add	sp, #8
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000090 	.word	0x20000090

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fe73 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f97f 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 fa57 	bl	80009b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000502:	f000 f9eb 	bl	80008dc <MX_I2C1_Init>
  MX_TIM14_Init();
 8000506:	f000 fa2d 	bl	8000964 <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800050a:	f000 f9d1 	bl	80008b0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800050e:	2380      	movs	r3, #128	@ 0x80
 8000510:	0219      	lsls	r1, r3, #8
 8000512:	23a0      	movs	r3, #160	@ 0xa0
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	2200      	movs	r2, #0
 8000518:	0018      	movs	r0, r3
 800051a:	f001 f96a 	bl	80017f2 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800051e:	200a      	movs	r0, #10
 8000520:	f000 fee4 	bl	80012ec <HAL_Delay>
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8000524:	2380      	movs	r3, #128	@ 0x80
 8000526:	0219      	lsls	r1, r3, #8
 8000528:	23a0      	movs	r3, #160	@ 0xa0
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	2201      	movs	r2, #1
 800052e:	0018      	movs	r0, r3
 8000530:	f001 f95f 	bl	80017f2 <HAL_GPIO_WritePin>
  ssd1306_Init();
 8000534:	f000 fb26 	bl	8000b84 <ssd1306_Init>

// If left is pressed  at boot, inver screen
  readPins();
 8000538:	f7ff ffac 	bl	8000494 <readPins>
  if(LEFT_PRESSED)
 800053c:	4ba4      	ldr	r3, [pc, #656]	@ (80007d0 <main+0x2e0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d105      	bne.n	8000550 <main+0x60>
 8000544:	4ba3      	ldr	r3, [pc, #652]	@ (80007d4 <main+0x2e4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d101      	bne.n	8000550 <main+0x60>
	  toggle_display_invert();
 800054c:	f7ff ff4e 	bl	80003ec <toggle_display_invert>


  state_e state = IDLE;
 8000550:	2317      	movs	r3, #23
 8000552:	18fb      	adds	r3, r7, r3
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
  int32_t idle_cntr = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
  int32_t tap_left_cntr = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
  int32_t tap_right_cntr = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
  uint8_t left_state = 0;
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
  uint8_t right_state = 0;
 800056a:	1dbb      	adds	r3, r7, #6
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim14);
 8000570:	4b99      	ldr	r3, [pc, #612]	@ (80007d8 <main+0x2e8>)
 8000572:	0018      	movs	r0, r3
 8000574:	f002 fcb8 	bl	8002ee8 <HAL_TIM_Base_Start_IT>
  while(1) {
	switch(state){
 8000578:	2317      	movs	r3, #23
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d002      	beq.n	8000588 <main+0x98>
 8000582:	2b01      	cmp	r3, #1
 8000584:	d031      	beq.n	80005ea <main+0xfa>
 8000586:	e7f7      	b.n	8000578 <main+0x88>
	case IDLE:
		if(sw_state_left == 0 || sw_state_right == 0){
 8000588:	4b91      	ldr	r3, [pc, #580]	@ (80007d0 <main+0x2e0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d003      	beq.n	8000598 <main+0xa8>
 8000590:	4b90      	ldr	r3, [pc, #576]	@ (80007d4 <main+0x2e4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10d      	bne.n	80005b4 <main+0xc4>
			draw_animation(&img_both_up);
 8000598:	4b90      	ldr	r3, [pc, #576]	@ (80007dc <main+0x2ec>)
 800059a:	0018      	movs	r0, r3
 800059c:	f7ff ff40 	bl	8000420 <draw_animation>
			ssd1306_UpdateScreen();
 80005a0:	f000 fb76 	bl	8000c90 <ssd1306_UpdateScreen>
			HAL_Delay(50);
 80005a4:	2032      	movs	r0, #50	@ 0x32
 80005a6:	f000 fea1 	bl	80012ec <HAL_Delay>
			state = SWITCH;
 80005aa:	2317      	movs	r3, #23
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
			  draw_animation(ani_idle[idle_cnt]);
			  ssd1306_UpdateScreen();
			  idle_cnt = (idle_cnt + 1 ) % ani_idle_LEN;
			  HAL_Delay(100);
		}
		break;
 80005b2:	e10c      	b.n	80007ce <main+0x2de>
			  draw_animation(ani_idle[idle_cnt]);
 80005b4:	4b8a      	ldr	r3, [pc, #552]	@ (80007e0 <main+0x2f0>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	001a      	movs	r2, r3
 80005ba:	4b8a      	ldr	r3, [pc, #552]	@ (80007e4 <main+0x2f4>)
 80005bc:	0092      	lsls	r2, r2, #2
 80005be:	58d3      	ldr	r3, [r2, r3]
 80005c0:	0018      	movs	r0, r3
 80005c2:	f7ff ff2d 	bl	8000420 <draw_animation>
			  ssd1306_UpdateScreen();
 80005c6:	f000 fb63 	bl	8000c90 <ssd1306_UpdateScreen>
			  idle_cnt = (idle_cnt + 1 ) % ani_idle_LEN;
 80005ca:	4b85      	ldr	r3, [pc, #532]	@ (80007e0 <main+0x2f0>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	2205      	movs	r2, #5
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ff03 	bl	80003e0 <__aeabi_idivmod>
 80005da:	000b      	movs	r3, r1
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b80      	ldr	r3, [pc, #512]	@ (80007e0 <main+0x2f0>)
 80005e0:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(100);
 80005e2:	2064      	movs	r0, #100	@ 0x64
 80005e4:	f000 fe82 	bl	80012ec <HAL_Delay>
		break;
 80005e8:	e0f1      	b.n	80007ce <main+0x2de>
	case SWITCH:
		// Idle reset routines
		if(NONE_PRESSED){
 80005ea:	4b79      	ldr	r3, [pc, #484]	@ (80007d0 <main+0x2e0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d12d      	bne.n	800064e <main+0x15e>
 80005f2:	4b78      	ldr	r3, [pc, #480]	@ (80007d4 <main+0x2e4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d129      	bne.n	800064e <main+0x15e>
			draw_animation(&img_both_up);
 80005fa:	4b78      	ldr	r3, [pc, #480]	@ (80007dc <main+0x2ec>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff0f 	bl	8000420 <draw_animation>
			if(idle_cntr == 0){
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d103      	bne.n	8000610 <main+0x120>
				idle_cntr = HAL_GetTick();
 8000608:	f000 fe66 	bl	80012d8 <HAL_GetTick>
 800060c:	0003      	movs	r3, r0
 800060e:	613b      	str	r3, [r7, #16]
			}
			if(HAL_GetTick() - idle_cntr >= IDLE_TIME){
 8000610:	f000 fe62 	bl	80012d8 <HAL_GetTick>
 8000614:	0002      	movs	r2, r0
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	1ad2      	subs	r2, r2, r3
 800061a:	23fa      	movs	r3, #250	@ 0xfa
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	429a      	cmp	r2, r3
 8000620:	d305      	bcc.n	800062e <main+0x13e>
				idle_cntr = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
				state = IDLE;
 8000626:	2317      	movs	r3, #23
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
			}
			if(left_state)
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <main+0x14c>
				left_state = 0;
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
			if(right_state)
 800063c:	1dbb      	adds	r3, r7, #6
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d100      	bne.n	8000646 <main+0x156>
 8000644:	e096      	b.n	8000774 <main+0x284>
				right_state = 0;
 8000646:	1dbb      	adds	r3, r7, #6
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
			if(right_state)
 800064c:	e092      	b.n	8000774 <main+0x284>

		}
		// Paw draw routines
		else {
			idle_cntr = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
			if((BOTH_PRESSED) && ((left_state | right_state == 0) || (left_state ^ right_state == 1))){
 8000652:	4b5f      	ldr	r3, [pc, #380]	@ (80007d0 <main+0x2e0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d138      	bne.n	80006cc <main+0x1dc>
 800065a:	4b5e      	ldr	r3, [pc, #376]	@ (80007d4 <main+0x2e4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d134      	bne.n	80006cc <main+0x1dc>
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	1dba      	adds	r2, r7, #6
 8000668:	7812      	ldrb	r2, [r2, #0]
 800066a:	4251      	negs	r1, r2
 800066c:	414a      	adcs	r2, r1
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	4313      	orrs	r3, r2
 8000672:	d109      	bne.n	8000688 <main+0x198>
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	1dba      	adds	r2, r7, #6
 800067a:	7812      	ldrb	r2, [r2, #0]
 800067c:	3a01      	subs	r2, #1
 800067e:	4251      	negs	r1, r2
 8000680:	414a      	adcs	r2, r1
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	4293      	cmp	r3, r2
 8000686:	d021      	beq.n	80006cc <main+0x1dc>
				draw_animation(&img_both_down_alt);
 8000688:	4b57      	ldr	r3, [pc, #348]	@ (80007e8 <main+0x2f8>)
 800068a:	0018      	movs	r0, r3
 800068c:	f7ff fec8 	bl	8000420 <draw_animation>
				if(!right_state){
 8000690:	1dbb      	adds	r3, r7, #6
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d107      	bne.n	80006a8 <main+0x1b8>
					draw_animation_transparent(&img_tap_right);
 8000698:	4b54      	ldr	r3, [pc, #336]	@ (80007ec <main+0x2fc>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff fee7 	bl	800046e <draw_animation_transparent>
					tap_right_cntr = HAL_GetTick();
 80006a0:	f000 fe1a 	bl	80012d8 <HAL_GetTick>
 80006a4:	0003      	movs	r3, r0
 80006a6:	60bb      	str	r3, [r7, #8]
				}
				if(!left_state){
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d107      	bne.n	80006c0 <main+0x1d0>
					draw_animation_transparent(&img_tap_left);
 80006b0:	4b4f      	ldr	r3, [pc, #316]	@ (80007f0 <main+0x300>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f7ff fedb 	bl	800046e <draw_animation_transparent>
					tap_left_cntr = HAL_GetTick();
 80006b8:	f000 fe0e 	bl	80012d8 <HAL_GetTick>
 80006bc:	0003      	movs	r3, r0
 80006be:	60fb      	str	r3, [r7, #12]
				}
				right_state = 1; left_state = 1;
 80006c0:	1dbb      	adds	r3, r7, #6
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
			}
			if(RIGHT_PRESSED){
 80006cc:	4b40      	ldr	r3, [pc, #256]	@ (80007d0 <main+0x2e0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d125      	bne.n	8000720 <main+0x230>
 80006d4:	4b3f      	ldr	r3, [pc, #252]	@ (80007d4 <main+0x2e4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d121      	bne.n	8000720 <main+0x230>
				if(right_state == 0 || left_state == 1){
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d003      	beq.n	80006ec <main+0x1fc>
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d112      	bne.n	8000712 <main+0x222>
					draw_animation(&img_right_down_alt);
 80006ec:	4b41      	ldr	r3, [pc, #260]	@ (80007f4 <main+0x304>)
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff fe96 	bl	8000420 <draw_animation>
					if(!right_state){
 80006f4:	1dbb      	adds	r3, r7, #6
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d107      	bne.n	800070c <main+0x21c>
						draw_animation_transparent(&img_tap_right);
 80006fc:	4b3b      	ldr	r3, [pc, #236]	@ (80007ec <main+0x2fc>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f7ff feb5 	bl	800046e <draw_animation_transparent>
						tap_right_cntr = HAL_GetTick();
 8000704:	f000 fde8 	bl	80012d8 <HAL_GetTick>
 8000708:	0003      	movs	r3, r0
 800070a:	60bb      	str	r3, [r7, #8]
					}
					right_state = 1;
 800070c:	1dbb      	adds	r3, r7, #6
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]

				}
				if(left_state)
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <main+0x230>
					left_state = 0;
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
			}
			if(LEFT_PRESSED){
 8000720:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <main+0x2e0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d125      	bne.n	8000774 <main+0x284>
 8000728:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <main+0x2e4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d121      	bne.n	8000774 <main+0x284>
				if(left_state == 0 || right_state == 1){
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <main+0x250>
 8000738:	1dbb      	adds	r3, r7, #6
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d112      	bne.n	8000766 <main+0x276>
					draw_animation(&img_left_down_alt);
 8000740:	4b2d      	ldr	r3, [pc, #180]	@ (80007f8 <main+0x308>)
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff fe6c 	bl	8000420 <draw_animation>
					if(!left_state){
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d107      	bne.n	8000760 <main+0x270>
						draw_animation_transparent(&img_tap_left);
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <main+0x300>)
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff fe8b 	bl	800046e <draw_animation_transparent>
						tap_left_cntr = HAL_GetTick();
 8000758:	f000 fdbe 	bl	80012d8 <HAL_GetTick>
 800075c:	0003      	movs	r3, r0
 800075e:	60fb      	str	r3, [r7, #12]
					}
					left_state = 1;
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]

				}
				if(right_state)
 8000766:	1dbb      	adds	r3, r7, #6
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d002      	beq.n	8000774 <main+0x284>
					right_state = 0;
 800076e:	1dbb      	adds	r3, r7, #6
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
//			draw_animation_transparent(&img_tap_right);
//			tap_right_cntr = HAL_GetTick();
//		}

		// Tap decay routines
		if(tap_left_cntr > 0){
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	dd11      	ble.n	800079e <main+0x2ae>
			if(HAL_GetTick() - tap_left_cntr > TAP_DECAY_TIME) {
 800077a:	f000 fdad 	bl	80012d8 <HAL_GetTick>
 800077e:	0002      	movs	r2, r0
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	2bc8      	cmp	r3, #200	@ 0xc8
 8000786:	d906      	bls.n	8000796 <main+0x2a6>
				draw_animation_erase(&img_tap_left);
 8000788:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <main+0x300>)
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff fe5d 	bl	800044a <draw_animation_erase>
				tap_left_cntr = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	e003      	b.n	800079e <main+0x2ae>
				}
			else{
				draw_animation_transparent(&img_tap_left);
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <main+0x300>)
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fe68 	bl	800046e <draw_animation_transparent>
			}
			}
		if(tap_right_cntr > 0){
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dd11      	ble.n	80007c8 <main+0x2d8>
			if(HAL_GetTick() - tap_right_cntr > TAP_DECAY_TIME) {
 80007a4:	f000 fd98 	bl	80012d8 <HAL_GetTick>
 80007a8:	0002      	movs	r2, r0
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	2bc8      	cmp	r3, #200	@ 0xc8
 80007b0:	d906      	bls.n	80007c0 <main+0x2d0>
				draw_animation_erase(&img_tap_right);
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <main+0x2fc>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff fe48 	bl	800044a <draw_animation_erase>
				tap_right_cntr = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	e003      	b.n	80007c8 <main+0x2d8>
				}
			else{
				draw_animation_transparent(&img_tap_right);
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <main+0x2fc>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff fe53 	bl	800046e <draw_animation_transparent>
			}
			}

//		HAL_Delay(100);
		ssd1306_UpdateScreen();
 80007c8:	f000 fa62 	bl	8000c90 <ssd1306_UpdateScreen>
		break;
 80007cc:	46c0      	nop			@ (mov r8, r8)
	switch(state){
 80007ce:	e6d3      	b.n	8000578 <main+0x88>
 80007d0:	200000dc 	.word	0x200000dc
 80007d4:	200000e0 	.word	0x200000e0
 80007d8:	20000090 	.word	0x20000090
 80007dc:	08003368 	.word	0x08003368
 80007e0:	200000e4 	.word	0x200000e4
 80007e4:	20000000 	.word	0x20000000
 80007e8:	08004b68 	.word	0x08004b68
 80007ec:	08005b68 	.word	0x08005b68
 80007f0:	08005768 	.word	0x08005768
 80007f4:	08005368 	.word	0x08005368
 80007f8:	08004f68 	.word	0x08004f68

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b093      	sub	sp, #76	@ 0x4c
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	2414      	movs	r4, #20
 8000804:	193b      	adds	r3, r7, r4
 8000806:	0018      	movs	r0, r3
 8000808:	2334      	movs	r3, #52	@ 0x34
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f002 fd73 	bl	80032f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	0018      	movs	r0, r3
 8000816:	2310      	movs	r3, #16
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f002 fd6c 	bl	80032f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000820:	2380      	movs	r3, #128	@ 0x80
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fd07 	bl	8002238 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2202      	movs	r2, #2
 800082e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2280      	movs	r2, #128	@ 0x80
 8000834:	0052      	lsls	r2, r2, #1
 8000836:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000838:	0021      	movs	r1, r4
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2240      	movs	r2, #64	@ 0x40
 8000844:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2202      	movs	r2, #2
 8000850:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2208      	movs	r2, #8
 800085c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	0292      	lsls	r2, r2, #10
 8000864:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2280      	movs	r2, #128	@ 0x80
 800086a:	0592      	lsls	r2, r2, #22
 800086c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	187b      	adds	r3, r7, r1
 8000870:	0018      	movs	r0, r3
 8000872:	f001 fd21 	bl	80022b8 <HAL_RCC_OscConfig>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800087a:	f000 f943 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2202      	movs	r2, #2
 8000888:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2102      	movs	r1, #2
 800089a:	0018      	movs	r0, r3
 800089c:	f002 f81c 	bl	80028d8 <HAL_RCC_ClockConfig>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008a4:	f000 f92e 	bl	8000b04 <Error_Handler>
  }
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b013      	add	sp, #76	@ 0x4c
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2004      	movs	r0, #4
 80008ba:	f000 fde7 	bl	800148c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80008be:	2004      	movs	r0, #4
 80008c0:	f000 fdf9 	bl	80014b6 <HAL_NVIC_EnableIRQ>
  /* TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2013      	movs	r0, #19
 80008ca:	f000 fddf 	bl	800148c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80008ce:	2013      	movs	r0, #19
 80008d0:	f000 fdf1 	bl	80014b6 <HAL_NVIC_EnableIRQ>
}
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_I2C1_Init+0x7c>)
 80008e2:	4a1e      	ldr	r2, [pc, #120]	@ (800095c <MX_I2C1_Init+0x80>)
 80008e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602476;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <MX_I2C1_Init+0x7c>)
 80008e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000960 <MX_I2C1_Init+0x84>)
 80008ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_I2C1_Init+0x7c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <MX_I2C1_Init+0x7c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f8:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_I2C1_Init+0x7c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_I2C1_Init+0x7c>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000904:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_I2C1_Init+0x7c>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <MX_I2C1_Init+0x7c>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_I2C1_Init+0x7c>)
 8000912:	2280      	movs	r2, #128	@ 0x80
 8000914:	0292      	lsls	r2, r2, #10
 8000916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_I2C1_Init+0x7c>)
 800091a:	0018      	movs	r0, r3
 800091c:	f000 ff86 	bl	800182c <HAL_I2C_Init>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000924:	f000 f8ee 	bl	8000b04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	015a      	lsls	r2, r3, #5
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <MX_I2C1_Init+0x7c>)
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f001 fbe9 	bl	8002108 <HAL_I2CEx_ConfigAnalogFilter>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x62>
  {
    Error_Handler();
 800093a:	f000 f8e3 	bl	8000b04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_I2C1_Init+0x7c>)
 8000940:	2100      	movs	r1, #0
 8000942:	0018      	movs	r0, r3
 8000944:	f001 fc2c 	bl	80021a0 <HAL_I2CEx_ConfigDigitalFilter>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C1_Init+0x74>
  {
    Error_Handler();
 800094c:	f000 f8da 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	2000003c 	.word	0x2000003c
 800095c:	40005400 	.word	0x40005400
 8000960:	00602476 	.word	0x00602476

08000964 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_TIM14_Init+0x40>)
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <MX_TIM14_Init+0x44>)
 800096c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 100-1;
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <MX_TIM14_Init+0x40>)
 8000970:	2263      	movs	r2, #99	@ 0x63
 8000972:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MX_TIM14_Init+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 6400-1;
 800097a:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <MX_TIM14_Init+0x40>)
 800097c:	4a0b      	ldr	r2, [pc, #44]	@ (80009ac <MX_TIM14_Init+0x48>)
 800097e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <MX_TIM14_Init+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <MX_TIM14_Init+0x40>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800098c:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <MX_TIM14_Init+0x40>)
 800098e:	0018      	movs	r0, r3
 8000990:	f002 fa52 	bl	8002e38 <HAL_TIM_Base_Init>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000998:	f000 f8b4 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800099c:	46c0      	nop			@ (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	20000090 	.word	0x20000090
 80009a8:	40002000 	.word	0x40002000
 80009ac:	000018ff 	.word	0x000018ff

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b089      	sub	sp, #36	@ 0x24
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	240c      	movs	r4, #12
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	0018      	movs	r0, r3
 80009bc:	2314      	movs	r3, #20
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f002 fc99 	bl	80032f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b4a      	ldr	r3, [pc, #296]	@ (8000af0 <MX_GPIO_Init+0x140>)
 80009c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ca:	4b49      	ldr	r3, [pc, #292]	@ (8000af0 <MX_GPIO_Init+0x140>)
 80009cc:	2102      	movs	r1, #2
 80009ce:	430a      	orrs	r2, r1
 80009d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009d2:	4b47      	ldr	r3, [pc, #284]	@ (8000af0 <MX_GPIO_Init+0x140>)
 80009d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009d6:	2202      	movs	r2, #2
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b44      	ldr	r3, [pc, #272]	@ (8000af0 <MX_GPIO_Init+0x140>)
 80009e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009e2:	4b43      	ldr	r3, [pc, #268]	@ (8000af0 <MX_GPIO_Init+0x140>)
 80009e4:	2104      	movs	r1, #4
 80009e6:	430a      	orrs	r2, r1
 80009e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ea:	4b41      	ldr	r3, [pc, #260]	@ (8000af0 <MX_GPIO_Init+0x140>)
 80009ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ee:	2204      	movs	r2, #4
 80009f0:	4013      	ands	r3, r2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b3e      	ldr	r3, [pc, #248]	@ (8000af0 <MX_GPIO_Init+0x140>)
 80009f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009fa:	4b3d      	ldr	r3, [pc, #244]	@ (8000af0 <MX_GPIO_Init+0x140>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a02:	4b3b      	ldr	r3, [pc, #236]	@ (8000af0 <MX_GPIO_Init+0x140>)
 8000a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a06:	2201      	movs	r2, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000a0e:	2380      	movs	r3, #128	@ 0x80
 8000a10:	0219      	lsls	r1, r3, #8
 8000a12:	23a0      	movs	r3, #160	@ 0xa0
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	2200      	movs	r2, #0
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 feea 	bl	80017f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	4a34      	ldr	r2, [pc, #208]	@ (8000af4 <MX_GPIO_Init+0x144>)
 8000a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2203      	movs	r2, #3
 8000a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	4a31      	ldr	r2, [pc, #196]	@ (8000af8 <MX_GPIO_Init+0x148>)
 8000a34:	0019      	movs	r1, r3
 8000a36:	0010      	movs	r0, r2
 8000a38:	f000 fd5a 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 PA8
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	4a2f      	ldr	r2, [pc, #188]	@ (8000afc <MX_GPIO_Init+0x14c>)
 8000a40:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2203      	movs	r2, #3
 8000a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	193a      	adds	r2, r7, r4
 8000a50:	23a0      	movs	r3, #160	@ 0xa0
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	0011      	movs	r1, r2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fd4a 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_LEFT_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2240      	movs	r2, #64	@ 0x40
 8000a60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	193a      	adds	r2, r7, r4
 8000a70:	23a0      	movs	r3, #160	@ 0xa0
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 fd3a 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2201      	movs	r2, #1
 8000a80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	4a1b      	ldr	r2, [pc, #108]	@ (8000b00 <MX_GPIO_Init+0x150>)
 8000a92:	0019      	movs	r1, r3
 8000a94:	0010      	movs	r0, r2
 8000a96:	f000 fd2b 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a9a:	0021      	movs	r1, r4
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	22ff      	movs	r2, #255	@ 0xff
 8000aa0:	0052      	lsls	r2, r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa4:	000c      	movs	r4, r1
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <MX_GPIO_Init+0x150>)
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	0010      	movs	r0, r2
 8000aba:	f000 fd19 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000abe:	0021      	movs	r1, r4
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	0212      	lsls	r2, r2, #8
 8000ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2201      	movs	r2, #1
 8000acc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000ada:	187a      	adds	r2, r7, r1
 8000adc:	23a0      	movs	r3, #160	@ 0xa0
 8000ade:	05db      	lsls	r3, r3, #23
 8000ae0:	0011      	movs	r1, r2
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 fd04 	bl	80014f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b009      	add	sp, #36	@ 0x24
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	40021000 	.word	0x40021000
 8000af4:	0000c040 	.word	0x0000c040
 8000af8:	50000800 	.word	0x50000800
 8000afc:	00001dbf 	.word	0x00001dbf
 8000b00:	50000400 	.word	0x50000400

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	46c0      	nop			@ (mov r8, r8)
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af04      	add	r7, sp, #16
 8000b22:	0002      	movs	r2, r0
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b28:	4808      	ldr	r0, [pc, #32]	@ (8000b4c <ssd1306_WriteCommand+0x30>)
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	425b      	negs	r3, r3
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	2301      	movs	r3, #1
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2178      	movs	r1, #120	@ 0x78
 8000b3e:	f000 ff1b 	bl	8001978 <HAL_I2C_Mem_Write>
}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	2000003c 	.word	0x2000003c

08000b50 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af04      	add	r7, sp, #16
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4808      	ldr	r0, [pc, #32]	@ (8000b80 <ssd1306_WriteData+0x30>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	4252      	negs	r2, r2
 8000b64:	9202      	str	r2, [sp, #8]
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	2240      	movs	r2, #64	@ 0x40
 8000b70:	2178      	movs	r1, #120	@ 0x78
 8000b72:	f000 ff01 	bl	8001978 <HAL_I2C_Mem_Write>
}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	2000003c 	.word	0x2000003c

08000b84 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b88:	f7ff ffc2 	bl	8000b10 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b8c:	2064      	movs	r0, #100	@ 0x64
 8000b8e:	f000 fbad 	bl	80012ec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f9c2 	bl	8000f1c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b98:	2020      	movs	r0, #32
 8000b9a:	f7ff ffbf 	bl	8000b1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff ffbc 	bl	8000b1c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ba4:	20b0      	movs	r0, #176	@ 0xb0
 8000ba6:	f7ff ffb9 	bl	8000b1c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8000baa:	20c0      	movs	r0, #192	@ 0xc0
 8000bac:	f7ff ffb6 	bl	8000b1c <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff ffb3 	bl	8000b1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000bb6:	2010      	movs	r0, #16
 8000bb8:	f7ff ffb0 	bl	8000b1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000bbc:	2040      	movs	r0, #64	@ 0x40
 8000bbe:	f7ff ffad 	bl	8000b1c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);//FF
 8000bc2:	20ff      	movs	r0, #255	@ 0xff
 8000bc4:	f000 f991 	bl	8000eea <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8000bc8:	20a0      	movs	r0, #160	@ 0xa0
 8000bca:	f7ff ffa7 	bl	8000b1c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000bce:	20a6      	movs	r0, #166	@ 0xa6
 8000bd0:	f7ff ffa4 	bl	8000b1c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000bd4:	20a8      	movs	r0, #168	@ 0xa8
 8000bd6:	f7ff ffa1 	bl	8000b1c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000bda:	203f      	movs	r0, #63	@ 0x3f
 8000bdc:	f7ff ff9e 	bl	8000b1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000be0:	20a4      	movs	r0, #164	@ 0xa4
 8000be2:	f7ff ff9b 	bl	8000b1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000be6:	20d3      	movs	r0, #211	@ 0xd3
 8000be8:	f7ff ff98 	bl	8000b1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff ff95 	bl	8000b1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bf2:	20d5      	movs	r0, #213	@ 0xd5
 8000bf4:	f7ff ff92 	bl	8000b1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000bf8:	20f0      	movs	r0, #240	@ 0xf0
 8000bfa:	f7ff ff8f 	bl	8000b1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000bfe:	20d9      	movs	r0, #217	@ 0xd9
 8000c00:	f7ff ff8c 	bl	8000b1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c04:	2022      	movs	r0, #34	@ 0x22
 8000c06:	f7ff ff89 	bl	8000b1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c0a:	20da      	movs	r0, #218	@ 0xda
 8000c0c:	f7ff ff86 	bl	8000b1c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000c10:	2012      	movs	r0, #18
 8000c12:	f7ff ff83 	bl	8000b1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c16:	20db      	movs	r0, #219	@ 0xdb
 8000c18:	f7ff ff80 	bl	8000b1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c1c:	2020      	movs	r0, #32
 8000c1e:	f7ff ff7d 	bl	8000b1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c22:	208d      	movs	r0, #141	@ 0x8d
 8000c24:	f7ff ff7a 	bl	8000b1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c28:	2014      	movs	r0, #20
 8000c2a:	f7ff ff77 	bl	8000b1c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f000 f974 	bl	8000f1c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c34:	2000      	movs	r0, #0
 8000c36:	f000 f811 	bl	8000c5c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c3a:	f000 f829 	bl	8000c90 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <ssd1306_Init+0xd4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c44:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <ssd1306_Init+0xd4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c4a:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <ssd1306_Init+0xd4>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	711a      	strb	r2, [r3, #4]
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	200004f8 	.word	0x200004f8

08000c5c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	0002      	movs	r2, r0
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <ssd1306_Fill+0x18>
 8000c70:	2300      	movs	r3, #0
 8000c72:	e000      	b.n	8000c76 <ssd1306_Fill+0x1a>
 8000c74:	23ff      	movs	r3, #255	@ 0xff
 8000c76:	2282      	movs	r2, #130	@ 0x82
 8000c78:	00d2      	lsls	r2, r2, #3
 8000c7a:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <ssd1306_Fill+0x30>)
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	f002 fb3b 	bl	80032f8 <memset>
}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	200000e8 	.word	0x200000e8

08000c90 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e01e      	b.n	8000cdc <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	3b50      	subs	r3, #80	@ 0x50
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff ff38 	bl	8000b1c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ff35 	bl	8000b1c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000cb2:	2010      	movs	r0, #16
 8000cb4:	f7ff ff32 	bl	8000b1c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	019b      	lsls	r3, r3, #6
 8000cc0:	189b      	adds	r3, r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <ssd1306_UpdateScreen+0x60>)
 8000cc8:	18d3      	adds	r3, r2, r3
 8000cca:	2182      	movs	r1, #130	@ 0x82
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ff3f 	bl	8000b50 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	3201      	adds	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d9dc      	bls.n	8000c9e <ssd1306_UpdateScreen+0xe>
    }
}
 8000ce4:	46c0      	nop			@ (mov r8, r8)
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	200000e8 	.word	0x200000e8

08000cf4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	0004      	movs	r4, r0
 8000cfc:	0008      	movs	r0, r1
 8000cfe:	0011      	movs	r1, r2
 8000d00:	1dfb      	adds	r3, r7, #7
 8000d02:	1c22      	adds	r2, r4, #0
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	1dbb      	adds	r3, r7, #6
 8000d08:	1c02      	adds	r2, r0, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	1d7b      	adds	r3, r7, #5
 8000d0e:	1c0a      	adds	r2, r1, #0
 8000d10:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b81      	cmp	r3, #129	@ 0x81
 8000d18:	d853      	bhi.n	8000dc2 <ssd1306_DrawPixel+0xce>
 8000d1a:	1dbb      	adds	r3, r7, #6
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d20:	d84f      	bhi.n	8000dc2 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000d22:	1d7b      	adds	r3, r7, #5
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d124      	bne.n	8000d74 <ssd1306_DrawPixel+0x80>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	1dbb      	adds	r3, r7, #6
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	08db      	lsrs	r3, r3, #3
 8000d34:	b2d8      	uxtb	r0, r3
 8000d36:	0001      	movs	r1, r0
 8000d38:	000b      	movs	r3, r1
 8000d3a:	019b      	lsls	r3, r3, #6
 8000d3c:	185b      	adds	r3, r3, r1
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	18d3      	adds	r3, r2, r3
 8000d42:	4a22      	ldr	r2, [pc, #136]	@ (8000dcc <ssd1306_DrawPixel+0xd8>)
 8000d44:	5cd3      	ldrb	r3, [r2, r3]
 8000d46:	b25a      	sxtb	r2, r3
 8000d48:	1dbb      	adds	r3, r7, #6
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2107      	movs	r1, #7
 8000d4e:	400b      	ands	r3, r1
 8000d50:	2101      	movs	r1, #1
 8000d52:	4099      	lsls	r1, r3
 8000d54:	000b      	movs	r3, r1
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b25c      	sxtb	r4, r3
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	781a      	ldrb	r2, [r3, #0]
 8000d60:	0001      	movs	r1, r0
 8000d62:	000b      	movs	r3, r1
 8000d64:	019b      	lsls	r3, r3, #6
 8000d66:	185b      	adds	r3, r3, r1
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	18d3      	adds	r3, r2, r3
 8000d6c:	b2e1      	uxtb	r1, r4
 8000d6e:	4a17      	ldr	r2, [pc, #92]	@ (8000dcc <ssd1306_DrawPixel+0xd8>)
 8000d70:	54d1      	strb	r1, [r2, r3]
 8000d72:	e027      	b.n	8000dc4 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	781a      	ldrb	r2, [r3, #0]
 8000d78:	1dbb      	adds	r3, r7, #6
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	b2d8      	uxtb	r0, r3
 8000d80:	0001      	movs	r1, r0
 8000d82:	000b      	movs	r3, r1
 8000d84:	019b      	lsls	r3, r3, #6
 8000d86:	185b      	adds	r3, r3, r1
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	18d3      	adds	r3, r2, r3
 8000d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000dcc <ssd1306_DrawPixel+0xd8>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	1dba      	adds	r2, r7, #6
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	2107      	movs	r1, #7
 8000d98:	400a      	ands	r2, r1
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	000a      	movs	r2, r1
 8000da0:	b252      	sxtb	r2, r2
 8000da2:	43d2      	mvns	r2, r2
 8000da4:	b252      	sxtb	r2, r2
 8000da6:	4013      	ands	r3, r2
 8000da8:	b25c      	sxtb	r4, r3
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	0001      	movs	r1, r0
 8000db0:	000b      	movs	r3, r1
 8000db2:	019b      	lsls	r3, r3, #6
 8000db4:	185b      	adds	r3, r3, r1
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	18d3      	adds	r3, r2, r3
 8000dba:	b2e1      	uxtb	r1, r4
 8000dbc:	4a03      	ldr	r2, [pc, #12]	@ (8000dcc <ssd1306_DrawPixel+0xd8>)
 8000dbe:	54d1      	strb	r1, [r2, r3]
 8000dc0:	e000      	b.n	8000dc4 <ssd1306_DrawPixel+0xd0>
        return;
 8000dc2:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b003      	add	sp, #12
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	200000e8 	.word	0x200000e8

08000dd0 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	0004      	movs	r4, r0
 8000dd8:	0008      	movs	r0, r1
 8000dda:	603a      	str	r2, [r7, #0]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	1c22      	adds	r2, r4, #0
 8000de2:	701a      	strb	r2, [r3, #0]
 8000de4:	1dbb      	adds	r3, r7, #6
 8000de6:	1c02      	adds	r2, r0, #0
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	1d7b      	adds	r3, r7, #5
 8000dec:	1c0a      	adds	r2, r1, #0
 8000dee:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000df0:	1d7b      	adds	r3, r7, #5
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	3307      	adds	r3, #7
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	da00      	bge.n	8000dfc <ssd1306_DrawBitmap+0x2c>
 8000dfa:	3307      	adds	r3, #7
 8000dfc:	10db      	asrs	r3, r3, #3
 8000dfe:	001a      	movs	r2, r3
 8000e00:	230a      	movs	r3, #10
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8000e06:	230f      	movs	r3, #15
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b81      	cmp	r3, #129	@ 0x81
 8000e14:	d865      	bhi.n	8000ee2 <ssd1306_DrawBitmap+0x112>
 8000e16:	1dbb      	adds	r3, r7, #6
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e1c:	d861      	bhi.n	8000ee2 <ssd1306_DrawBitmap+0x112>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000e1e:	230e      	movs	r3, #14
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e053      	b.n	8000ed0 <ssd1306_DrawBitmap+0x100>
        for (uint8_t i = 0; i < w; i++) {
 8000e28:	230d      	movs	r3, #13
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e03c      	b.n	8000eac <ssd1306_DrawBitmap+0xdc>
            if (i & 7) {
 8000e32:	230d      	movs	r3, #13
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2207      	movs	r2, #7
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d006      	beq.n	8000e4c <ssd1306_DrawBitmap+0x7c>
                byte <<= 1;
 8000e3e:	230f      	movs	r3, #15
 8000e40:	18fa      	adds	r2, r7, r3
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	18db      	adds	r3, r3, r3
 8000e48:	7013      	strb	r3, [r2, #0]
 8000e4a:	e014      	b.n	8000e76 <ssd1306_DrawBitmap+0xa6>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000e4c:	230e      	movs	r3, #14
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	220a      	movs	r2, #10
 8000e54:	18ba      	adds	r2, r7, r2
 8000e56:	2100      	movs	r1, #0
 8000e58:	5e52      	ldrsh	r2, [r2, r1]
 8000e5a:	4353      	muls	r3, r2
 8000e5c:	220d      	movs	r2, #13
 8000e5e:	18ba      	adds	r2, r7, r2
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	08d2      	lsrs	r2, r2, #3
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	189b      	adds	r3, r3, r2
 8000e68:	001a      	movs	r2, r3
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	189a      	adds	r2, r3, r2
 8000e6e:	230f      	movs	r3, #15
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	7812      	ldrb	r2, [r2, #0]
 8000e74:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 8000e76:	230f      	movs	r3, #15
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	da0e      	bge.n	8000ea0 <ssd1306_DrawBitmap+0xd0>
                ssd1306_DrawPixel(x + i, y, color);
 8000e82:	1dfa      	adds	r2, r7, #7
 8000e84:	230d      	movs	r3, #13
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	7812      	ldrb	r2, [r2, #0]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	18d3      	adds	r3, r2, r3
 8000e8e:	b2d8      	uxtb	r0, r3
 8000e90:	2324      	movs	r3, #36	@ 0x24
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	1dbb      	adds	r3, r7, #6
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	f7ff ff2a 	bl	8000cf4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000ea0:	210d      	movs	r1, #13
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	3201      	adds	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	230d      	movs	r3, #13
 8000eae:	18fa      	adds	r2, r7, r3
 8000eb0:	1d7b      	adds	r3, r7, #5
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d3bb      	bcc.n	8000e32 <ssd1306_DrawBitmap+0x62>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000eba:	210e      	movs	r1, #14
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	3201      	adds	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	1dbb      	adds	r3, r7, #6
 8000ec8:	781a      	ldrb	r2, [r3, #0]
 8000eca:	1dbb      	adds	r3, r7, #6
 8000ecc:	3201      	adds	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	230e      	movs	r3, #14
 8000ed2:	18fa      	adds	r2, r7, r3
 8000ed4:	2320      	movs	r3, #32
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d3a3      	bcc.n	8000e28 <ssd1306_DrawBitmap+0x58>
            }
        }
    }
    return;
 8000ee0:	e000      	b.n	8000ee4 <ssd1306_DrawBitmap+0x114>
        return;
 8000ee2:	46c0      	nop			@ (mov r8, r8)
}
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b005      	add	sp, #20
 8000ee8:	bd90      	pop	{r4, r7, pc}

08000eea <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2281      	movs	r2, #129	@ 0x81
 8000efc:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	0018      	movs	r0, r3
 8000f04:	f7ff fe0a 	bl	8000b1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff fe05 	bl	8000b1c <ssd1306_WriteCommand>
}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b004      	add	sp, #16
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	0002      	movs	r2, r0
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d007      	beq.n	8000f40 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8000f30:	230f      	movs	r3, #15
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	22af      	movs	r2, #175	@ 0xaf
 8000f36:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <ssd1306_SetDisplayOn+0x48>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	715a      	strb	r2, [r3, #5]
 8000f3e:	e006      	b.n	8000f4e <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8000f40:	230f      	movs	r3, #15
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	22ae      	movs	r2, #174	@ 0xae
 8000f46:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <ssd1306_SetDisplayOn+0x48>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000f4e:	230f      	movs	r3, #15
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fde1 	bl	8000b1c <ssd1306_WriteCommand>
}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b004      	add	sp, #16
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	200004f8 	.word	0x200004f8

08000f68 <ssd1306_InvertDisplay>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_InvertDisplay(uint8_t invert) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	0002      	movs	r2, r0
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	701a      	strb	r2, [r3, #0]
    if (invert) {
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <ssd1306_InvertDisplay+0x1c>
        ssd1306_WriteCommand(0xA7); // Inverted display mode
 8000f7c:	20a7      	movs	r0, #167	@ 0xa7
 8000f7e:	f7ff fdcd 	bl	8000b1c <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xA6); // Normal display mode
    }
}
 8000f82:	e002      	b.n	8000f8a <ssd1306_InvertDisplay+0x22>
        ssd1306_WriteCommand(0xA6); // Normal display mode
 8000f84:	20a6      	movs	r0, #166	@ 0xa6
 8000f86:	f7ff fdc9 	bl	8000b1c <ssd1306_WriteCommand>
}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000f9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	2201      	movs	r2, #1
 8000fac:	4013      	ands	r3, r2
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000fb8:	2180      	movs	r1, #128	@ 0x80
 8000fba:	0549      	lsls	r1, r1, #21
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000fc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	055b      	lsls	r3, r3, #21
 8000fc8:	4013      	ands	r3, r2
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b091      	sub	sp, #68	@ 0x44
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	232c      	movs	r3, #44	@ 0x2c
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	0018      	movs	r0, r3
 8000fea:	2314      	movs	r3, #20
 8000fec:	001a      	movs	r2, r3
 8000fee:	2100      	movs	r1, #0
 8000ff0:	f002 f982 	bl	80032f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	2414      	movs	r4, #20
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	2318      	movs	r3, #24
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	f002 f97a 	bl	80032f8 <memset>
  if(hi2c->Instance==I2C1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a35      	ldr	r2, [pc, #212]	@ (80010e0 <HAL_I2C_MspInit+0x104>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d163      	bne.n	80010d6 <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800100e:	193b      	adds	r3, r7, r4
 8001010:	2220      	movs	r2, #32
 8001012:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001014:	193b      	adds	r3, r7, r4
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101a:	193b      	adds	r3, r7, r4
 800101c:	0018      	movs	r0, r3
 800101e:	f001 fde5 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001026:	f7ff fd6d 	bl	8000b04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b2e      	ldr	r3, [pc, #184]	@ (80010e4 <HAL_I2C_MspInit+0x108>)
 800102c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800102e:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <HAL_I2C_MspInit+0x108>)
 8001030:	2102      	movs	r1, #2
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	@ 0x34
 8001036:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <HAL_I2C_MspInit+0x108>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800103a:	2202      	movs	r2, #2
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <HAL_I2C_MspInit+0x108>)
 8001044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001046:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <HAL_I2C_MspInit+0x108>)
 8001048:	2101      	movs	r1, #1
 800104a:	430a      	orrs	r2, r1
 800104c:	635a      	str	r2, [r3, #52]	@ 0x34
 800104e:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <HAL_I2C_MspInit+0x108>)
 8001050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001052:	2201      	movs	r2, #1
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800105a:	212c      	movs	r1, #44	@ 0x2c
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001064:	000c      	movs	r4, r1
 8001066:	193b      	adds	r3, r7, r4
 8001068:	2212      	movs	r2, #18
 800106a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106c:	193b      	adds	r3, r7, r4
 800106e:	2201      	movs	r2, #1
 8001070:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	193b      	adds	r3, r7, r4
 8001074:	2203      	movs	r2, #3
 8001076:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001078:	193b      	adds	r3, r7, r4
 800107a:	2206      	movs	r2, #6
 800107c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	193b      	adds	r3, r7, r4
 8001080:	4a19      	ldr	r2, [pc, #100]	@ (80010e8 <HAL_I2C_MspInit+0x10c>)
 8001082:	0019      	movs	r1, r3
 8001084:	0010      	movs	r0, r2
 8001086:	f000 fa33 	bl	80014f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800108a:	0021      	movs	r1, r4
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2280      	movs	r2, #128	@ 0x80
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2212      	movs	r2, #18
 8001098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2201      	movs	r2, #1
 800109e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2203      	movs	r2, #3
 80010a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2206      	movs	r2, #6
 80010aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	187a      	adds	r2, r7, r1
 80010ae:	23a0      	movs	r3, #160	@ 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fa1b 	bl	80014f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_I2C_MspInit+0x108>)
 80010bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <HAL_I2C_MspInit+0x108>)
 80010c0:	2180      	movs	r1, #128	@ 0x80
 80010c2:	0389      	lsls	r1, r1, #14
 80010c4:	430a      	orrs	r2, r1
 80010c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_I2C_MspInit+0x108>)
 80010ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010cc:	2380      	movs	r3, #128	@ 0x80
 80010ce:	039b      	lsls	r3, r3, #14
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b011      	add	sp, #68	@ 0x44
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	40005400 	.word	0x40005400
 80010e4:	40021000 	.word	0x40021000
 80010e8:	50000400 	.word	0x50000400

080010ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <HAL_TIM_Base_MspInit+0x38>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10d      	bne.n	800111a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_TIM_Base_MspInit+0x3c>)
 8001100:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <HAL_TIM_Base_MspInit+0x3c>)
 8001104:	2180      	movs	r1, #128	@ 0x80
 8001106:	0209      	lsls	r1, r1, #8
 8001108:	430a      	orrs	r2, r1
 800110a:	641a      	str	r2, [r3, #64]	@ 0x40
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_TIM_Base_MspInit+0x3c>)
 800110e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b004      	add	sp, #16
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	40002000 	.word	0x40002000
 8001128:	40021000 	.word	0x40021000

0800112c <NMI_Handler>:
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
 8001130:	46c0      	nop			@ (mov r8, r8)
 8001132:	e7fd      	b.n	8001130 <NMI_Handler+0x4>

08001134 <HardFault_Handler>:
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	e7fd      	b.n	8001138 <HardFault_Handler+0x4>

0800113c <SVC_Handler>:
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <PendSV_Handler>:
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <SysTick_Handler>:
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
 8001154:	f000 f8ae 	bl	80012b4 <HAL_IncTick>
 8001158:	46c0      	nop			@ (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <RCC_IRQHandler>:
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <TIM14_IRQHandler>:
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <TIM14_IRQHandler+0x14>)
 800116e:	0018      	movs	r0, r3
 8001170:	f001 ff08 	bl	8002f84 <HAL_TIM_IRQHandler>
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	20000090 	.word	0x20000090

08001180 <SystemInit>:
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
 8001184:	46c0      	nop			@ (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <Reset_Handler>:
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <LoopForever+0x2>)
 800118e:	4685      	mov	sp, r0
 8001190:	f7ff fff6 	bl	8001180 <SystemInit>
 8001194:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <LoopForever+0x6>)
 8001196:	490d      	ldr	r1, [pc, #52]	@ (80011cc <LoopForever+0xa>)
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <LoopForever+0xe>)
 800119a:	2300      	movs	r3, #0
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:
 800119e:	58d4      	ldr	r4, [r2, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:
 80011a4:	18c4      	adds	r4, r0, r3
 80011a6:	428c      	cmp	r4, r1
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <LoopForever+0x12>)
 80011ac:	4c0a      	ldr	r4, [pc, #40]	@ (80011d8 <LoopForever+0x16>)
 80011ae:	2300      	movs	r3, #0
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:
 80011b6:	42a2      	cmp	r2, r4
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>
 80011ba:	f002 f8a5 	bl	8003308 <__libc_init_array>
 80011be:	f7ff f997 	bl	80004f0 <main>

080011c2 <LoopForever>:
 80011c2:	e7fe      	b.n	80011c2 <LoopForever>
 80011c4:	20002000 	.word	0x20002000
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000020 	.word	0x20000020
 80011d0:	08005fb0 	.word	0x08005fb0
 80011d4:	20000020 	.word	0x20000020
 80011d8:	20000504 	.word	0x20000504

080011dc <ADC1_IRQHandler>:
 80011dc:	e7fe      	b.n	80011dc <ADC1_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_Init+0x3c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_Init+0x3c>)
 80011f2:	2180      	movs	r1, #128	@ 0x80
 80011f4:	0049      	lsls	r1, r1, #1
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fa:	2003      	movs	r0, #3
 80011fc:	f000 f810 	bl	8001220 <HAL_InitTick>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d003      	beq.n	800120c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e001      	b.n	8001210 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff fec2 	bl	8000f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	781b      	ldrb	r3, [r3, #0]
}
 8001214:	0018      	movs	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40022000 	.word	0x40022000

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001228:	230f      	movs	r3, #15
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_InitTick+0x88>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d02b      	beq.n	8001290 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <HAL_InitTick+0x8c>)
 800123a:	681c      	ldr	r4, [r3, #0]
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <HAL_InitTick+0x88>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	0019      	movs	r1, r3
 8001242:	23fa      	movs	r3, #250	@ 0xfa
 8001244:	0098      	lsls	r0, r3, #2
 8001246:	f7fe ff5b 	bl	8000100 <__udivsi3>
 800124a:	0003      	movs	r3, r0
 800124c:	0019      	movs	r1, r3
 800124e:	0020      	movs	r0, r4
 8001250:	f7fe ff56 	bl	8000100 <__udivsi3>
 8001254:	0003      	movs	r3, r0
 8001256:	0018      	movs	r0, r3
 8001258:	f000 f93d 	bl	80014d6 <HAL_SYSTICK_Config>
 800125c:	1e03      	subs	r3, r0, #0
 800125e:	d112      	bne.n	8001286 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d80a      	bhi.n	800127c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	2301      	movs	r3, #1
 800126a:	425b      	negs	r3, r3
 800126c:	2200      	movs	r2, #0
 800126e:	0018      	movs	r0, r3
 8001270:	f000 f90c 	bl	800148c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001274:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <HAL_InitTick+0x90>)
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e00d      	b.n	8001298 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800127c:	230f      	movs	r3, #15
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e008      	b.n	8001298 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001286:	230f      	movs	r3, #15
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	e003      	b.n	8001298 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001290:	230f      	movs	r3, #15
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001298:	230f      	movs	r3, #15
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	781b      	ldrb	r3, [r3, #0]
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b005      	add	sp, #20
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	2000001c 	.word	0x2000001c
 80012ac:	20000014 	.word	0x20000014
 80012b0:	20000018 	.word	0x20000018

080012b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_IncTick+0x1c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	001a      	movs	r2, r3
 80012be:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <HAL_IncTick+0x20>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	18d2      	adds	r2, r2, r3
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_IncTick+0x20>)
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	46c0      	nop			@ (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	2000001c 	.word	0x2000001c
 80012d4:	20000500 	.word	0x20000500

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b02      	ldr	r3, [pc, #8]	@ (80012e8 <HAL_GetTick+0x10>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	0018      	movs	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	20000500 	.word	0x20000500

080012ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f4:	f7ff fff0 	bl	80012d8 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3301      	adds	r3, #1
 8001304:	d005      	beq.n	8001312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <HAL_Delay+0x44>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	001a      	movs	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	189b      	adds	r3, r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	f7ff ffe0 	bl	80012d8 <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	429a      	cmp	r2, r3
 8001322:	d8f7      	bhi.n	8001314 <HAL_Delay+0x28>
  {
  }
}
 8001324:	46c0      	nop			@ (mov r8, r8)
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	b004      	add	sp, #16
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	2000001c 	.word	0x2000001c

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	0002      	movs	r2, r0
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b7f      	cmp	r3, #127	@ 0x7f
 8001346:	d809      	bhi.n	800135c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	001a      	movs	r2, r3
 800134e:	231f      	movs	r3, #31
 8001350:	401a      	ands	r2, r3
 8001352:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <__NVIC_EnableIRQ+0x30>)
 8001354:	2101      	movs	r1, #1
 8001356:	4091      	lsls	r1, r2
 8001358:	000a      	movs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800135c:	46c0      	nop			@ (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	0002      	movs	r2, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b7f      	cmp	r3, #127	@ 0x7f
 800137c:	d828      	bhi.n	80013d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800137e:	4a2f      	ldr	r2, [pc, #188]	@ (800143c <__NVIC_SetPriority+0xd4>)
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b25b      	sxtb	r3, r3
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	33c0      	adds	r3, #192	@ 0xc0
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	589b      	ldr	r3, [r3, r2]
 800138e:	1dfa      	adds	r2, r7, #7
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	0011      	movs	r1, r2
 8001394:	2203      	movs	r2, #3
 8001396:	400a      	ands	r2, r1
 8001398:	00d2      	lsls	r2, r2, #3
 800139a:	21ff      	movs	r1, #255	@ 0xff
 800139c:	4091      	lsls	r1, r2
 800139e:	000a      	movs	r2, r1
 80013a0:	43d2      	mvns	r2, r2
 80013a2:	401a      	ands	r2, r3
 80013a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	019b      	lsls	r3, r3, #6
 80013aa:	22ff      	movs	r2, #255	@ 0xff
 80013ac:	401a      	ands	r2, r3
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	0018      	movs	r0, r3
 80013b4:	2303      	movs	r3, #3
 80013b6:	4003      	ands	r3, r0
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013bc:	481f      	ldr	r0, [pc, #124]	@ (800143c <__NVIC_SetPriority+0xd4>)
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	430a      	orrs	r2, r1
 80013c8:	33c0      	adds	r3, #192	@ 0xc0
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013ce:	e031      	b.n	8001434 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001440 <__NVIC_SetPriority+0xd8>)
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	0019      	movs	r1, r3
 80013d8:	230f      	movs	r3, #15
 80013da:	400b      	ands	r3, r1
 80013dc:	3b08      	subs	r3, #8
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3306      	adds	r3, #6
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	18d3      	adds	r3, r2, r3
 80013e6:	3304      	adds	r3, #4
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1dfa      	adds	r2, r7, #7
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	0011      	movs	r1, r2
 80013f0:	2203      	movs	r2, #3
 80013f2:	400a      	ands	r2, r1
 80013f4:	00d2      	lsls	r2, r2, #3
 80013f6:	21ff      	movs	r1, #255	@ 0xff
 80013f8:	4091      	lsls	r1, r2
 80013fa:	000a      	movs	r2, r1
 80013fc:	43d2      	mvns	r2, r2
 80013fe:	401a      	ands	r2, r3
 8001400:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	019b      	lsls	r3, r3, #6
 8001406:	22ff      	movs	r2, #255	@ 0xff
 8001408:	401a      	ands	r2, r3
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	0018      	movs	r0, r3
 8001410:	2303      	movs	r3, #3
 8001412:	4003      	ands	r3, r0
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001418:	4809      	ldr	r0, [pc, #36]	@ (8001440 <__NVIC_SetPriority+0xd8>)
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	001c      	movs	r4, r3
 8001420:	230f      	movs	r3, #15
 8001422:	4023      	ands	r3, r4
 8001424:	3b08      	subs	r3, #8
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	430a      	orrs	r2, r1
 800142a:	3306      	adds	r3, #6
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	18c3      	adds	r3, r0, r3
 8001430:	3304      	adds	r3, #4
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	46c0      	nop			@ (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b003      	add	sp, #12
 800143a:	bd90      	pop	{r4, r7, pc}
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	1e5a      	subs	r2, r3, #1
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	045b      	lsls	r3, r3, #17
 8001454:	429a      	cmp	r2, r3
 8001456:	d301      	bcc.n	800145c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001458:	2301      	movs	r3, #1
 800145a:	e010      	b.n	800147e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145c:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <SysTick_Config+0x44>)
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	3a01      	subs	r2, #1
 8001462:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001464:	2301      	movs	r3, #1
 8001466:	425b      	negs	r3, r3
 8001468:	2103      	movs	r1, #3
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff ff7c 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <SysTick_Config+0x44>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <SysTick_Config+0x44>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	0018      	movs	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	b002      	add	sp, #8
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	210f      	movs	r1, #15
 8001498:	187b      	adds	r3, r7, r1
 800149a:	1c02      	adds	r2, r0, #0
 800149c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff ff5d 	bl	8001368 <__NVIC_SetPriority>
}
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	0002      	movs	r2, r0
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff ff33 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b002      	add	sp, #8
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff ffaf 	bl	8001444 <SysTick_Config>
 80014e6:	0003      	movs	r3, r0
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fe:	e147      	b.n	8001790 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4091      	lsls	r1, r2
 800150a:	000a      	movs	r2, r1
 800150c:	4013      	ands	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d100      	bne.n	8001518 <HAL_GPIO_Init+0x28>
 8001516:	e138      	b.n	800178a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2203      	movs	r2, #3
 800151e:	4013      	ands	r3, r2
 8001520:	2b01      	cmp	r3, #1
 8001522:	d005      	beq.n	8001530 <HAL_GPIO_Init+0x40>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2203      	movs	r2, #3
 800152a:	4013      	ands	r3, r2
 800152c:	2b02      	cmp	r3, #2
 800152e:	d130      	bne.n	8001592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	409a      	lsls	r2, r3
 800153e:	0013      	movs	r3, r2
 8001540:	43da      	mvns	r2, r3
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	409a      	lsls	r2, r3
 8001552:	0013      	movs	r3, r2
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001566:	2201      	movs	r2, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	43da      	mvns	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	2201      	movs	r2, #1
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2203      	movs	r2, #3
 8001598:	4013      	ands	r3, r2
 800159a:	2b03      	cmp	r3, #3
 800159c:	d017      	beq.n	80015ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	409a      	lsls	r2, r3
 80015ac:	0013      	movs	r3, r2
 80015ae:	43da      	mvns	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	409a      	lsls	r2, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2203      	movs	r2, #3
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d123      	bne.n	8001622 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	58d3      	ldr	r3, [r2, r3]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2207      	movs	r2, #7
 80015ec:	4013      	ands	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	43da      	mvns	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2107      	movs	r1, #7
 8001606:	400b      	ands	r3, r1
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	6939      	ldr	r1, [r7, #16]
 8001620:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	43da      	mvns	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2203      	movs	r2, #3
 8001640:	401a      	ands	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	409a      	lsls	r2, r3
 8001648:	0013      	movs	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	23c0      	movs	r3, #192	@ 0xc0
 800165c:	029b      	lsls	r3, r3, #10
 800165e:	4013      	ands	r3, r2
 8001660:	d100      	bne.n	8001664 <HAL_GPIO_Init+0x174>
 8001662:	e092      	b.n	800178a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001664:	4a50      	ldr	r2, [pc, #320]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3318      	adds	r3, #24
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	589b      	ldr	r3, [r3, r2]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2203      	movs	r2, #3
 8001676:	4013      	ands	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	220f      	movs	r2, #15
 800167c:	409a      	lsls	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	43da      	mvns	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	23a0      	movs	r3, #160	@ 0xa0
 800168c:	05db      	lsls	r3, r3, #23
 800168e:	429a      	cmp	r2, r3
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x1ca>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a45      	ldr	r2, [pc, #276]	@ (80017ac <HAL_GPIO_Init+0x2bc>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x1c6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a44      	ldr	r2, [pc, #272]	@ (80017b0 <HAL_GPIO_Init+0x2c0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x1c2>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a43      	ldr	r2, [pc, #268]	@ (80017b4 <HAL_GPIO_Init+0x2c4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x1be>
 80016aa:	2303      	movs	r3, #3
 80016ac:	e006      	b.n	80016bc <HAL_GPIO_Init+0x1cc>
 80016ae:	2305      	movs	r3, #5
 80016b0:	e004      	b.n	80016bc <HAL_GPIO_Init+0x1cc>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e002      	b.n	80016bc <HAL_GPIO_Init+0x1cc>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_GPIO_Init+0x1cc>
 80016ba:	2300      	movs	r3, #0
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	2103      	movs	r1, #3
 80016c0:	400a      	ands	r2, r1
 80016c2:	00d2      	lsls	r2, r2, #3
 80016c4:	4093      	lsls	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80016cc:	4936      	ldr	r1, [pc, #216]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	3318      	adds	r3, #24
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016da:	4b33      	ldr	r3, [pc, #204]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	035b      	lsls	r3, r3, #13
 80016f2:	4013      	ands	r3, r2
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016fe:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001704:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43da      	mvns	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	039b      	lsls	r3, r3, #14
 800171c:	4013      	ands	r3, r2
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800172e:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 8001730:	2384      	movs	r3, #132	@ 0x84
 8001732:	58d3      	ldr	r3, [r2, r3]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43da      	mvns	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	029b      	lsls	r3, r3, #10
 8001748:	4013      	ands	r3, r2
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001754:	4914      	ldr	r1, [pc, #80]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 8001756:	2284      	movs	r2, #132	@ 0x84
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800175c:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 800175e:	2380      	movs	r3, #128	@ 0x80
 8001760:	58d3      	ldr	r3, [r2, r3]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	025b      	lsls	r3, r3, #9
 8001776:	4013      	ands	r3, r2
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001782:	4909      	ldr	r1, [pc, #36]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 8001784:	2280      	movs	r2, #128	@ 0x80
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	40da      	lsrs	r2, r3
 8001798:	1e13      	subs	r3, r2, #0
 800179a:	d000      	beq.n	800179e <HAL_GPIO_Init+0x2ae>
 800179c:	e6b0      	b.n	8001500 <HAL_GPIO_Init+0x10>
  }
}
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	46c0      	nop			@ (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b006      	add	sp, #24
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021800 	.word	0x40021800
 80017ac:	50000400 	.word	0x50000400
 80017b0:	50000800 	.word	0x50000800
 80017b4:	50000c00 	.word	0x50000c00

080017b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	000a      	movs	r2, r1
 80017c2:	1cbb      	adds	r3, r7, #2
 80017c4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	1cba      	adds	r2, r7, #2
 80017cc:	8812      	ldrh	r2, [r2, #0]
 80017ce:	4013      	ands	r3, r2
 80017d0:	d004      	beq.n	80017dc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80017d2:	230f      	movs	r3, #15
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
 80017da:	e003      	b.n	80017e4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017dc:	230f      	movs	r3, #15
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80017e4:	230f      	movs	r3, #15
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	781b      	ldrb	r3, [r3, #0]
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b004      	add	sp, #16
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	0008      	movs	r0, r1
 80017fc:	0011      	movs	r1, r2
 80017fe:	1cbb      	adds	r3, r7, #2
 8001800:	1c02      	adds	r2, r0, #0
 8001802:	801a      	strh	r2, [r3, #0]
 8001804:	1c7b      	adds	r3, r7, #1
 8001806:	1c0a      	adds	r2, r1, #0
 8001808:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800180a:	1c7b      	adds	r3, r7, #1
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d004      	beq.n	800181c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001812:	1cbb      	adds	r3, r7, #2
 8001814:	881a      	ldrh	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800181a:	e003      	b.n	8001824 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800181c:	1cbb      	adds	r3, r7, #2
 800181e:	881a      	ldrh	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001824:	46c0      	nop			@ (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e08f      	b.n	800195e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2241      	movs	r2, #65	@ 0x41
 8001842:	5c9b      	ldrb	r3, [r3, r2]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d107      	bne.n	800185a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2240      	movs	r2, #64	@ 0x40
 800184e:	2100      	movs	r1, #0
 8001850:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff fbc1 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2241      	movs	r2, #65	@ 0x41
 800185e:	2124      	movs	r1, #36	@ 0x24
 8001860:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	438a      	bics	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	493b      	ldr	r1, [pc, #236]	@ (8001968 <HAL_I2C_Init+0x13c>)
 800187c:	400a      	ands	r2, r1
 800187e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4938      	ldr	r1, [pc, #224]	@ (800196c <HAL_I2C_Init+0x140>)
 800188c:	400a      	ands	r2, r1
 800188e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	0209      	lsls	r1, r1, #8
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	e007      	b.n	80018ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2184      	movs	r1, #132	@ 0x84
 80018b4:	0209      	lsls	r1, r1, #8
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d109      	bne.n	80018d6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2180      	movs	r1, #128	@ 0x80
 80018ce:	0109      	lsls	r1, r1, #4
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	e007      	b.n	80018e6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4923      	ldr	r1, [pc, #140]	@ (8001970 <HAL_I2C_Init+0x144>)
 80018e2:	400a      	ands	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4920      	ldr	r1, [pc, #128]	@ (8001974 <HAL_I2C_Init+0x148>)
 80018f2:	430a      	orrs	r2, r1
 80018f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	491a      	ldr	r1, [pc, #104]	@ (800196c <HAL_I2C_Init+0x140>)
 8001902:	400a      	ands	r2, r1
 8001904:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	431a      	orrs	r2, r3
 8001910:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69d9      	ldr	r1, [r3, #28]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1a      	ldr	r2, [r3, #32]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2101      	movs	r1, #1
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2241      	movs	r2, #65	@ 0x41
 800194a:	2120      	movs	r1, #32
 800194c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2242      	movs	r2, #66	@ 0x42
 8001958:	2100      	movs	r1, #0
 800195a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	f0ffffff 	.word	0xf0ffffff
 800196c:	ffff7fff 	.word	0xffff7fff
 8001970:	fffff7ff 	.word	0xfffff7ff
 8001974:	02008000 	.word	0x02008000

08001978 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b089      	sub	sp, #36	@ 0x24
 800197c:	af02      	add	r7, sp, #8
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	000c      	movs	r4, r1
 8001982:	0010      	movs	r0, r2
 8001984:	0019      	movs	r1, r3
 8001986:	230a      	movs	r3, #10
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	1c22      	adds	r2, r4, #0
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	2308      	movs	r3, #8
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	1c02      	adds	r2, r0, #0
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	1dbb      	adds	r3, r7, #6
 8001998:	1c0a      	adds	r2, r1, #0
 800199a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2241      	movs	r2, #65	@ 0x41
 80019a0:	5c9b      	ldrb	r3, [r3, r2]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d000      	beq.n	80019aa <HAL_I2C_Mem_Write+0x32>
 80019a8:	e10c      	b.n	8001bc4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_I2C_Mem_Write+0x42>
 80019b0:	232c      	movs	r3, #44	@ 0x2c
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2280      	movs	r2, #128	@ 0x80
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0ff      	b.n	8001bc6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	5c9b      	ldrb	r3, [r3, r2]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_I2C_Mem_Write+0x5c>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e0f8      	b.n	8001bc6 <HAL_I2C_Mem_Write+0x24e>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2240      	movs	r2, #64	@ 0x40
 80019d8:	2101      	movs	r1, #1
 80019da:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019dc:	f7ff fc7c 	bl	80012d8 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	0219      	lsls	r1, r3, #8
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2319      	movs	r3, #25
 80019f0:	2201      	movs	r2, #1
 80019f2:	f000 f975 	bl	8001ce0 <I2C_WaitOnFlagUntilTimeout>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0e3      	b.n	8001bc6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2241      	movs	r2, #65	@ 0x41
 8001a02:	2121      	movs	r1, #33	@ 0x21
 8001a04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2242      	movs	r2, #66	@ 0x42
 8001a0a:	2140      	movs	r1, #64	@ 0x40
 8001a0c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	222c      	movs	r2, #44	@ 0x2c
 8001a1e:	18ba      	adds	r2, r7, r2
 8001a20:	8812      	ldrh	r2, [r2, #0]
 8001a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a2a:	1dbb      	adds	r3, r7, #6
 8001a2c:	881c      	ldrh	r4, [r3, #0]
 8001a2e:	2308      	movs	r3, #8
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	881a      	ldrh	r2, [r3, #0]
 8001a34:	230a      	movs	r3, #10
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	8819      	ldrh	r1, [r3, #0]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	0023      	movs	r3, r4
 8001a46:	f000 f8c5 	bl	8001bd4 <I2C_RequestMemoryWrite>
 8001a4a:	1e03      	subs	r3, r0, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2240      	movs	r2, #64	@ 0x40
 8001a52:	2100      	movs	r1, #0
 8001a54:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0b5      	b.n	8001bc6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	2bff      	cmp	r3, #255	@ 0xff
 8001a62:	d911      	bls.n	8001a88 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	22ff      	movs	r2, #255	@ 0xff
 8001a68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	045c      	lsls	r4, r3, #17
 8001a74:	230a      	movs	r3, #10
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	8819      	ldrh	r1, [r3, #0]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	0023      	movs	r3, r4
 8001a82:	f000 fb07 	bl	8002094 <I2C_TransferConfig>
 8001a86:	e012      	b.n	8001aae <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	049c      	lsls	r4, r3, #18
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	8819      	ldrh	r1, [r3, #0]
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	0023      	movs	r3, r4
 8001aaa:	f000 faf3 	bl	8002094 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 f96b 	bl	8001d90 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e081      	b.n	8001bc6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03a      	beq.n	8001b72 <HAL_I2C_Mem_Write+0x1fa>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d136      	bne.n	8001b72 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2180      	movs	r1, #128	@ 0x80
 8001b12:	f000 f8e5 	bl	8001ce0 <I2C_WaitOnFlagUntilTimeout>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e053      	b.n	8001bc6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2bff      	cmp	r3, #255	@ 0xff
 8001b26:	d911      	bls.n	8001b4c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	22ff      	movs	r2, #255	@ 0xff
 8001b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	2380      	movs	r3, #128	@ 0x80
 8001b36:	045c      	lsls	r4, r3, #17
 8001b38:	230a      	movs	r3, #10
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	8819      	ldrh	r1, [r3, #0]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	2300      	movs	r3, #0
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	0023      	movs	r3, r4
 8001b46:	f000 faa5 	bl	8002094 <I2C_TransferConfig>
 8001b4a:	e012      	b.n	8001b72 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	049c      	lsls	r4, r3, #18
 8001b60:	230a      	movs	r3, #10
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	8819      	ldrh	r1, [r3, #0]
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	0023      	movs	r3, r4
 8001b6e:	f000 fa91 	bl	8002094 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d198      	bne.n	8001aae <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f000 f94a 	bl	8001e1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b88:	1e03      	subs	r3, r0, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e01a      	b.n	8001bc6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2220      	movs	r2, #32
 8001b96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	490b      	ldr	r1, [pc, #44]	@ (8001bd0 <HAL_I2C_Mem_Write+0x258>)
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2241      	movs	r2, #65	@ 0x41
 8001bac:	2120      	movs	r1, #32
 8001bae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2242      	movs	r2, #66	@ 0x42
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2240      	movs	r2, #64	@ 0x40
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e000      	b.n	8001bc6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001bc4:	2302      	movs	r3, #2
  }
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b007      	add	sp, #28
 8001bcc:	bd90      	pop	{r4, r7, pc}
 8001bce:	46c0      	nop			@ (mov r8, r8)
 8001bd0:	fe00e800 	.word	0xfe00e800

08001bd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	000c      	movs	r4, r1
 8001bde:	0010      	movs	r0, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	250a      	movs	r5, #10
 8001be4:	197b      	adds	r3, r7, r5
 8001be6:	1c22      	adds	r2, r4, #0
 8001be8:	801a      	strh	r2, [r3, #0]
 8001bea:	2308      	movs	r3, #8
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	1c02      	adds	r2, r0, #0
 8001bf0:	801a      	strh	r2, [r3, #0]
 8001bf2:	1dbb      	adds	r3, r7, #6
 8001bf4:	1c0a      	adds	r2, r1, #0
 8001bf6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bf8:	1dbb      	adds	r3, r7, #6
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	045c      	lsls	r4, r3, #17
 8001c02:	197b      	adds	r3, r7, r5
 8001c04:	8819      	ldrh	r1, [r3, #0]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	4b23      	ldr	r3, [pc, #140]	@ (8001c98 <I2C_RequestMemoryWrite+0xc4>)
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	0023      	movs	r3, r4
 8001c0e:	f000 fa41 	bl	8002094 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c14:	6a39      	ldr	r1, [r7, #32]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f000 f8b9 	bl	8001d90 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e033      	b.n	8001c8e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c26:	1dbb      	adds	r3, r7, #6
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c2e:	2308      	movs	r3, #8
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c3c:	e019      	b.n	8001c72 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c3e:	2308      	movs	r3, #8
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c52:	6a39      	ldr	r1, [r7, #32]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 f89a 	bl	8001d90 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5c:	1e03      	subs	r3, r0, #0
 8001c5e:	d001      	beq.n	8001c64 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e014      	b.n	8001c8e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c64:	2308      	movs	r3, #8
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c72:	6a3a      	ldr	r2, [r7, #32]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	0013      	movs	r3, r2
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	@ 0x80
 8001c80:	f000 f82e 	bl	8001ce0 <I2C_WaitOnFlagUntilTimeout>
 8001c84:	1e03      	subs	r3, r0, #0
 8001c86:	d001      	beq.n	8001c8c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	0018      	movs	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b004      	add	sp, #16
 8001c94:	bdb0      	pop	{r4, r5, r7, pc}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	80002000 	.word	0x80002000

08001c9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2202      	movs	r2, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d103      	bne.n	8001cba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d007      	beq.n	8001cd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699a      	ldr	r2, [r3, #24]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	619a      	str	r2, [r3, #24]
  }
}
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cf0:	e03a      	b.n	8001d68 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	6839      	ldr	r1, [r7, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f000 f8d3 	bl	8001ea4 <I2C_IsErrorOccurred>
 8001cfe:	1e03      	subs	r3, r0, #0
 8001d00:	d001      	beq.n	8001d06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e040      	b.n	8001d88 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	d02d      	beq.n	8001d68 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0c:	f7ff fae4 	bl	80012d8 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d302      	bcc.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d122      	bne.n	8001d68 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	425a      	negs	r2, r3
 8001d32:	4153      	adcs	r3, r2
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	001a      	movs	r2, r3
 8001d38:	1dfb      	adds	r3, r7, #7
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d113      	bne.n	8001d68 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d44:	2220      	movs	r2, #32
 8001d46:	431a      	orrs	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2241      	movs	r2, #65	@ 0x41
 8001d50:	2120      	movs	r1, #32
 8001d52:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2242      	movs	r2, #66	@ 0x42
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2240      	movs	r2, #64	@ 0x40
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e00f      	b.n	8001d88 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4013      	ands	r3, r2
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	425a      	negs	r2, r3
 8001d78:	4153      	adcs	r3, r2
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d0b5      	beq.n	8001cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b004      	add	sp, #16
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d9c:	e032      	b.n	8001e04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 f87d 	bl	8001ea4 <I2C_IsErrorOccurred>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d001      	beq.n	8001db2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e030      	b.n	8001e14 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	3301      	adds	r3, #1
 8001db6:	d025      	beq.n	8001e04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db8:	f7ff fa8e 	bl	80012d8 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d302      	bcc.n	8001dce <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d11a      	bne.n	8001e04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d013      	beq.n	8001e04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	2220      	movs	r2, #32
 8001de2:	431a      	orrs	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2241      	movs	r2, #65	@ 0x41
 8001dec:	2120      	movs	r1, #32
 8001dee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2242      	movs	r2, #66	@ 0x42
 8001df4:	2100      	movs	r1, #0
 8001df6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2240      	movs	r2, #64	@ 0x40
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e007      	b.n	8001e14 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d1c5      	bne.n	8001d9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b004      	add	sp, #16
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e28:	e02f      	b.n	8001e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 f837 	bl	8001ea4 <I2C_IsErrorOccurred>
 8001e36:	1e03      	subs	r3, r0, #0
 8001e38:	d001      	beq.n	8001e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e02d      	b.n	8001e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e3e:	f7ff fa4b 	bl	80012d8 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d302      	bcc.n	8001e54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d11a      	bne.n	8001e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d013      	beq.n	8001e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	2220      	movs	r2, #32
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2241      	movs	r2, #65	@ 0x41
 8001e72:	2120      	movs	r1, #32
 8001e74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2242      	movs	r2, #66	@ 0x42
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2240      	movs	r2, #64	@ 0x40
 8001e82:	2100      	movs	r1, #0
 8001e84:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e007      	b.n	8001e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2220      	movs	r2, #32
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d1c8      	bne.n	8001e2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b004      	add	sp, #16
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	@ 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb0:	2327      	movs	r3, #39	@ 0x27
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2210      	movs	r2, #16
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <I2C_IsErrorOccurred+0x2e>
 8001ed0:	e079      	b.n	8001fc6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001eda:	e057      	b.n	8001f8c <I2C_IsErrorOccurred+0xe8>
 8001edc:	2227      	movs	r2, #39	@ 0x27
 8001ede:	18bb      	adds	r3, r7, r2
 8001ee0:	18ba      	adds	r2, r7, r2
 8001ee2:	7812      	ldrb	r2, [r2, #0]
 8001ee4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	d04f      	beq.n	8001f8c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001eec:	f7ff f9f4 	bl	80012d8 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d302      	bcc.n	8001f02 <I2C_IsErrorOccurred+0x5e>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d144      	bne.n	8001f8c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	01db      	lsls	r3, r3, #7
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f10:	2013      	movs	r0, #19
 8001f12:	183b      	adds	r3, r7, r0
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	2142      	movs	r1, #66	@ 0x42
 8001f18:	5c52      	ldrb	r2, [r2, r1]
 8001f1a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	401a      	ands	r2, r3
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d126      	bne.n	8001f7e <I2C_IsErrorOccurred+0xda>
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	2380      	movs	r3, #128	@ 0x80
 8001f34:	01db      	lsls	r3, r3, #7
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d021      	beq.n	8001f7e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001f3a:	183b      	adds	r3, r7, r0
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d01d      	beq.n	8001f7e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2180      	movs	r1, #128	@ 0x80
 8001f4e:	01c9      	lsls	r1, r1, #7
 8001f50:	430a      	orrs	r2, r1
 8001f52:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f54:	f7ff f9c0 	bl	80012d8 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f5c:	e00f      	b.n	8001f7e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f5e:	f7ff f9bb 	bl	80012d8 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b19      	cmp	r3, #25
 8001f6a:	d908      	bls.n	8001f7e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	4313      	orrs	r3, r2
 8001f72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f74:	2327      	movs	r3, #39	@ 0x27
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]

              break;
 8001f7c:	e006      	b.n	8001f8c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2220      	movs	r2, #32
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d1e8      	bne.n	8001f5e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2220      	movs	r2, #32
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d004      	beq.n	8001fa4 <I2C_IsErrorOccurred+0x100>
 8001f9a:	2327      	movs	r3, #39	@ 0x27
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d09b      	beq.n	8001edc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fa4:	2327      	movs	r3, #39	@ 0x27
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	2204      	movs	r2, #4
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fbe:	2327      	movs	r3, #39	@ 0x27
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	2380      	movs	r3, #128	@ 0x80
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d00c      	beq.n	8001ff2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2280      	movs	r2, #128	@ 0x80
 8001fe6:	0052      	lsls	r2, r2, #1
 8001fe8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fea:	2327      	movs	r3, #39	@ 0x27
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d00c      	beq.n	8002016 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	2208      	movs	r2, #8
 8002000:	4313      	orrs	r3, r2
 8002002:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2280      	movs	r2, #128	@ 0x80
 800200a:	00d2      	lsls	r2, r2, #3
 800200c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800200e:	2327      	movs	r3, #39	@ 0x27
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d00c      	beq.n	800203a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	2202      	movs	r2, #2
 8002024:	4313      	orrs	r3, r2
 8002026:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2280      	movs	r2, #128	@ 0x80
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002032:	2327      	movs	r3, #39	@ 0x27
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800203a:	2327      	movs	r3, #39	@ 0x27
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01d      	beq.n	8002080 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	0018      	movs	r0, r3
 8002048:	f7ff fe28 	bl	8001c9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	490e      	ldr	r1, [pc, #56]	@ (8002090 <I2C_IsErrorOccurred+0x1ec>)
 8002058:	400a      	ands	r2, r1
 800205a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	431a      	orrs	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2241      	movs	r2, #65	@ 0x41
 800206c:	2120      	movs	r1, #32
 800206e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2242      	movs	r2, #66	@ 0x42
 8002074:	2100      	movs	r1, #0
 8002076:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2240      	movs	r2, #64	@ 0x40
 800207c:	2100      	movs	r1, #0
 800207e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002080:	2327      	movs	r3, #39	@ 0x27
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	781b      	ldrb	r3, [r3, #0]
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b00a      	add	sp, #40	@ 0x28
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	fe00e800 	.word	0xfe00e800

08002094 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	0008      	movs	r0, r1
 800209e:	0011      	movs	r1, r2
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	240a      	movs	r4, #10
 80020a4:	193b      	adds	r3, r7, r4
 80020a6:	1c02      	adds	r2, r0, #0
 80020a8:	801a      	strh	r2, [r3, #0]
 80020aa:	2009      	movs	r0, #9
 80020ac:	183b      	adds	r3, r7, r0
 80020ae:	1c0a      	adds	r2, r1, #0
 80020b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020b2:	193b      	adds	r3, r7, r4
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	059b      	lsls	r3, r3, #22
 80020b8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020ba:	183b      	adds	r3, r7, r0
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	0419      	lsls	r1, r3, #16
 80020c0:	23ff      	movs	r3, #255	@ 0xff
 80020c2:	041b      	lsls	r3, r3, #16
 80020c4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020c6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ce:	4313      	orrs	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020de:	0d51      	lsrs	r1, r2, #21
 80020e0:	2280      	movs	r2, #128	@ 0x80
 80020e2:	00d2      	lsls	r2, r2, #3
 80020e4:	400a      	ands	r2, r1
 80020e6:	4907      	ldr	r1, [pc, #28]	@ (8002104 <I2C_TransferConfig+0x70>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	43d2      	mvns	r2, r2
 80020ec:	401a      	ands	r2, r3
 80020ee:	0011      	movs	r1, r2
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b007      	add	sp, #28
 8002100:	bd90      	pop	{r4, r7, pc}
 8002102:	46c0      	nop			@ (mov r8, r8)
 8002104:	03ff63ff 	.word	0x03ff63ff

08002108 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2241      	movs	r2, #65	@ 0x41
 8002116:	5c9b      	ldrb	r3, [r3, r2]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	d138      	bne.n	8002190 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2240      	movs	r2, #64	@ 0x40
 8002122:	5c9b      	ldrb	r3, [r3, r2]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002128:	2302      	movs	r3, #2
 800212a:	e032      	b.n	8002192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2240      	movs	r2, #64	@ 0x40
 8002130:	2101      	movs	r1, #1
 8002132:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2241      	movs	r2, #65	@ 0x41
 8002138:	2124      	movs	r1, #36	@ 0x24
 800213a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	438a      	bics	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4911      	ldr	r1, [pc, #68]	@ (800219c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002158:	400a      	ands	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2101      	movs	r1, #1
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2241      	movs	r2, #65	@ 0x41
 8002180:	2120      	movs	r1, #32
 8002182:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2240      	movs	r2, #64	@ 0x40
 8002188:	2100      	movs	r1, #0
 800218a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b002      	add	sp, #8
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	ffffefff 	.word	0xffffefff

080021a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2241      	movs	r2, #65	@ 0x41
 80021ae:	5c9b      	ldrb	r3, [r3, r2]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d139      	bne.n	800222a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2240      	movs	r2, #64	@ 0x40
 80021ba:	5c9b      	ldrb	r3, [r3, r2]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e033      	b.n	800222c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2240      	movs	r2, #64	@ 0x40
 80021c8:	2101      	movs	r1, #1
 80021ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2241      	movs	r2, #65	@ 0x41
 80021d0:	2124      	movs	r1, #36	@ 0x24
 80021d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2101      	movs	r1, #1
 80021e0:	438a      	bics	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4a11      	ldr	r2, [pc, #68]	@ (8002234 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2101      	movs	r1, #1
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2241      	movs	r2, #65	@ 0x41
 800221a:	2120      	movs	r1, #32
 800221c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2240      	movs	r2, #64	@ 0x40
 8002222:	2100      	movs	r1, #0
 8002224:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800222a:	2302      	movs	r3, #2
  }
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b004      	add	sp, #16
 8002232:	bd80      	pop	{r7, pc}
 8002234:	fffff0ff 	.word	0xfffff0ff

08002238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002240:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a19      	ldr	r2, [pc, #100]	@ (80022ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	4b17      	ldr	r3, [pc, #92]	@ (80022a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d11f      	bne.n	800229c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800225c:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	0013      	movs	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	189b      	adds	r3, r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4912      	ldr	r1, [pc, #72]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800226a:	0018      	movs	r0, r3
 800226c:	f7fd ff48 	bl	8000100 <__udivsi3>
 8002270:	0003      	movs	r3, r0
 8002272:	3301      	adds	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002276:	e008      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3b01      	subs	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e001      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e009      	b.n	800229e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800228a:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	401a      	ands	r2, r3
 8002294:	2380      	movs	r3, #128	@ 0x80
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	429a      	cmp	r2, r3
 800229a:	d0ed      	beq.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b004      	add	sp, #16
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	40007000 	.word	0x40007000
 80022ac:	fffff9ff 	.word	0xfffff9ff
 80022b0:	20000014 	.word	0x20000014
 80022b4:	000f4240 	.word	0x000f4240

080022b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e2f3      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	d100      	bne.n	80022d6 <HAL_RCC_OscConfig+0x1e>
 80022d4:	e07c      	b.n	80023d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d6:	4bc3      	ldr	r3, [pc, #780]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2238      	movs	r2, #56	@ 0x38
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e0:	4bc0      	ldr	r3, [pc, #768]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2203      	movs	r2, #3
 80022e6:	4013      	ands	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	2b10      	cmp	r3, #16
 80022ee:	d102      	bne.n	80022f6 <HAL_RCC_OscConfig+0x3e>
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d002      	beq.n	80022fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d10b      	bne.n	8002314 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	4bb9      	ldr	r3, [pc, #740]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2380      	movs	r3, #128	@ 0x80
 8002302:	029b      	lsls	r3, r3, #10
 8002304:	4013      	ands	r3, r2
 8002306:	d062      	beq.n	80023ce <HAL_RCC_OscConfig+0x116>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d15e      	bne.n	80023ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e2ce      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	025b      	lsls	r3, r3, #9
 800231c:	429a      	cmp	r2, r3
 800231e:	d107      	bne.n	8002330 <HAL_RCC_OscConfig+0x78>
 8002320:	4bb0      	ldr	r3, [pc, #704]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4baf      	ldr	r3, [pc, #700]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002326:	2180      	movs	r1, #128	@ 0x80
 8002328:	0249      	lsls	r1, r1, #9
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e020      	b.n	8002372 <HAL_RCC_OscConfig+0xba>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	23a0      	movs	r3, #160	@ 0xa0
 8002336:	02db      	lsls	r3, r3, #11
 8002338:	429a      	cmp	r2, r3
 800233a:	d10e      	bne.n	800235a <HAL_RCC_OscConfig+0xa2>
 800233c:	4ba9      	ldr	r3, [pc, #676]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4ba8      	ldr	r3, [pc, #672]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002342:	2180      	movs	r1, #128	@ 0x80
 8002344:	02c9      	lsls	r1, r1, #11
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	4ba6      	ldr	r3, [pc, #664]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4ba5      	ldr	r3, [pc, #660]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002350:	2180      	movs	r1, #128	@ 0x80
 8002352:	0249      	lsls	r1, r1, #9
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e00b      	b.n	8002372 <HAL_RCC_OscConfig+0xba>
 800235a:	4ba2      	ldr	r3, [pc, #648]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4ba1      	ldr	r3, [pc, #644]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002360:	49a1      	ldr	r1, [pc, #644]	@ (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002362:	400a      	ands	r2, r1
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	4b9f      	ldr	r3, [pc, #636]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b9e      	ldr	r3, [pc, #632]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800236c:	499f      	ldr	r1, [pc, #636]	@ (80025ec <HAL_RCC_OscConfig+0x334>)
 800236e:	400a      	ands	r2, r1
 8002370:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d014      	beq.n	80023a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe ffad 	bl	80012d8 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe ffa8 	bl	80012d8 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	@ 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e28d      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002396:	4b93      	ldr	r3, [pc, #588]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	2380      	movs	r3, #128	@ 0x80
 800239c:	029b      	lsls	r3, r3, #10
 800239e:	4013      	ands	r3, r2
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0xcc>
 80023a2:	e015      	b.n	80023d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe ff98 	bl	80012d8 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ae:	f7fe ff93 	bl	80012d8 <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	@ 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e278      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023c0:	4b88      	ldr	r3, [pc, #544]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	029b      	lsls	r3, r3, #10
 80023c8:	4013      	ands	r3, r2
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0xf6>
 80023cc:	e000      	b.n	80023d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2202      	movs	r2, #2
 80023d6:	4013      	ands	r3, r2
 80023d8:	d100      	bne.n	80023dc <HAL_RCC_OscConfig+0x124>
 80023da:	e099      	b.n	8002510 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023dc:	4b81      	ldr	r3, [pc, #516]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2238      	movs	r2, #56	@ 0x38
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e6:	4b7f      	ldr	r3, [pc, #508]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2203      	movs	r2, #3
 80023ec:	4013      	ands	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d102      	bne.n	80023fc <HAL_RCC_OscConfig+0x144>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d002      	beq.n	8002402 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d135      	bne.n	800246e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002402:	4b78      	ldr	r3, [pc, #480]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4013      	ands	r3, r2
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x162>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e24b      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b72      	ldr	r3, [pc, #456]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a74      	ldr	r2, [pc, #464]	@ (80025f0 <HAL_RCC_OscConfig+0x338>)
 8002420:	4013      	ands	r3, r2
 8002422:	0019      	movs	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	021a      	lsls	r2, r3, #8
 800242a:	4b6e      	ldr	r3, [pc, #440]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800242c:	430a      	orrs	r2, r1
 800242e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d112      	bne.n	800245c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002436:	4b6b      	ldr	r3, [pc, #428]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6e      	ldr	r2, [pc, #440]	@ (80025f4 <HAL_RCC_OscConfig+0x33c>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	4b67      	ldr	r3, [pc, #412]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800244a:	4b66      	ldr	r3, [pc, #408]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0adb      	lsrs	r3, r3, #11
 8002450:	2207      	movs	r2, #7
 8002452:	4013      	ands	r3, r2
 8002454:	4a68      	ldr	r2, [pc, #416]	@ (80025f8 <HAL_RCC_OscConfig+0x340>)
 8002456:	40da      	lsrs	r2, r3
 8002458:	4b68      	ldr	r3, [pc, #416]	@ (80025fc <HAL_RCC_OscConfig+0x344>)
 800245a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800245c:	4b68      	ldr	r3, [pc, #416]	@ (8002600 <HAL_RCC_OscConfig+0x348>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0018      	movs	r0, r3
 8002462:	f7fe fedd 	bl	8001220 <HAL_InitTick>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d051      	beq.n	800250e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e221      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d030      	beq.n	80024d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002476:	4b5b      	ldr	r3, [pc, #364]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a5e      	ldr	r2, [pc, #376]	@ (80025f4 <HAL_RCC_OscConfig+0x33c>)
 800247c:	4013      	ands	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	4b57      	ldr	r3, [pc, #348]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800248a:	4b56      	ldr	r3, [pc, #344]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b55      	ldr	r3, [pc, #340]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002490:	2180      	movs	r1, #128	@ 0x80
 8002492:	0049      	lsls	r1, r1, #1
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe ff1e 	bl	80012d8 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a2:	f7fe ff19 	bl	80012d8 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e1fe      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b4:	4b4b      	ldr	r3, [pc, #300]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4013      	ands	r3, r2
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b48      	ldr	r3, [pc, #288]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a4a      	ldr	r2, [pc, #296]	@ (80025f0 <HAL_RCC_OscConfig+0x338>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	0019      	movs	r1, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	021a      	lsls	r2, r3, #8
 80024d0:	4b44      	ldr	r3, [pc, #272]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	e01b      	b.n	8002510 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80024d8:	4b42      	ldr	r3, [pc, #264]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b41      	ldr	r3, [pc, #260]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80024de:	4949      	ldr	r1, [pc, #292]	@ (8002604 <HAL_RCC_OscConfig+0x34c>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe fef8 	bl	80012d8 <HAL_GetTick>
 80024e8:	0003      	movs	r3, r0
 80024ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ee:	f7fe fef3 	bl	80012d8 <HAL_GetTick>
 80024f2:	0002      	movs	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e1d8      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002500:	4b38      	ldr	r3, [pc, #224]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4013      	ands	r3, r2
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x236>
 800250c:	e000      	b.n	8002510 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800250e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2208      	movs	r2, #8
 8002516:	4013      	ands	r3, r2
 8002518:	d047      	beq.n	80025aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800251a:	4b32      	ldr	r3, [pc, #200]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2238      	movs	r2, #56	@ 0x38
 8002520:	4013      	ands	r3, r2
 8002522:	2b18      	cmp	r3, #24
 8002524:	d10a      	bne.n	800253c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002526:	4b2f      	ldr	r3, [pc, #188]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252a:	2202      	movs	r2, #2
 800252c:	4013      	ands	r3, r2
 800252e:	d03c      	beq.n	80025aa <HAL_RCC_OscConfig+0x2f2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d138      	bne.n	80025aa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e1ba      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d019      	beq.n	8002578 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002544:	4b27      	ldr	r3, [pc, #156]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 8002546:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002548:	4b26      	ldr	r3, [pc, #152]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800254a:	2101      	movs	r1, #1
 800254c:	430a      	orrs	r2, r1
 800254e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fec2 	bl	80012d8 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255a:	f7fe febd 	bl	80012d8 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1a2      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800256c:	4b1d      	ldr	r3, [pc, #116]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800256e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002570:	2202      	movs	r2, #2
 8002572:	4013      	ands	r3, r2
 8002574:	d0f1      	beq.n	800255a <HAL_RCC_OscConfig+0x2a2>
 8002576:	e018      	b.n	80025aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002578:	4b1a      	ldr	r3, [pc, #104]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800257a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800257c:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 800257e:	2101      	movs	r1, #1
 8002580:	438a      	bics	r2, r1
 8002582:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fea8 	bl	80012d8 <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258e:	f7fe fea3 	bl	80012d8 <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e188      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a0:	4b10      	ldr	r3, [pc, #64]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80025a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a4:	2202      	movs	r2, #2
 80025a6:	4013      	ands	r3, r2
 80025a8:	d1f1      	bne.n	800258e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2204      	movs	r2, #4
 80025b0:	4013      	ands	r3, r2
 80025b2:	d100      	bne.n	80025b6 <HAL_RCC_OscConfig+0x2fe>
 80025b4:	e0c6      	b.n	8002744 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b6:	231f      	movs	r3, #31
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025be:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2238      	movs	r2, #56	@ 0x38
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d11e      	bne.n	8002608 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80025ca:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <HAL_RCC_OscConfig+0x32c>)
 80025cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ce:	2202      	movs	r2, #2
 80025d0:	4013      	ands	r3, r2
 80025d2:	d100      	bne.n	80025d6 <HAL_RCC_OscConfig+0x31e>
 80025d4:	e0b6      	b.n	8002744 <HAL_RCC_OscConfig+0x48c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d000      	beq.n	80025e0 <HAL_RCC_OscConfig+0x328>
 80025de:	e0b1      	b.n	8002744 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e166      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
 80025e4:	40021000 	.word	0x40021000
 80025e8:	fffeffff 	.word	0xfffeffff
 80025ec:	fffbffff 	.word	0xfffbffff
 80025f0:	ffff80ff 	.word	0xffff80ff
 80025f4:	ffffc7ff 	.word	0xffffc7ff
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	20000014 	.word	0x20000014
 8002600:	20000018 	.word	0x20000018
 8002604:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002608:	4bac      	ldr	r3, [pc, #688]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 800260a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	055b      	lsls	r3, r3, #21
 8002610:	4013      	ands	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_RCC_OscConfig+0x360>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x362>
 8002618:	2300      	movs	r3, #0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d011      	beq.n	8002642 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4ba7      	ldr	r3, [pc, #668]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 8002620:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002622:	4ba6      	ldr	r3, [pc, #664]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 8002624:	2180      	movs	r1, #128	@ 0x80
 8002626:	0549      	lsls	r1, r1, #21
 8002628:	430a      	orrs	r2, r1
 800262a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800262c:	4ba3      	ldr	r3, [pc, #652]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 800262e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	055b      	lsls	r3, r3, #21
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800263a:	231f      	movs	r3, #31
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002642:	4b9f      	ldr	r3, [pc, #636]	@ (80028c0 <HAL_RCC_OscConfig+0x608>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4013      	ands	r3, r2
 800264c:	d11a      	bne.n	8002684 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800264e:	4b9c      	ldr	r3, [pc, #624]	@ (80028c0 <HAL_RCC_OscConfig+0x608>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b9b      	ldr	r3, [pc, #620]	@ (80028c0 <HAL_RCC_OscConfig+0x608>)
 8002654:	2180      	movs	r1, #128	@ 0x80
 8002656:	0049      	lsls	r1, r1, #1
 8002658:	430a      	orrs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800265c:	f7fe fe3c 	bl	80012d8 <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002666:	f7fe fe37 	bl	80012d8 <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e11c      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002678:	4b91      	ldr	r3, [pc, #580]	@ (80028c0 <HAL_RCC_OscConfig+0x608>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	@ 0x80
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4013      	ands	r3, r2
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x3e2>
 800268c:	4b8b      	ldr	r3, [pc, #556]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 800268e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002690:	4b8a      	ldr	r3, [pc, #552]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 8002692:	2101      	movs	r1, #1
 8002694:	430a      	orrs	r2, r1
 8002696:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002698:	e01c      	b.n	80026d4 <HAL_RCC_OscConfig+0x41c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x404>
 80026a2:	4b86      	ldr	r3, [pc, #536]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80026a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026a6:	4b85      	ldr	r3, [pc, #532]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80026a8:	2104      	movs	r1, #4
 80026aa:	430a      	orrs	r2, r1
 80026ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026ae:	4b83      	ldr	r3, [pc, #524]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80026b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026b2:	4b82      	ldr	r3, [pc, #520]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	430a      	orrs	r2, r1
 80026b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0x41c>
 80026bc:	4b7f      	ldr	r3, [pc, #508]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80026be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026c0:	4b7e      	ldr	r3, [pc, #504]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	438a      	bics	r2, r1
 80026c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026c8:	4b7c      	ldr	r3, [pc, #496]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80026ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026cc:	4b7b      	ldr	r3, [pc, #492]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80026ce:	2104      	movs	r1, #4
 80026d0:	438a      	bics	r2, r1
 80026d2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d014      	beq.n	8002706 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fdfc 	bl	80012d8 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e4:	e009      	b.n	80026fa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fe fdf7 	bl	80012d8 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	4a74      	ldr	r2, [pc, #464]	@ (80028c4 <HAL_RCC_OscConfig+0x60c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0db      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fa:	4b70      	ldr	r3, [pc, #448]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80026fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x42e>
 8002704:	e013      	b.n	800272e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fe fde7 	bl	80012d8 <HAL_GetTick>
 800270a:	0003      	movs	r3, r0
 800270c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800270e:	e009      	b.n	8002724 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002710:	f7fe fde2 	bl	80012d8 <HAL_GetTick>
 8002714:	0002      	movs	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	4a6a      	ldr	r2, [pc, #424]	@ (80028c4 <HAL_RCC_OscConfig+0x60c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0c6      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002724:	4b65      	ldr	r3, [pc, #404]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	2202      	movs	r2, #2
 800272a:	4013      	ands	r3, r2
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800272e:	231f      	movs	r3, #31
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002738:	4b60      	ldr	r3, [pc, #384]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 800273a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800273c:	4b5f      	ldr	r3, [pc, #380]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 800273e:	4962      	ldr	r1, [pc, #392]	@ (80028c8 <HAL_RCC_OscConfig+0x610>)
 8002740:	400a      	ands	r2, r1
 8002742:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d100      	bne.n	800274e <HAL_RCC_OscConfig+0x496>
 800274c:	e0b0      	b.n	80028b0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274e:	4b5b      	ldr	r3, [pc, #364]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2238      	movs	r2, #56	@ 0x38
 8002754:	4013      	ands	r3, r2
 8002756:	2b10      	cmp	r3, #16
 8002758:	d100      	bne.n	800275c <HAL_RCC_OscConfig+0x4a4>
 800275a:	e078      	b.n	800284e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d153      	bne.n	800280c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002764:	4b55      	ldr	r3, [pc, #340]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b54      	ldr	r3, [pc, #336]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 800276a:	4958      	ldr	r1, [pc, #352]	@ (80028cc <HAL_RCC_OscConfig+0x614>)
 800276c:	400a      	ands	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fdb2 	bl	80012d8 <HAL_GetTick>
 8002774:	0003      	movs	r3, r0
 8002776:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe fdad 	bl	80012d8 <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e092      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800278c:	4b4b      	ldr	r3, [pc, #300]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	049b      	lsls	r3, r3, #18
 8002794:	4013      	ands	r3, r2
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002798:	4b48      	ldr	r3, [pc, #288]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a4c      	ldr	r2, [pc, #304]	@ (80028d0 <HAL_RCC_OscConfig+0x618>)
 800279e:	4013      	ands	r3, r2
 80027a0:	0019      	movs	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1a      	ldr	r2, [r3, #32]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	431a      	orrs	r2, r3
 80027c0:	4b3e      	ldr	r3, [pc, #248]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80027c2:	430a      	orrs	r2, r1
 80027c4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c6:	4b3d      	ldr	r3, [pc, #244]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b3c      	ldr	r3, [pc, #240]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80027cc:	2180      	movs	r1, #128	@ 0x80
 80027ce:	0449      	lsls	r1, r1, #17
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80027d4:	4b39      	ldr	r3, [pc, #228]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	4b38      	ldr	r3, [pc, #224]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 80027da:	2180      	movs	r1, #128	@ 0x80
 80027dc:	0549      	lsls	r1, r1, #21
 80027de:	430a      	orrs	r2, r1
 80027e0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fe fd79 	bl	80012d8 <HAL_GetTick>
 80027e6:	0003      	movs	r3, r0
 80027e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe fd74 	bl	80012d8 <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e059      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fe:	4b2f      	ldr	r3, [pc, #188]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	049b      	lsls	r3, r3, #18
 8002806:	4013      	ands	r3, r2
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x534>
 800280a:	e051      	b.n	80028b0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b2b      	ldr	r3, [pc, #172]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b2a      	ldr	r3, [pc, #168]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 8002812:	492e      	ldr	r1, [pc, #184]	@ (80028cc <HAL_RCC_OscConfig+0x614>)
 8002814:	400a      	ands	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fd5e 	bl	80012d8 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7fe fd59 	bl	80012d8 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e03e      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002834:	4b21      	ldr	r3, [pc, #132]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	049b      	lsls	r3, r3, #18
 800283c:	4013      	ands	r3, r2
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002840:	4b1e      	ldr	r3, [pc, #120]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 8002846:	4923      	ldr	r1, [pc, #140]	@ (80028d4 <HAL_RCC_OscConfig+0x61c>)
 8002848:	400a      	ands	r2, r1
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	e030      	b.n	80028b0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e02b      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800285a:	4b18      	ldr	r3, [pc, #96]	@ (80028bc <HAL_RCC_OscConfig+0x604>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2203      	movs	r2, #3
 8002864:	401a      	ands	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	429a      	cmp	r2, r3
 800286c:	d11e      	bne.n	80028ac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2270      	movs	r2, #112	@ 0x70
 8002872:	401a      	ands	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d117      	bne.n	80028ac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	23fe      	movs	r3, #254	@ 0xfe
 8002880:	01db      	lsls	r3, r3, #7
 8002882:	401a      	ands	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002888:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d10e      	bne.n	80028ac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	23f8      	movs	r3, #248	@ 0xf8
 8002892:	039b      	lsls	r3, r3, #14
 8002894:	401a      	ands	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d106      	bne.n	80028ac <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	0f5b      	lsrs	r3, r3, #29
 80028a2:	075a      	lsls	r2, r3, #29
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b008      	add	sp, #32
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40007000 	.word	0x40007000
 80028c4:	00001388 	.word	0x00001388
 80028c8:	efffffff 	.word	0xefffffff
 80028cc:	feffffff 	.word	0xfeffffff
 80028d0:	1fc1808c 	.word	0x1fc1808c
 80028d4:	effefffc 	.word	0xeffefffc

080028d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0e9      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b76      	ldr	r3, [pc, #472]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2207      	movs	r2, #7
 80028f2:	4013      	ands	r3, r2
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d91e      	bls.n	8002938 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b73      	ldr	r3, [pc, #460]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2207      	movs	r2, #7
 8002900:	4393      	bics	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	4b70      	ldr	r3, [pc, #448]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800290c:	f7fe fce4 	bl	80012d8 <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002914:	e009      	b.n	800292a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002916:	f7fe fcdf 	bl	80012d8 <HAL_GetTick>
 800291a:	0002      	movs	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	4a6a      	ldr	r2, [pc, #424]	@ (8002acc <HAL_RCC_ClockConfig+0x1f4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0ca      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800292a:	4b67      	ldr	r3, [pc, #412]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2207      	movs	r2, #7
 8002930:	4013      	ands	r3, r2
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d1ee      	bne.n	8002916 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2202      	movs	r2, #2
 800293e:	4013      	ands	r3, r2
 8002940:	d015      	beq.n	800296e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2204      	movs	r2, #4
 8002948:	4013      	ands	r3, r2
 800294a:	d006      	beq.n	800295a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800294c:	4b60      	ldr	r3, [pc, #384]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002952:	21e0      	movs	r1, #224	@ 0xe0
 8002954:	01c9      	lsls	r1, r1, #7
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1fc>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	4b59      	ldr	r3, [pc, #356]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2201      	movs	r2, #1
 8002974:	4013      	ands	r3, r2
 8002976:	d057      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d107      	bne.n	8002990 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002980:	4b53      	ldr	r3, [pc, #332]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	4013      	ands	r3, r2
 800298a:	d12b      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e097      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002998:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	049b      	lsls	r3, r3, #18
 80029a0:	4013      	ands	r3, r2
 80029a2:	d11f      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e08b      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b0:	4b47      	ldr	r3, [pc, #284]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4013      	ands	r3, r2
 80029ba:	d113      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e07f      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c8:	4b41      	ldr	r3, [pc, #260]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 80029ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029cc:	2202      	movs	r2, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	d108      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e074      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 80029d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029da:	2202      	movs	r2, #2
 80029dc:	4013      	ands	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e06d      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029e4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2207      	movs	r2, #7
 80029ea:	4393      	bics	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	4b37      	ldr	r3, [pc, #220]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f8:	f7fe fc6e 	bl	80012d8 <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a00:	e009      	b.n	8002a16 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a02:	f7fe fc69 	bl	80012d8 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002acc <HAL_RCC_ClockConfig+0x1f4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e054      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2238      	movs	r2, #56	@ 0x38
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1ec      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a28:	4b27      	ldr	r3, [pc, #156]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	4013      	ands	r3, r2
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d21e      	bcs.n	8002a74 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	4393      	bics	r3, r2
 8002a3e:	0019      	movs	r1, r3
 8002a40:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a48:	f7fe fc46 	bl	80012d8 <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a50:	e009      	b.n	8002a66 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a52:	f7fe fc41 	bl	80012d8 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002acc <HAL_RCC_ClockConfig+0x1f4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e02c      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a66:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1ee      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7e:	4b14      	ldr	r3, [pc, #80]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4a15      	ldr	r2, [pc, #84]	@ (8002ad8 <HAL_RCC_ClockConfig+0x200>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	0019      	movs	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a92:	f000 f829 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002a96:	0001      	movs	r1, r0
 8002a98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <HAL_RCC_ClockConfig+0x204>)
 8002aa4:	0092      	lsls	r2, r2, #2
 8002aa6:	58d3      	ldr	r3, [r2, r3]
 8002aa8:	221f      	movs	r2, #31
 8002aaa:	4013      	ands	r3, r2
 8002aac:	000a      	movs	r2, r1
 8002aae:	40da      	lsrs	r2, r3
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_RCC_ClockConfig+0x208>)
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_RCC_ClockConfig+0x20c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7fe fbb1 	bl	8001220 <HAL_InitTick>
 8002abe:	0003      	movs	r3, r0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b004      	add	sp, #16
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	00001388 	.word	0x00001388
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	fffff0ff 	.word	0xfffff0ff
 8002ad8:	ffff8fff 	.word	0xffff8fff
 8002adc:	08005f68 	.word	0x08005f68
 8002ae0:	20000014 	.word	0x20000014
 8002ae4:	20000018 	.word	0x20000018

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aee:	4b3c      	ldr	r3, [pc, #240]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2238      	movs	r2, #56	@ 0x38
 8002af4:	4013      	ands	r3, r2
 8002af6:	d10f      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002af8:	4b39      	ldr	r3, [pc, #228]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0adb      	lsrs	r3, r3, #11
 8002afe:	2207      	movs	r2, #7
 8002b00:	4013      	ands	r3, r2
 8002b02:	2201      	movs	r2, #1
 8002b04:	409a      	lsls	r2, r3
 8002b06:	0013      	movs	r3, r2
 8002b08:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b0a:	6839      	ldr	r1, [r7, #0]
 8002b0c:	4835      	ldr	r0, [pc, #212]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b0e:	f7fd faf7 	bl	8000100 <__udivsi3>
 8002b12:	0003      	movs	r3, r0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	e05d      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b18:	4b31      	ldr	r3, [pc, #196]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2238      	movs	r2, #56	@ 0x38
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d102      	bne.n	8002b2a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b24:	4b30      	ldr	r3, [pc, #192]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	e054      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2238      	movs	r2, #56	@ 0x38
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d138      	bne.n	8002ba8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b36:	4b2a      	ldr	r3, [pc, #168]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b40:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	2207      	movs	r2, #7
 8002b48:	4013      	ands	r3, r2
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d10d      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	4824      	ldr	r0, [pc, #144]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b58:	f7fd fad2 	bl	8000100 <__udivsi3>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	0019      	movs	r1, r3
 8002b60:	4b1f      	ldr	r3, [pc, #124]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	227f      	movs	r2, #127	@ 0x7f
 8002b68:	4013      	ands	r3, r2
 8002b6a:	434b      	muls	r3, r1
 8002b6c:	617b      	str	r3, [r7, #20]
        break;
 8002b6e:	e00d      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	481c      	ldr	r0, [pc, #112]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b74:	f7fd fac4 	bl	8000100 <__udivsi3>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	227f      	movs	r2, #127	@ 0x7f
 8002b84:	4013      	ands	r3, r2
 8002b86:	434b      	muls	r3, r1
 8002b88:	617b      	str	r3, [r7, #20]
        break;
 8002b8a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b8c:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0f5b      	lsrs	r3, r3, #29
 8002b92:	2207      	movs	r2, #7
 8002b94:	4013      	ands	r3, r2
 8002b96:	3301      	adds	r3, #1
 8002b98:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	6978      	ldr	r0, [r7, #20]
 8002b9e:	f7fd faaf 	bl	8000100 <__udivsi3>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	e015      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2238      	movs	r2, #56	@ 0x38
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d103      	bne.n	8002bbc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bbc:	4b08      	ldr	r3, [pc, #32]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2238      	movs	r2, #56	@ 0x38
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b18      	cmp	r3, #24
 8002bc6:	d103      	bne.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002bc8:	23fa      	movs	r3, #250	@ 0xfa
 8002bca:	01db      	lsls	r3, r3, #7
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	e001      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bd4:	693b      	ldr	r3, [r7, #16]
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b006      	add	sp, #24
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	40021000 	.word	0x40021000
 8002be4:	00f42400 	.word	0x00f42400
 8002be8:	007a1200 	.word	0x007a1200

08002bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002bf4:	2313      	movs	r3, #19
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bfc:	2312      	movs	r3, #18
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	@ 0x80
 8002c0a:	029b      	lsls	r3, r3, #10
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d100      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c10:	e0a3      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2011      	movs	r0, #17
 8002c14:	183b      	adds	r3, r7, r0
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	055b      	lsls	r3, r3, #21
 8002c22:	4013      	ands	r3, r2
 8002c24:	d110      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	4b7c      	ldr	r3, [pc, #496]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c2a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c2c:	2180      	movs	r1, #128	@ 0x80
 8002c2e:	0549      	lsls	r1, r1, #21
 8002c30:	430a      	orrs	r2, r1
 8002c32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c34:	4b78      	ldr	r3, [pc, #480]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	055b      	lsls	r3, r3, #21
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c42:	183b      	adds	r3, r7, r0
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c48:	4b74      	ldr	r3, [pc, #464]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b73      	ldr	r3, [pc, #460]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c4e:	2180      	movs	r1, #128	@ 0x80
 8002c50:	0049      	lsls	r1, r1, #1
 8002c52:	430a      	orrs	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c56:	f7fe fb3f 	bl	80012d8 <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe fb3a 	bl	80012d8 <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d904      	bls.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c6e:	2313      	movs	r3, #19
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2203      	movs	r2, #3
 8002c74:	701a      	strb	r2, [r3, #0]
        break;
 8002c76:	e005      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c78:	4b68      	ldr	r3, [pc, #416]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4013      	ands	r3, r2
 8002c82:	d0ed      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c84:	2313      	movs	r3, #19
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d154      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c8e:	4b62      	ldr	r3, [pc, #392]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c92:	23c0      	movs	r3, #192	@ 0xc0
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4013      	ands	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d019      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d014      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002caa:	4b5b      	ldr	r3, [pc, #364]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cae:	4a5c      	ldr	r2, [pc, #368]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cb4:	4b58      	ldr	r3, [pc, #352]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cb8:	4b57      	ldr	r3, [pc, #348]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cba:	2180      	movs	r1, #128	@ 0x80
 8002cbc:	0249      	lsls	r1, r1, #9
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cc2:	4b55      	ldr	r3, [pc, #340]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cc6:	4b54      	ldr	r3, [pc, #336]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cc8:	4956      	ldr	r1, [pc, #344]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002cca:	400a      	ands	r2, r1
 8002ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cce:	4b52      	ldr	r3, [pc, #328]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d016      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fafc 	bl	80012d8 <HAL_GetTick>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe faf7 	bl	80012d8 <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	4a4d      	ldr	r2, [pc, #308]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d904      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002cf6:	2313      	movs	r3, #19
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	701a      	strb	r2, [r3, #0]
            break;
 8002cfe:	e004      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d00:	4b45      	ldr	r3, [pc, #276]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	2202      	movs	r2, #2
 8002d06:	4013      	ands	r3, r2
 8002d08:	d0ed      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d0a:	2313      	movs	r3, #19
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d14:	4b40      	ldr	r3, [pc, #256]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d18:	4a41      	ldr	r2, [pc, #260]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	4b3d      	ldr	r3, [pc, #244]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d24:	430a      	orrs	r2, r1
 8002d26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d28:	e00c      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d2a:	2312      	movs	r3, #18
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	2213      	movs	r2, #19
 8002d30:	18ba      	adds	r2, r7, r2
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e005      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	2312      	movs	r3, #18
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2213      	movs	r2, #19
 8002d3e:	18ba      	adds	r2, r7, r2
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d44:	2311      	movs	r3, #17
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d105      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4e:	4b32      	ldr	r3, [pc, #200]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d52:	4b31      	ldr	r3, [pc, #196]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d54:	4935      	ldr	r1, [pc, #212]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4013      	ands	r3, r2
 8002d62:	d009      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d64:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d68:	2203      	movs	r2, #3
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4b29      	ldr	r3, [pc, #164]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d82:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d86:	4a2a      	ldr	r2, [pc, #168]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d92:	430a      	orrs	r2, r1
 8002d94:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	2380      	movs	r3, #128	@ 0x80
 8002d9c:	01db      	lsls	r3, r3, #7
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d015      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002da2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	0899      	lsrs	r1, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	4b1a      	ldr	r3, [pc, #104]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	05db      	lsls	r3, r3, #23
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d106      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002dc0:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dc6:	2180      	movs	r1, #128	@ 0x80
 8002dc8:	0249      	lsls	r1, r1, #9
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002dda:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dde:	4a15      	ldr	r2, [pc, #84]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dea:	430a      	orrs	r2, r1
 8002dec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	01db      	lsls	r3, r3, #7
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d106      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002dfa:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e00:	2180      	movs	r1, #128	@ 0x80
 8002e02:	0249      	lsls	r1, r1, #9
 8002e04:	430a      	orrs	r2, r1
 8002e06:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e08:	2312      	movs	r3, #18
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	781b      	ldrb	r3, [r3, #0]
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b006      	add	sp, #24
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			@ (mov r8, r8)
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	fffffcff 	.word	0xfffffcff
 8002e24:	fffeffff 	.word	0xfffeffff
 8002e28:	00001388 	.word	0x00001388
 8002e2c:	efffffff 	.word	0xefffffff
 8002e30:	ffffcfff 	.word	0xffffcfff
 8002e34:	ffff3fff 	.word	0xffff3fff

08002e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e04a      	b.n	8002ee0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223d      	movs	r2, #61	@ 0x3d
 8002e4e:	5c9b      	ldrb	r3, [r3, r2]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	223c      	movs	r2, #60	@ 0x3c
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f7fe f943 	bl	80010ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	223d      	movs	r2, #61	@ 0x3d
 8002e6a:	2102      	movs	r1, #2
 8002e6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3304      	adds	r3, #4
 8002e76:	0019      	movs	r1, r3
 8002e78:	0010      	movs	r0, r2
 8002e7a:	f000 f9ab 	bl	80031d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2248      	movs	r2, #72	@ 0x48
 8002e82:	2101      	movs	r1, #1
 8002e84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	223e      	movs	r2, #62	@ 0x3e
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	5499      	strb	r1, [r3, r2]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	223f      	movs	r2, #63	@ 0x3f
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2240      	movs	r2, #64	@ 0x40
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	5499      	strb	r1, [r3, r2]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2241      	movs	r2, #65	@ 0x41
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	5499      	strb	r1, [r3, r2]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2242      	movs	r2, #66	@ 0x42
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2243      	movs	r2, #67	@ 0x43
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2244      	movs	r2, #68	@ 0x44
 8002eba:	2101      	movs	r1, #1
 8002ebc:	5499      	strb	r1, [r3, r2]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2245      	movs	r2, #69	@ 0x45
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	5499      	strb	r1, [r3, r2]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2246      	movs	r2, #70	@ 0x46
 8002eca:	2101      	movs	r1, #1
 8002ecc:	5499      	strb	r1, [r3, r2]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2247      	movs	r2, #71	@ 0x47
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	223d      	movs	r2, #61	@ 0x3d
 8002eda:	2101      	movs	r1, #1
 8002edc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	223d      	movs	r2, #61	@ 0x3d
 8002ef4:	5c9b      	ldrb	r3, [r3, r2]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d001      	beq.n	8002f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e037      	b.n	8002f70 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	223d      	movs	r2, #61	@ 0x3d
 8002f04:	2102      	movs	r1, #2
 8002f06:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2101      	movs	r1, #1
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a16      	ldr	r2, [pc, #88]	@ (8002f78 <HAL_TIM_Base_Start_IT+0x90>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x44>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a15      	ldr	r2, [pc, #84]	@ (8002f7c <HAL_TIM_Base_Start_IT+0x94>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d116      	bne.n	8002f5a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4a13      	ldr	r2, [pc, #76]	@ (8002f80 <HAL_TIM_Base_Start_IT+0x98>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d016      	beq.n	8002f6c <HAL_TIM_Base_Start_IT+0x84>
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	025b      	lsls	r3, r3, #9
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d011      	beq.n	8002f6c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2101      	movs	r1, #1
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	e008      	b.n	8002f6c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2101      	movs	r1, #1
 8002f66:	430a      	orrs	r2, r1
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	e000      	b.n	8002f6e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b004      	add	sp, #16
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	00010007 	.word	0x00010007

08002f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d021      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d01d      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	4252      	negs	r2, r2
 8002fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 f8ea 	bl	80031a4 <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e007      	b.n	8002fe2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 f8dd 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f8e9 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2204      	movs	r2, #4
 8002fec:	4013      	ands	r3, r2
 8002fee:	d022      	beq.n	8003036 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d01e      	beq.n	8003036 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2205      	movs	r2, #5
 8002ffe:	4252      	negs	r2, r2
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2202      	movs	r2, #2
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	23c0      	movs	r3, #192	@ 0xc0
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4013      	ands	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f000 f8c3 	bl	80031a4 <HAL_TIM_IC_CaptureCallback>
 800301e:	e007      	b.n	8003030 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f8b6 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	0018      	movs	r0, r3
 800302c:	f000 f8c2 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2208      	movs	r2, #8
 800303a:	4013      	ands	r3, r2
 800303c:	d021      	beq.n	8003082 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2208      	movs	r2, #8
 8003042:	4013      	ands	r3, r2
 8003044:	d01d      	beq.n	8003082 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2209      	movs	r2, #9
 800304c:	4252      	negs	r2, r2
 800304e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2204      	movs	r2, #4
 8003054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	2203      	movs	r2, #3
 800305e:	4013      	ands	r3, r2
 8003060:	d004      	beq.n	800306c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	0018      	movs	r0, r3
 8003066:	f000 f89d 	bl	80031a4 <HAL_TIM_IC_CaptureCallback>
 800306a:	e007      	b.n	800307c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	0018      	movs	r0, r3
 8003070:	f000 f890 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	0018      	movs	r0, r3
 8003078:	f000 f89c 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2210      	movs	r2, #16
 8003086:	4013      	ands	r3, r2
 8003088:	d022      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2210      	movs	r2, #16
 800308e:	4013      	ands	r3, r2
 8003090:	d01e      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2211      	movs	r2, #17
 8003098:	4252      	negs	r2, r2
 800309a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2208      	movs	r2, #8
 80030a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	23c0      	movs	r3, #192	@ 0xc0
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4013      	ands	r3, r2
 80030ae:	d004      	beq.n	80030ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 f876 	bl	80031a4 <HAL_TIM_IC_CaptureCallback>
 80030b8:	e007      	b.n	80030ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 f869 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 f875 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2201      	movs	r2, #1
 80030d4:	4013      	ands	r3, r2
 80030d6:	d00c      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	4013      	ands	r3, r2
 80030de:	d008      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2202      	movs	r2, #2
 80030e6:	4252      	negs	r2, r2
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fd f9ef 	bl	80004d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2280      	movs	r2, #128	@ 0x80
 80030f6:	4013      	ands	r3, r2
 80030f8:	d104      	bne.n	8003104 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	2380      	movs	r3, #128	@ 0x80
 80030fe:	019b      	lsls	r3, r3, #6
 8003100:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003102:	d00b      	beq.n	800311c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2280      	movs	r2, #128	@ 0x80
 8003108:	4013      	ands	r3, r2
 800310a:	d007      	beq.n	800311c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1e      	ldr	r2, [pc, #120]	@ (800318c <HAL_TIM_IRQHandler+0x208>)
 8003112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	0018      	movs	r0, r3
 8003118:	f000 f8de 	bl	80032d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	2380      	movs	r3, #128	@ 0x80
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d00b      	beq.n	800313e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2280      	movs	r2, #128	@ 0x80
 800312a:	4013      	ands	r3, r2
 800312c:	d007      	beq.n	800313e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a17      	ldr	r2, [pc, #92]	@ (8003190 <HAL_TIM_IRQHandler+0x20c>)
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0018      	movs	r0, r3
 800313a:	f000 f8d5 	bl	80032e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2240      	movs	r2, #64	@ 0x40
 8003142:	4013      	ands	r3, r2
 8003144:	d00c      	beq.n	8003160 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2240      	movs	r2, #64	@ 0x40
 800314a:	4013      	ands	r3, r2
 800314c:	d008      	beq.n	8003160 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2241      	movs	r2, #65	@ 0x41
 8003154:	4252      	negs	r2, r2
 8003156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0018      	movs	r0, r3
 800315c:	f000 f832 	bl	80031c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2220      	movs	r2, #32
 8003164:	4013      	ands	r3, r2
 8003166:	d00c      	beq.n	8003182 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	4013      	ands	r3, r2
 800316e:	d008      	beq.n	8003182 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2221      	movs	r2, #33	@ 0x21
 8003176:	4252      	negs	r2, r2
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	0018      	movs	r0, r3
 800317e:	f000 f8a3 	bl	80032c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	b004      	add	sp, #16
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	ffffdf7f 	.word	0xffffdf7f
 8003190:	fffffeff 	.word	0xfffffeff

08003194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ac:	46c0      	nop			@ (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031bc:	46c0      	nop			@ (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b002      	add	sp, #8
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a32      	ldr	r2, [pc, #200]	@ (80032b0 <TIM_Base_SetConfig+0xdc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_Base_SetConfig+0x20>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a31      	ldr	r2, [pc, #196]	@ (80032b4 <TIM_Base_SetConfig+0xe0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d108      	bne.n	8003206 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2270      	movs	r2, #112	@ 0x70
 80031f8:	4393      	bics	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a29      	ldr	r2, [pc, #164]	@ (80032b0 <TIM_Base_SetConfig+0xdc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00f      	beq.n	800322e <TIM_Base_SetConfig+0x5a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a28      	ldr	r2, [pc, #160]	@ (80032b4 <TIM_Base_SetConfig+0xe0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <TIM_Base_SetConfig+0x5a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a27      	ldr	r2, [pc, #156]	@ (80032b8 <TIM_Base_SetConfig+0xe4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <TIM_Base_SetConfig+0x5a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a26      	ldr	r2, [pc, #152]	@ (80032bc <TIM_Base_SetConfig+0xe8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_Base_SetConfig+0x5a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a25      	ldr	r2, [pc, #148]	@ (80032c0 <TIM_Base_SetConfig+0xec>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d108      	bne.n	8003240 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4a24      	ldr	r2, [pc, #144]	@ (80032c4 <TIM_Base_SetConfig+0xf0>)
 8003232:	4013      	ands	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2280      	movs	r2, #128	@ 0x80
 8003244:	4393      	bics	r3, r2
 8003246:	001a      	movs	r2, r3
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a11      	ldr	r2, [pc, #68]	@ (80032b0 <TIM_Base_SetConfig+0xdc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d007      	beq.n	800327e <TIM_Base_SetConfig+0xaa>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a12      	ldr	r2, [pc, #72]	@ (80032bc <TIM_Base_SetConfig+0xe8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d003      	beq.n	800327e <TIM_Base_SetConfig+0xaa>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a11      	ldr	r2, [pc, #68]	@ (80032c0 <TIM_Base_SetConfig+0xec>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d103      	bne.n	8003286 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2201      	movs	r2, #1
 8003292:	4013      	ands	r3, r2
 8003294:	2b01      	cmp	r3, #1
 8003296:	d106      	bne.n	80032a6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2201      	movs	r2, #1
 800329e:	4393      	bics	r3, r2
 80032a0:	001a      	movs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	611a      	str	r2, [r3, #16]
  }
}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b004      	add	sp, #16
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40002000 	.word	0x40002000
 80032bc:	40014400 	.word	0x40014400
 80032c0:	40014800 	.word	0x40014800
 80032c4:	fffffcff 	.word	0xfffffcff

080032c8 <HAL_TIMEx_CommutCallback>:
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	46c0      	nop			@ (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_TIMEx_BreakCallback>:
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	46c0      	nop			@ (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b002      	add	sp, #8
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIMEx_Break2Callback>:
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	46c0      	nop			@ (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <memset>:
 80032f8:	0003      	movs	r3, r0
 80032fa:	1882      	adds	r2, r0, r2
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d100      	bne.n	8003302 <memset+0xa>
 8003300:	4770      	bx	lr
 8003302:	7019      	strb	r1, [r3, #0]
 8003304:	3301      	adds	r3, #1
 8003306:	e7f9      	b.n	80032fc <memset+0x4>

08003308 <__libc_init_array>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	2600      	movs	r6, #0
 800330c:	4c0c      	ldr	r4, [pc, #48]	@ (8003340 <__libc_init_array+0x38>)
 800330e:	4d0d      	ldr	r5, [pc, #52]	@ (8003344 <__libc_init_array+0x3c>)
 8003310:	1b64      	subs	r4, r4, r5
 8003312:	10a4      	asrs	r4, r4, #2
 8003314:	42a6      	cmp	r6, r4
 8003316:	d109      	bne.n	800332c <__libc_init_array+0x24>
 8003318:	2600      	movs	r6, #0
 800331a:	f000 f819 	bl	8003350 <_init>
 800331e:	4c0a      	ldr	r4, [pc, #40]	@ (8003348 <__libc_init_array+0x40>)
 8003320:	4d0a      	ldr	r5, [pc, #40]	@ (800334c <__libc_init_array+0x44>)
 8003322:	1b64      	subs	r4, r4, r5
 8003324:	10a4      	asrs	r4, r4, #2
 8003326:	42a6      	cmp	r6, r4
 8003328:	d105      	bne.n	8003336 <__libc_init_array+0x2e>
 800332a:	bd70      	pop	{r4, r5, r6, pc}
 800332c:	00b3      	lsls	r3, r6, #2
 800332e:	58eb      	ldr	r3, [r5, r3]
 8003330:	4798      	blx	r3
 8003332:	3601      	adds	r6, #1
 8003334:	e7ee      	b.n	8003314 <__libc_init_array+0xc>
 8003336:	00b3      	lsls	r3, r6, #2
 8003338:	58eb      	ldr	r3, [r5, r3]
 800333a:	4798      	blx	r3
 800333c:	3601      	adds	r6, #1
 800333e:	e7f2      	b.n	8003326 <__libc_init_array+0x1e>
 8003340:	08005fa8 	.word	0x08005fa8
 8003344:	08005fa8 	.word	0x08005fa8
 8003348:	08005fac 	.word	0x08005fac
 800334c:	08005fa8 	.word	0x08005fa8

08003350 <_init>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	46c0      	nop			@ (mov r8, r8)
 8003354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003356:	bc08      	pop	{r3}
 8003358:	469e      	mov	lr, r3
 800335a:	4770      	bx	lr

0800335c <_fini>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr
