
Bongo-cat-fidget-toy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc0  080000b8  080000b8  000010b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004660  08004d78  08004d78  00005d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d8  080093d8  0000b0f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080093d8  080093d8  0000b0f8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080093d8  080093d8  0000b0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d8  080093d8  0000a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093dc  080093dc  0000a3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  080093e0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000006dc  200000f8  080094d8  0000b0f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  080094d8  0000b7d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b0f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9c2  00000000  00000000  0000b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b44  00000000  00000000  0001aae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  0001d628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd6  00000000  00000000  0001e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162c3  00000000  00000000  0001f37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013602  00000000  00000000  00035641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008934d  00000000  00000000  00048c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1f90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004078  00000000  00000000  000d1fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000f8 	.word	0x200000f8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004d50 	.word	0x08004d50

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000fc 	.word	0x200000fc
 80000fc:	08004d50 	.word	0x08004d50

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <calculate_checksum>:


/* USER CODE BEGIN PFP */

// Calculate simple checksum
uint32_t calculate_checksum(Settings_t *s) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
    uint32_t checksum = 0x12345678;  // Magic number
 8000408:	4b10      	ldr	r3, [pc, #64]	@ (800044c <calculate_checksum+0x4c>)
 800040a:	60fb      	str	r3, [r7, #12]
    checksum ^= s->total_taps;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	68fa      	ldr	r2, [r7, #12]
 8000412:	4053      	eors	r3, r2
 8000414:	60fb      	str	r3, [r7, #12]
    checksum ^= s->left_taps;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	68fa      	ldr	r2, [r7, #12]
 800041c:	4053      	eors	r3, r2
 800041e:	60fb      	str	r3, [r7, #12]
    checksum ^= s->right_taps;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	4053      	eors	r3, r2
 8000428:	60fb      	str	r3, [r7, #12]
    checksum ^= ((uint32_t)s->display_inverted << 8);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	7b1b      	ldrb	r3, [r3, #12]
 800042e:	021b      	lsls	r3, r3, #8
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	4053      	eors	r3, r2
 8000434:	60fb      	str	r3, [r7, #12]
    checksum ^= ((uint32_t)s->display_mode << 16);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	7b5b      	ldrb	r3, [r3, #13]
 800043a:	041b      	lsls	r3, r3, #16
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	4053      	eors	r3, r2
 8000440:	60fb      	str	r3, [r7, #12]
    return checksum;
 8000442:	68fb      	ldr	r3, [r7, #12]
}
 8000444:	0018      	movs	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	b004      	add	sp, #16
 800044a:	bd80      	pop	{r7, pc}
 800044c:	12345678 	.word	0x12345678

08000450 <use_angry_mode>:

// Helper function to check if we should use angry animations
uint8_t use_angry_mode(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
    static uint8_t angry_active = 0;
    uint32_t now = HAL_GetTick();
 8000456:	f001 fe27 	bl	80020a8 <HAL_GetTick>
 800045a:	0003      	movs	r3, r0
 800045c:	607b      	str	r3, [r7, #4]

    if (current_tap_speed_x10 >= ANGRY_MODE_ON_THRESHOLD) {
 800045e:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <use_angry_mode+0x58>)
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	2b59      	cmp	r3, #89	@ 0x59
 8000464:	d906      	bls.n	8000474 <use_angry_mode+0x24>
        angry_mode_timer = now;
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <use_angry_mode+0x5c>)
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	601a      	str	r2, [r3, #0]
        angry_active = 1;
 800046c:	4b10      	ldr	r3, [pc, #64]	@ (80004b0 <use_angry_mode+0x60>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
 8000472:	e012      	b.n	800049a <use_angry_mode+0x4a>
    } else if (angry_active && (current_tap_speed_x10 < ANGRY_MODE_OFF_THRESHOLD)) {
 8000474:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <use_angry_mode+0x60>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d00e      	beq.n	800049a <use_angry_mode+0x4a>
 800047c:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <use_angry_mode+0x58>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	2b4f      	cmp	r3, #79	@ 0x4f
 8000482:	d80a      	bhi.n	800049a <use_angry_mode+0x4a>
        if ((now - angry_mode_timer) >= ANGRY_MODE_DECAY_TIME) {
 8000484:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <use_angry_mode+0x5c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	1ad2      	subs	r2, r2, r3
 800048c:	23fa      	movs	r3, #250	@ 0xfa
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	429a      	cmp	r2, r3
 8000492:	d302      	bcc.n	800049a <use_angry_mode+0x4a>
            angry_active = 0;
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <use_angry_mode+0x60>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
        }
    }

    return angry_active;
 800049a:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <use_angry_mode+0x60>)
 800049c:	781b      	ldrb	r3, [r3, #0]
}
 800049e:	0018      	movs	r0, r3
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	20000242 	.word	0x20000242
 80004ac:	20000244 	.word	0x20000244
 80004b0:	20000248 	.word	0x20000248

080004b4 <calculate_tap_speed>:



// Calculate current tap speed (taps per second * 10)
void calculate_tap_speed(void) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80004ba:	f001 fdf5 	bl	80020a8 <HAL_GetTick>
 80004be:	0003      	movs	r3, r0
 80004c0:	60bb      	str	r3, [r7, #8]
    int valid_taps = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
    uint32_t oldest_valid_time = current_time;
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	613b      	str	r3, [r7, #16]

    // Count taps within the time window
    for (int i = 0; i < TAP_HISTORY_SIZE; i++) {
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	e021      	b.n	8000514 <calculate_tap_speed+0x60>
        if (tap_timestamps[i] != 0 && (current_time - tap_timestamps[i]) <= TAP_SPEED_WINDOW) {
 80004d0:	4b25      	ldr	r3, [pc, #148]	@ (8000568 <calculate_tap_speed+0xb4>)
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	0092      	lsls	r2, r2, #2
 80004d6:	58d3      	ldr	r3, [r2, r3]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d018      	beq.n	800050e <calculate_tap_speed+0x5a>
 80004dc:	4b22      	ldr	r3, [pc, #136]	@ (8000568 <calculate_tap_speed+0xb4>)
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	0092      	lsls	r2, r2, #2
 80004e2:	58d3      	ldr	r3, [r2, r3]
 80004e4:	68ba      	ldr	r2, [r7, #8]
 80004e6:	1ad2      	subs	r2, r2, r3
 80004e8:	23fa      	movs	r3, #250	@ 0xfa
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d80e      	bhi.n	800050e <calculate_tap_speed+0x5a>
            valid_taps++;
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	3301      	adds	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
            if (tap_timestamps[i] < oldest_valid_time) {
 80004f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <calculate_tap_speed+0xb4>)
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	0092      	lsls	r2, r2, #2
 80004fc:	58d3      	ldr	r3, [r2, r3]
 80004fe:	693a      	ldr	r2, [r7, #16]
 8000500:	429a      	cmp	r2, r3
 8000502:	d904      	bls.n	800050e <calculate_tap_speed+0x5a>
                oldest_valid_time = tap_timestamps[i];
 8000504:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <calculate_tap_speed+0xb4>)
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	0092      	lsls	r2, r2, #2
 800050a:	58d3      	ldr	r3, [r2, r3]
 800050c:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < TAP_HISTORY_SIZE; i++) {
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	3301      	adds	r3, #1
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2b13      	cmp	r3, #19
 8000518:	ddda      	ble.n	80004d0 <calculate_tap_speed+0x1c>
            }
        }
    }

    // Calculate speed
    if (valid_taps >= 2 && oldest_valid_time < current_time) {
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	2b01      	cmp	r3, #1
 800051e:	dd1b      	ble.n	8000558 <calculate_tap_speed+0xa4>
 8000520:	693a      	ldr	r2, [r7, #16]
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	429a      	cmp	r2, r3
 8000526:	d217      	bcs.n	8000558 <calculate_tap_speed+0xa4>
        uint32_t time_span = current_time - oldest_valid_time; // in milliseconds
 8000528:	68ba      	ldr	r2, [r7, #8]
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	607b      	str	r3, [r7, #4]
        if (time_span > 0) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d00c      	beq.n	8000550 <calculate_tap_speed+0x9c>
            // Calculate taps per second * 10 (to get one decimal place)
            current_tap_speed_x10 = ((valid_taps - 1) * 10000) / time_span;
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3b01      	subs	r3, #1
 800053a:	4a0c      	ldr	r2, [pc, #48]	@ (800056c <calculate_tap_speed+0xb8>)
 800053c:	4353      	muls	r3, r2
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	0018      	movs	r0, r3
 8000542:	f7ff fde7 	bl	8000114 <__udivsi3>
 8000546:	0003      	movs	r3, r0
 8000548:	b29a      	uxth	r2, r3
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <calculate_tap_speed+0xbc>)
 800054c:	801a      	strh	r2, [r3, #0]
    if (valid_taps >= 2 && oldest_valid_time < current_time) {
 800054e:	e007      	b.n	8000560 <calculate_tap_speed+0xac>
        } else {
            current_tap_speed_x10 = 0;
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <calculate_tap_speed+0xbc>)
 8000552:	2200      	movs	r2, #0
 8000554:	801a      	strh	r2, [r3, #0]
    if (valid_taps >= 2 && oldest_valid_time < current_time) {
 8000556:	e003      	b.n	8000560 <calculate_tap_speed+0xac>
        }
    } else {
        current_tap_speed_x10 = 0;
 8000558:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <calculate_tap_speed+0xbc>)
 800055a:	2200      	movs	r2, #0
 800055c:	801a      	strh	r2, [r3, #0]
    }
}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	46c0      	nop			@ (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b006      	add	sp, #24
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200001f0 	.word	0x200001f0
 800056c:	00002710 	.word	0x00002710
 8000570:	20000242 	.word	0x20000242

08000574 <record_tap_timestamp>:

// Record a new tap for speed tracking
void record_tap_timestamp(void) {
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	af00      	add	r7, sp, #0
    tap_timestamps[tap_history_index] = HAL_GetTick();
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <record_tap_timestamp+0x38>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	001c      	movs	r4, r3
 800057e:	f001 fd93 	bl	80020a8 <HAL_GetTick>
 8000582:	0001      	movs	r1, r0
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <record_tap_timestamp+0x3c>)
 8000586:	00a2      	lsls	r2, r4, #2
 8000588:	50d1      	str	r1, [r2, r3]
    tap_history_index = (tap_history_index + 1) % TAP_HISTORY_SIZE;
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <record_tap_timestamp+0x38>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	2114      	movs	r1, #20
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff ff2e 	bl	80003f4 <__aeabi_idivmod>
 8000598:	000b      	movs	r3, r1
 800059a:	b2da      	uxtb	r2, r3
 800059c:	4b03      	ldr	r3, [pc, #12]	@ (80005ac <record_tap_timestamp+0x38>)
 800059e:	701a      	strb	r2, [r3, #0]
    calculate_tap_speed();
 80005a0:	f7ff ff88 	bl	80004b4 <calculate_tap_speed>
}
 80005a4:	46c0      	nop			@ (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bdb0      	pop	{r4, r5, r7, pc}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	20000240 	.word	0x20000240
 80005b0:	200001f0 	.word	0x200001f0

080005b4 <toggle_display_invert>:

void toggle_display_invert(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
    settings.display_inverted = !settings.display_inverted;
 80005ba:	4b17      	ldr	r3, [pc, #92]	@ (8000618 <toggle_display_invert+0x64>)
 80005bc:	7b1b      	ldrb	r3, [r3, #12]
 80005be:	425a      	negs	r2, r3
 80005c0:	4153      	adcs	r3, r2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	001a      	movs	r2, r3
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <toggle_display_invert+0x64>)
 80005c8:	731a      	strb	r2, [r3, #12]
    ssd1306_InvertDisplay(settings.display_inverted);
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <toggle_display_invert+0x64>)
 80005cc:	7b1b      	ldrb	r3, [r3, #12]
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fb7c 	bl	8001ccc <ssd1306_InvertDisplay>

    // Mark data as changed
    data_changed = 1;
 80005d4:	4b11      	ldr	r3, [pc, #68]	@ (800061c <toggle_display_invert+0x68>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]

    // Visual feedback
    for(int i = 0; i < 2; i++) {
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	e012      	b.n	8000606 <toggle_display_invert+0x52>
        ssd1306_Fill(White);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f001 f905 	bl	80017f0 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 80005e6:	f001 f91d 	bl	8001824 <ssd1306_UpdateScreen>
        HAL_Delay(50);
 80005ea:	2032      	movs	r0, #50	@ 0x32
 80005ec:	f001 fd66 	bl	80020bc <HAL_Delay>
        ssd1306_Fill(Black);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f001 f8fd 	bl	80017f0 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 80005f6:	f001 f915 	bl	8001824 <ssd1306_UpdateScreen>
        HAL_Delay(50);
 80005fa:	2032      	movs	r0, #50	@ 0x32
 80005fc:	f001 fd5e 	bl	80020bc <HAL_Delay>
    for(int i = 0; i < 2; i++) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b01      	cmp	r3, #1
 800060a:	dde9      	ble.n	80005e0 <toggle_display_invert+0x2c>
    }
}
 800060c:	46c0      	nop			@ (mov r8, r8)
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	200001c0 	.word	0x200001c0
 800061c:	200001e0 	.word	0x200001e0

08000620 <draw_animation>:

void draw_animation(char* frame){
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af02      	add	r7, sp, #8
 8000626:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 8000628:	2000      	movs	r0, #0
 800062a:	f001 f8e1 	bl	80017f0 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,frame,128,64,White);
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	2301      	movs	r3, #1
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2340      	movs	r3, #64	@ 0x40
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2380      	movs	r3, #128	@ 0x80
 800063a:	2100      	movs	r1, #0
 800063c:	2000      	movs	r0, #0
 800063e:	f001 fa79 	bl	8001b34 <ssd1306_DrawBitmap>
    current_frame = frame;  // Store current frame
 8000642:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <draw_animation+0x30>)
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	601a      	str	r2, [r3, #0]
}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200001ec 	.word	0x200001ec

08000654 <draw_animation_erase>:
    // Draw without clearing - useful for transitions
    ssd1306_DrawBitmap(0,0,frame,128,64,White);
    current_frame = frame;
}

void draw_animation_erase(char* frame){
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af02      	add	r7, sp, #8
 800065a:	6078      	str	r0, [r7, #4]
    ssd1306_DrawBitmap(0,0,frame,128,64,Black);
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	2300      	movs	r3, #0
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2340      	movs	r3, #64	@ 0x40
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2380      	movs	r3, #128	@ 0x80
 8000668:	2100      	movs	r1, #0
 800066a:	2000      	movs	r0, #0
 800066c:	f001 fa62 	bl	8001b34 <ssd1306_DrawBitmap>
}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b002      	add	sp, #8
 8000676:	bd80      	pop	{r7, pc}

08000678 <draw_animation_transparent>:

void draw_animation_transparent(char* frame){
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
    ssd1306_DrawBitmap(0,0,frame,128,64,White);
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	2301      	movs	r3, #1
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2340      	movs	r3, #64	@ 0x40
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2380      	movs	r3, #128	@ 0x80
 800068c:	2100      	movs	r1, #0
 800068e:	2000      	movs	r0, #0
 8000690:	f001 fa50 	bl	8001b34 <ssd1306_DrawBitmap>
}
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b002      	add	sp, #8
 800069a:	bd80      	pop	{r7, pc}

0800069c <readPins>:

void readPins(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    sw_state_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);
 80006a0:	23a0      	movs	r3, #160	@ 0xa0
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	2140      	movs	r1, #64	@ 0x40
 80006a6:	0018      	movs	r0, r3
 80006a8:	f002 f914 	bl	80028d4 <HAL_GPIO_ReadPin>
 80006ac:	0003      	movs	r3, r0
 80006ae:	001a      	movs	r2, r3
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <readPins+0x30>)
 80006b2:	601a      	str	r2, [r3, #0]
    sw_state_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <readPins+0x34>)
 80006b6:	2101      	movs	r1, #1
 80006b8:	0018      	movs	r0, r3
 80006ba:	f002 f90b 	bl	80028d4 <HAL_GPIO_ReadPin>
 80006be:	0003      	movs	r3, r0
 80006c0:	001a      	movs	r2, r3
 80006c2:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <readPins+0x38>)
 80006c4:	601a      	str	r2, [r3, #0]
}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200001b4 	.word	0x200001b4
 80006d0:	50000400 	.word	0x50000400
 80006d4:	200001b8 	.word	0x200001b8

080006d8 <display_tap_count_overlay>:

// Display tap count as overlay
void display_tap_count_overlay(void) {
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b08c      	sub	sp, #48	@ 0x30
 80006dc:	af02      	add	r7, sp, #8
    char buffer[32];

    // Display total tap count in top left
    sprintf(buffer, "%lu", settings.total_taps);
 80006de:	4b29      	ldr	r3, [pc, #164]	@ (8000784 <display_tap_count_overlay+0xac>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4929      	ldr	r1, [pc, #164]	@ (8000788 <display_tap_count_overlay+0xb0>)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	0018      	movs	r0, r3
 80006e8:	f003 fe94 	bl	8004414 <siprintf>
    ssd1306_SetCursor(2, 1);
 80006ec:	2101      	movs	r1, #1
 80006ee:	2002      	movs	r0, #2
 80006f0:	f001 fa06 	bl	8001b00 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, ComicSans_11x12, White);
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <display_tap_count_overlay+0xb4>)
 80006f6:	1d38      	adds	r0, r7, #4
 80006f8:	2201      	movs	r2, #1
 80006fa:	9200      	str	r2, [sp, #0]
 80006fc:	6819      	ldr	r1, [r3, #0]
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	f001 f9d1 	bl	8001aa8 <ssd1306_WriteString>

    // Display tap speed in top right
    if (current_tap_speed_x10 > 1) {  // Only show if actively tapping
 8000706:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <display_tap_count_overlay+0xb8>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d936      	bls.n	800077c <display_tap_count_overlay+0xa4>
        // Format speed with one decimal place
        uint16_t whole = current_tap_speed_x10 / 10;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <display_tap_count_overlay+0xb8>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	2526      	movs	r5, #38	@ 0x26
 8000714:	197c      	adds	r4, r7, r5
 8000716:	210a      	movs	r1, #10
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff fcfb 	bl	8000114 <__udivsi3>
 800071e:	0003      	movs	r3, r0
 8000720:	8023      	strh	r3, [r4, #0]
        uint16_t decimal = current_tap_speed_x10 % 10;
 8000722:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <display_tap_count_overlay+0xb8>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	2224      	movs	r2, #36	@ 0x24
 8000728:	18bc      	adds	r4, r7, r2
 800072a:	210a      	movs	r1, #10
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff fd77 	bl	8000220 <__aeabi_uidivmod>
 8000732:	000b      	movs	r3, r1
 8000734:	8023      	strh	r3, [r4, #0]

        if (whole >= 10) {
 8000736:	197b      	adds	r3, r7, r5
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	2b09      	cmp	r3, #9
 800073c:	d907      	bls.n	800074e <display_tap_count_overlay+0x76>
            sprintf(buffer, "%u/s", whole);
 800073e:	197b      	adds	r3, r7, r5
 8000740:	881a      	ldrh	r2, [r3, #0]
 8000742:	4914      	ldr	r1, [pc, #80]	@ (8000794 <display_tap_count_overlay+0xbc>)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	0018      	movs	r0, r3
 8000748:	f003 fe64 	bl	8004414 <siprintf>
 800074c:	e009      	b.n	8000762 <display_tap_count_overlay+0x8a>
        } else {
            sprintf(buffer, "%u.%u/s", whole, decimal);
 800074e:	2326      	movs	r3, #38	@ 0x26
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	881a      	ldrh	r2, [r3, #0]
 8000754:	2324      	movs	r3, #36	@ 0x24
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	490f      	ldr	r1, [pc, #60]	@ (8000798 <display_tap_count_overlay+0xc0>)
 800075c:	1d38      	adds	r0, r7, #4
 800075e:	f003 fe59 	bl	8004414 <siprintf>
        }

        ssd1306_SetCursor(95, 1);
 8000762:	2101      	movs	r1, #1
 8000764:	205f      	movs	r0, #95	@ 0x5f
 8000766:	f001 f9cb 	bl	8001b00 <ssd1306_SetCursor>
        ssd1306_WriteString(buffer, ComicSans_11x12, White);
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <display_tap_count_overlay+0xb4>)
 800076c:	1d38      	adds	r0, r7, #4
 800076e:	2201      	movs	r2, #1
 8000770:	9200      	str	r2, [sp, #0]
 8000772:	6819      	ldr	r1, [r3, #0]
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f001 f996 	bl	8001aa8 <ssd1306_WriteString>
    }
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b00a      	add	sp, #40	@ 0x28
 8000782:	bdb0      	pop	{r4, r5, r7, pc}
 8000784:	200001c0 	.word	0x200001c0
 8000788:	08004d78 	.word	0x08004d78
 800078c:	08009358 	.word	0x08009358
 8000790:	20000242 	.word	0x20000242
 8000794:	08004d7c 	.word	0x08004d7c
 8000798:	08004d84 	.word	0x08004d84

0800079c <display_saved_indicator>:

// Display saved indicator
void display_saved_indicator(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af02      	add	r7, sp, #8
    // Display "saved!" in bottom right corner
    ssd1306_SetCursor(80, 52);
 80007a2:	2134      	movs	r1, #52	@ 0x34
 80007a4:	2050      	movs	r0, #80	@ 0x50
 80007a6:	f001 f9ab 	bl	8001b00 <ssd1306_SetCursor>
    ssd1306_WriteString("saved!", ComicSans_11x12, White);
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <display_saved_indicator+0x28>)
 80007ac:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <display_saved_indicator+0x2c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	9200      	str	r2, [sp, #0]
 80007b2:	6819      	ldr	r1, [r3, #0]
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f001 f976 	bl	8001aa8 <ssd1306_WriteString>
}
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	08009358 	.word	0x08009358
 80007c8:	08004d8c 	.word	0x08004d8c

080007cc <update_display_with_overlays>:

// Update display with overlays
void update_display_with_overlays(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    // Draw overlay on top if enabled
    if (settings.display_mode) {
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <update_display_with_overlays+0x28>)
 80007d2:	7b5b      	ldrb	r3, [r3, #13]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <update_display_with_overlays+0x10>
        display_tap_count_overlay();
 80007d8:	f7ff ff7e 	bl	80006d8 <display_tap_count_overlay>
    }

    // Show saved indicator if active
    if (show_saved_indicator) {
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <update_display_with_overlays+0x2c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <update_display_with_overlays+0x1c>
        display_saved_indicator();
 80007e4:	f7ff ffda 	bl	800079c <display_saved_indicator>
    }

    ssd1306_UpdateScreen();
 80007e8:	f001 f81c 	bl	8001824 <ssd1306_UpdateScreen>
}
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	200001c0 	.word	0x200001c0
 80007f8:	200001e8 	.word	0x200001e8

080007fc <redraw_current_frame>:

// Redraw current frame with overlays
void redraw_current_frame(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
    if (current_frame != NULL) {
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <redraw_current_frame+0x20>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d006      	beq.n	8000816 <redraw_current_frame+0x1a>
        draw_animation(current_frame);
 8000808:	4b04      	ldr	r3, [pc, #16]	@ (800081c <redraw_current_frame+0x20>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	0018      	movs	r0, r3
 800080e:	f7ff ff07 	bl	8000620 <draw_animation>
        update_display_with_overlays();
 8000812:	f7ff ffdb 	bl	80007cc <update_display_with_overlays>
    }
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200001ec 	.word	0x200001ec

08000820 <save_settings>:

// Save all settings to flash
void save_settings(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
    // Update checksum
    settings.checksum = calculate_checksum(&settings);
 8000826:	4b26      	ldr	r3, [pc, #152]	@ (80008c0 <save_settings+0xa0>)
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff fde9 	bl	8000400 <calculate_checksum>
 800082e:	0002      	movs	r2, r0
 8000830:	4b23      	ldr	r3, [pc, #140]	@ (80008c0 <save_settings+0xa0>)
 8000832:	611a      	str	r2, [r3, #16]

    HAL_FLASH_Unlock();
 8000834:	f001 fd92 	bl	800235c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError;

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000838:	2108      	movs	r1, #8
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2202      	movs	r2, #2
 800083e:	601a      	str	r2, [r3, #0]
    EraseInitStruct.Page = 31;  // Last page for 64KB device
 8000840:	187b      	adds	r3, r7, r1
 8000842:	221f      	movs	r2, #31
 8000844:	609a      	str	r2, [r3, #8]
    EraseInitStruct.NbPages = 1;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2201      	movs	r2, #1
 800084a:	60da      	str	r2, [r3, #12]

    HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800084c:	1d3a      	adds	r2, r7, #4
 800084e:	187b      	adds	r3, r7, r1
 8000850:	0011      	movs	r1, r2
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fe36 	bl	80024c4 <HAL_FLASHEx_Erase>

    // Write entire structure using doubleword programming
    uint64_t *data = (uint64_t*)&settings;
 8000858:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <save_settings+0xa0>)
 800085a:	61fb      	str	r3, [r7, #28]
    uint32_t address = FLASH_USER_START_ADDR;
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <save_settings+0xa4>)
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Calculate number of doublewords to write
    int doublewords = (sizeof(Settings_t) + 7) / 8;  // Round up to nearest 8 bytes
 8000860:	2303      	movs	r3, #3
 8000862:	61bb      	str	r3, [r7, #24]

    for(int i = 0; i < doublewords; i++) {
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
 8000868:	e00f      	b.n	800088a <save_settings+0x6a>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data[i]);
 800086a:	6a3b      	ldr	r3, [r7, #32]
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	69fa      	ldr	r2, [r7, #28]
 8000870:	18d3      	adds	r3, r2, r3
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000878:	2001      	movs	r0, #1
 800087a:	f001 fd21 	bl	80022c0 <HAL_FLASH_Program>
        address += 8;
 800087e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000880:	3308      	adds	r3, #8
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
    for(int i = 0; i < doublewords; i++) {
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	3301      	adds	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
 800088a:	6a3a      	ldr	r2, [r7, #32]
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	429a      	cmp	r2, r3
 8000890:	dbeb      	blt.n	800086a <save_settings+0x4a>
    }

    HAL_FLASH_Lock();
 8000892:	f001 fd87 	bl	80023a4 <HAL_FLASH_Lock>

    // Update last save time
    last_save_time = HAL_GetTick();
 8000896:	f001 fc07 	bl	80020a8 <HAL_GetTick>
 800089a:	0002      	movs	r2, r0
 800089c:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <save_settings+0xa8>)
 800089e:	601a      	str	r2, [r3, #0]
    data_changed = 0;  // Clear the changed flag
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <save_settings+0xac>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]

    // Trigger saved indicator
    show_saved_indicator = 1;
 80008a6:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <save_settings+0xb0>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
    saved_indicator_timer = HAL_GetTick();
 80008ac:	f001 fbfc 	bl	80020a8 <HAL_GetTick>
 80008b0:	0002      	movs	r2, r0
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <save_settings+0xb4>)
 80008b4:	601a      	str	r2, [r3, #0]
}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b00a      	add	sp, #40	@ 0x28
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	200001c0 	.word	0x200001c0
 80008c4:	0800f800 	.word	0x0800f800
 80008c8:	200001dc 	.word	0x200001dc
 80008cc:	200001e0 	.word	0x200001e0
 80008d0:	200001e8 	.word	0x200001e8
 80008d4:	200001e4 	.word	0x200001e4

080008d8 <load_settings>:

// Load all settings from flash
void load_settings(void) {
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b08b      	sub	sp, #44	@ 0x2c
 80008dc:	af00      	add	r7, sp, #0
    Settings_t loaded_settings;

    // Read entire structure from flash
    uint64_t *dest = (uint64_t*)&loaded_settings;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	623b      	str	r3, [r7, #32]
    uint64_t *src = (uint64_t*)FLASH_USER_START_ADDR;
 80008e2:	4b22      	ldr	r3, [pc, #136]	@ (800096c <load_settings+0x94>)
 80008e4:	61fb      	str	r3, [r7, #28]

    int doublewords = (sizeof(Settings_t) + 7) / 8;
 80008e6:	2303      	movs	r3, #3
 80008e8:	61bb      	str	r3, [r7, #24]

    for(int i = 0; i < doublewords; i++) {
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80008ee:	e00e      	b.n	800090e <load_settings+0x36>
        dest[i] = src[i];
 80008f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	69fa      	ldr	r2, [r7, #28]
 80008f6:	18d3      	adds	r3, r2, r3
 80008f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008fa:	00d2      	lsls	r2, r2, #3
 80008fc:	6a39      	ldr	r1, [r7, #32]
 80008fe:	1889      	adds	r1, r1, r2
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	600a      	str	r2, [r1, #0]
 8000906:	604b      	str	r3, [r1, #4]
    for(int i = 0; i < doublewords; i++) {
 8000908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800090a:	3301      	adds	r3, #1
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
 800090e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	429a      	cmp	r2, r3
 8000914:	dbec      	blt.n	80008f0 <load_settings+0x18>
    }

    // Verify checksum
    if(loaded_settings.checksum == calculate_checksum(&loaded_settings) &&
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	691c      	ldr	r4, [r3, #16]
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fd6f 	bl	8000400 <calculate_checksum>
 8000922:	0003      	movs	r3, r0
 8000924:	429c      	cmp	r4, r3
 8000926:	d10a      	bne.n	800093e <load_settings+0x66>
       loaded_settings.checksum != 0xFFFFFFFF) {
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	691b      	ldr	r3, [r3, #16]
    if(loaded_settings.checksum == calculate_checksum(&loaded_settings) &&
 800092c:	3301      	adds	r3, #1
 800092e:	d006      	beq.n	800093e <load_settings+0x66>
        // Valid data, copy to working structure
        settings = loaded_settings;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <load_settings+0x98>)
 8000932:	1d3a      	adds	r2, r7, #4
 8000934:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000936:	c313      	stmia	r3!, {r0, r1, r4}
 8000938:	ca03      	ldmia	r2!, {r0, r1}
 800093a:	c303      	stmia	r3!, {r0, r1}
 800093c:	e012      	b.n	8000964 <load_settings+0x8c>
    } else {
        // Invalid or no data, use defaults
        settings.total_taps = 0;
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <load_settings+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
        settings.left_taps = 0;
 8000944:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <load_settings+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
        settings.right_taps = 0;
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <load_settings+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
        settings.display_inverted = 0;
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <load_settings+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	731a      	strb	r2, [r3, #12]
        settings.display_mode = 0;
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <load_settings+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	735a      	strb	r2, [r3, #13]
        settings.checksum = 0;
 800095c:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <load_settings+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
    }
}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b00b      	add	sp, #44	@ 0x2c
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	0800f800 	.word	0x0800f800
 8000970:	200001c0 	.word	0x200001c0

08000974 <reset_all_settings>:

// Reset all counters and settings
void reset_all_settings(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
    // Don't do flash operations too early
    if (HAL_GetTick() < 100) {
 800097a:	f001 fb95 	bl	80020a8 <HAL_GetTick>
 800097e:	0003      	movs	r3, r0
 8000980:	2b63      	cmp	r3, #99	@ 0x63
 8000982:	d802      	bhi.n	800098a <reset_all_settings+0x16>
        HAL_Delay(100);  // Ensure system is stable
 8000984:	2064      	movs	r0, #100	@ 0x64
 8000986:	f001 fb99 	bl	80020bc <HAL_Delay>
    }

    // Set values to defaults
    settings.total_taps = 0;
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <reset_all_settings+0x70>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
    settings.left_taps = 0;
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <reset_all_settings+0x70>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
    settings.right_taps = 0;
 8000996:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <reset_all_settings+0x70>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
    settings.display_inverted = 0;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <reset_all_settings+0x70>)
 800099e:	2200      	movs	r2, #0
 80009a0:	731a      	strb	r2, [r3, #12]
    settings.display_mode = 1;
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <reset_all_settings+0x70>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	735a      	strb	r2, [r3, #13]

    // Clear tap history
    for (int i = 0; i < TAP_HISTORY_SIZE; i++) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	e007      	b.n	80009be <reset_all_settings+0x4a>
        tap_timestamps[i] = 0;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <reset_all_settings+0x74>)
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	2100      	movs	r1, #0
 80009b6:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < TAP_HISTORY_SIZE; i++) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b13      	cmp	r3, #19
 80009c2:	ddf4      	ble.n	80009ae <reset_all_settings+0x3a>
    }
    tap_history_index = 0;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <reset_all_settings+0x78>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
    current_tap_speed_x10 = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <reset_all_settings+0x7c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	801a      	strh	r2, [r3, #0]
    angry_mode_timer = 0;  // Clear angry mode timer
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <reset_all_settings+0x80>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]

    // Save the reset settings
    save_settings();
 80009d6:	f7ff ff23 	bl	8000820 <save_settings>
}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	200001c0 	.word	0x200001c0
 80009e8:	200001f0 	.word	0x200001f0
 80009ec:	20000240 	.word	0x20000240
 80009f0:	20000242 	.word	0x20000242
 80009f4:	20000244 	.word	0x20000244

080009f8 <check_and_save>:

// Check if it's time to save to flash
void check_and_save(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    if (data_changed && (HAL_GetTick() - last_save_time >= FLASH_SAVE_INTERVAL)) {
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <check_and_save+0x28>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00a      	beq.n	8000a1a <check_and_save+0x22>
 8000a04:	f001 fb50 	bl	80020a8 <HAL_GetTick>
 8000a08:	0002      	movs	r2, r0
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <check_and_save+0x2c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <check_and_save+0x30>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d901      	bls.n	8000a1a <check_and_save+0x22>
        save_settings();
 8000a16:	f7ff ff03 	bl	8000820 <save_settings>
    }
}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200001e0 	.word	0x200001e0
 8000a24:	200001dc 	.word	0x200001dc
 8000a28:	0000752f 	.word	0x0000752f

08000a2c <force_save>:

// Force save (for important events)
void force_save(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    if (data_changed) {
 8000a30:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <force_save+0x18>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <force_save+0x10>
        save_settings();
 8000a38:	f7ff fef2 	bl	8000820 <save_settings>
    }
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	200001e0 	.word	0x200001e0

08000a48 <update_saved_indicator>:

// Update saved indicator visibility
void update_saved_indicator(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    if (show_saved_indicator && (HAL_GetTick() - saved_indicator_timer >= SAVED_DISPLAY_TIME)) {
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <update_saved_indicator+0x2c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d00c      	beq.n	8000a6e <update_saved_indicator+0x26>
 8000a54:	f001 fb28 	bl	80020a8 <HAL_GetTick>
 8000a58:	0002      	movs	r2, r0
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <update_saved_indicator+0x30>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	1ad2      	subs	r2, r2, r3
 8000a60:	23fa      	movs	r3, #250	@ 0xfa
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d302      	bcc.n	8000a6e <update_saved_indicator+0x26>
        show_saved_indicator = 0;
 8000a68:	4b02      	ldr	r3, [pc, #8]	@ (8000a74 <update_saved_indicator+0x2c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
    }
}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200001e8 	.word	0x200001e8
 8000a78:	200001e4 	.word	0x200001e4

08000a7c <handle_display_mode_switch>:

// Handle display mode switching (both buttons held)
uint8_t handle_display_mode_switch(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    if (BOTH_PRESSED) {
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <handle_display_mode_switch+0x74>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d12a      	bne.n	8000ade <handle_display_mode_switch+0x62>
 8000a88:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <handle_display_mode_switch+0x78>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d126      	bne.n	8000ade <handle_display_mode_switch+0x62>
        if (both_pressed_timer == 0) {
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <handle_display_mode_switch+0x7c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d105      	bne.n	8000aa4 <handle_display_mode_switch+0x28>
            both_pressed_timer = HAL_GetTick();
 8000a98:	f001 fb06 	bl	80020a8 <HAL_GetTick>
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <handle_display_mode_switch+0x7c>)
 8000aa0:	601a      	str	r2, [r3, #0]
        if (both_pressed_timer == 0) {
 8000aa2:	e020      	b.n	8000ae6 <handle_display_mode_switch+0x6a>
        } else if (HAL_GetTick() - both_pressed_timer >= MODE_SWITCH_TIME) {
 8000aa4:	f001 fb00 	bl	80020a8 <HAL_GetTick>
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <handle_display_mode_switch+0x7c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <handle_display_mode_switch+0x80>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d917      	bls.n	8000ae6 <handle_display_mode_switch+0x6a>
            settings.display_mode = !settings.display_mode;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <handle_display_mode_switch+0x84>)
 8000ab8:	7b5b      	ldrb	r3, [r3, #13]
 8000aba:	425a      	negs	r2, r3
 8000abc:	4153      	adcs	r3, r2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <handle_display_mode_switch+0x84>)
 8000ac4:	735a      	strb	r2, [r3, #13]
            both_pressed_timer = 0;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <handle_display_mode_switch+0x7c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
            data_changed = 1;  // Mark data as changed
 8000acc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <handle_display_mode_switch+0x88>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]

            // Immediately update display to show/hide overlay
            redraw_current_frame();
 8000ad2:	f7ff fe93 	bl	80007fc <redraw_current_frame>

            // Force save when switching modes
            force_save();
 8000ad6:	f7ff ffa9 	bl	8000a2c <force_save>

            return 1; // Mode switched
 8000ada:	2301      	movs	r3, #1
 8000adc:	e005      	b.n	8000aea <handle_display_mode_switch+0x6e>
        }
    } else {
        both_pressed_timer = 0;
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <handle_display_mode_switch+0x7c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e000      	b.n	8000ae8 <handle_display_mode_switch+0x6c>
        if (both_pressed_timer == 0) {
 8000ae6:	46c0      	nop			@ (mov r8, r8)
    }
    return 0; // No mode switch
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	0018      	movs	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200001b4 	.word	0x200001b4
 8000af4:	200001b8 	.word	0x200001b8
 8000af8:	200001d4 	.word	0x200001d4
 8000afc:	000009c3 	.word	0x000009c3
 8000b00:	200001c0 	.word	0x200001c0
 8000b04:	200001e0 	.word	0x200001e0

08000b08 <handle_invert_toggle>:

// Handle invert toggle (left button held)
uint8_t handle_invert_toggle(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
    if (LEFT_PRESSED && !RIGHT_PRESSED && both_pressed_timer == 0) {
 8000b0c:	4b22      	ldr	r3, [pc, #136]	@ (8000b98 <handle_invert_toggle+0x90>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d138      	bne.n	8000b86 <handle_invert_toggle+0x7e>
 8000b14:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <handle_invert_toggle+0x94>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d134      	bne.n	8000b86 <handle_invert_toggle+0x7e>
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <handle_invert_toggle+0x90>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d103      	bne.n	8000b2c <handle_invert_toggle+0x24>
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <handle_invert_toggle+0x94>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d02c      	beq.n	8000b86 <handle_invert_toggle+0x7e>
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <handle_invert_toggle+0x98>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d128      	bne.n	8000b86 <handle_invert_toggle+0x7e>
        if (invert_timer == 0) {
 8000b34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <handle_invert_toggle+0x9c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d105      	bne.n	8000b48 <handle_invert_toggle+0x40>
            invert_timer = HAL_GetTick();
 8000b3c:	f001 fab4 	bl	80020a8 <HAL_GetTick>
 8000b40:	0002      	movs	r2, r0
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <handle_invert_toggle+0x9c>)
 8000b44:	601a      	str	r2, [r3, #0]
        if (invert_timer == 0) {
 8000b46:	e022      	b.n	8000b8e <handle_invert_toggle+0x86>
        } else if (HAL_GetTick() - invert_timer >= INVERT_HOLD_TIME) {
 8000b48:	f001 faae 	bl	80020a8 <HAL_GetTick>
 8000b4c:	0002      	movs	r2, r0
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <handle_invert_toggle+0x9c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	1ad2      	subs	r2, r2, r3
 8000b54:	23fa      	movs	r3, #250	@ 0xfa
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d318      	bcc.n	8000b8e <handle_invert_toggle+0x86>
            toggle_display_invert();
 8000b5c:	f7ff fd2a 	bl	80005b4 <toggle_display_invert>
            invert_timer = 0;
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <handle_invert_toggle+0x9c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]

            // Wait for button release
            while(LEFT_PRESSED) {
 8000b66:	e004      	b.n	8000b72 <handle_invert_toggle+0x6a>
                HAL_Delay(10);
 8000b68:	200a      	movs	r0, #10
 8000b6a:	f001 faa7 	bl	80020bc <HAL_Delay>
                readPins();
 8000b6e:	f7ff fd95 	bl	800069c <readPins>
            while(LEFT_PRESSED) {
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <handle_invert_toggle+0x90>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d103      	bne.n	8000b82 <handle_invert_toggle+0x7a>
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <handle_invert_toggle+0x94>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d0f2      	beq.n	8000b68 <handle_invert_toggle+0x60>
            }
            return 1; // Inverted
 8000b82:	2301      	movs	r3, #1
 8000b84:	e005      	b.n	8000b92 <handle_invert_toggle+0x8a>
        }
    } else {
        invert_timer = 0;
 8000b86:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <handle_invert_toggle+0x9c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	e000      	b.n	8000b90 <handle_invert_toggle+0x88>
        if (invert_timer == 0) {
 8000b8e:	46c0      	nop			@ (mov r8, r8)
    }
    return 0; // No invert
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200001b4 	.word	0x200001b4
 8000b9c:	200001b8 	.word	0x200001b8
 8000ba0:	200001d4 	.word	0x200001d4
 8000ba4:	200001d8 	.word	0x200001d8

08000ba8 <register_tap>:

// Register a tap and increment counters
void register_tap(uint8_t is_left) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	0002      	movs	r2, r0
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	701a      	strb	r2, [r3, #0]
    if (is_left) {
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <register_tap+0x20>
        settings.left_taps++;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <register_tap+0x48>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <register_tap+0x48>)
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	e004      	b.n	8000bd2 <register_tap+0x2a>
    } else {
        settings.right_taps++;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <register_tap+0x48>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	1c5a      	adds	r2, r3, #1
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <register_tap+0x48>)
 8000bd0:	609a      	str	r2, [r3, #8]
    }
    settings.total_taps++;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <register_tap+0x48>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <register_tap+0x48>)
 8000bda:	601a      	str	r2, [r3, #0]
    data_changed = 1;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <register_tap+0x4c>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]

    // Record timestamp for speed calculation
    record_tap_timestamp();
 8000be2:	f7ff fcc7 	bl	8000574 <record_tap_timestamp>
}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	200001c0 	.word	0x200001c0
 8000bf4:	200001e0 	.word	0x200001e0

08000bf8 <handle_tap_decay>:

// Handle tap animations and decay
void handle_tap_decay(int32_t *tap_left_cntr, int32_t *tap_right_cntr) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]

    if(*tap_left_cntr > 0){
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	dd13      	ble.n	8000c32 <handle_tap_decay+0x3a>
        if(HAL_GetTick() - *tap_left_cntr > TAP_DECAY_TIME) {
 8000c0a:	f001 fa4d 	bl	80020a8 <HAL_GetTick>
 8000c0e:	0002      	movs	r2, r0
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2bc8      	cmp	r3, #200	@ 0xc8
 8000c18:	d907      	bls.n	8000c2a <handle_tap_decay+0x32>
            draw_animation_erase(&img_tap_left);
 8000c1a:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <handle_tap_decay+0x74>)
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff fd19 	bl	8000654 <draw_animation_erase>
            *tap_left_cntr = 0;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	e003      	b.n	8000c32 <handle_tap_decay+0x3a>
        }
        else{
            draw_animation_transparent(&img_tap_left);
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <handle_tap_decay+0x74>)
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff fd23 	bl	8000678 <draw_animation_transparent>
        }
    }
    if(*tap_right_cntr > 0){
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	dd13      	ble.n	8000c62 <handle_tap_decay+0x6a>
        if(HAL_GetTick() - *tap_right_cntr > TAP_DECAY_TIME) {
 8000c3a:	f001 fa35 	bl	80020a8 <HAL_GetTick>
 8000c3e:	0002      	movs	r2, r0
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2bc8      	cmp	r3, #200	@ 0xc8
 8000c48:	d907      	bls.n	8000c5a <handle_tap_decay+0x62>
            draw_animation_erase(&img_tap_right);
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <handle_tap_decay+0x78>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fd01 	bl	8000654 <draw_animation_erase>
            *tap_right_cntr = 0;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
        }
        else{
            draw_animation_transparent(&img_tap_right);
        }
    }
}
 8000c58:	e003      	b.n	8000c62 <handle_tap_decay+0x6a>
            draw_animation_transparent(&img_tap_right);
 8000c5a:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <handle_tap_decay+0x78>)
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff fd0b 	bl	8000678 <draw_animation_transparent>
}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	08007210 	.word	0x08007210
 8000c70:	08007610 	.word	0x08007610

08000c74 <handle_paw_animations>:

// Handle paw animations based on button states
void handle_paw_animations(uint8_t *left_state, uint8_t *right_state,
                          int32_t *tap_left_cntr, int32_t *tap_right_cntr,
                          int32_t *idle_cntr) {
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	603b      	str	r3, [r7, #0]
    *idle_cntr = 0;
 8000c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]

    uint8_t angry = use_angry_mode();
 8000c88:	2317      	movs	r3, #23
 8000c8a:	18fc      	adds	r4, r7, r3
 8000c8c:	f7ff fbe0 	bl	8000450 <use_angry_mode>
 8000c90:	0003      	movs	r3, r0
 8000c92:	7023      	strb	r3, [r4, #0]
    if((BOTH_PRESSED) && ((*left_state | *right_state) == 0 || (*left_state ^ *right_state) == 1)){
 8000c94:	4b5e      	ldr	r3, [pc, #376]	@ (8000e10 <handle_paw_animations+0x19c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d147      	bne.n	8000d2c <handle_paw_animations+0xb8>
 8000c9c:	4b5d      	ldr	r3, [pc, #372]	@ (8000e14 <handle_paw_animations+0x1a0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d143      	bne.n	8000d2c <handle_paw_animations+0xb8>
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d007      	beq.n	8000cc4 <handle_paw_animations+0x50>
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4053      	eors	r3, r2
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d133      	bne.n	8000d2c <handle_paw_animations+0xb8>
        draw_animation(angry ? &img_both_down_alt_angry : &img_both_down_alt);
 8000cc4:	2317      	movs	r3, #23
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <handle_paw_animations+0x5e>
 8000cce:	4b52      	ldr	r3, [pc, #328]	@ (8000e18 <handle_paw_animations+0x1a4>)
 8000cd0:	e000      	b.n	8000cd4 <handle_paw_animations+0x60>
 8000cd2:	4b52      	ldr	r3, [pc, #328]	@ (8000e1c <handle_paw_animations+0x1a8>)
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff fca3 	bl	8000620 <draw_animation>
        if(!*right_state){
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10c      	bne.n	8000cfc <handle_paw_animations+0x88>
            draw_animation_transparent(&img_tap_right);
 8000ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8000e20 <handle_paw_animations+0x1ac>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fcc7 	bl	8000678 <draw_animation_transparent>
            *tap_right_cntr = HAL_GetTick();
 8000cea:	f001 f9dd 	bl	80020a8 <HAL_GetTick>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	601a      	str	r2, [r3, #0]
            register_tap(0); // Right tap
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ff56 	bl	8000ba8 <register_tap>
        }
        if(!*left_state){
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d10c      	bne.n	8000d1e <handle_paw_animations+0xaa>
            draw_animation_transparent(&img_tap_left);
 8000d04:	4b47      	ldr	r3, [pc, #284]	@ (8000e24 <handle_paw_animations+0x1b0>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff fcb6 	bl	8000678 <draw_animation_transparent>
            *tap_left_cntr = HAL_GetTick();
 8000d0c:	f001 f9cc 	bl	80020a8 <HAL_GetTick>
 8000d10:	0003      	movs	r3, r0
 8000d12:	001a      	movs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	601a      	str	r2, [r3, #0]
            register_tap(1); // Left tap
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f7ff ff45 	bl	8000ba8 <register_tap>
        }
        *right_state = 1;
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
        *left_state = 1;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e06d      	b.n	8000e08 <handle_paw_animations+0x194>
    }
    else if(RIGHT_PRESSED){
 8000d2c:	4b38      	ldr	r3, [pc, #224]	@ (8000e10 <handle_paw_animations+0x19c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d132      	bne.n	8000d9a <handle_paw_animations+0x126>
 8000d34:	4b37      	ldr	r3, [pc, #220]	@ (8000e14 <handle_paw_animations+0x1a0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d12e      	bne.n	8000d9a <handle_paw_animations+0x126>
        if(*right_state == 0 || *left_state == 1){
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <handle_paw_animations+0xd8>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d11e      	bne.n	8000d8a <handle_paw_animations+0x116>
            draw_animation(angry ? &img_right_down_alt_angry : &img_right_down_alt);
 8000d4c:	2317      	movs	r3, #23
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <handle_paw_animations+0xe6>
 8000d56:	4b34      	ldr	r3, [pc, #208]	@ (8000e28 <handle_paw_animations+0x1b4>)
 8000d58:	e000      	b.n	8000d5c <handle_paw_animations+0xe8>
 8000d5a:	4b34      	ldr	r3, [pc, #208]	@ (8000e2c <handle_paw_animations+0x1b8>)
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff fc5f 	bl	8000620 <draw_animation>
            if(!*right_state){
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10c      	bne.n	8000d84 <handle_paw_animations+0x110>
                draw_animation_transparent(&img_tap_right);
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e20 <handle_paw_animations+0x1ac>)
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fc83 	bl	8000678 <draw_animation_transparent>
                *tap_right_cntr = HAL_GetTick();
 8000d72:	f001 f999 	bl	80020a8 <HAL_GetTick>
 8000d76:	0003      	movs	r3, r0
 8000d78:	001a      	movs	r2, r3
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	601a      	str	r2, [r3, #0]
                register_tap(0); // Right tap
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff ff12 	bl	8000ba8 <register_tap>
            }
            *right_state = 1;
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
        }
        if(*left_state)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d03a      	beq.n	8000e08 <handle_paw_animations+0x194>
            *left_state = 0;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
        if(*left_state)
 8000d98:	e036      	b.n	8000e08 <handle_paw_animations+0x194>
    }
    else if(LEFT_PRESSED){
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <handle_paw_animations+0x19c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d132      	bne.n	8000e08 <handle_paw_animations+0x194>
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <handle_paw_animations+0x1a0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d12e      	bne.n	8000e08 <handle_paw_animations+0x194>
        if(*left_state == 0 || *right_state == 1){
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <handle_paw_animations+0x146>
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d11e      	bne.n	8000df8 <handle_paw_animations+0x184>
            draw_animation(angry ? &img_left_down_alt_angry : &img_left_down_alt);
 8000dba:	2317      	movs	r3, #23
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <handle_paw_animations+0x154>
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <handle_paw_animations+0x1bc>)
 8000dc6:	e000      	b.n	8000dca <handle_paw_animations+0x156>
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <handle_paw_animations+0x1c0>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff fc28 	bl	8000620 <draw_animation>
            if(!*left_state){
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10c      	bne.n	8000df2 <handle_paw_animations+0x17e>
                draw_animation_transparent(&img_tap_left);
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <handle_paw_animations+0x1b0>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff fc4c 	bl	8000678 <draw_animation_transparent>
                *tap_left_cntr = HAL_GetTick();
 8000de0:	f001 f962 	bl	80020a8 <HAL_GetTick>
 8000de4:	0003      	movs	r3, r0
 8000de6:	001a      	movs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	601a      	str	r2, [r3, #0]
                register_tap(1); // Left tap
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff fedb 	bl	8000ba8 <register_tap>
            }
            *left_state = 1;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
        }
        if(*right_state)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <handle_paw_animations+0x194>
            *right_state = 0;
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
    }
}
 8000e06:	e7ff      	b.n	8000e08 <handle_paw_animations+0x194>
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b007      	add	sp, #28
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	200001b4 	.word	0x200001b4
 8000e14:	200001b8 	.word	0x200001b8
 8000e18:	08007a10 	.word	0x08007a10
 8000e1c:	08006610 	.word	0x08006610
 8000e20:	08007610 	.word	0x08007610
 8000e24:	08007210 	.word	0x08007210
 8000e28:	08008610 	.word	0x08008610
 8000e2c:	08006e10 	.word	0x08006e10
 8000e30:	08008210 	.word	0x08008210
 8000e34:	08006a10 	.word	0x08006a10

08000e38 <check_idle_transition>:

// Check if should return to idle state
uint8_t check_idle_transition(int32_t *idle_cntr, uint8_t *left_state, uint8_t *right_state) {
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
    if(NONE_PRESSED){
 8000e44:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <check_idle_transition+0x98>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d13c      	bne.n	8000ec6 <check_idle_transition+0x8e>
 8000e4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ed4 <check_idle_transition+0x9c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d138      	bne.n	8000ec6 <check_idle_transition+0x8e>
        uint8_t angry = use_angry_mode();
 8000e54:	2517      	movs	r5, #23
 8000e56:	197c      	adds	r4, r7, r5
 8000e58:	f7ff fafa 	bl	8000450 <use_angry_mode>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	7023      	strb	r3, [r4, #0]
        draw_animation(angry ? &img_both_up_angry : &img_both_up);
 8000e60:	197b      	adds	r3, r7, r5
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <check_idle_transition+0x34>
 8000e68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <check_idle_transition+0xa0>)
 8000e6a:	e000      	b.n	8000e6e <check_idle_transition+0x36>
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <check_idle_transition+0xa4>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff fbd6 	bl	8000620 <draw_animation>
        if(*idle_cntr == 0){
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d105      	bne.n	8000e88 <check_idle_transition+0x50>
            *idle_cntr = HAL_GetTick();
 8000e7c:	f001 f914 	bl	80020a8 <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	001a      	movs	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	601a      	str	r2, [r3, #0]
        }
        if(HAL_GetTick() - *idle_cntr >= IDLE_TIME){
 8000e88:	f001 f90e 	bl	80020a8 <HAL_GetTick>
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	1ad2      	subs	r2, r2, r3
 8000e94:	23fa      	movs	r3, #250	@ 0xfa
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d306      	bcc.n	8000eaa <check_idle_transition+0x72>
            *idle_cntr = 0;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
            // Force save before going to idle
            force_save();
 8000ea2:	f7ff fdc3 	bl	8000a2c <force_save>
            return 1; // Should transition to idle
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <check_idle_transition+0x90>
        }
        if(*left_state)
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <check_idle_transition+0x80>
            *left_state = 0;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
        if(*right_state)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <check_idle_transition+0x8e>
            *right_state = 0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
    }
    return 0; // Stay in current state
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b006      	add	sp, #24
 8000ece:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed0:	200001b4 	.word	0x200001b4
 8000ed4:	200001b8 	.word	0x200001b8
 8000ed8:	08007e10 	.word	0x08007e10
 8000edc:	08004e10 	.word	0x08004e10

08000ee0 <handle_reset>:

void handle_reset(){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af02      	add	r7, sp, #8
    // Show confirmation prompt
    ssd1306_SetCursor(27, 10);  // x = 9
 8000ee6:	210a      	movs	r1, #10
 8000ee8:	201b      	movs	r0, #27
 8000eea:	f000 fe09 	bl	8001b00 <ssd1306_SetCursor>
    ssd1306_WriteString("RESET ALL?", ComicSans_11x12, White);
 8000eee:	4b51      	ldr	r3, [pc, #324]	@ (8001034 <handle_reset+0x154>)
 8000ef0:	4851      	ldr	r0, [pc, #324]	@ (8001038 <handle_reset+0x158>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	9200      	str	r2, [sp, #0]
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f000 fdd4 	bl	8001aa8 <ssd1306_WriteString>
    ssd1306_SetCursor(27, 26);  // x = 3
 8000f00:	211a      	movs	r1, #26
 8000f02:	201b      	movs	r0, #27
 8000f04:	f000 fdfc 	bl	8001b00 <ssd1306_SetCursor>
    ssd1306_WriteString("Press again", ComicSans_11x12, White);
 8000f08:	4b4a      	ldr	r3, [pc, #296]	@ (8001034 <handle_reset+0x154>)
 8000f0a:	484c      	ldr	r0, [pc, #304]	@ (800103c <handle_reset+0x15c>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	9200      	str	r2, [sp, #0]
 8000f10:	6819      	ldr	r1, [r3, #0]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f000 fdc7 	bl	8001aa8 <ssd1306_WriteString>
    ssd1306_SetCursor(27, 42);  // x = 9
 8000f1a:	212a      	movs	r1, #42	@ 0x2a
 8000f1c:	201b      	movs	r0, #27
 8000f1e:	f000 fdef 	bl	8001b00 <ssd1306_SetCursor>
    ssd1306_WriteString("to confirm", ComicSans_11x12, White);
 8000f22:	4b44      	ldr	r3, [pc, #272]	@ (8001034 <handle_reset+0x154>)
 8000f24:	4846      	ldr	r0, [pc, #280]	@ (8001040 <handle_reset+0x160>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	9200      	str	r2, [sp, #0]
 8000f2a:	6819      	ldr	r1, [r3, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f000 fdba 	bl	8001aa8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000f34:	f000 fc76 	bl	8001824 <ssd1306_UpdateScreen>
    // Wait for button release
    while(RIGHT_PRESSED) {
 8000f38:	e004      	b.n	8000f44 <handle_reset+0x64>
        HAL_Delay(10);
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f001 f8be 	bl	80020bc <HAL_Delay>
        readPins();
 8000f40:	f7ff fbac 	bl	800069c <readPins>
    while(RIGHT_PRESSED) {
 8000f44:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <handle_reset+0x164>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d103      	bne.n	8000f54 <handle_reset+0x74>
 8000f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8001048 <handle_reset+0x168>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f2      	beq.n	8000f3a <handle_reset+0x5a>
    }

    // Wait for confirmation press
    uint32_t confirm_start = HAL_GetTick();
 8000f54:	f001 f8a8 	bl	80020a8 <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	603b      	str	r3, [r7, #0]
    uint8_t confirmed = 0;
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]

    while(HAL_GetTick() - confirm_start < RESET_CONFIRM_TIMEOUT) {
 8000f62:	e010      	b.n	8000f86 <handle_reset+0xa6>
        readPins();
 8000f64:	f7ff fb9a 	bl	800069c <readPins>

        if(RIGHT_PRESSED) {
 8000f68:	4b36      	ldr	r3, [pc, #216]	@ (8001044 <handle_reset+0x164>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d107      	bne.n	8000f80 <handle_reset+0xa0>
 8000f70:	4b35      	ldr	r3, [pc, #212]	@ (8001048 <handle_reset+0x168>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d103      	bne.n	8000f80 <handle_reset+0xa0>
            confirmed = 1;
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
            break;
 8000f7e:	e00a      	b.n	8000f96 <handle_reset+0xb6>
        }

        HAL_Delay(100);
 8000f80:	2064      	movs	r0, #100	@ 0x64
 8000f82:	f001 f89b 	bl	80020bc <HAL_Delay>
    while(HAL_GetTick() - confirm_start < RESET_CONFIRM_TIMEOUT) {
 8000f86:	f001 f88f 	bl	80020a8 <HAL_GetTick>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	4a2e      	ldr	r2, [pc, #184]	@ (800104c <handle_reset+0x16c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d9e6      	bls.n	8000f64 <handle_reset+0x84>
    }

    if(confirmed) {
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d02a      	beq.n	8000ff4 <handle_reset+0x114>
        // Perform reset
        reset_all_settings();
 8000f9e:	f7ff fce9 	bl	8000974 <reset_all_settings>
        ssd1306_InvertDisplay(0);  // Apply default display mode
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 fe92 	bl	8001ccc <ssd1306_InvertDisplay>

        // Show success feedback
        ssd1306_Fill(Black);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 fc21 	bl	80017f0 <ssd1306_Fill>
        ssd1306_SetCursor(35, 20);
 8000fae:	2114      	movs	r1, #20
 8000fb0:	2023      	movs	r0, #35	@ 0x23
 8000fb2:	f000 fda5 	bl	8001b00 <ssd1306_SetCursor>
        ssd1306_WriteString("RESET OK!", ComicSans_11x12, White);
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <handle_reset+0x154>)
 8000fb8:	4825      	ldr	r0, [pc, #148]	@ (8001050 <handle_reset+0x170>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	9200      	str	r2, [sp, #0]
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f000 fd70 	bl	8001aa8 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8000fc8:	f000 fc2c 	bl	8001824 <ssd1306_UpdateScreen>
        HAL_Delay(1000);
 8000fcc:	23fa      	movs	r3, #250	@ 0xfa
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f001 f873 	bl	80020bc <HAL_Delay>

        // Wait for button release
        while(RIGHT_PRESSED) {
 8000fd6:	e004      	b.n	8000fe2 <handle_reset+0x102>
            HAL_Delay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f001 f86f 	bl	80020bc <HAL_Delay>
            readPins();
 8000fde:	f7ff fb5d 	bl	800069c <readPins>
        while(RIGHT_PRESSED) {
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <handle_reset+0x164>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d11b      	bne.n	8001022 <handle_reset+0x142>
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <handle_reset+0x168>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0f2      	beq.n	8000fd8 <handle_reset+0xf8>
 8000ff2:	e016      	b.n	8001022 <handle_reset+0x142>
        }
    } else {
        // Cancelled
        ssd1306_Fill(Black);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fbfb 	bl	80017f0 <ssd1306_Fill>
        ssd1306_SetCursor(40, 25);
 8000ffa:	2119      	movs	r1, #25
 8000ffc:	2028      	movs	r0, #40	@ 0x28
 8000ffe:	f000 fd7f 	bl	8001b00 <ssd1306_SetCursor>
        ssd1306_WriteString("Cancelled", ComicSans_11x12, White);
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <handle_reset+0x154>)
 8001004:	4813      	ldr	r0, [pc, #76]	@ (8001054 <handle_reset+0x174>)
 8001006:	2201      	movs	r2, #1
 8001008:	9200      	str	r2, [sp, #0]
 800100a:	6819      	ldr	r1, [r3, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f000 fd4a 	bl	8001aa8 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8001014:	f000 fc06 	bl	8001824 <ssd1306_UpdateScreen>
        HAL_Delay(1000);
 8001018:	23fa      	movs	r3, #250	@ 0xfa
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	0018      	movs	r0, r3
 800101e:	f001 f84d 	bl	80020bc <HAL_Delay>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 fbe4 	bl	80017f0 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8001028:	f000 fbfc 	bl	8001824 <ssd1306_UpdateScreen>
}
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b002      	add	sp, #8
 8001032:	bd80      	pop	{r7, pc}
 8001034:	08009358 	.word	0x08009358
 8001038:	08004d94 	.word	0x08004d94
 800103c:	08004da0 	.word	0x08004da0
 8001040:	08004dac 	.word	0x08004dac
 8001044:	200001b4 	.word	0x200001b4
 8001048:	200001b8 	.word	0x200001b8
 800104c:	0000270f 	.word	0x0000270f
 8001050:	08004db8 	.word	0x08004db8
 8001054:	08004dc4 	.word	0x08004dc4

08001058 <handle_credits>:

void handle_credits(){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af02      	add	r7, sp, #8
    // Show confirmation prompt
    ssd1306_SetCursor(5, 10);  // x = 9
 800105e:	210a      	movs	r1, #10
 8001060:	2005      	movs	r0, #5
 8001062:	f000 fd4d 	bl	8001b00 <ssd1306_SetCursor>
    ssd1306_WriteString("Bongo Cat Fidget Toy", ComicSans_11x12, White);
 8001066:	4b35      	ldr	r3, [pc, #212]	@ (800113c <handle_credits+0xe4>)
 8001068:	4835      	ldr	r0, [pc, #212]	@ (8001140 <handle_credits+0xe8>)
 800106a:	2201      	movs	r2, #1
 800106c:	9200      	str	r2, [sp, #0]
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f000 fd18 	bl	8001aa8 <ssd1306_WriteString>
    ssd1306_SetCursor(13, 21);  // x = 3
 8001078:	2115      	movs	r1, #21
 800107a:	200d      	movs	r0, #13
 800107c:	f000 fd40 	bl	8001b00 <ssd1306_SetCursor>
    ssd1306_WriteString("by Afonso Muralha", ComicSans_11x12, White);
 8001080:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <handle_credits+0xe4>)
 8001082:	4830      	ldr	r0, [pc, #192]	@ (8001144 <handle_credits+0xec>)
 8001084:	2201      	movs	r2, #1
 8001086:	9200      	str	r2, [sp, #0]
 8001088:	6819      	ldr	r1, [r3, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f000 fd0b 	bl	8001aa8 <ssd1306_WriteString>
    ssd1306_SetCursor(13, 40);  // x = 9
 8001092:	2128      	movs	r1, #40	@ 0x28
 8001094:	200d      	movs	r0, #13
 8001096:	f000 fd33 	bl	8001b00 <ssd1306_SetCursor>
    ssd1306_WriteString("afonsomuralha.com", ComicSans_11x12, White);
 800109a:	4b28      	ldr	r3, [pc, #160]	@ (800113c <handle_credits+0xe4>)
 800109c:	482a      	ldr	r0, [pc, #168]	@ (8001148 <handle_credits+0xf0>)
 800109e:	2201      	movs	r2, #1
 80010a0:	9200      	str	r2, [sp, #0]
 80010a2:	6819      	ldr	r1, [r3, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f000 fcfe 	bl	8001aa8 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 80010ac:	f000 fbba 	bl	8001824 <ssd1306_UpdateScreen>
    // Wait for button release
    while(BOTH_PRESSED || LEFT_PRESSED || RIGHT_PRESSED) {
 80010b0:	e004      	b.n	80010bc <handle_credits+0x64>
        HAL_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f001 f802 	bl	80020bc <HAL_Delay>
        readPins();
 80010b8:	f7ff faf0 	bl	800069c <readPins>
    while(BOTH_PRESSED || LEFT_PRESSED || RIGHT_PRESSED) {
 80010bc:	4b23      	ldr	r3, [pc, #140]	@ (800114c <handle_credits+0xf4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <handle_credits+0x74>
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <handle_credits+0xf8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f2      	beq.n	80010b2 <handle_credits+0x5a>
 80010cc:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <handle_credits+0xf4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d103      	bne.n	80010dc <handle_credits+0x84>
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <handle_credits+0xf8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d0ea      	beq.n	80010b2 <handle_credits+0x5a>
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <handle_credits+0xf4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d000      	beq.n	80010e6 <handle_credits+0x8e>
 80010e4:	e003      	b.n	80010ee <handle_credits+0x96>
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <handle_credits+0xf8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0e1      	beq.n	80010b2 <handle_credits+0x5a>
    }

    while(1) {
        readPins();
 80010ee:	f7ff fad5 	bl	800069c <readPins>

        if(RIGHT_PRESSED || LEFT_PRESSED || BOTH_PRESSED) {
 80010f2:	4b16      	ldr	r3, [pc, #88]	@ (800114c <handle_credits+0xf4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d103      	bne.n	8001102 <handle_credits+0xaa>
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <handle_credits+0xf8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d013      	beq.n	800112a <handle_credits+0xd2>
 8001102:	4b12      	ldr	r3, [pc, #72]	@ (800114c <handle_credits+0xf4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d103      	bne.n	8001112 <handle_credits+0xba>
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <handle_credits+0xf8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d00b      	beq.n	800112a <handle_credits+0xd2>
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <handle_credits+0xf4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <handle_credits+0xca>
 800111a:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <handle_credits+0xf8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <handle_credits+0xd2>
            break;
        }

        HAL_Delay(100);
 8001122:	2064      	movs	r0, #100	@ 0x64
 8001124:	f000 ffca 	bl	80020bc <HAL_Delay>
        readPins();
 8001128:	e7e1      	b.n	80010ee <handle_credits+0x96>
    }

    // Clear screen
    ssd1306_Fill(Black);
 800112a:	2000      	movs	r0, #0
 800112c:	f000 fb60 	bl	80017f0 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8001130:	f000 fb78 	bl	8001824 <ssd1306_UpdateScreen>
}
 8001134:	46c0      	nop			@ (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	08009358 	.word	0x08009358
 8001140:	08004dd0 	.word	0x08004dd0
 8001144:	08004de8 	.word	0x08004de8
 8001148:	08004dfc 	.word	0x08004dfc
 800114c:	200001b4 	.word	0x200001b4
 8001150:	200001b8 	.word	0x200001b8

08001154 <handle_boot_overrides>:

// Handle boot-time button overrides
void handle_boot_overrides(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    readPins();
 8001158:	f7ff faa0 	bl	800069c <readPins>

    // Show credits
    if(BOTH_PRESSED){
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <handle_boot_overrides+0x6c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d106      	bne.n	8001172 <handle_boot_overrides+0x1e>
 8001164:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <handle_boot_overrides+0x70>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <handle_boot_overrides+0x1e>
        handle_credits();
 800116c:	f7ff ff74 	bl	8001058 <handle_credits>
        // If right is pressed at boot, reset everything
        if(RIGHT_PRESSED) {
            handle_reset();
        }
    }
}
 8001170:	e023      	b.n	80011ba <handle_boot_overrides+0x66>
        if(LEFT_PRESSED) {
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <handle_boot_overrides+0x6c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d115      	bne.n	80011a6 <handle_boot_overrides+0x52>
 800117a:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <handle_boot_overrides+0x70>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d111      	bne.n	80011a6 <handle_boot_overrides+0x52>
            toggle_display_invert();
 8001182:	f7ff fa17 	bl	80005b4 <toggle_display_invert>
            force_save();  // Save immediately for boot-time changes
 8001186:	f7ff fc51 	bl	8000a2c <force_save>
            while(LEFT_PRESSED) {
 800118a:	e004      	b.n	8001196 <handle_boot_overrides+0x42>
                HAL_Delay(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f000 ff95 	bl	80020bc <HAL_Delay>
                readPins();
 8001192:	f7ff fa83 	bl	800069c <readPins>
            while(LEFT_PRESSED) {
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <handle_boot_overrides+0x6c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d103      	bne.n	80011a6 <handle_boot_overrides+0x52>
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <handle_boot_overrides+0x70>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d0f2      	beq.n	800118c <handle_boot_overrides+0x38>
        if(RIGHT_PRESSED) {
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <handle_boot_overrides+0x6c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d105      	bne.n	80011ba <handle_boot_overrides+0x66>
 80011ae:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <handle_boot_overrides+0x70>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <handle_boot_overrides+0x66>
            handle_reset();
 80011b6:	f7ff fe93 	bl	8000ee0 <handle_reset>
}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001b4 	.word	0x200001b4
 80011c4:	200001b8 	.word	0x200001b8

080011c8 <update_tap_speed>:

// Update tap speed regularly
void update_tap_speed(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
    static uint32_t last_speed_update = 0;
    uint32_t current_time = HAL_GetTick();
 80011ce:	f000 ff6b 	bl	80020a8 <HAL_GetTick>
 80011d2:	0003      	movs	r3, r0
 80011d4:	607b      	str	r3, [r7, #4]

    // Update speed calculation every 100ms
    if (current_time - last_speed_update >= 100) {
 80011d6:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <update_tap_speed+0x2c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b63      	cmp	r3, #99	@ 0x63
 80011e0:	d904      	bls.n	80011ec <update_tap_speed+0x24>
        calculate_tap_speed();
 80011e2:	f7ff f967 	bl	80004b4 <calculate_tap_speed>
        last_speed_update = current_time;
 80011e6:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <update_tap_speed+0x2c>)
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	601a      	str	r2, [r3, #0]
    }
}
 80011ec:	46c0      	nop			@ (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2000024c 	.word	0x2000024c

080011f8 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    if (htim == &htim14)
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001204:	429a      	cmp	r2, r3
 8001206:	d101      	bne.n	800120c <HAL_TIM_PeriodElapsedCallback+0x14>
    {
        readPins();
 8001208:	f7ff fa48 	bl	800069c <readPins>
    }
}
 800120c:	46c0      	nop			@ (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000168 	.word	0x20000168

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121e:	f000 fec7 	bl	8001fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001222:	f000 f8b5 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001226:	f000 f98d 	bl	8001544 <MX_GPIO_Init>
  MX_I2C1_Init();
 800122a:	f000 f921 	bl	8001470 <MX_I2C1_Init>
  MX_TIM14_Init();
 800122e:	f000 f963 	bl	80014f8 <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001232:	f000 f908 	bl	8001446 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8001236:	2380      	movs	r3, #128	@ 0x80
 8001238:	0219      	lsls	r1, r3, #8
 800123a:	23a0      	movs	r3, #160	@ 0xa0
 800123c:	05db      	lsls	r3, r3, #23
 800123e:	2200      	movs	r2, #0
 8001240:	0018      	movs	r0, r3
 8001242:	f001 fb64 	bl	800290e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001246:	200a      	movs	r0, #10
 8001248:	f000 ff38 	bl	80020bc <HAL_Delay>
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	0219      	lsls	r1, r3, #8
 8001250:	23a0      	movs	r3, #160	@ 0xa0
 8001252:	05db      	lsls	r3, r3, #23
 8001254:	2201      	movs	r2, #1
 8001256:	0018      	movs	r0, r3
 8001258:	f001 fb59 	bl	800290e <HAL_GPIO_WritePin>
  ssd1306_Init();
 800125c:	f000 fa5c 	bl	8001718 <ssd1306_Init>

  load_settings();
 8001260:	f7ff fb3a 	bl	80008d8 <load_settings>

  // Apply the loaded display invert setting
  ssd1306_InvertDisplay(settings.display_inverted);
 8001264:	4b43      	ldr	r3, [pc, #268]	@ (8001374 <main+0x15c>)
 8001266:	7b1b      	ldrb	r3, [r3, #12]
 8001268:	0018      	movs	r0, r3
 800126a:	f000 fd2f 	bl	8001ccc <ssd1306_InvertDisplay>

  // Initialize save time
  last_save_time = HAL_GetTick();
 800126e:	f000 ff1b 	bl	80020a8 <HAL_GetTick>
 8001272:	0002      	movs	r2, r0
 8001274:	4b40      	ldr	r3, [pc, #256]	@ (8001378 <main+0x160>)
 8001276:	601a      	str	r2, [r3, #0]

  // Check button states at boot for override options
  handle_boot_overrides();
 8001278:	f7ff ff6c 	bl	8001154 <handle_boot_overrides>

  state_e state = IDLE;
 800127c:	2317      	movs	r3, #23
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
  int32_t idle_cntr = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  int32_t tap_left_cntr = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  int32_t tap_right_cntr = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  uint8_t left_state = 0;
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
  uint8_t right_state = 0;
 8001296:	1dbb      	adds	r3, r7, #6
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim14);
 800129c:	4b37      	ldr	r3, [pc, #220]	@ (800137c <main+0x164>)
 800129e:	0018      	movs	r0, r3
 80012a0:	f002 feb0 	bl	8004004 <HAL_TIM_Base_Start_IT>

  while(1) {
    // Periodic tasks
    check_and_save();
 80012a4:	f7ff fba8 	bl	80009f8 <check_and_save>
    update_saved_indicator();
 80012a8:	f7ff fbce 	bl	8000a48 <update_saved_indicator>
    update_tap_speed();
 80012ac:	f7ff ff8c 	bl	80011c8 <update_tap_speed>

    switch(state){
 80012b0:	2317      	movs	r3, #23
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <main+0xa8>
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d028      	beq.n	8001310 <main+0xf8>
 80012be:	e058      	b.n	8001372 <main+0x15a>
    case IDLE:
        if(sw_state_left == 0 || sw_state_right == 0){
 80012c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <main+0x168>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <main+0xb8>
 80012c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001384 <main+0x16c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d104      	bne.n	80012da <main+0xc2>
            // Smooth transition - no clear, just go to SWITCH state
            state = SWITCH;
 80012d0:	2317      	movs	r3, #23
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
            draw_animation(ani_idle[idle_cnt]);
            update_display_with_overlays();
            idle_cnt = (idle_cnt + 1) % ani_idle_LEN;
            HAL_Delay(100);
        }
        break;
 80012d8:	e04b      	b.n	8001372 <main+0x15a>
            draw_animation(ani_idle[idle_cnt]);
 80012da:	4b2b      	ldr	r3, [pc, #172]	@ (8001388 <main+0x170>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	001a      	movs	r2, r3
 80012e0:	4b2a      	ldr	r3, [pc, #168]	@ (800138c <main+0x174>)
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	58d3      	ldr	r3, [r2, r3]
 80012e6:	0018      	movs	r0, r3
 80012e8:	f7ff f99a 	bl	8000620 <draw_animation>
            update_display_with_overlays();
 80012ec:	f7ff fa6e 	bl	80007cc <update_display_with_overlays>
            idle_cnt = (idle_cnt + 1) % ani_idle_LEN;
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <main+0x170>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	2205      	movs	r2, #5
 80012f8:	0011      	movs	r1, r2
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff f87a 	bl	80003f4 <__aeabi_idivmod>
 8001300:	000b      	movs	r3, r1
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <main+0x170>)
 8001306:	701a      	strb	r2, [r3, #0]
            HAL_Delay(100);
 8001308:	2064      	movs	r0, #100	@ 0x64
 800130a:	f000 fed7 	bl	80020bc <HAL_Delay>
        break;
 800130e:	e030      	b.n	8001372 <main+0x15a>

    case SWITCH:
        // Handle special button combos
        handle_display_mode_switch();
 8001310:	f7ff fbb4 	bl	8000a7c <handle_display_mode_switch>
        handle_invert_toggle();
 8001314:	f7ff fbf8 	bl	8000b08 <handle_invert_toggle>

        // Check for idle transition
        if(check_idle_transition(&idle_cntr, &left_state, &right_state)) {
 8001318:	1dba      	adds	r2, r7, #6
 800131a:	1df9      	adds	r1, r7, #7
 800131c:	2310      	movs	r3, #16
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff fd89 	bl	8000e38 <check_idle_transition>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d004      	beq.n	8001334 <main+0x11c>
            state = IDLE;
 800132a:	2317      	movs	r3, #23
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
 8001332:	e013      	b.n	800135c <main+0x144>
        }
        // Handle normal paw animations
        else if(!NONE_PRESSED) {
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <main+0x168>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d103      	bne.n	8001344 <main+0x12c>
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <main+0x16c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d00b      	beq.n	800135c <main+0x144>
            handle_paw_animations(&left_state, &right_state,
 8001344:	2308      	movs	r3, #8
 8001346:	18fc      	adds	r4, r7, r3
 8001348:	230c      	movs	r3, #12
 800134a:	18fa      	adds	r2, r7, r3
 800134c:	1db9      	adds	r1, r7, #6
 800134e:	1df8      	adds	r0, r7, #7
 8001350:	2310      	movs	r3, #16
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	0023      	movs	r3, r4
 8001358:	f7ff fc8c 	bl	8000c74 <handle_paw_animations>
                                &tap_left_cntr, &tap_right_cntr, &idle_cntr);
        }

        // Handle tap decay animations
        handle_tap_decay(&tap_left_cntr, &tap_right_cntr);
 800135c:	2308      	movs	r3, #8
 800135e:	18fa      	adds	r2, r7, r3
 8001360:	230c      	movs	r3, #12
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	0011      	movs	r1, r2
 8001366:	0018      	movs	r0, r3
 8001368:	f7ff fc46 	bl	8000bf8 <handle_tap_decay>

        // Update display with all overlays
        update_display_with_overlays();
 800136c:	f7ff fa2e 	bl	80007cc <update_display_with_overlays>
        break;
 8001370:	46c0      	nop			@ (mov r8, r8)
    check_and_save();
 8001372:	e797      	b.n	80012a4 <main+0x8c>
 8001374:	200001c0 	.word	0x200001c0
 8001378:	200001dc 	.word	0x200001dc
 800137c:	20000168 	.word	0x20000168
 8001380:	200001b4 	.word	0x200001b4
 8001384:	200001b8 	.word	0x200001b8
 8001388:	200001bc 	.word	0x200001bc
 800138c:	20000000 	.word	0x20000000

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b093      	sub	sp, #76	@ 0x4c
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	2414      	movs	r4, #20
 8001398:	193b      	adds	r3, r7, r4
 800139a:	0018      	movs	r0, r3
 800139c:	2334      	movs	r3, #52	@ 0x34
 800139e:	001a      	movs	r2, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	f003 f859 	bl	8004458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	0018      	movs	r0, r3
 80013aa:	2310      	movs	r3, #16
 80013ac:	001a      	movs	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	f003 f852 	bl	8004458 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	0018      	movs	r0, r3
 80013ba:	f001 ffcb 	bl	8003354 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	2202      	movs	r2, #2
 80013c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c4:	193b      	adds	r3, r7, r4
 80013c6:	2280      	movs	r2, #128	@ 0x80
 80013c8:	0052      	lsls	r2, r2, #1
 80013ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80013cc:	0021      	movs	r1, r4
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2240      	movs	r2, #64	@ 0x40
 80013d8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2202      	movs	r2, #2
 80013de:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	2202      	movs	r2, #2
 80013e4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2208      	movs	r2, #8
 80013f0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2280      	movs	r2, #128	@ 0x80
 80013f6:	0292      	lsls	r2, r2, #10
 80013f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2280      	movs	r2, #128	@ 0x80
 80013fe:	0592      	lsls	r2, r2, #22
 8001400:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001402:	187b      	adds	r3, r7, r1
 8001404:	0018      	movs	r0, r3
 8001406:	f001 ffe5 	bl	80033d4 <HAL_RCC_OscConfig>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800140e:	f000 f943 	bl	8001698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2202      	movs	r2, #2
 800141c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2101      	movs	r1, #1
 8001430:	0018      	movs	r0, r3
 8001432:	f002 fadf 	bl	80039f4 <HAL_RCC_ClockConfig>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800143a:	f000 f92d 	bl	8001698 <Error_Handler>
  }
}
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b013      	add	sp, #76	@ 0x4c
 8001444:	bd90      	pop	{r4, r7, pc}

08001446 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2004      	movs	r0, #4
 8001450:	f000 ff04 	bl	800225c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001454:	2004      	movs	r0, #4
 8001456:	f000 ff16 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2013      	movs	r0, #19
 8001460:	f000 fefc 	bl	800225c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001464:	2013      	movs	r0, #19
 8001466:	f000 ff0e 	bl	8002286 <HAL_NVIC_EnableIRQ>
}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001474:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <MX_I2C1_Init+0x7c>)
 8001476:	4a1e      	ldr	r2, [pc, #120]	@ (80014f0 <MX_I2C1_Init+0x80>)
 8001478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00601133;
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <MX_I2C1_Init+0x7c>)
 800147c:	4a1d      	ldr	r2, [pc, #116]	@ (80014f4 <MX_I2C1_Init+0x84>)
 800147e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <MX_I2C1_Init+0x7c>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <MX_I2C1_Init+0x7c>)
 8001488:	2201      	movs	r2, #1
 800148a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800148c:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <MX_I2C1_Init+0x7c>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <MX_I2C1_Init+0x7c>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_I2C1_Init+0x7c>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <MX_I2C1_Init+0x7c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_I2C1_Init+0x7c>)
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	0292      	lsls	r2, r2, #10
 80014aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <MX_I2C1_Init+0x7c>)
 80014ae:	0018      	movs	r0, r3
 80014b0:	f001 fa4a 	bl	8002948 <HAL_I2C_Init>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d001      	beq.n	80014bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014b8:	f000 f8ee 	bl	8001698 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	015a      	lsls	r2, r3, #5
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <MX_I2C1_Init+0x7c>)
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f001 fead 	bl	8003224 <HAL_I2CEx_ConfigAnalogFilter>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2C1_Init+0x62>
  {
    Error_Handler();
 80014ce:	f000 f8e3 	bl	8001698 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <MX_I2C1_Init+0x7c>)
 80014d4:	2100      	movs	r1, #0
 80014d6:	0018      	movs	r0, r3
 80014d8:	f001 fef0 	bl	80032bc <HAL_I2CEx_ConfigDigitalFilter>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C1_Init+0x74>
  {
    Error_Handler();
 80014e0:	f000 f8da 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e4:	46c0      	nop			@ (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	20000114 	.word	0x20000114
 80014f0:	40005400 	.word	0x40005400
 80014f4:	00601133 	.word	0x00601133

080014f8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  htim14.Instance = TIM14;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <MX_TIM14_Init+0x40>)
 80014fe:	4a0f      	ldr	r2, [pc, #60]	@ (800153c <MX_TIM14_Init+0x44>)
 8001500:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 32-1;      // Was 100-1
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <MX_TIM14_Init+0x40>)
 8001504:	221f      	movs	r2, #31
 8001506:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <MX_TIM14_Init+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;      // 32MHz/32/10000 = 100Hz
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <MX_TIM14_Init+0x40>)
 8001510:	4a0b      	ldr	r2, [pc, #44]	@ (8001540 <MX_TIM14_Init+0x48>)
 8001512:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <MX_TIM14_Init+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <MX_TIM14_Init+0x40>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <MX_TIM14_Init+0x40>)
 8001522:	0018      	movs	r0, r3
 8001524:	f002 fd16 	bl	8003f54 <HAL_TIM_Base_Init>
 8001528:	1e03      	subs	r3, r0, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800152c:	f000 f8b4 	bl	8001698 <Error_Handler>
  }
}
 8001530:	46c0      	nop			@ (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	20000168 	.word	0x20000168
 800153c:	40002000 	.word	0x40002000
 8001540:	0000270f 	.word	0x0000270f

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	240c      	movs	r4, #12
 800154c:	193b      	adds	r3, r7, r4
 800154e:	0018      	movs	r0, r3
 8001550:	2314      	movs	r3, #20
 8001552:	001a      	movs	r2, r3
 8001554:	2100      	movs	r1, #0
 8001556:	f002 ff7f 	bl	8004458 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b4a      	ldr	r3, [pc, #296]	@ (8001684 <MX_GPIO_Init+0x140>)
 800155c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800155e:	4b49      	ldr	r3, [pc, #292]	@ (8001684 <MX_GPIO_Init+0x140>)
 8001560:	2102      	movs	r1, #2
 8001562:	430a      	orrs	r2, r1
 8001564:	635a      	str	r2, [r3, #52]	@ 0x34
 8001566:	4b47      	ldr	r3, [pc, #284]	@ (8001684 <MX_GPIO_Init+0x140>)
 8001568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	4b44      	ldr	r3, [pc, #272]	@ (8001684 <MX_GPIO_Init+0x140>)
 8001574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001576:	4b43      	ldr	r3, [pc, #268]	@ (8001684 <MX_GPIO_Init+0x140>)
 8001578:	2104      	movs	r1, #4
 800157a:	430a      	orrs	r2, r1
 800157c:	635a      	str	r2, [r3, #52]	@ 0x34
 800157e:	4b41      	ldr	r3, [pc, #260]	@ (8001684 <MX_GPIO_Init+0x140>)
 8001580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001582:	2204      	movs	r2, #4
 8001584:	4013      	ands	r3, r2
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b3e      	ldr	r3, [pc, #248]	@ (8001684 <MX_GPIO_Init+0x140>)
 800158c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800158e:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <MX_GPIO_Init+0x140>)
 8001590:	2101      	movs	r1, #1
 8001592:	430a      	orrs	r2, r1
 8001594:	635a      	str	r2, [r3, #52]	@ 0x34
 8001596:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <MX_GPIO_Init+0x140>)
 8001598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800159a:	2201      	movs	r2, #1
 800159c:	4013      	ands	r3, r2
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80015a2:	2380      	movs	r3, #128	@ 0x80
 80015a4:	0219      	lsls	r1, r3, #8
 80015a6:	23a0      	movs	r3, #160	@ 0xa0
 80015a8:	05db      	lsls	r3, r3, #23
 80015aa:	2200      	movs	r2, #0
 80015ac:	0018      	movs	r0, r3
 80015ae:	f001 f9ae 	bl	800290e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	4a34      	ldr	r2, [pc, #208]	@ (8001688 <MX_GPIO_Init+0x144>)
 80015b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b8:	193b      	adds	r3, r7, r4
 80015ba:	2203      	movs	r2, #3
 80015bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	4a31      	ldr	r2, [pc, #196]	@ (800168c <MX_GPIO_Init+0x148>)
 80015c8:	0019      	movs	r1, r3
 80015ca:	0010      	movs	r0, r2
 80015cc:	f001 f81e 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 PA8
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001690 <MX_GPIO_Init+0x14c>)
 80015d4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	2203      	movs	r2, #3
 80015da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	193b      	adds	r3, r7, r4
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	193a      	adds	r2, r7, r4
 80015e4:	23a0      	movs	r3, #160	@ 0xa0
 80015e6:	05db      	lsls	r3, r3, #23
 80015e8:	0011      	movs	r1, r2
 80015ea:	0018      	movs	r0, r3
 80015ec:	f001 f80e 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_LEFT_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin;
 80015f0:	193b      	adds	r3, r7, r4
 80015f2:	2240      	movs	r2, #64	@ 0x40
 80015f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	193b      	adds	r3, r7, r4
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001602:	193a      	adds	r2, r7, r4
 8001604:	23a0      	movs	r3, #160	@ 0xa0
 8001606:	05db      	lsls	r3, r3, #23
 8001608:	0011      	movs	r1, r2
 800160a:	0018      	movs	r0, r3
 800160c:	f000 fffe 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 8001610:	193b      	adds	r3, r7, r4
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	193b      	adds	r3, r7, r4
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	193b      	adds	r3, r7, r4
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001622:	193b      	adds	r3, r7, r4
 8001624:	4a1b      	ldr	r2, [pc, #108]	@ (8001694 <MX_GPIO_Init+0x150>)
 8001626:	0019      	movs	r1, r3
 8001628:	0010      	movs	r0, r2
 800162a:	f000 ffef 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800162e:	0021      	movs	r1, r4
 8001630:	187b      	adds	r3, r7, r1
 8001632:	22ff      	movs	r2, #255	@ 0xff
 8001634:	0052      	lsls	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001638:	000c      	movs	r4, r1
 800163a:	193b      	adds	r3, r7, r4
 800163c:	2203      	movs	r2, #3
 800163e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	193b      	adds	r3, r7, r4
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	193b      	adds	r3, r7, r4
 8001648:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <MX_GPIO_Init+0x150>)
 800164a:	0019      	movs	r1, r3
 800164c:	0010      	movs	r0, r2
 800164e:	f000 ffdd 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8001652:	0021      	movs	r1, r4
 8001654:	187b      	adds	r3, r7, r1
 8001656:	2280      	movs	r2, #128	@ 0x80
 8001658:	0212      	lsls	r2, r2, #8
 800165a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	187b      	adds	r3, r7, r1
 800165e:	2201      	movs	r2, #1
 8001660:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	187b      	adds	r3, r7, r1
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	187b      	adds	r3, r7, r1
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 800166e:	187a      	adds	r2, r7, r1
 8001670:	23a0      	movs	r3, #160	@ 0xa0
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	0011      	movs	r1, r2
 8001676:	0018      	movs	r0, r3
 8001678:	f000 ffc8 	bl	800260c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800167c:	46c0      	nop			@ (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	b009      	add	sp, #36	@ 0x24
 8001682:	bd90      	pop	{r4, r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	0000c040 	.word	0x0000c040
 800168c:	50000800 	.word	0x50000800
 8001690:	00001dbf 	.word	0x00001dbf
 8001694:	50000400 	.word	0x50000400

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a0:	46c0      	nop			@ (mov r8, r8)
 80016a2:	e7fd      	b.n	80016a0 <Error_Handler+0x8>

080016a4 <ssd1306_Reset>:
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	46c0      	nop			@ (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <ssd1306_WriteCommand>:
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af04      	add	r7, sp, #16
 80016b6:	0002      	movs	r2, r0
 80016b8:	1dfb      	adds	r3, r7, #7
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	4808      	ldr	r0, [pc, #32]	@ (80016e0 <ssd1306_WriteCommand+0x30>)
 80016be:	2301      	movs	r3, #1
 80016c0:	425b      	negs	r3, r3
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	2301      	movs	r3, #1
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2301      	movs	r3, #1
 80016ce:	2200      	movs	r2, #0
 80016d0:	2178      	movs	r1, #120	@ 0x78
 80016d2:	f001 f9df 	bl	8002a94 <HAL_I2C_Mem_Write>
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b002      	add	sp, #8
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	20000114 	.word	0x20000114

080016e4 <ssd1306_WriteData>:
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4808      	ldr	r0, [pc, #32]	@ (8001714 <ssd1306_WriteData+0x30>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	4252      	negs	r2, r2
 80016f8:	9202      	str	r2, [sp, #8]
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2301      	movs	r3, #1
 8001702:	2240      	movs	r2, #64	@ 0x40
 8001704:	2178      	movs	r1, #120	@ 0x78
 8001706:	f001 f9c5 	bl	8002a94 <HAL_I2C_Mem_Write>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	20000114 	.word	0x20000114

08001718 <ssd1306_Init>:
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
 800171c:	f7ff ffc2 	bl	80016a4 <ssd1306_Reset>
 8001720:	2064      	movs	r0, #100	@ 0x64
 8001722:	f000 fccb 	bl	80020bc <HAL_Delay>
 8001726:	2000      	movs	r0, #0
 8001728:	f000 faaa 	bl	8001c80 <ssd1306_SetDisplayOn>
 800172c:	2020      	movs	r0, #32
 800172e:	f7ff ffbf 	bl	80016b0 <ssd1306_WriteCommand>
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff ffbc 	bl	80016b0 <ssd1306_WriteCommand>
 8001738:	20b0      	movs	r0, #176	@ 0xb0
 800173a:	f7ff ffb9 	bl	80016b0 <ssd1306_WriteCommand>
 800173e:	20c0      	movs	r0, #192	@ 0xc0
 8001740:	f7ff ffb6 	bl	80016b0 <ssd1306_WriteCommand>
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff ffb3 	bl	80016b0 <ssd1306_WriteCommand>
 800174a:	2010      	movs	r0, #16
 800174c:	f7ff ffb0 	bl	80016b0 <ssd1306_WriteCommand>
 8001750:	2040      	movs	r0, #64	@ 0x40
 8001752:	f7ff ffad 	bl	80016b0 <ssd1306_WriteCommand>
 8001756:	20ff      	movs	r0, #255	@ 0xff
 8001758:	f000 fa79 	bl	8001c4e <ssd1306_SetContrast>
 800175c:	20a0      	movs	r0, #160	@ 0xa0
 800175e:	f7ff ffa7 	bl	80016b0 <ssd1306_WriteCommand>
 8001762:	20a6      	movs	r0, #166	@ 0xa6
 8001764:	f7ff ffa4 	bl	80016b0 <ssd1306_WriteCommand>
 8001768:	20a8      	movs	r0, #168	@ 0xa8
 800176a:	f7ff ffa1 	bl	80016b0 <ssd1306_WriteCommand>
 800176e:	203f      	movs	r0, #63	@ 0x3f
 8001770:	f7ff ff9e 	bl	80016b0 <ssd1306_WriteCommand>
 8001774:	20a4      	movs	r0, #164	@ 0xa4
 8001776:	f7ff ff9b 	bl	80016b0 <ssd1306_WriteCommand>
 800177a:	20d3      	movs	r0, #211	@ 0xd3
 800177c:	f7ff ff98 	bl	80016b0 <ssd1306_WriteCommand>
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff ff95 	bl	80016b0 <ssd1306_WriteCommand>
 8001786:	20d5      	movs	r0, #213	@ 0xd5
 8001788:	f7ff ff92 	bl	80016b0 <ssd1306_WriteCommand>
 800178c:	20f0      	movs	r0, #240	@ 0xf0
 800178e:	f7ff ff8f 	bl	80016b0 <ssd1306_WriteCommand>
 8001792:	20d9      	movs	r0, #217	@ 0xd9
 8001794:	f7ff ff8c 	bl	80016b0 <ssd1306_WriteCommand>
 8001798:	2022      	movs	r0, #34	@ 0x22
 800179a:	f7ff ff89 	bl	80016b0 <ssd1306_WriteCommand>
 800179e:	20da      	movs	r0, #218	@ 0xda
 80017a0:	f7ff ff86 	bl	80016b0 <ssd1306_WriteCommand>
 80017a4:	2012      	movs	r0, #18
 80017a6:	f7ff ff83 	bl	80016b0 <ssd1306_WriteCommand>
 80017aa:	20db      	movs	r0, #219	@ 0xdb
 80017ac:	f7ff ff80 	bl	80016b0 <ssd1306_WriteCommand>
 80017b0:	2020      	movs	r0, #32
 80017b2:	f7ff ff7d 	bl	80016b0 <ssd1306_WriteCommand>
 80017b6:	208d      	movs	r0, #141	@ 0x8d
 80017b8:	f7ff ff7a 	bl	80016b0 <ssd1306_WriteCommand>
 80017bc:	2014      	movs	r0, #20
 80017be:	f7ff ff77 	bl	80016b0 <ssd1306_WriteCommand>
 80017c2:	2001      	movs	r0, #1
 80017c4:	f000 fa5c 	bl	8001c80 <ssd1306_SetDisplayOn>
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 f811 	bl	80017f0 <ssd1306_Fill>
 80017ce:	f000 f829 	bl	8001824 <ssd1306_UpdateScreen>
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <ssd1306_Init+0xd4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	801a      	strh	r2, [r3, #0]
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <ssd1306_Init+0xd4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	805a      	strh	r2, [r3, #2]
 80017de:	4b03      	ldr	r3, [pc, #12]	@ (80017ec <ssd1306_Init+0xd4>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	711a      	strb	r2, [r3, #4]
 80017e4:	46c0      	nop			@ (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	20000660 	.word	0x20000660

080017f0 <ssd1306_Fill>:
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	0002      	movs	r2, r0
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <ssd1306_Fill+0x18>
 8001804:	2300      	movs	r3, #0
 8001806:	e000      	b.n	800180a <ssd1306_Fill+0x1a>
 8001808:	23ff      	movs	r3, #255	@ 0xff
 800180a:	2282      	movs	r2, #130	@ 0x82
 800180c:	00d2      	lsls	r2, r2, #3
 800180e:	4804      	ldr	r0, [pc, #16]	@ (8001820 <ssd1306_Fill+0x30>)
 8001810:	0019      	movs	r1, r3
 8001812:	f002 fe21 	bl	8004458 <memset>
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b002      	add	sp, #8
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	20000250 	.word	0x20000250

08001824 <ssd1306_UpdateScreen>:
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	e01e      	b.n	8001870 <ssd1306_UpdateScreen+0x4c>
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	3b50      	subs	r3, #80	@ 0x50
 8001838:	b2db      	uxtb	r3, r3
 800183a:	0018      	movs	r0, r3
 800183c:	f7ff ff38 	bl	80016b0 <ssd1306_WriteCommand>
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff ff35 	bl	80016b0 <ssd1306_WriteCommand>
 8001846:	2010      	movs	r0, #16
 8001848:	f7ff ff32 	bl	80016b0 <ssd1306_WriteCommand>
 800184c:	1dfb      	adds	r3, r7, #7
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	0013      	movs	r3, r2
 8001852:	019b      	lsls	r3, r3, #6
 8001854:	189b      	adds	r3, r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	001a      	movs	r2, r3
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <ssd1306_UpdateScreen+0x60>)
 800185c:	18d3      	adds	r3, r2, r3
 800185e:	2182      	movs	r1, #130	@ 0x82
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff ff3f 	bl	80016e4 <ssd1306_WriteData>
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	3201      	adds	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	1dfb      	adds	r3, r7, #7
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b07      	cmp	r3, #7
 8001876:	d9dc      	bls.n	8001832 <ssd1306_UpdateScreen+0xe>
 8001878:	46c0      	nop			@ (mov r8, r8)
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			@ (mov r8, r8)
 8001884:	20000250 	.word	0x20000250

08001888 <ssd1306_DrawPixel>:
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	0004      	movs	r4, r0
 8001890:	0008      	movs	r0, r1
 8001892:	0011      	movs	r1, r2
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	1c22      	adds	r2, r4, #0
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	1dbb      	adds	r3, r7, #6
 800189c:	1c02      	adds	r2, r0, #0
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	1d7b      	adds	r3, r7, #5
 80018a2:	1c0a      	adds	r2, r1, #0
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b81      	cmp	r3, #129	@ 0x81
 80018ac:	d853      	bhi.n	8001956 <ssd1306_DrawPixel+0xce>
 80018ae:	1dbb      	adds	r3, r7, #6
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80018b4:	d84f      	bhi.n	8001956 <ssd1306_DrawPixel+0xce>
 80018b6:	1d7b      	adds	r3, r7, #5
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d124      	bne.n	8001908 <ssd1306_DrawPixel+0x80>
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	1dbb      	adds	r3, r7, #6
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	08db      	lsrs	r3, r3, #3
 80018c8:	b2d8      	uxtb	r0, r3
 80018ca:	0001      	movs	r1, r0
 80018cc:	000b      	movs	r3, r1
 80018ce:	019b      	lsls	r3, r3, #6
 80018d0:	185b      	adds	r3, r3, r1
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	18d3      	adds	r3, r2, r3
 80018d6:	4a22      	ldr	r2, [pc, #136]	@ (8001960 <ssd1306_DrawPixel+0xd8>)
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
 80018da:	b25a      	sxtb	r2, r3
 80018dc:	1dbb      	adds	r3, r7, #6
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2107      	movs	r1, #7
 80018e2:	400b      	ands	r3, r1
 80018e4:	2101      	movs	r1, #1
 80018e6:	4099      	lsls	r1, r3
 80018e8:	000b      	movs	r3, r1
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b25c      	sxtb	r4, r3
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	0001      	movs	r1, r0
 80018f6:	000b      	movs	r3, r1
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	185b      	adds	r3, r3, r1
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	18d3      	adds	r3, r2, r3
 8001900:	b2e1      	uxtb	r1, r4
 8001902:	4a17      	ldr	r2, [pc, #92]	@ (8001960 <ssd1306_DrawPixel+0xd8>)
 8001904:	54d1      	strb	r1, [r2, r3]
 8001906:	e027      	b.n	8001958 <ssd1306_DrawPixel+0xd0>
 8001908:	1dfb      	adds	r3, r7, #7
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	1dbb      	adds	r3, r7, #6
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	08db      	lsrs	r3, r3, #3
 8001912:	b2d8      	uxtb	r0, r3
 8001914:	0001      	movs	r1, r0
 8001916:	000b      	movs	r3, r1
 8001918:	019b      	lsls	r3, r3, #6
 800191a:	185b      	adds	r3, r3, r1
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	18d3      	adds	r3, r2, r3
 8001920:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <ssd1306_DrawPixel+0xd8>)
 8001922:	5cd3      	ldrb	r3, [r2, r3]
 8001924:	b25b      	sxtb	r3, r3
 8001926:	1dba      	adds	r2, r7, #6
 8001928:	7812      	ldrb	r2, [r2, #0]
 800192a:	2107      	movs	r1, #7
 800192c:	400a      	ands	r2, r1
 800192e:	2101      	movs	r1, #1
 8001930:	4091      	lsls	r1, r2
 8001932:	000a      	movs	r2, r1
 8001934:	b252      	sxtb	r2, r2
 8001936:	43d2      	mvns	r2, r2
 8001938:	b252      	sxtb	r2, r2
 800193a:	4013      	ands	r3, r2
 800193c:	b25c      	sxtb	r4, r3
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	0001      	movs	r1, r0
 8001944:	000b      	movs	r3, r1
 8001946:	019b      	lsls	r3, r3, #6
 8001948:	185b      	adds	r3, r3, r1
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	18d3      	adds	r3, r2, r3
 800194e:	b2e1      	uxtb	r1, r4
 8001950:	4a03      	ldr	r2, [pc, #12]	@ (8001960 <ssd1306_DrawPixel+0xd8>)
 8001952:	54d1      	strb	r1, [r2, r3]
 8001954:	e000      	b.n	8001958 <ssd1306_DrawPixel+0xd0>
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b003      	add	sp, #12
 800195c:	bd90      	pop	{r4, r7, pc}
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	20000250 	.word	0x20000250

08001964 <ssd1306_WriteChar>:
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	0004      	movs	r4, r0
 800196c:	0038      	movs	r0, r7
 800196e:	6001      	str	r1, [r0, #0]
 8001970:	6042      	str	r2, [r0, #4]
 8001972:	6083      	str	r3, [r0, #8]
 8001974:	210f      	movs	r1, #15
 8001976:	187b      	adds	r3, r7, r1
 8001978:	1c22      	adds	r2, r4, #0
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	000a      	movs	r2, r1
 800197e:	18bb      	adds	r3, r7, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b1f      	cmp	r3, #31
 8001984:	d903      	bls.n	800198e <ssd1306_WriteChar+0x2a>
 8001986:	18bb      	adds	r3, r7, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b7e      	cmp	r3, #126	@ 0x7e
 800198c:	d901      	bls.n	8001992 <ssd1306_WriteChar+0x2e>
 800198e:	2300      	movs	r3, #0
 8001990:	e084      	b.n	8001a9c <ssd1306_WriteChar+0x138>
 8001992:	4b44      	ldr	r3, [pc, #272]	@ (8001aa4 <ssd1306_WriteChar+0x140>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	001a      	movs	r2, r3
 8001998:	003b      	movs	r3, r7
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	18d3      	adds	r3, r2, r3
 800199e:	2b82      	cmp	r3, #130	@ 0x82
 80019a0:	dc07      	bgt.n	80019b2 <ssd1306_WriteChar+0x4e>
 80019a2:	4b40      	ldr	r3, [pc, #256]	@ (8001aa4 <ssd1306_WriteChar+0x140>)
 80019a4:	885b      	ldrh	r3, [r3, #2]
 80019a6:	001a      	movs	r2, r3
 80019a8:	003b      	movs	r3, r7
 80019aa:	785b      	ldrb	r3, [r3, #1]
 80019ac:	18d3      	adds	r3, r2, r3
 80019ae:	2b40      	cmp	r3, #64	@ 0x40
 80019b0:	dd01      	ble.n	80019b6 <ssd1306_WriteChar+0x52>
 80019b2:	2300      	movs	r3, #0
 80019b4:	e072      	b.n	8001a9c <ssd1306_WriteChar+0x138>
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	e051      	b.n	8001a60 <ssd1306_WriteChar+0xfc>
 80019bc:	003b      	movs	r3, r7
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	230f      	movs	r3, #15
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	3b20      	subs	r3, #32
 80019c8:	0039      	movs	r1, r7
 80019ca:	7849      	ldrb	r1, [r1, #1]
 80019cc:	434b      	muls	r3, r1
 80019ce:	0019      	movs	r1, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	18cb      	adds	r3, r1, r3
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	18d3      	adds	r3, r2, r3
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	e035      	b.n	8001a4e <ssd1306_WriteChar+0xea>
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	409a      	lsls	r2, r3
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	4013      	ands	r3, r2
 80019ee:	d014      	beq.n	8001a1a <ssd1306_WriteChar+0xb6>
 80019f0:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa4 <ssd1306_WriteChar+0x140>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	18d3      	adds	r3, r2, r3
 80019fc:	b2d8      	uxtb	r0, r3
 80019fe:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <ssd1306_WriteChar+0x140>)
 8001a00:	885b      	ldrh	r3, [r3, #2]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	b2d9      	uxtb	r1, r3
 8001a0c:	2330      	movs	r3, #48	@ 0x30
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	001a      	movs	r2, r3
 8001a14:	f7ff ff38 	bl	8001888 <ssd1306_DrawPixel>
 8001a18:	e016      	b.n	8001a48 <ssd1306_WriteChar+0xe4>
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <ssd1306_WriteChar+0x140>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	18d3      	adds	r3, r2, r3
 8001a26:	b2d8      	uxtb	r0, r3
 8001a28:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <ssd1306_WriteChar+0x140>)
 8001a2a:	885b      	ldrh	r3, [r3, #2]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	18d3      	adds	r3, r2, r3
 8001a34:	b2d9      	uxtb	r1, r3
 8001a36:	2330      	movs	r3, #48	@ 0x30
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	425a      	negs	r2, r3
 8001a3e:	4153      	adcs	r3, r2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	001a      	movs	r2, r3
 8001a44:	f7ff ff20 	bl	8001888 <ssd1306_DrawPixel>
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	003b      	movs	r3, r7
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	001a      	movs	r2, r3
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d3c3      	bcc.n	80019e2 <ssd1306_WriteChar+0x7e>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	003b      	movs	r3, r7
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	001a      	movs	r2, r3
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d3a7      	bcc.n	80019bc <ssd1306_WriteChar+0x58>
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <ssd1306_WriteChar+0x140>)
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	003b      	movs	r3, r7
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <ssd1306_WriteChar+0x126>
 8001a78:	003b      	movs	r3, r7
 8001a7a:	6899      	ldr	r1, [r3, #8]
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	3b20      	subs	r3, #32
 8001a84:	18cb      	adds	r3, r1, r3
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	e001      	b.n	8001a8e <ssd1306_WriteChar+0x12a>
 8001a8a:	003b      	movs	r3, r7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	189b      	adds	r3, r3, r2
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <ssd1306_WriteChar+0x140>)
 8001a94:	801a      	strh	r2, [r3, #0]
 8001a96:	230f      	movs	r3, #15
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b009      	add	sp, #36	@ 0x24
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	20000660 	.word	0x20000660

08001aa8 <ssd1306_WriteString>:
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	0038      	movs	r0, r7
 8001ab2:	6001      	str	r1, [r0, #0]
 8001ab4:	6042      	str	r2, [r0, #4]
 8001ab6:	6083      	str	r3, [r0, #8]
 8001ab8:	e017      	b.n	8001aea <ssd1306_WriteString+0x42>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	7818      	ldrb	r0, [r3, #0]
 8001abe:	003b      	movs	r3, r7
 8001ac0:	2218      	movs	r2, #24
 8001ac2:	18ba      	adds	r2, r7, r2
 8001ac4:	7812      	ldrb	r2, [r2, #0]
 8001ac6:	9200      	str	r2, [sp, #0]
 8001ac8:	6819      	ldr	r1, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f7ff ff49 	bl	8001964 <ssd1306_WriteChar>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d002      	beq.n	8001ae4 <ssd1306_WriteString+0x3c>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	e008      	b.n	8001af6 <ssd1306_WriteString+0x4e>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1e3      	bne.n	8001aba <ssd1306_WriteString+0x12>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b004      	add	sp, #16
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <ssd1306_SetCursor>:
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	0002      	movs	r2, r0
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	1dbb      	adds	r3, r7, #6
 8001b0e:	1c0a      	adds	r2, r1, #0
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <ssd1306_SetCursor+0x30>)
 8001b1a:	801a      	strh	r2, [r3, #0]
 8001b1c:	1dbb      	adds	r3, r7, #6
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <ssd1306_SetCursor+0x30>)
 8001b24:	805a      	strh	r2, [r3, #2]
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b002      	add	sp, #8
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	20000660 	.word	0x20000660

08001b34 <ssd1306_DrawBitmap>:
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	0004      	movs	r4, r0
 8001b3c:	0008      	movs	r0, r1
 8001b3e:	603a      	str	r2, [r7, #0]
 8001b40:	0019      	movs	r1, r3
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	1c22      	adds	r2, r4, #0
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	1dbb      	adds	r3, r7, #6
 8001b4a:	1c02      	adds	r2, r0, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	1d7b      	adds	r3, r7, #5
 8001b50:	1c0a      	adds	r2, r1, #0
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	1d7b      	adds	r3, r7, #5
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	3307      	adds	r3, #7
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	da00      	bge.n	8001b60 <ssd1306_DrawBitmap+0x2c>
 8001b5e:	3307      	adds	r3, #7
 8001b60:	10db      	asrs	r3, r3, #3
 8001b62:	001a      	movs	r2, r3
 8001b64:	230a      	movs	r3, #10
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	801a      	strh	r2, [r3, #0]
 8001b6a:	230f      	movs	r3, #15
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b81      	cmp	r3, #129	@ 0x81
 8001b78:	d865      	bhi.n	8001c46 <ssd1306_DrawBitmap+0x112>
 8001b7a:	1dbb      	adds	r3, r7, #6
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b80:	d861      	bhi.n	8001c46 <ssd1306_DrawBitmap+0x112>
 8001b82:	230e      	movs	r3, #14
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e053      	b.n	8001c34 <ssd1306_DrawBitmap+0x100>
 8001b8c:	230d      	movs	r3, #13
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e03c      	b.n	8001c10 <ssd1306_DrawBitmap+0xdc>
 8001b96:	230d      	movs	r3, #13
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d006      	beq.n	8001bb0 <ssd1306_DrawBitmap+0x7c>
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	18fa      	adds	r2, r7, r3
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	18db      	adds	r3, r3, r3
 8001bac:	7013      	strb	r3, [r2, #0]
 8001bae:	e014      	b.n	8001bda <ssd1306_DrawBitmap+0xa6>
 8001bb0:	230e      	movs	r3, #14
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	18ba      	adds	r2, r7, r2
 8001bba:	2100      	movs	r1, #0
 8001bbc:	5e52      	ldrsh	r2, [r2, r1]
 8001bbe:	4353      	muls	r3, r2
 8001bc0:	220d      	movs	r2, #13
 8001bc2:	18ba      	adds	r2, r7, r2
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	08d2      	lsrs	r2, r2, #3
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	189b      	adds	r3, r3, r2
 8001bcc:	001a      	movs	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	189a      	adds	r2, r3, r2
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	7812      	ldrb	r2, [r2, #0]
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	230f      	movs	r3, #15
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da0e      	bge.n	8001c04 <ssd1306_DrawBitmap+0xd0>
 8001be6:	1dfa      	adds	r2, r7, #7
 8001be8:	230d      	movs	r3, #13
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	18d3      	adds	r3, r2, r3
 8001bf2:	b2d8      	uxtb	r0, r3
 8001bf4:	2324      	movs	r3, #36	@ 0x24
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	1dbb      	adds	r3, r7, #6
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	0019      	movs	r1, r3
 8001c00:	f7ff fe42 	bl	8001888 <ssd1306_DrawPixel>
 8001c04:	210d      	movs	r1, #13
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	3201      	adds	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	230d      	movs	r3, #13
 8001c12:	18fa      	adds	r2, r7, r3
 8001c14:	1d7b      	adds	r3, r7, #5
 8001c16:	7812      	ldrb	r2, [r2, #0]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3bb      	bcc.n	8001b96 <ssd1306_DrawBitmap+0x62>
 8001c1e:	210e      	movs	r1, #14
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	3201      	adds	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	1dbb      	adds	r3, r7, #6
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	1dbb      	adds	r3, r7, #6
 8001c30:	3201      	adds	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	230e      	movs	r3, #14
 8001c36:	18fa      	adds	r2, r7, r3
 8001c38:	2320      	movs	r3, #32
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	7812      	ldrb	r2, [r2, #0]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d3a3      	bcc.n	8001b8c <ssd1306_DrawBitmap+0x58>
 8001c44:	e000      	b.n	8001c48 <ssd1306_DrawBitmap+0x114>
 8001c46:	46c0      	nop			@ (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b005      	add	sp, #20
 8001c4c:	bd90      	pop	{r4, r7, pc}

08001c4e <ssd1306_SetContrast>:
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	0002      	movs	r2, r0
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	2281      	movs	r2, #129	@ 0x81
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7ff fd22 	bl	80016b0 <ssd1306_WriteCommand>
 8001c6c:	1dfb      	adds	r3, r7, #7
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff fd1d 	bl	80016b0 <ssd1306_WriteCommand>
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b004      	add	sp, #16
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <ssd1306_SetDisplayOn>:
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	0002      	movs	r2, r0
 8001c88:	1dfb      	adds	r3, r7, #7
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	1dfb      	adds	r3, r7, #7
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <ssd1306_SetDisplayOn+0x24>
 8001c94:	230f      	movs	r3, #15
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	22af      	movs	r2, #175	@ 0xaf
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <ssd1306_SetDisplayOn+0x48>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	715a      	strb	r2, [r3, #5]
 8001ca2:	e006      	b.n	8001cb2 <ssd1306_SetDisplayOn+0x32>
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	22ae      	movs	r2, #174	@ 0xae
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <ssd1306_SetDisplayOn+0x48>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	715a      	strb	r2, [r3, #5]
 8001cb2:	230f      	movs	r3, #15
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff fcf9 	bl	80016b0 <ssd1306_WriteCommand>
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b004      	add	sp, #16
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	20000660 	.word	0x20000660

08001ccc <ssd1306_InvertDisplay>:
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <ssd1306_InvertDisplay+0x1c>
 8001ce0:	20a7      	movs	r0, #167	@ 0xa7
 8001ce2:	f7ff fce5 	bl	80016b0 <ssd1306_WriteCommand>
 8001ce6:	e002      	b.n	8001cee <ssd1306_InvertDisplay+0x22>
 8001ce8:	20a6      	movs	r0, #166	@ 0xa6
 8001cea:	f7ff fce1 	bl	80016b0 <ssd1306_WriteCommand>
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	430a      	orrs	r2, r1
 8001d08:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d1c:	2180      	movs	r1, #128	@ 0x80
 8001d1e:	0549      	lsls	r1, r1, #21
 8001d20:	430a      	orrs	r2, r1
 8001d22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d24:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	055b      	lsls	r3, r3, #21
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b091      	sub	sp, #68	@ 0x44
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	232c      	movs	r3, #44	@ 0x2c
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	2314      	movs	r3, #20
 8001d50:	001a      	movs	r2, r3
 8001d52:	2100      	movs	r1, #0
 8001d54:	f002 fb80 	bl	8004458 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d58:	2414      	movs	r4, #20
 8001d5a:	193b      	adds	r3, r7, r4
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	2318      	movs	r3, #24
 8001d60:	001a      	movs	r2, r3
 8001d62:	2100      	movs	r1, #0
 8001d64:	f002 fb78 	bl	8004458 <memset>
  if(hi2c->Instance==I2C1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a35      	ldr	r2, [pc, #212]	@ (8001e44 <HAL_I2C_MspInit+0x104>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d163      	bne.n	8001e3a <HAL_I2C_MspInit+0xfa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d72:	193b      	adds	r3, r7, r4
 8001d74:	2220      	movs	r2, #32
 8001d76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d78:	193b      	adds	r3, r7, r4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d7e:	193b      	adds	r3, r7, r4
 8001d80:	0018      	movs	r0, r3
 8001d82:	f001 ffc1 	bl	8003d08 <HAL_RCCEx_PeriphCLKConfig>
 8001d86:	1e03      	subs	r3, r0, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d8a:	f7ff fc85 	bl	8001698 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e48 <HAL_I2C_MspInit+0x108>)
 8001d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d92:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <HAL_I2C_MspInit+0x108>)
 8001d94:	2102      	movs	r1, #2
 8001d96:	430a      	orrs	r2, r1
 8001d98:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <HAL_I2C_MspInit+0x108>)
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b28      	ldr	r3, [pc, #160]	@ (8001e48 <HAL_I2C_MspInit+0x108>)
 8001da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001daa:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <HAL_I2C_MspInit+0x108>)
 8001dac:	2101      	movs	r1, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001db2:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <HAL_I2C_MspInit+0x108>)
 8001db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db6:	2201      	movs	r2, #1
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dbe:	212c      	movs	r1, #44	@ 0x2c
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	0092      	lsls	r2, r2, #2
 8001dc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc8:	000c      	movs	r4, r1
 8001dca:	193b      	adds	r3, r7, r4
 8001dcc:	2212      	movs	r2, #18
 8001dce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd0:	193b      	adds	r3, r7, r4
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	193b      	adds	r3, r7, r4
 8001dd8:	2203      	movs	r2, #3
 8001dda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001ddc:	193b      	adds	r3, r7, r4
 8001dde:	2206      	movs	r2, #6
 8001de0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de2:	193b      	adds	r3, r7, r4
 8001de4:	4a19      	ldr	r2, [pc, #100]	@ (8001e4c <HAL_I2C_MspInit+0x10c>)
 8001de6:	0019      	movs	r1, r3
 8001de8:	0010      	movs	r0, r2
 8001dea:	f000 fc0f 	bl	800260c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dee:	0021      	movs	r1, r4
 8001df0:	187b      	adds	r3, r7, r1
 8001df2:	2280      	movs	r2, #128	@ 0x80
 8001df4:	0092      	lsls	r2, r2, #2
 8001df6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	2212      	movs	r2, #18
 8001dfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	2201      	movs	r2, #1
 8001e02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	2203      	movs	r2, #3
 8001e08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	2206      	movs	r2, #6
 8001e0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	187a      	adds	r2, r7, r1
 8001e12:	23a0      	movs	r3, #160	@ 0xa0
 8001e14:	05db      	lsls	r3, r3, #23
 8001e16:	0011      	movs	r1, r2
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 fbf7 	bl	800260c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_I2C_MspInit+0x108>)
 8001e20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <HAL_I2C_MspInit+0x108>)
 8001e24:	2180      	movs	r1, #128	@ 0x80
 8001e26:	0389      	lsls	r1, r1, #14
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_I2C_MspInit+0x108>)
 8001e2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	039b      	lsls	r3, r3, #14
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b011      	add	sp, #68	@ 0x44
 8001e40:	bd90      	pop	{r4, r7, pc}
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	40005400 	.word	0x40005400
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	50000400 	.word	0x50000400

08001e50 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <HAL_TIM_Base_MspInit+0x38>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10d      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e62:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <HAL_TIM_Base_MspInit+0x3c>)
 8001e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_TIM_Base_MspInit+0x3c>)
 8001e68:	2180      	movs	r1, #128	@ 0x80
 8001e6a:	0209      	lsls	r1, r1, #8
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_TIM_Base_MspInit+0x3c>)
 8001e72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b004      	add	sp, #16
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	40002000 	.word	0x40002000
 8001e8c:	40021000 	.word	0x40021000

08001e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e94:	46c0      	nop			@ (mov r8, r8)
 8001e96:	e7fd      	b.n	8001e94 <NMI_Handler+0x4>

08001e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9c:	46c0      	nop			@ (mov r8, r8)
 8001e9e:	e7fd      	b.n	8001e9c <HardFault_Handler+0x4>

08001ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ea4:	46c0      	nop			@ (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb8:	f000 f8e4 	bl	8002084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ebc:	46c0      	nop			@ (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <TIM14_IRQHandler+0x14>)
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f002 f8e4 	bl	80040a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001ed8:	46c0      	nop			@ (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	20000168 	.word	0x20000168

08001ee4 <_sbrk>:
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	4a14      	ldr	r2, [pc, #80]	@ (8001f40 <_sbrk+0x5c>)
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <_sbrk+0x60>)
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x22>
 8001f00:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <_sbrk+0x64>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <_sbrk+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	18d3      	adds	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d207      	bcs.n	8001f24 <_sbrk+0x40>
 8001f14:	f002 faa8 	bl	8004468 <__errno>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	425b      	negs	r3, r3
 8001f22:	e009      	b.n	8001f38 <_sbrk+0x54>
 8001f24:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b07      	ldr	r3, [pc, #28]	@ (8001f48 <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	18d2      	adds	r2, r2, r3
 8001f32:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <_sbrk+0x64>)
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b006      	add	sp, #24
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20002000 	.word	0x20002000
 8001f44:	00000400 	.word	0x00000400
 8001f48:	20000668 	.word	0x20000668
 8001f4c:	200007d8 	.word	0x200007d8

08001f50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f54:	46c0      	nop			@ (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <Reset_Handler>:
 8001f5c:	480d      	ldr	r0, [pc, #52]	@ (8001f94 <LoopForever+0x2>)
 8001f5e:	4685      	mov	sp, r0
 8001f60:	f7ff fff6 	bl	8001f50 <SystemInit>
 8001f64:	480c      	ldr	r0, [pc, #48]	@ (8001f98 <LoopForever+0x6>)
 8001f66:	490d      	ldr	r1, [pc, #52]	@ (8001f9c <LoopForever+0xa>)
 8001f68:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa0 <LoopForever+0xe>)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e002      	b.n	8001f74 <LoopCopyDataInit>

08001f6e <CopyDataInit>:
 8001f6e:	58d4      	ldr	r4, [r2, r3]
 8001f70:	50c4      	str	r4, [r0, r3]
 8001f72:	3304      	adds	r3, #4

08001f74 <LoopCopyDataInit>:
 8001f74:	18c4      	adds	r4, r0, r3
 8001f76:	428c      	cmp	r4, r1
 8001f78:	d3f9      	bcc.n	8001f6e <CopyDataInit>
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <LoopForever+0x12>)
 8001f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001fa8 <LoopForever+0x16>)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e001      	b.n	8001f86 <LoopFillZerobss>

08001f82 <FillZerobss>:
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	3204      	adds	r2, #4

08001f86 <LoopFillZerobss>:
 8001f86:	42a2      	cmp	r2, r4
 8001f88:	d3fb      	bcc.n	8001f82 <FillZerobss>
 8001f8a:	f002 fa73 	bl	8004474 <__libc_init_array>
 8001f8e:	f7ff f943 	bl	8001218 <main>

08001f92 <LoopForever>:
 8001f92:	e7fe      	b.n	8001f92 <LoopForever>
 8001f94:	20002000 	.word	0x20002000
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	200000f8 	.word	0x200000f8
 8001fa0:	080093e0 	.word	0x080093e0
 8001fa4:	200000f8 	.word	0x200000f8
 8001fa8:	200007d4 	.word	0x200007d4

08001fac <ADC1_IRQHandler>:
 8001fac:	e7fe      	b.n	8001fac <ADC1_IRQHandler>
	...

08001fb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb6:	1dfb      	adds	r3, r7, #7
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <HAL_Init+0x3c>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_Init+0x3c>)
 8001fc2:	2180      	movs	r1, #128	@ 0x80
 8001fc4:	0049      	lsls	r1, r1, #1
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fca:	2003      	movs	r0, #3
 8001fcc:	f000 f810 	bl	8001ff0 <HAL_InitTick>
 8001fd0:	1e03      	subs	r3, r0, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001fd4:	1dfb      	adds	r3, r7, #7
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e001      	b.n	8001fe0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001fdc:	f7ff fe8c 	bl	8001cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fe0:	1dfb      	adds	r3, r7, #7
 8001fe2:	781b      	ldrb	r3, [r3, #0]
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40022000 	.word	0x40022000

08001ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002000:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <HAL_InitTick+0x88>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d02b      	beq.n	8002060 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002008:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <HAL_InitTick+0x8c>)
 800200a:	681c      	ldr	r4, [r3, #0]
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <HAL_InitTick+0x88>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	0019      	movs	r1, r3
 8002012:	23fa      	movs	r3, #250	@ 0xfa
 8002014:	0098      	lsls	r0, r3, #2
 8002016:	f7fe f87d 	bl	8000114 <__udivsi3>
 800201a:	0003      	movs	r3, r0
 800201c:	0019      	movs	r1, r3
 800201e:	0020      	movs	r0, r4
 8002020:	f7fe f878 	bl	8000114 <__udivsi3>
 8002024:	0003      	movs	r3, r0
 8002026:	0018      	movs	r0, r3
 8002028:	f000 f93d 	bl	80022a6 <HAL_SYSTICK_Config>
 800202c:	1e03      	subs	r3, r0, #0
 800202e:	d112      	bne.n	8002056 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d80a      	bhi.n	800204c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	2301      	movs	r3, #1
 800203a:	425b      	negs	r3, r3
 800203c:	2200      	movs	r2, #0
 800203e:	0018      	movs	r0, r3
 8002040:	f000 f90c 	bl	800225c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002044:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <HAL_InitTick+0x90>)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e00d      	b.n	8002068 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800204c:	230f      	movs	r3, #15
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	e008      	b.n	8002068 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002056:	230f      	movs	r3, #15
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	e003      	b.n	8002068 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002060:	230f      	movs	r3, #15
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002068:	230f      	movs	r3, #15
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	781b      	ldrb	r3, [r3, #0]
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b005      	add	sp, #20
 8002074:	bd90      	pop	{r4, r7, pc}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	2000001c 	.word	0x2000001c
 800207c:	20000014 	.word	0x20000014
 8002080:	20000018 	.word	0x20000018

08002084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <HAL_IncTick+0x1c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	001a      	movs	r2, r3
 800208e:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <HAL_IncTick+0x20>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	18d2      	adds	r2, r2, r3
 8002094:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <HAL_IncTick+0x20>)
 8002096:	601a      	str	r2, [r3, #0]
}
 8002098:	46c0      	nop			@ (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	2000001c 	.word	0x2000001c
 80020a4:	2000066c 	.word	0x2000066c

080020a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  return uwTick;
 80020ac:	4b02      	ldr	r3, [pc, #8]	@ (80020b8 <HAL_GetTick+0x10>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	2000066c 	.word	0x2000066c

080020bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c4:	f7ff fff0 	bl	80020a8 <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	d005      	beq.n	80020e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <HAL_Delay+0x44>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	001a      	movs	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	189b      	adds	r3, r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	f7ff ffe0 	bl	80020a8 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d8f7      	bhi.n	80020e4 <HAL_Delay+0x28>
  {
  }
}
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b004      	add	sp, #16
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	2000001c 	.word	0x2000001c

08002104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	0002      	movs	r2, r0
 800210c:	1dfb      	adds	r3, r7, #7
 800210e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002110:	1dfb      	adds	r3, r7, #7
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b7f      	cmp	r3, #127	@ 0x7f
 8002116:	d809      	bhi.n	800212c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002118:	1dfb      	adds	r3, r7, #7
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	001a      	movs	r2, r3
 800211e:	231f      	movs	r3, #31
 8002120:	401a      	ands	r2, r3
 8002122:	4b04      	ldr	r3, [pc, #16]	@ (8002134 <__NVIC_EnableIRQ+0x30>)
 8002124:	2101      	movs	r1, #1
 8002126:	4091      	lsls	r1, r2
 8002128:	000a      	movs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800212c:	46c0      	nop			@ (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	b002      	add	sp, #8
 8002132:	bd80      	pop	{r7, pc}
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	0002      	movs	r2, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	1dfb      	adds	r3, r7, #7
 8002144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002146:	1dfb      	adds	r3, r7, #7
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b7f      	cmp	r3, #127	@ 0x7f
 800214c:	d828      	bhi.n	80021a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800214e:	4a2f      	ldr	r2, [pc, #188]	@ (800220c <__NVIC_SetPriority+0xd4>)
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b25b      	sxtb	r3, r3
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	33c0      	adds	r3, #192	@ 0xc0
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	589b      	ldr	r3, [r3, r2]
 800215e:	1dfa      	adds	r2, r7, #7
 8002160:	7812      	ldrb	r2, [r2, #0]
 8002162:	0011      	movs	r1, r2
 8002164:	2203      	movs	r2, #3
 8002166:	400a      	ands	r2, r1
 8002168:	00d2      	lsls	r2, r2, #3
 800216a:	21ff      	movs	r1, #255	@ 0xff
 800216c:	4091      	lsls	r1, r2
 800216e:	000a      	movs	r2, r1
 8002170:	43d2      	mvns	r2, r2
 8002172:	401a      	ands	r2, r3
 8002174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	22ff      	movs	r2, #255	@ 0xff
 800217c:	401a      	ands	r2, r3
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	0018      	movs	r0, r3
 8002184:	2303      	movs	r3, #3
 8002186:	4003      	ands	r3, r0
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800218c:	481f      	ldr	r0, [pc, #124]	@ (800220c <__NVIC_SetPriority+0xd4>)
 800218e:	1dfb      	adds	r3, r7, #7
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b25b      	sxtb	r3, r3
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	430a      	orrs	r2, r1
 8002198:	33c0      	adds	r3, #192	@ 0xc0
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800219e:	e031      	b.n	8002204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002210 <__NVIC_SetPriority+0xd8>)
 80021a2:	1dfb      	adds	r3, r7, #7
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	0019      	movs	r1, r3
 80021a8:	230f      	movs	r3, #15
 80021aa:	400b      	ands	r3, r1
 80021ac:	3b08      	subs	r3, #8
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3306      	adds	r3, #6
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	18d3      	adds	r3, r2, r3
 80021b6:	3304      	adds	r3, #4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1dfa      	adds	r2, r7, #7
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	0011      	movs	r1, r2
 80021c0:	2203      	movs	r2, #3
 80021c2:	400a      	ands	r2, r1
 80021c4:	00d2      	lsls	r2, r2, #3
 80021c6:	21ff      	movs	r1, #255	@ 0xff
 80021c8:	4091      	lsls	r1, r2
 80021ca:	000a      	movs	r2, r1
 80021cc:	43d2      	mvns	r2, r2
 80021ce:	401a      	ands	r2, r3
 80021d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	019b      	lsls	r3, r3, #6
 80021d6:	22ff      	movs	r2, #255	@ 0xff
 80021d8:	401a      	ands	r2, r3
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	0018      	movs	r0, r3
 80021e0:	2303      	movs	r3, #3
 80021e2:	4003      	ands	r3, r0
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e8:	4809      	ldr	r0, [pc, #36]	@ (8002210 <__NVIC_SetPriority+0xd8>)
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	001c      	movs	r4, r3
 80021f0:	230f      	movs	r3, #15
 80021f2:	4023      	ands	r3, r4
 80021f4:	3b08      	subs	r3, #8
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	430a      	orrs	r2, r1
 80021fa:	3306      	adds	r3, #6
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	18c3      	adds	r3, r0, r3
 8002200:	3304      	adds	r3, #4
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	46c0      	nop			@ (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b003      	add	sp, #12
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	e000e100 	.word	0xe000e100
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	1e5a      	subs	r2, r3, #1
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	045b      	lsls	r3, r3, #17
 8002224:	429a      	cmp	r2, r3
 8002226:	d301      	bcc.n	800222c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002228:	2301      	movs	r3, #1
 800222a:	e010      	b.n	800224e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <SysTick_Config+0x44>)
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	3a01      	subs	r2, #1
 8002232:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002234:	2301      	movs	r3, #1
 8002236:	425b      	negs	r3, r3
 8002238:	2103      	movs	r1, #3
 800223a:	0018      	movs	r0, r3
 800223c:	f7ff ff7c 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <SysTick_Config+0x44>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <SysTick_Config+0x44>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b002      	add	sp, #8
 8002254:	bd80      	pop	{r7, pc}
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	210f      	movs	r1, #15
 8002268:	187b      	adds	r3, r7, r1
 800226a:	1c02      	adds	r2, r0, #0
 800226c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	187b      	adds	r3, r7, r1
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b25b      	sxtb	r3, r3
 8002276:	0011      	movs	r1, r2
 8002278:	0018      	movs	r0, r3
 800227a:	f7ff ff5d 	bl	8002138 <__NVIC_SetPriority>
}
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	46bd      	mov	sp, r7
 8002282:	b004      	add	sp, #16
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	0002      	movs	r2, r0
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b25b      	sxtb	r3, r3
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff ff33 	bl	8002104 <__NVIC_EnableIRQ>
}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b002      	add	sp, #8
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7ff ffaf 	bl	8002214 <SysTick_Config>
 80022b6:	0003      	movs	r3, r0
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	603a      	str	r2, [r7, #0]
 80022cc:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022ce:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <HAL_FLASH_Program+0x94>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_FLASH_Program+0x1a>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e038      	b.n	800234c <HAL_FLASH_Program+0x8c>
 80022da:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <HAL_FLASH_Program+0x94>)
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002354 <HAL_FLASH_Program+0x94>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80022e6:	2517      	movs	r5, #23
 80022e8:	197c      	adds	r4, r7, r5
 80022ea:	23fa      	movs	r3, #250	@ 0xfa
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	0018      	movs	r0, r3
 80022f0:	f000 f87a 	bl	80023e8 <FLASH_WaitForLastOperation>
 80022f4:	0003      	movs	r3, r0
 80022f6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80022f8:	197b      	adds	r3, r7, r5
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11f      	bne.n	8002340 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d106      	bne.n	8002314 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	0008      	movs	r0, r1
 800230e:	f000 f8b9 	bl	8002484 <FLASH_Program_DoubleWord>
 8002312:	e005      	b.n	8002320 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	0011      	movs	r1, r2
 800231a:	0018      	movs	r0, r3
 800231c:	f002 fd24 	bl	8004d68 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002320:	2317      	movs	r3, #23
 8002322:	18fc      	adds	r4, r7, r3
 8002324:	23fa      	movs	r3, #250	@ 0xfa
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	0018      	movs	r0, r3
 800232a:	f000 f85d 	bl	80023e8 <FLASH_WaitForLastOperation>
 800232e:	0003      	movs	r3, r0
 8002330:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_FLASH_Program+0x98>)
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43d9      	mvns	r1, r3
 800233a:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <HAL_FLASH_Program+0x98>)
 800233c:	400a      	ands	r2, r1
 800233e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <HAL_FLASH_Program+0x94>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002346:	2317      	movs	r3, #23
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	781b      	ldrb	r3, [r3, #0]
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b006      	add	sp, #24
 8002352:	bdb0      	pop	{r4, r5, r7, pc}
 8002354:	20000670 	.word	0x20000670
 8002358:	40022000 	.word	0x40022000

0800235c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <HAL_FLASH_Unlock+0x3c>)
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	da0c      	bge.n	800238a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_FLASH_Unlock+0x3c>)
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <HAL_FLASH_Unlock+0x40>)
 8002374:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002376:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <HAL_FLASH_Unlock+0x3c>)
 8002378:	4a09      	ldr	r2, [pc, #36]	@ (80023a0 <HAL_FLASH_Unlock+0x44>)
 800237a:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_FLASH_Unlock+0x3c>)
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	2b00      	cmp	r3, #0
 8002382:	da02      	bge.n	800238a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8002384:	1dfb      	adds	r3, r7, #7
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	781b      	ldrb	r3, [r3, #0]
}
 800238e:	0018      	movs	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	b002      	add	sp, #8
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	40022000 	.word	0x40022000
 800239c:	45670123 	.word	0x45670123
 80023a0:	cdef89ab 	.word	0xcdef89ab

080023a4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023b0:	23fa      	movs	r3, #250	@ 0xfa
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	0018      	movs	r0, r3
 80023b6:	f000 f817 	bl	80023e8 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_FLASH_Lock+0x40>)
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_FLASH_Lock+0x40>)
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	0609      	lsls	r1, r1, #24
 80023c4:	430a      	orrs	r2, r1
 80023c6:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_FLASH_Lock+0x40>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	da02      	bge.n	80023d6 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 80023d0:	1dfb      	adds	r3, r7, #7
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	781b      	ldrb	r3, [r3, #0]
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b002      	add	sp, #8
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	40022000 	.word	0x40022000

080023e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff fe5a 	bl	80020a8 <HAL_GetTick>
 80023f4:	0003      	movs	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	025b      	lsls	r3, r3, #9
 80023fc:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80023fe:	e00c      	b.n	800241a <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3301      	adds	r3, #1
 8002404:	d009      	beq.n	800241a <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8002406:	f7ff fe4f 	bl	80020a8 <HAL_GetTick>
 800240a:	0002      	movs	r2, r0
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d801      	bhi.n	800241a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e028      	b.n	800246c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <FLASH_WaitForLastOperation+0x8c>)
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4013      	ands	r3, r2
 8002422:	d1ed      	bne.n	8002400 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8002424:	4b13      	ldr	r3, [pc, #76]	@ (8002474 <FLASH_WaitForLastOperation+0x8c>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	4a13      	ldr	r2, [pc, #76]	@ (8002478 <FLASH_WaitForLastOperation+0x90>)
 800242a:	4013      	ands	r3, r2
 800242c:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <FLASH_WaitForLastOperation+0x8c>)
 8002430:	4a12      	ldr	r2, [pc, #72]	@ (800247c <FLASH_WaitForLastOperation+0x94>)
 8002432:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d011      	beq.n	800245e <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <FLASH_WaitForLastOperation+0x98>)
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e013      	b.n	800246c <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3301      	adds	r3, #1
 8002448:	d009      	beq.n	800245e <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800244a:	f7ff fe2d 	bl	80020a8 <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d801      	bhi.n	800245e <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e006      	b.n	800246c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800245e:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <FLASH_WaitForLastOperation+0x8c>)
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	2380      	movs	r3, #128	@ 0x80
 8002464:	02db      	lsls	r3, r3, #11
 8002466:	4013      	ands	r3, r2
 8002468:	d1ec      	bne.n	8002444 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b004      	add	sp, #16
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40022000 	.word	0x40022000
 8002478:	000083fa 	.word	0x000083fa
 800247c:	000083fb 	.word	0x000083fb
 8002480:	20000670 	.word	0x20000670

08002484 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002484:	b5b0      	push	{r4, r5, r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	603a      	str	r2, [r7, #0]
 800248e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <FLASH_Program_DoubleWord+0x3c>)
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <FLASH_Program_DoubleWord+0x3c>)
 8002496:	2101      	movs	r1, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80024a2:	f3bf 8f6f 	isb	sy
}
 80024a6:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	001c      	movs	r4, r3
 80024ac:	2300      	movs	r3, #0
 80024ae:	001d      	movs	r5, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3304      	adds	r3, #4
 80024b4:	0022      	movs	r2, r4
 80024b6:	601a      	str	r2, [r3, #0]
}
 80024b8:	46c0      	nop			@ (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b004      	add	sp, #16
 80024be:	bdb0      	pop	{r4, r5, r7, pc}
 80024c0:	40022000 	.word	0x40022000

080024c4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80024c4:	b5b0      	push	{r4, r5, r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024ce:	4b35      	ldr	r3, [pc, #212]	@ (80025a4 <HAL_FLASHEx_Erase+0xe0>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_FLASHEx_Erase+0x16>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e05f      	b.n	800259a <HAL_FLASHEx_Erase+0xd6>
 80024da:	4b32      	ldr	r3, [pc, #200]	@ (80025a4 <HAL_FLASHEx_Erase+0xe0>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024e0:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <HAL_FLASHEx_Erase+0xe0>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024e6:	250f      	movs	r5, #15
 80024e8:	197c      	adds	r4, r7, r5
 80024ea:	23fa      	movs	r3, #250	@ 0xfa
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7ff ff7a 	bl	80023e8 <FLASH_WaitForLastOperation>
 80024f4:	0003      	movs	r3, r0
 80024f6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80024f8:	002c      	movs	r4, r5
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d145      	bne.n	800258e <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2204      	movs	r2, #4
 8002506:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d10d      	bne.n	800252c <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0018      	movs	r0, r3
 8002516:	f000 f849 	bl	80025ac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800251a:	193c      	adds	r4, r7, r4
 800251c:	23fa      	movs	r3, #250	@ 0xfa
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff ff61 	bl	80023e8 <FLASH_WaitForLastOperation>
 8002526:	0003      	movs	r3, r0
 8002528:	7023      	strb	r3, [r4, #0]
 800252a:	e030      	b.n	800258e <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2201      	movs	r2, #1
 8002530:	4252      	negs	r2, r2
 8002532:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	e01a      	b.n	8002572 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	0011      	movs	r1, r2
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f845 	bl	80025d4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800254a:	250f      	movs	r5, #15
 800254c:	197c      	adds	r4, r7, r5
 800254e:	23fa      	movs	r3, #250	@ 0xfa
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	0018      	movs	r0, r3
 8002554:	f7ff ff48 	bl	80023e8 <FLASH_WaitForLastOperation>
 8002558:	0003      	movs	r3, r0
 800255a:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800255c:	197b      	adds	r3, r7, r5
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	601a      	str	r2, [r3, #0]
          break;
 800256a:	e00a      	b.n	8002582 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	3301      	adds	r3, #1
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	18d3      	adds	r3, r2, r3
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	429a      	cmp	r2, r3
 8002580:	d3dc      	bcc.n	800253c <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_FLASHEx_Erase+0xe4>)
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <HAL_FLASHEx_Erase+0xe4>)
 8002588:	2102      	movs	r1, #2
 800258a:	438a      	bics	r2, r1
 800258c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_FLASHEx_Erase+0xe0>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002594:	230f      	movs	r3, #15
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	781b      	ldrb	r3, [r3, #0]
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b004      	add	sp, #16
 80025a0:	bdb0      	pop	{r4, r5, r7, pc}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	20000670 	.word	0x20000670
 80025a8:	40022000 	.word	0x40022000

080025ac <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <FLASH_MassErase+0x24>)
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <FLASH_MassErase+0x24>)
 80025be:	2180      	movs	r1, #128	@ 0x80
 80025c0:	0249      	lsls	r1, r1, #9
 80025c2:	430a      	orrs	r2, r1
 80025c4:	615a      	str	r2, [r3, #20]
}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	40022000 	.word	0x40022000

080025d4 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80025de:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <FLASH_PageErase+0x2c>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4a08      	ldr	r2, [pc, #32]	@ (8002604 <FLASH_PageErase+0x30>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	00da      	lsls	r2, r3, #3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	4b03      	ldr	r3, [pc, #12]	@ (8002600 <FLASH_PageErase+0x2c>)
 80025f2:	4905      	ldr	r1, [pc, #20]	@ (8002608 <FLASH_PageErase+0x34>)
 80025f4:	430a      	orrs	r2, r1
 80025f6:	615a      	str	r2, [r3, #20]
}
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b004      	add	sp, #16
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40022000 	.word	0x40022000
 8002604:	ffffe007 	.word	0xffffe007
 8002608:	00010002 	.word	0x00010002

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261a:	e147      	b.n	80028ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4091      	lsls	r1, r2
 8002626:	000a      	movs	r2, r1
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d100      	bne.n	8002634 <HAL_GPIO_Init+0x28>
 8002632:	e138      	b.n	80028a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2203      	movs	r2, #3
 800263a:	4013      	ands	r3, r2
 800263c:	2b01      	cmp	r3, #1
 800263e:	d005      	beq.n	800264c <HAL_GPIO_Init+0x40>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2203      	movs	r2, #3
 8002646:	4013      	ands	r3, r2
 8002648:	2b02      	cmp	r3, #2
 800264a:	d130      	bne.n	80026ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	409a      	lsls	r2, r3
 800265a:	0013      	movs	r3, r2
 800265c:	43da      	mvns	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	0013      	movs	r3, r2
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002682:	2201      	movs	r2, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
 8002688:	0013      	movs	r3, r2
 800268a:	43da      	mvns	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	2201      	movs	r2, #1
 800269a:	401a      	ands	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d017      	beq.n	80026ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	409a      	lsls	r2, r3
 80026c8:	0013      	movs	r3, r2
 80026ca:	43da      	mvns	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	0013      	movs	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2203      	movs	r2, #3
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d123      	bne.n	800273e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	58d3      	ldr	r3, [r2, r3]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2207      	movs	r2, #7
 8002708:	4013      	ands	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	409a      	lsls	r2, r3
 8002710:	0013      	movs	r3, r2
 8002712:	43da      	mvns	r2, r3
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2107      	movs	r1, #7
 8002722:	400b      	ands	r3, r1
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	409a      	lsls	r2, r3
 8002728:	0013      	movs	r3, r2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	6939      	ldr	r1, [r7, #16]
 800273c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	409a      	lsls	r2, r3
 800274c:	0013      	movs	r3, r2
 800274e:	43da      	mvns	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2203      	movs	r2, #3
 800275c:	401a      	ands	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	409a      	lsls	r2, r3
 8002764:	0013      	movs	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	23c0      	movs	r3, #192	@ 0xc0
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	4013      	ands	r3, r2
 800277c:	d100      	bne.n	8002780 <HAL_GPIO_Init+0x174>
 800277e:	e092      	b.n	80028a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002780:	4a50      	ldr	r2, [pc, #320]	@ (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3318      	adds	r3, #24
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	589b      	ldr	r3, [r3, r2]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2203      	movs	r2, #3
 8002792:	4013      	ands	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	220f      	movs	r2, #15
 8002798:	409a      	lsls	r2, r3
 800279a:	0013      	movs	r3, r2
 800279c:	43da      	mvns	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	23a0      	movs	r3, #160	@ 0xa0
 80027a8:	05db      	lsls	r3, r3, #23
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x1ca>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a45      	ldr	r2, [pc, #276]	@ (80028c8 <HAL_GPIO_Init+0x2bc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x1c6>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a44      	ldr	r2, [pc, #272]	@ (80028cc <HAL_GPIO_Init+0x2c0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x1c2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a43      	ldr	r2, [pc, #268]	@ (80028d0 <HAL_GPIO_Init+0x2c4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x1be>
 80027c6:	2303      	movs	r3, #3
 80027c8:	e006      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027ca:	2305      	movs	r3, #5
 80027cc:	e004      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e002      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027d6:	2300      	movs	r3, #0
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	2103      	movs	r1, #3
 80027dc:	400a      	ands	r2, r1
 80027de:	00d2      	lsls	r2, r2, #3
 80027e0:	4093      	lsls	r3, r2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80027e8:	4936      	ldr	r1, [pc, #216]	@ (80028c4 <HAL_GPIO_Init+0x2b8>)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	089b      	lsrs	r3, r3, #2
 80027ee:	3318      	adds	r3, #24
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027f6:	4b33      	ldr	r3, [pc, #204]	@ (80028c4 <HAL_GPIO_Init+0x2b8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43da      	mvns	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	2380      	movs	r3, #128	@ 0x80
 800280c:	035b      	lsls	r3, r3, #13
 800280e:	4013      	ands	r3, r2
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800281a:	4b2a      	ldr	r3, [pc, #168]	@ (80028c4 <HAL_GPIO_Init+0x2b8>)
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002820:	4b28      	ldr	r3, [pc, #160]	@ (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	43da      	mvns	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	039b      	lsls	r3, r3, #14
 8002838:	4013      	ands	r3, r2
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002844:	4b1f      	ldr	r3, [pc, #124]	@ (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800284a:	4a1e      	ldr	r2, [pc, #120]	@ (80028c4 <HAL_GPIO_Init+0x2b8>)
 800284c:	2384      	movs	r3, #132	@ 0x84
 800284e:	58d3      	ldr	r3, [r2, r3]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	43da      	mvns	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	2380      	movs	r3, #128	@ 0x80
 8002862:	029b      	lsls	r3, r3, #10
 8002864:	4013      	ands	r3, r2
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002870:	4914      	ldr	r1, [pc, #80]	@ (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002872:	2284      	movs	r2, #132	@ 0x84
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002878:	4a12      	ldr	r2, [pc, #72]	@ (80028c4 <HAL_GPIO_Init+0x2b8>)
 800287a:	2380      	movs	r3, #128	@ 0x80
 800287c:	58d3      	ldr	r3, [r2, r3]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43da      	mvns	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	2380      	movs	r3, #128	@ 0x80
 8002890:	025b      	lsls	r3, r3, #9
 8002892:	4013      	ands	r3, r2
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800289e:	4909      	ldr	r1, [pc, #36]	@ (80028c4 <HAL_GPIO_Init+0x2b8>)
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	40da      	lsrs	r2, r3
 80028b4:	1e13      	subs	r3, r2, #0
 80028b6:	d000      	beq.n	80028ba <HAL_GPIO_Init+0x2ae>
 80028b8:	e6b0      	b.n	800261c <HAL_GPIO_Init+0x10>
  }
}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	46c0      	nop			@ (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b006      	add	sp, #24
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021800 	.word	0x40021800
 80028c8:	50000400 	.word	0x50000400
 80028cc:	50000800 	.word	0x50000800
 80028d0:	50000c00 	.word	0x50000c00

080028d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	000a      	movs	r2, r1
 80028de:	1cbb      	adds	r3, r7, #2
 80028e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	1cba      	adds	r2, r7, #2
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	4013      	ands	r3, r2
 80028ec:	d004      	beq.n	80028f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80028ee:	230f      	movs	r3, #15
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e003      	b.n	8002900 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028f8:	230f      	movs	r3, #15
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002900:	230f      	movs	r3, #15
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	0008      	movs	r0, r1
 8002918:	0011      	movs	r1, r2
 800291a:	1cbb      	adds	r3, r7, #2
 800291c:	1c02      	adds	r2, r0, #0
 800291e:	801a      	strh	r2, [r3, #0]
 8002920:	1c7b      	adds	r3, r7, #1
 8002922:	1c0a      	adds	r2, r1, #0
 8002924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002926:	1c7b      	adds	r3, r7, #1
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800292e:	1cbb      	adds	r3, r7, #2
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002936:	e003      	b.n	8002940 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002938:	1cbb      	adds	r3, r7, #2
 800293a:	881a      	ldrh	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002940:	46c0      	nop			@ (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e08f      	b.n	8002a7a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2241      	movs	r2, #65	@ 0x41
 800295e:	5c9b      	ldrb	r3, [r3, r2]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d107      	bne.n	8002976 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2240      	movs	r2, #64	@ 0x40
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f7ff f9e5 	bl	8001d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2241      	movs	r2, #65	@ 0x41
 800297a:	2124      	movs	r1, #36	@ 0x24
 800297c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	438a      	bics	r2, r1
 800298c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	493b      	ldr	r1, [pc, #236]	@ (8002a84 <HAL_I2C_Init+0x13c>)
 8002998:	400a      	ands	r2, r1
 800299a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4938      	ldr	r1, [pc, #224]	@ (8002a88 <HAL_I2C_Init+0x140>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d108      	bne.n	80029c6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2180      	movs	r1, #128	@ 0x80
 80029be:	0209      	lsls	r1, r1, #8
 80029c0:	430a      	orrs	r2, r1
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	e007      	b.n	80029d6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2184      	movs	r1, #132	@ 0x84
 80029d0:	0209      	lsls	r1, r1, #8
 80029d2:	430a      	orrs	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d109      	bne.n	80029f2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2180      	movs	r1, #128	@ 0x80
 80029ea:	0109      	lsls	r1, r1, #4
 80029ec:	430a      	orrs	r2, r1
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	e007      	b.n	8002a02 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4923      	ldr	r1, [pc, #140]	@ (8002a8c <HAL_I2C_Init+0x144>)
 80029fe:	400a      	ands	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4920      	ldr	r1, [pc, #128]	@ (8002a90 <HAL_I2C_Init+0x148>)
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	491a      	ldr	r1, [pc, #104]	@ (8002a88 <HAL_I2C_Init+0x140>)
 8002a1e:	400a      	ands	r2, r1
 8002a20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69d9      	ldr	r1, [r3, #28]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1a      	ldr	r2, [r3, #32]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2101      	movs	r1, #1
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2241      	movs	r2, #65	@ 0x41
 8002a66:	2120      	movs	r1, #32
 8002a68:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2242      	movs	r2, #66	@ 0x42
 8002a74:	2100      	movs	r1, #0
 8002a76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b002      	add	sp, #8
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	f0ffffff 	.word	0xf0ffffff
 8002a88:	ffff7fff 	.word	0xffff7fff
 8002a8c:	fffff7ff 	.word	0xfffff7ff
 8002a90:	02008000 	.word	0x02008000

08002a94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b089      	sub	sp, #36	@ 0x24
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	000c      	movs	r4, r1
 8002a9e:	0010      	movs	r0, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	230a      	movs	r3, #10
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	1c22      	adds	r2, r4, #0
 8002aa8:	801a      	strh	r2, [r3, #0]
 8002aaa:	2308      	movs	r3, #8
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	1c02      	adds	r2, r0, #0
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	1dbb      	adds	r3, r7, #6
 8002ab4:	1c0a      	adds	r2, r1, #0
 8002ab6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2241      	movs	r2, #65	@ 0x41
 8002abc:	5c9b      	ldrb	r3, [r3, r2]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d000      	beq.n	8002ac6 <HAL_I2C_Mem_Write+0x32>
 8002ac4:	e10c      	b.n	8002ce0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <HAL_I2C_Mem_Write+0x42>
 8002acc:	232c      	movs	r3, #44	@ 0x2c
 8002ace:	18fb      	adds	r3, r7, r3
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2280      	movs	r2, #128	@ 0x80
 8002ada:	0092      	lsls	r2, r2, #2
 8002adc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0ff      	b.n	8002ce2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2240      	movs	r2, #64	@ 0x40
 8002ae6:	5c9b      	ldrb	r3, [r3, r2]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_I2C_Mem_Write+0x5c>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e0f8      	b.n	8002ce2 <HAL_I2C_Mem_Write+0x24e>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2240      	movs	r2, #64	@ 0x40
 8002af4:	2101      	movs	r1, #1
 8002af6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002af8:	f7ff fad6 	bl	80020a8 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b00:	2380      	movs	r3, #128	@ 0x80
 8002b02:	0219      	lsls	r1, r3, #8
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2319      	movs	r3, #25
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f000 f975 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0e3      	b.n	8002ce2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2241      	movs	r2, #65	@ 0x41
 8002b1e:	2121      	movs	r1, #33	@ 0x21
 8002b20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2242      	movs	r2, #66	@ 0x42
 8002b26:	2140      	movs	r1, #64	@ 0x40
 8002b28:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	222c      	movs	r2, #44	@ 0x2c
 8002b3a:	18ba      	adds	r2, r7, r2
 8002b3c:	8812      	ldrh	r2, [r2, #0]
 8002b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b46:	1dbb      	adds	r3, r7, #6
 8002b48:	881c      	ldrh	r4, [r3, #0]
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	230a      	movs	r3, #10
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	8819      	ldrh	r1, [r3, #0]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	0023      	movs	r3, r4
 8002b62:	f000 f8c5 	bl	8002cf0 <I2C_RequestMemoryWrite>
 8002b66:	1e03      	subs	r3, r0, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2240      	movs	r2, #64	@ 0x40
 8002b6e:	2100      	movs	r1, #0
 8002b70:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0b5      	b.n	8002ce2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2bff      	cmp	r3, #255	@ 0xff
 8002b7e:	d911      	bls.n	8002ba4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	22ff      	movs	r2, #255	@ 0xff
 8002b84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	2380      	movs	r3, #128	@ 0x80
 8002b8e:	045c      	lsls	r4, r3, #17
 8002b90:	230a      	movs	r3, #10
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	8819      	ldrh	r1, [r3, #0]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	0023      	movs	r3, r4
 8002b9e:	f000 fb07 	bl	80031b0 <I2C_TransferConfig>
 8002ba2:	e012      	b.n	8002bca <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	049c      	lsls	r4, r3, #18
 8002bb8:	230a      	movs	r3, #10
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	8819      	ldrh	r1, [r3, #0]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	0023      	movs	r3, r4
 8002bc6:	f000 faf3 	bl	80031b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 f96b 	bl	8002eac <I2C_WaitOnTXISFlagUntilTimeout>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e081      	b.n	8002ce2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d03a      	beq.n	8002c8e <HAL_I2C_Mem_Write+0x1fa>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d136      	bne.n	8002c8e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	0013      	movs	r3, r2
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2180      	movs	r1, #128	@ 0x80
 8002c2e:	f000 f8e5 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002c32:	1e03      	subs	r3, r0, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e053      	b.n	8002ce2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2bff      	cmp	r3, #255	@ 0xff
 8002c42:	d911      	bls.n	8002c68 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	22ff      	movs	r2, #255	@ 0xff
 8002c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	045c      	lsls	r4, r3, #17
 8002c54:	230a      	movs	r3, #10
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	8819      	ldrh	r1, [r3, #0]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	0023      	movs	r3, r4
 8002c62:	f000 faa5 	bl	80031b0 <I2C_TransferConfig>
 8002c66:	e012      	b.n	8002c8e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	049c      	lsls	r4, r3, #18
 8002c7c:	230a      	movs	r3, #10
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	8819      	ldrh	r1, [r3, #0]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	2300      	movs	r3, #0
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	0023      	movs	r3, r4
 8002c8a:	f000 fa91 	bl	80031b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d198      	bne.n	8002bca <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 f94a 	bl	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e01a      	b.n	8002ce2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	490b      	ldr	r1, [pc, #44]	@ (8002cec <HAL_I2C_Mem_Write+0x258>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2241      	movs	r2, #65	@ 0x41
 8002cc8:	2120      	movs	r1, #32
 8002cca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2242      	movs	r2, #66	@ 0x42
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2240      	movs	r2, #64	@ 0x40
 8002cd8:	2100      	movs	r1, #0
 8002cda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e000      	b.n	8002ce2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
  }
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b007      	add	sp, #28
 8002ce8:	bd90      	pop	{r4, r7, pc}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	fe00e800 	.word	0xfe00e800

08002cf0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002cf0:	b5b0      	push	{r4, r5, r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	000c      	movs	r4, r1
 8002cfa:	0010      	movs	r0, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	250a      	movs	r5, #10
 8002d00:	197b      	adds	r3, r7, r5
 8002d02:	1c22      	adds	r2, r4, #0
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	2308      	movs	r3, #8
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	1c02      	adds	r2, r0, #0
 8002d0c:	801a      	strh	r2, [r3, #0]
 8002d0e:	1dbb      	adds	r3, r7, #6
 8002d10:	1c0a      	adds	r2, r1, #0
 8002d12:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d14:	1dbb      	adds	r3, r7, #6
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	2380      	movs	r3, #128	@ 0x80
 8002d1c:	045c      	lsls	r4, r3, #17
 8002d1e:	197b      	adds	r3, r7, r5
 8002d20:	8819      	ldrh	r1, [r3, #0]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	4b23      	ldr	r3, [pc, #140]	@ (8002db4 <I2C_RequestMemoryWrite+0xc4>)
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	0023      	movs	r3, r4
 8002d2a:	f000 fa41 	bl	80031b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d30:	6a39      	ldr	r1, [r7, #32]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 f8b9 	bl	8002eac <I2C_WaitOnTXISFlagUntilTimeout>
 8002d3a:	1e03      	subs	r3, r0, #0
 8002d3c:	d001      	beq.n	8002d42 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e033      	b.n	8002daa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d42:	1dbb      	adds	r3, r7, #6
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d58:	e019      	b.n	8002d8e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6e:	6a39      	ldr	r1, [r7, #32]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 f89a 	bl	8002eac <I2C_WaitOnTXISFlagUntilTimeout>
 8002d78:	1e03      	subs	r3, r0, #0
 8002d7a:	d001      	beq.n	8002d80 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e014      	b.n	8002daa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d80:	2308      	movs	r3, #8
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8e:	6a3a      	ldr	r2, [r7, #32]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	0013      	movs	r3, r2
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2180      	movs	r1, #128	@ 0x80
 8002d9c:	f000 f82e 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002da0:	1e03      	subs	r3, r0, #0
 8002da2:	d001      	beq.n	8002da8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b004      	add	sp, #16
 8002db0:	bdb0      	pop	{r4, r5, r7, pc}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	80002000 	.word	0x80002000

08002db8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d103      	bne.n	8002dd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d007      	beq.n	8002df4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2101      	movs	r1, #1
 8002df0:	430a      	orrs	r2, r1
 8002df2:	619a      	str	r2, [r3, #24]
  }
}
 8002df4:	46c0      	nop			@ (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	1dfb      	adds	r3, r7, #7
 8002e0a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e0c:	e03a      	b.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	6839      	ldr	r1, [r7, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f000 f8d3 	bl	8002fc0 <I2C_IsErrorOccurred>
 8002e1a:	1e03      	subs	r3, r0, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e040      	b.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	d02d      	beq.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e28:	f7ff f93e 	bl	80020a8 <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d302      	bcc.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d122      	bne.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	4013      	ands	r3, r2
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	425a      	negs	r2, r3
 8002e4e:	4153      	adcs	r3, r2
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	001a      	movs	r2, r3
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d113      	bne.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e60:	2220      	movs	r2, #32
 8002e62:	431a      	orrs	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2241      	movs	r2, #65	@ 0x41
 8002e6c:	2120      	movs	r1, #32
 8002e6e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2242      	movs	r2, #66	@ 0x42
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2240      	movs	r2, #64	@ 0x40
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e00f      	b.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	425a      	negs	r2, r3
 8002e94:	4153      	adcs	r3, r2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	001a      	movs	r2, r3
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d0b5      	beq.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b004      	add	sp, #16
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eb8:	e032      	b.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f000 f87d 	bl	8002fc0 <I2C_IsErrorOccurred>
 8002ec6:	1e03      	subs	r3, r0, #0
 8002ec8:	d001      	beq.n	8002ece <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e030      	b.n	8002f30 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	d025      	beq.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed4:	f7ff f8e8 	bl	80020a8 <HAL_GetTick>
 8002ed8:	0002      	movs	r2, r0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d302      	bcc.n	8002eea <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d11a      	bne.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d013      	beq.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	2220      	movs	r2, #32
 8002efe:	431a      	orrs	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2241      	movs	r2, #65	@ 0x41
 8002f08:	2120      	movs	r1, #32
 8002f0a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2242      	movs	r2, #66	@ 0x42
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2240      	movs	r2, #64	@ 0x40
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e007      	b.n	8002f30 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2202      	movs	r2, #2
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d1c5      	bne.n	8002eba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b004      	add	sp, #16
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f44:	e02f      	b.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 f837 	bl	8002fc0 <I2C_IsErrorOccurred>
 8002f52:	1e03      	subs	r3, r0, #0
 8002f54:	d001      	beq.n	8002f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e02d      	b.n	8002fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7ff f8a5 	bl	80020a8 <HAL_GetTick>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11a      	bne.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2220      	movs	r2, #32
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d013      	beq.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	2220      	movs	r2, #32
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2241      	movs	r2, #65	@ 0x41
 8002f8e:	2120      	movs	r1, #32
 8002f90:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2242      	movs	r2, #66	@ 0x42
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2240      	movs	r2, #64	@ 0x40
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e007      	b.n	8002fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2220      	movs	r2, #32
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d1c8      	bne.n	8002f46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b004      	add	sp, #16
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	@ 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fcc:	2327      	movs	r3, #39	@ 0x27
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d100      	bne.n	8002fee <I2C_IsErrorOccurred+0x2e>
 8002fec:	e079      	b.n	80030e2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2210      	movs	r2, #16
 8002ff4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ff6:	e057      	b.n	80030a8 <I2C_IsErrorOccurred+0xe8>
 8002ff8:	2227      	movs	r2, #39	@ 0x27
 8002ffa:	18bb      	adds	r3, r7, r2
 8002ffc:	18ba      	adds	r2, r7, r2
 8002ffe:	7812      	ldrb	r2, [r2, #0]
 8003000:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	3301      	adds	r3, #1
 8003006:	d04f      	beq.n	80030a8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003008:	f7ff f84e 	bl	80020a8 <HAL_GetTick>
 800300c:	0002      	movs	r2, r0
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	429a      	cmp	r2, r3
 8003016:	d302      	bcc.n	800301e <I2C_IsErrorOccurred+0x5e>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d144      	bne.n	80030a8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	2380      	movs	r3, #128	@ 0x80
 8003026:	01db      	lsls	r3, r3, #7
 8003028:	4013      	ands	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800302c:	2013      	movs	r0, #19
 800302e:	183b      	adds	r3, r7, r0
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	2142      	movs	r1, #66	@ 0x42
 8003034:	5c52      	ldrb	r2, [r2, r1]
 8003036:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	401a      	ands	r2, r3
 8003044:	2380      	movs	r3, #128	@ 0x80
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	429a      	cmp	r2, r3
 800304a:	d126      	bne.n	800309a <I2C_IsErrorOccurred+0xda>
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	2380      	movs	r3, #128	@ 0x80
 8003050:	01db      	lsls	r3, r3, #7
 8003052:	429a      	cmp	r2, r3
 8003054:	d021      	beq.n	800309a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003056:	183b      	adds	r3, r7, r0
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b20      	cmp	r3, #32
 800305c:	d01d      	beq.n	800309a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2180      	movs	r1, #128	@ 0x80
 800306a:	01c9      	lsls	r1, r1, #7
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003070:	f7ff f81a 	bl	80020a8 <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003078:	e00f      	b.n	800309a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800307a:	f7ff f815 	bl	80020a8 <HAL_GetTick>
 800307e:	0002      	movs	r2, r0
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b19      	cmp	r3, #25
 8003086:	d908      	bls.n	800309a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	2220      	movs	r2, #32
 800308c:	4313      	orrs	r3, r2
 800308e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003090:	2327      	movs	r3, #39	@ 0x27
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]

              break;
 8003098:	e006      	b.n	80030a8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2220      	movs	r2, #32
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d1e8      	bne.n	800307a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2220      	movs	r2, #32
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d004      	beq.n	80030c0 <I2C_IsErrorOccurred+0x100>
 80030b6:	2327      	movs	r3, #39	@ 0x27
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d09b      	beq.n	8002ff8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030c0:	2327      	movs	r3, #39	@ 0x27
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2220      	movs	r2, #32
 80030d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	2204      	movs	r2, #4
 80030d6:	4313      	orrs	r3, r2
 80030d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030da:	2327      	movs	r3, #39	@ 0x27
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	2380      	movs	r3, #128	@ 0x80
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4013      	ands	r3, r2
 80030f2:	d00c      	beq.n	800310e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	2201      	movs	r2, #1
 80030f8:	4313      	orrs	r3, r2
 80030fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2280      	movs	r2, #128	@ 0x80
 8003102:	0052      	lsls	r2, r2, #1
 8003104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003106:	2327      	movs	r3, #39	@ 0x27
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4013      	ands	r3, r2
 8003116:	d00c      	beq.n	8003132 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	2208      	movs	r2, #8
 800311c:	4313      	orrs	r3, r2
 800311e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2280      	movs	r2, #128	@ 0x80
 8003126:	00d2      	lsls	r2, r2, #3
 8003128:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800312a:	2327      	movs	r3, #39	@ 0x27
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	2380      	movs	r3, #128	@ 0x80
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4013      	ands	r3, r2
 800313a:	d00c      	beq.n	8003156 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	2202      	movs	r2, #2
 8003140:	4313      	orrs	r3, r2
 8003142:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2280      	movs	r2, #128	@ 0x80
 800314a:	0092      	lsls	r2, r2, #2
 800314c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800314e:	2327      	movs	r3, #39	@ 0x27
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003156:	2327      	movs	r3, #39	@ 0x27
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01d      	beq.n	800319c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	0018      	movs	r0, r3
 8003164:	f7ff fe28 	bl	8002db8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	490e      	ldr	r1, [pc, #56]	@ (80031ac <I2C_IsErrorOccurred+0x1ec>)
 8003174:	400a      	ands	r2, r1
 8003176:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	431a      	orrs	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2241      	movs	r2, #65	@ 0x41
 8003188:	2120      	movs	r1, #32
 800318a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2242      	movs	r2, #66	@ 0x42
 8003190:	2100      	movs	r1, #0
 8003192:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2240      	movs	r2, #64	@ 0x40
 8003198:	2100      	movs	r1, #0
 800319a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800319c:	2327      	movs	r3, #39	@ 0x27
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	781b      	ldrb	r3, [r3, #0]
}
 80031a2:	0018      	movs	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b00a      	add	sp, #40	@ 0x28
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	fe00e800 	.word	0xfe00e800

080031b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	0008      	movs	r0, r1
 80031ba:	0011      	movs	r1, r2
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	240a      	movs	r4, #10
 80031c0:	193b      	adds	r3, r7, r4
 80031c2:	1c02      	adds	r2, r0, #0
 80031c4:	801a      	strh	r2, [r3, #0]
 80031c6:	2009      	movs	r0, #9
 80031c8:	183b      	adds	r3, r7, r0
 80031ca:	1c0a      	adds	r2, r1, #0
 80031cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	059b      	lsls	r3, r3, #22
 80031d4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031d6:	183b      	adds	r3, r7, r0
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	0419      	lsls	r1, r3, #16
 80031dc:	23ff      	movs	r3, #255	@ 0xff
 80031de:	041b      	lsls	r3, r3, #16
 80031e0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031e2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ea:	4313      	orrs	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031fa:	0d51      	lsrs	r1, r2, #21
 80031fc:	2280      	movs	r2, #128	@ 0x80
 80031fe:	00d2      	lsls	r2, r2, #3
 8003200:	400a      	ands	r2, r1
 8003202:	4907      	ldr	r1, [pc, #28]	@ (8003220 <I2C_TransferConfig+0x70>)
 8003204:	430a      	orrs	r2, r1
 8003206:	43d2      	mvns	r2, r2
 8003208:	401a      	ands	r2, r3
 800320a:	0011      	movs	r1, r2
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b007      	add	sp, #28
 800321c:	bd90      	pop	{r4, r7, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	03ff63ff 	.word	0x03ff63ff

08003224 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2241      	movs	r2, #65	@ 0x41
 8003232:	5c9b      	ldrb	r3, [r3, r2]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b20      	cmp	r3, #32
 8003238:	d138      	bne.n	80032ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2240      	movs	r2, #64	@ 0x40
 800323e:	5c9b      	ldrb	r3, [r3, r2]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003244:	2302      	movs	r3, #2
 8003246:	e032      	b.n	80032ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2240      	movs	r2, #64	@ 0x40
 800324c:	2101      	movs	r1, #1
 800324e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2241      	movs	r2, #65	@ 0x41
 8003254:	2124      	movs	r1, #36	@ 0x24
 8003256:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2101      	movs	r1, #1
 8003264:	438a      	bics	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4911      	ldr	r1, [pc, #68]	@ (80032b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003274:	400a      	ands	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6819      	ldr	r1, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2101      	movs	r1, #1
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2241      	movs	r2, #65	@ 0x41
 800329c:	2120      	movs	r1, #32
 800329e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2240      	movs	r2, #64	@ 0x40
 80032a4:	2100      	movs	r1, #0
 80032a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b002      	add	sp, #8
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	ffffefff 	.word	0xffffefff

080032bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2241      	movs	r2, #65	@ 0x41
 80032ca:	5c9b      	ldrb	r3, [r3, r2]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d139      	bne.n	8003346 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2240      	movs	r2, #64	@ 0x40
 80032d6:	5c9b      	ldrb	r3, [r3, r2]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032dc:	2302      	movs	r3, #2
 80032de:	e033      	b.n	8003348 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2240      	movs	r2, #64	@ 0x40
 80032e4:	2101      	movs	r1, #1
 80032e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2241      	movs	r2, #65	@ 0x41
 80032ec:	2124      	movs	r1, #36	@ 0x24
 80032ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2101      	movs	r1, #1
 80032fc:	438a      	bics	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a11      	ldr	r2, [pc, #68]	@ (8003350 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800330c:	4013      	ands	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2101      	movs	r1, #1
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2241      	movs	r2, #65	@ 0x41
 8003336:	2120      	movs	r1, #32
 8003338:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2240      	movs	r2, #64	@ 0x40
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
  }
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b004      	add	sp, #16
 800334e:	bd80      	pop	{r7, pc}
 8003350:	fffff0ff 	.word	0xfffff0ff

08003354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800335c:	4b19      	ldr	r3, [pc, #100]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a19      	ldr	r2, [pc, #100]	@ (80033c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003362:	4013      	ands	r3, r2
 8003364:	0019      	movs	r1, r3
 8003366:	4b17      	ldr	r3, [pc, #92]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	2380      	movs	r3, #128	@ 0x80
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d11f      	bne.n	80033b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003378:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	0013      	movs	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	189b      	adds	r3, r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4912      	ldr	r1, [pc, #72]	@ (80033d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003386:	0018      	movs	r0, r3
 8003388:	f7fc fec4 	bl	8000114 <__udivsi3>
 800338c:	0003      	movs	r3, r0
 800338e:	3301      	adds	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003392:	e008      	b.n	80033a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3b01      	subs	r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e001      	b.n	80033a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e009      	b.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033a6:	4b07      	ldr	r3, [pc, #28]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	2380      	movs	r3, #128	@ 0x80
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	401a      	ands	r2, r3
 80033b0:	2380      	movs	r3, #128	@ 0x80
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d0ed      	beq.n	8003394 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	0018      	movs	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	b004      	add	sp, #16
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	40007000 	.word	0x40007000
 80033c8:	fffff9ff 	.word	0xfffff9ff
 80033cc:	20000014 	.word	0x20000014
 80033d0:	000f4240 	.word	0x000f4240

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e2f3      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2201      	movs	r2, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	d100      	bne.n	80033f2 <HAL_RCC_OscConfig+0x1e>
 80033f0:	e07c      	b.n	80034ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f2:	4bc3      	ldr	r3, [pc, #780]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2238      	movs	r2, #56	@ 0x38
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033fc:	4bc0      	ldr	r3, [pc, #768]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2203      	movs	r2, #3
 8003402:	4013      	ands	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b10      	cmp	r3, #16
 800340a:	d102      	bne.n	8003412 <HAL_RCC_OscConfig+0x3e>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d002      	beq.n	8003418 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d10b      	bne.n	8003430 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	4bb9      	ldr	r3, [pc, #740]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	4013      	ands	r3, r2
 8003422:	d062      	beq.n	80034ea <HAL_RCC_OscConfig+0x116>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d15e      	bne.n	80034ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e2ce      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	025b      	lsls	r3, r3, #9
 8003438:	429a      	cmp	r2, r3
 800343a:	d107      	bne.n	800344c <HAL_RCC_OscConfig+0x78>
 800343c:	4bb0      	ldr	r3, [pc, #704]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4baf      	ldr	r3, [pc, #700]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003442:	2180      	movs	r1, #128	@ 0x80
 8003444:	0249      	lsls	r1, r1, #9
 8003446:	430a      	orrs	r2, r1
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e020      	b.n	800348e <HAL_RCC_OscConfig+0xba>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	23a0      	movs	r3, #160	@ 0xa0
 8003452:	02db      	lsls	r3, r3, #11
 8003454:	429a      	cmp	r2, r3
 8003456:	d10e      	bne.n	8003476 <HAL_RCC_OscConfig+0xa2>
 8003458:	4ba9      	ldr	r3, [pc, #676]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4ba8      	ldr	r3, [pc, #672]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 800345e:	2180      	movs	r1, #128	@ 0x80
 8003460:	02c9      	lsls	r1, r1, #11
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	4ba6      	ldr	r3, [pc, #664]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4ba5      	ldr	r3, [pc, #660]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 800346c:	2180      	movs	r1, #128	@ 0x80
 800346e:	0249      	lsls	r1, r1, #9
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e00b      	b.n	800348e <HAL_RCC_OscConfig+0xba>
 8003476:	4ba2      	ldr	r3, [pc, #648]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4ba1      	ldr	r3, [pc, #644]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 800347c:	49a1      	ldr	r1, [pc, #644]	@ (8003704 <HAL_RCC_OscConfig+0x330>)
 800347e:	400a      	ands	r2, r1
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	4b9f      	ldr	r3, [pc, #636]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b9e      	ldr	r3, [pc, #632]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003488:	499f      	ldr	r1, [pc, #636]	@ (8003708 <HAL_RCC_OscConfig+0x334>)
 800348a:	400a      	ands	r2, r1
 800348c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d014      	beq.n	80034c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fe fe07 	bl	80020a8 <HAL_GetTick>
 800349a:	0003      	movs	r3, r0
 800349c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fe fe02 	bl	80020a8 <HAL_GetTick>
 80034a4:	0002      	movs	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	@ 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e28d      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b2:	4b93      	ldr	r3, [pc, #588]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	2380      	movs	r3, #128	@ 0x80
 80034b8:	029b      	lsls	r3, r3, #10
 80034ba:	4013      	ands	r3, r2
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0xcc>
 80034be:	e015      	b.n	80034ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fdf2 	bl	80020a8 <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ca:	f7fe fded 	bl	80020a8 <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b64      	cmp	r3, #100	@ 0x64
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e278      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034dc:	4b88      	ldr	r3, [pc, #544]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	4013      	ands	r3, r2
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0xf6>
 80034e8:	e000      	b.n	80034ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2202      	movs	r2, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	d100      	bne.n	80034f8 <HAL_RCC_OscConfig+0x124>
 80034f6:	e099      	b.n	800362c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f8:	4b81      	ldr	r3, [pc, #516]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2238      	movs	r2, #56	@ 0x38
 80034fe:	4013      	ands	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003502:	4b7f      	ldr	r3, [pc, #508]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2203      	movs	r2, #3
 8003508:	4013      	ands	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b10      	cmp	r3, #16
 8003510:	d102      	bne.n	8003518 <HAL_RCC_OscConfig+0x144>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d002      	beq.n	800351e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d135      	bne.n	800358a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800351e:	4b78      	ldr	r3, [pc, #480]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4013      	ands	r3, r2
 8003528:	d005      	beq.n	8003536 <HAL_RCC_OscConfig+0x162>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e24b      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b72      	ldr	r3, [pc, #456]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4a74      	ldr	r2, [pc, #464]	@ (800370c <HAL_RCC_OscConfig+0x338>)
 800353c:	4013      	ands	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	021a      	lsls	r2, r3, #8
 8003546:	4b6e      	ldr	r3, [pc, #440]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d112      	bne.n	8003578 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003552:	4b6b      	ldr	r3, [pc, #428]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6e      	ldr	r2, [pc, #440]	@ (8003710 <HAL_RCC_OscConfig+0x33c>)
 8003558:	4013      	ands	r3, r2
 800355a:	0019      	movs	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	4b67      	ldr	r3, [pc, #412]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003566:	4b66      	ldr	r3, [pc, #408]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	0adb      	lsrs	r3, r3, #11
 800356c:	2207      	movs	r2, #7
 800356e:	4013      	ands	r3, r2
 8003570:	4a68      	ldr	r2, [pc, #416]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003572:	40da      	lsrs	r2, r3
 8003574:	4b68      	ldr	r3, [pc, #416]	@ (8003718 <HAL_RCC_OscConfig+0x344>)
 8003576:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003578:	4b68      	ldr	r3, [pc, #416]	@ (800371c <HAL_RCC_OscConfig+0x348>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	0018      	movs	r0, r3
 800357e:	f7fe fd37 	bl	8001ff0 <HAL_InitTick>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d051      	beq.n	800362a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e221      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d030      	beq.n	80035f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003592:	4b5b      	ldr	r3, [pc, #364]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a5e      	ldr	r2, [pc, #376]	@ (8003710 <HAL_RCC_OscConfig+0x33c>)
 8003598:	4013      	ands	r3, r2
 800359a:	0019      	movs	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	4b57      	ldr	r3, [pc, #348]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80035a6:	4b56      	ldr	r3, [pc, #344]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4b55      	ldr	r3, [pc, #340]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80035ac:	2180      	movs	r1, #128	@ 0x80
 80035ae:	0049      	lsls	r1, r1, #1
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fd78 	bl	80020a8 <HAL_GetTick>
 80035b8:	0003      	movs	r3, r0
 80035ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035be:	f7fe fd73 	bl	80020a8 <HAL_GetTick>
 80035c2:	0002      	movs	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e1fe      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2380      	movs	r3, #128	@ 0x80
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4013      	ands	r3, r2
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b48      	ldr	r3, [pc, #288]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a4a      	ldr	r2, [pc, #296]	@ (800370c <HAL_RCC_OscConfig+0x338>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	021a      	lsls	r2, r3, #8
 80035ec:	4b44      	ldr	r3, [pc, #272]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	e01b      	b.n	800362c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80035f4:	4b42      	ldr	r3, [pc, #264]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b41      	ldr	r3, [pc, #260]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80035fa:	4949      	ldr	r1, [pc, #292]	@ (8003720 <HAL_RCC_OscConfig+0x34c>)
 80035fc:	400a      	ands	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe fd52 	bl	80020a8 <HAL_GetTick>
 8003604:	0003      	movs	r3, r0
 8003606:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360a:	f7fe fd4d 	bl	80020a8 <HAL_GetTick>
 800360e:	0002      	movs	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e1d8      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800361c:	4b38      	ldr	r3, [pc, #224]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2380      	movs	r3, #128	@ 0x80
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4013      	ands	r3, r2
 8003626:	d1f0      	bne.n	800360a <HAL_RCC_OscConfig+0x236>
 8003628:	e000      	b.n	800362c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800362a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2208      	movs	r2, #8
 8003632:	4013      	ands	r3, r2
 8003634:	d047      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003636:	4b32      	ldr	r3, [pc, #200]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2238      	movs	r2, #56	@ 0x38
 800363c:	4013      	ands	r3, r2
 800363e:	2b18      	cmp	r3, #24
 8003640:	d10a      	bne.n	8003658 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003642:	4b2f      	ldr	r3, [pc, #188]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003646:	2202      	movs	r2, #2
 8003648:	4013      	ands	r3, r2
 800364a:	d03c      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2f2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d138      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e1ba      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d019      	beq.n	8003694 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003660:	4b27      	ldr	r3, [pc, #156]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003662:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003664:	4b26      	ldr	r3, [pc, #152]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003666:	2101      	movs	r1, #1
 8003668:	430a      	orrs	r2, r1
 800366a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe fd1c 	bl	80020a8 <HAL_GetTick>
 8003670:	0003      	movs	r3, r0
 8003672:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003676:	f7fe fd17 	bl	80020a8 <HAL_GetTick>
 800367a:	0002      	movs	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1a2      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003688:	4b1d      	ldr	r3, [pc, #116]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 800368a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368c:	2202      	movs	r2, #2
 800368e:	4013      	ands	r3, r2
 8003690:	d0f1      	beq.n	8003676 <HAL_RCC_OscConfig+0x2a2>
 8003692:	e018      	b.n	80036c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003694:	4b1a      	ldr	r3, [pc, #104]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 8003696:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003698:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 800369a:	2101      	movs	r1, #1
 800369c:	438a      	bics	r2, r1
 800369e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fd02 	bl	80020a8 <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036aa:	f7fe fcfd 	bl	80020a8 <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e188      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036bc:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80036be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c0:	2202      	movs	r2, #2
 80036c2:	4013      	ands	r3, r2
 80036c4:	d1f1      	bne.n	80036aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2204      	movs	r2, #4
 80036cc:	4013      	ands	r3, r2
 80036ce:	d100      	bne.n	80036d2 <HAL_RCC_OscConfig+0x2fe>
 80036d0:	e0c6      	b.n	8003860 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d2:	231f      	movs	r3, #31
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2238      	movs	r2, #56	@ 0x38
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d11e      	bne.n	8003724 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80036e6:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <HAL_RCC_OscConfig+0x32c>)
 80036e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ea:	2202      	movs	r2, #2
 80036ec:	4013      	ands	r3, r2
 80036ee:	d100      	bne.n	80036f2 <HAL_RCC_OscConfig+0x31e>
 80036f0:	e0b6      	b.n	8003860 <HAL_RCC_OscConfig+0x48c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d000      	beq.n	80036fc <HAL_RCC_OscConfig+0x328>
 80036fa:	e0b1      	b.n	8003860 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e166      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
 8003700:	40021000 	.word	0x40021000
 8003704:	fffeffff 	.word	0xfffeffff
 8003708:	fffbffff 	.word	0xfffbffff
 800370c:	ffff80ff 	.word	0xffff80ff
 8003710:	ffffc7ff 	.word	0xffffc7ff
 8003714:	00f42400 	.word	0x00f42400
 8003718:	20000014 	.word	0x20000014
 800371c:	20000018 	.word	0x20000018
 8003720:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003724:	4bac      	ldr	r3, [pc, #688]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 8003726:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003728:	2380      	movs	r3, #128	@ 0x80
 800372a:	055b      	lsls	r3, r3, #21
 800372c:	4013      	ands	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_RCC_OscConfig+0x360>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x362>
 8003734:	2300      	movs	r3, #0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d011      	beq.n	800375e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	4ba7      	ldr	r3, [pc, #668]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 800373c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800373e:	4ba6      	ldr	r3, [pc, #664]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 8003740:	2180      	movs	r1, #128	@ 0x80
 8003742:	0549      	lsls	r1, r1, #21
 8003744:	430a      	orrs	r2, r1
 8003746:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003748:	4ba3      	ldr	r3, [pc, #652]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 800374a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800374c:	2380      	movs	r3, #128	@ 0x80
 800374e:	055b      	lsls	r3, r3, #21
 8003750:	4013      	ands	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003756:	231f      	movs	r3, #31
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375e:	4b9f      	ldr	r3, [pc, #636]	@ (80039dc <HAL_RCC_OscConfig+0x608>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	2380      	movs	r3, #128	@ 0x80
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4013      	ands	r3, r2
 8003768:	d11a      	bne.n	80037a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800376a:	4b9c      	ldr	r3, [pc, #624]	@ (80039dc <HAL_RCC_OscConfig+0x608>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b9b      	ldr	r3, [pc, #620]	@ (80039dc <HAL_RCC_OscConfig+0x608>)
 8003770:	2180      	movs	r1, #128	@ 0x80
 8003772:	0049      	lsls	r1, r1, #1
 8003774:	430a      	orrs	r2, r1
 8003776:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003778:	f7fe fc96 	bl	80020a8 <HAL_GetTick>
 800377c:	0003      	movs	r3, r0
 800377e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003782:	f7fe fc91 	bl	80020a8 <HAL_GetTick>
 8003786:	0002      	movs	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e11c      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003794:	4b91      	ldr	r3, [pc, #580]	@ (80039dc <HAL_RCC_OscConfig+0x608>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	2380      	movs	r3, #128	@ 0x80
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4013      	ands	r3, r2
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_OscConfig+0x3e2>
 80037a8:	4b8b      	ldr	r3, [pc, #556]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80037aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037ac:	4b8a      	ldr	r3, [pc, #552]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80037ae:	2101      	movs	r1, #1
 80037b0:	430a      	orrs	r2, r1
 80037b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037b4:	e01c      	b.n	80037f0 <HAL_RCC_OscConfig+0x41c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x404>
 80037be:	4b86      	ldr	r3, [pc, #536]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80037c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037c2:	4b85      	ldr	r3, [pc, #532]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80037c4:	2104      	movs	r1, #4
 80037c6:	430a      	orrs	r2, r1
 80037c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037ca:	4b83      	ldr	r3, [pc, #524]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80037cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037ce:	4b82      	ldr	r3, [pc, #520]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80037d0:	2101      	movs	r1, #1
 80037d2:	430a      	orrs	r2, r1
 80037d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037d6:	e00b      	b.n	80037f0 <HAL_RCC_OscConfig+0x41c>
 80037d8:	4b7f      	ldr	r3, [pc, #508]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80037da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037dc:	4b7e      	ldr	r3, [pc, #504]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80037de:	2101      	movs	r1, #1
 80037e0:	438a      	bics	r2, r1
 80037e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037e4:	4b7c      	ldr	r3, [pc, #496]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80037e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037e8:	4b7b      	ldr	r3, [pc, #492]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80037ea:	2104      	movs	r1, #4
 80037ec:	438a      	bics	r2, r1
 80037ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d014      	beq.n	8003822 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fe fc56 	bl	80020a8 <HAL_GetTick>
 80037fc:	0003      	movs	r3, r0
 80037fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003800:	e009      	b.n	8003816 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fe fc51 	bl	80020a8 <HAL_GetTick>
 8003806:	0002      	movs	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	4a74      	ldr	r2, [pc, #464]	@ (80039e0 <HAL_RCC_OscConfig+0x60c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0db      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	4b70      	ldr	r3, [pc, #448]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	2202      	movs	r2, #2
 800381c:	4013      	ands	r3, r2
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x42e>
 8003820:	e013      	b.n	800384a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fe fc41 	bl	80020a8 <HAL_GetTick>
 8003826:	0003      	movs	r3, r0
 8003828:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800382a:	e009      	b.n	8003840 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fe fc3c 	bl	80020a8 <HAL_GetTick>
 8003830:	0002      	movs	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	4a6a      	ldr	r2, [pc, #424]	@ (80039e0 <HAL_RCC_OscConfig+0x60c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0c6      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003840:	4b65      	ldr	r3, [pc, #404]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 8003842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003844:	2202      	movs	r2, #2
 8003846:	4013      	ands	r3, r2
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800384a:	231f      	movs	r3, #31
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d105      	bne.n	8003860 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003854:	4b60      	ldr	r3, [pc, #384]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 8003856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003858:	4b5f      	ldr	r3, [pc, #380]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 800385a:	4962      	ldr	r1, [pc, #392]	@ (80039e4 <HAL_RCC_OscConfig+0x610>)
 800385c:	400a      	ands	r2, r1
 800385e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d100      	bne.n	800386a <HAL_RCC_OscConfig+0x496>
 8003868:	e0b0      	b.n	80039cc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800386a:	4b5b      	ldr	r3, [pc, #364]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2238      	movs	r2, #56	@ 0x38
 8003870:	4013      	ands	r3, r2
 8003872:	2b10      	cmp	r3, #16
 8003874:	d100      	bne.n	8003878 <HAL_RCC_OscConfig+0x4a4>
 8003876:	e078      	b.n	800396a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d153      	bne.n	8003928 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003880:	4b55      	ldr	r3, [pc, #340]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b54      	ldr	r3, [pc, #336]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 8003886:	4958      	ldr	r1, [pc, #352]	@ (80039e8 <HAL_RCC_OscConfig+0x614>)
 8003888:	400a      	ands	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe fc0c 	bl	80020a8 <HAL_GetTick>
 8003890:	0003      	movs	r3, r0
 8003892:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003896:	f7fe fc07 	bl	80020a8 <HAL_GetTick>
 800389a:	0002      	movs	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e092      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a8:	4b4b      	ldr	r3, [pc, #300]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2380      	movs	r3, #128	@ 0x80
 80038ae:	049b      	lsls	r3, r3, #18
 80038b0:	4013      	ands	r3, r2
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b4:	4b48      	ldr	r3, [pc, #288]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a4c      	ldr	r2, [pc, #304]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	0019      	movs	r1, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	431a      	orrs	r2, r3
 80038dc:	4b3e      	ldr	r3, [pc, #248]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80038de:	430a      	orrs	r2, r1
 80038e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e2:	4b3d      	ldr	r3, [pc, #244]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b3c      	ldr	r3, [pc, #240]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80038e8:	2180      	movs	r1, #128	@ 0x80
 80038ea:	0449      	lsls	r1, r1, #17
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80038f0:	4b39      	ldr	r3, [pc, #228]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	4b38      	ldr	r3, [pc, #224]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 80038f6:	2180      	movs	r1, #128	@ 0x80
 80038f8:	0549      	lsls	r1, r1, #21
 80038fa:	430a      	orrs	r2, r1
 80038fc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fe fbd3 	bl	80020a8 <HAL_GetTick>
 8003902:	0003      	movs	r3, r0
 8003904:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003908:	f7fe fbce 	bl	80020a8 <HAL_GetTick>
 800390c:	0002      	movs	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e059      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391a:	4b2f      	ldr	r3, [pc, #188]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	2380      	movs	r3, #128	@ 0x80
 8003920:	049b      	lsls	r3, r3, #18
 8003922:	4013      	ands	r3, r2
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0x534>
 8003926:	e051      	b.n	80039cc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003928:	4b2b      	ldr	r3, [pc, #172]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b2a      	ldr	r3, [pc, #168]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 800392e:	492e      	ldr	r1, [pc, #184]	@ (80039e8 <HAL_RCC_OscConfig+0x614>)
 8003930:	400a      	ands	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fe fbb8 	bl	80020a8 <HAL_GetTick>
 8003938:	0003      	movs	r3, r0
 800393a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393e:	f7fe fbb3 	bl	80020a8 <HAL_GetTick>
 8003942:	0002      	movs	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e03e      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003950:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	049b      	lsls	r3, r3, #18
 8003958:	4013      	ands	r3, r2
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800395c:	4b1e      	ldr	r3, [pc, #120]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	4b1d      	ldr	r3, [pc, #116]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 8003962:	4923      	ldr	r1, [pc, #140]	@ (80039f0 <HAL_RCC_OscConfig+0x61c>)
 8003964:	400a      	ands	r2, r1
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	e030      	b.n	80039cc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e02b      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003976:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <HAL_RCC_OscConfig+0x604>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2203      	movs	r2, #3
 8003980:	401a      	ands	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	429a      	cmp	r2, r3
 8003988:	d11e      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2270      	movs	r2, #112	@ 0x70
 800398e:	401a      	ands	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d117      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	23fe      	movs	r3, #254	@ 0xfe
 800399c:	01db      	lsls	r3, r3, #7
 800399e:	401a      	ands	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d10e      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	23f8      	movs	r3, #248	@ 0xf8
 80039ae:	039b      	lsls	r3, r3, #14
 80039b0:	401a      	ands	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	0f5b      	lsrs	r3, r3, #29
 80039be:	075a      	lsls	r2, r3, #29
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	0018      	movs	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b008      	add	sp, #32
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	46c0      	nop			@ (mov r8, r8)
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40007000 	.word	0x40007000
 80039e0:	00001388 	.word	0x00001388
 80039e4:	efffffff 	.word	0xefffffff
 80039e8:	feffffff 	.word	0xfeffffff
 80039ec:	1fc1808c 	.word	0x1fc1808c
 80039f0:	effefffc 	.word	0xeffefffc

080039f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0e9      	b.n	8003bdc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a08:	4b76      	ldr	r3, [pc, #472]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2207      	movs	r2, #7
 8003a0e:	4013      	ands	r3, r2
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d91e      	bls.n	8003a54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b73      	ldr	r3, [pc, #460]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2207      	movs	r2, #7
 8003a1c:	4393      	bics	r3, r2
 8003a1e:	0019      	movs	r1, r3
 8003a20:	4b70      	ldr	r3, [pc, #448]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a28:	f7fe fb3e 	bl	80020a8 <HAL_GetTick>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a30:	e009      	b.n	8003a46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a32:	f7fe fb39 	bl	80020a8 <HAL_GetTick>
 8003a36:	0002      	movs	r2, r0
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0ca      	b.n	8003bdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a46:	4b67      	ldr	r3, [pc, #412]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2207      	movs	r2, #7
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d1ee      	bne.n	8003a32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	d015      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2204      	movs	r2, #4
 8003a64:	4013      	ands	r3, r2
 8003a66:	d006      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a68:	4b60      	ldr	r3, [pc, #384]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	4b5f      	ldr	r3, [pc, #380]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003a6e:	21e0      	movs	r1, #224	@ 0xe0
 8003a70:	01c9      	lsls	r1, r1, #7
 8003a72:	430a      	orrs	r2, r1
 8003a74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a76:	4b5d      	ldr	r3, [pc, #372]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	4a5d      	ldr	r2, [pc, #372]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1fc>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	4b59      	ldr	r3, [pc, #356]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	4013      	ands	r3, r2
 8003a92:	d057      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a9c:	4b53      	ldr	r3, [pc, #332]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	2380      	movs	r3, #128	@ 0x80
 8003aa2:	029b      	lsls	r3, r3, #10
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d12b      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e097      	b.n	8003bdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2380      	movs	r3, #128	@ 0x80
 8003aba:	049b      	lsls	r3, r3, #18
 8003abc:	4013      	ands	r3, r2
 8003abe:	d11f      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e08b      	b.n	8003bdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d107      	bne.n	8003adc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003acc:	4b47      	ldr	r3, [pc, #284]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	2380      	movs	r3, #128	@ 0x80
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d113      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e07f      	b.n	8003bdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ae4:	4b41      	ldr	r3, [pc, #260]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae8:	2202      	movs	r2, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	d108      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e074      	b.n	8003bdc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af6:	2202      	movs	r2, #2
 8003af8:	4013      	ands	r3, r2
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e06d      	b.n	8003bdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b00:	4b3a      	ldr	r3, [pc, #232]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2207      	movs	r2, #7
 8003b06:	4393      	bics	r3, r2
 8003b08:	0019      	movs	r1, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	4b37      	ldr	r3, [pc, #220]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003b10:	430a      	orrs	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b14:	f7fe fac8 	bl	80020a8 <HAL_GetTick>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1c:	e009      	b.n	8003b32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1e:	f7fe fac3 	bl	80020a8 <HAL_GetTick>
 8003b22:	0002      	movs	r2, r0
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	4a2f      	ldr	r2, [pc, #188]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e054      	b.n	8003bdc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	4b2e      	ldr	r3, [pc, #184]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2238      	movs	r2, #56	@ 0x38
 8003b38:	401a      	ands	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d1ec      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b44:	4b27      	ldr	r3, [pc, #156]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2207      	movs	r2, #7
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d21e      	bcs.n	8003b90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	4b24      	ldr	r3, [pc, #144]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2207      	movs	r2, #7
 8003b58:	4393      	bics	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	4b21      	ldr	r3, [pc, #132]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b64:	f7fe faa0 	bl	80020a8 <HAL_GetTick>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b6c:	e009      	b.n	8003b82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6e:	f7fe fa9b 	bl	80020a8 <HAL_GetTick>
 8003b72:	0002      	movs	r2, r0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	4a1b      	ldr	r2, [pc, #108]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e02c      	b.n	8003bdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b82:	4b18      	ldr	r3, [pc, #96]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2207      	movs	r2, #7
 8003b88:	4013      	ands	r3, r2
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1ee      	bne.n	8003b6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2204      	movs	r2, #4
 8003b96:	4013      	ands	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003b9a:	4b14      	ldr	r3, [pc, #80]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	4a15      	ldr	r2, [pc, #84]	@ (8003bf4 <HAL_RCC_ClockConfig+0x200>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	4b10      	ldr	r3, [pc, #64]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003baa:	430a      	orrs	r2, r1
 8003bac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003bae:	f000 f829 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003bb2:	0001      	movs	r1, r0
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <HAL_RCC_ClockConfig+0x1f8>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	220f      	movs	r2, #15
 8003bbc:	401a      	ands	r2, r3
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf8 <HAL_RCC_ClockConfig+0x204>)
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	58d3      	ldr	r3, [r2, r3]
 8003bc4:	221f      	movs	r2, #31
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	000a      	movs	r2, r1
 8003bca:	40da      	lsrs	r2, r3
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <HAL_RCC_ClockConfig+0x208>)
 8003bce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <HAL_RCC_ClockConfig+0x20c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7fe fa0b 	bl	8001ff0 <HAL_InitTick>
 8003bda:	0003      	movs	r3, r0
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b004      	add	sp, #16
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40022000 	.word	0x40022000
 8003be8:	00001388 	.word	0x00001388
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	fffff0ff 	.word	0xfffff0ff
 8003bf4:	ffff8fff 	.word	0xffff8fff
 8003bf8:	08009364 	.word	0x08009364
 8003bfc:	20000014 	.word	0x20000014
 8003c00:	20000018 	.word	0x20000018

08003c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2238      	movs	r2, #56	@ 0x38
 8003c10:	4013      	ands	r3, r2
 8003c12:	d10f      	bne.n	8003c34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003c14:	4b39      	ldr	r3, [pc, #228]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	0adb      	lsrs	r3, r3, #11
 8003c1a:	2207      	movs	r2, #7
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2201      	movs	r2, #1
 8003c20:	409a      	lsls	r2, r3
 8003c22:	0013      	movs	r3, r2
 8003c24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003c26:	6839      	ldr	r1, [r7, #0]
 8003c28:	4835      	ldr	r0, [pc, #212]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c2a:	f7fc fa73 	bl	8000114 <__udivsi3>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	e05d      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c34:	4b31      	ldr	r3, [pc, #196]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2238      	movs	r2, #56	@ 0x38
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d102      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c40:	4b30      	ldr	r3, [pc, #192]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e054      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c46:	4b2d      	ldr	r3, [pc, #180]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2238      	movs	r2, #56	@ 0x38
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d138      	bne.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003c52:	4b2a      	ldr	r3, [pc, #168]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2203      	movs	r2, #3
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c5c:	4b27      	ldr	r3, [pc, #156]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	2207      	movs	r2, #7
 8003c64:	4013      	ands	r3, r2
 8003c66:	3301      	adds	r3, #1
 8003c68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d10d      	bne.n	8003c8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	4824      	ldr	r0, [pc, #144]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c74:	f7fc fa4e 	bl	8000114 <__udivsi3>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	227f      	movs	r2, #127	@ 0x7f
 8003c84:	4013      	ands	r3, r2
 8003c86:	434b      	muls	r3, r1
 8003c88:	617b      	str	r3, [r7, #20]
        break;
 8003c8a:	e00d      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	481c      	ldr	r0, [pc, #112]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c90:	f7fc fa40 	bl	8000114 <__udivsi3>
 8003c94:	0003      	movs	r3, r0
 8003c96:	0019      	movs	r1, r3
 8003c98:	4b18      	ldr	r3, [pc, #96]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	227f      	movs	r2, #127	@ 0x7f
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	434b      	muls	r3, r1
 8003ca4:	617b      	str	r3, [r7, #20]
        break;
 8003ca6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003ca8:	4b14      	ldr	r3, [pc, #80]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	0f5b      	lsrs	r3, r3, #29
 8003cae:	2207      	movs	r2, #7
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	6978      	ldr	r0, [r7, #20]
 8003cba:	f7fc fa2b 	bl	8000114 <__udivsi3>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	e015      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2238      	movs	r2, #56	@ 0x38
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d103      	bne.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003cd8:	4b08      	ldr	r3, [pc, #32]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2238      	movs	r2, #56	@ 0x38
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b18      	cmp	r3, #24
 8003ce2:	d103      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003ce4:	23fa      	movs	r3, #250	@ 0xfa
 8003ce6:	01db      	lsls	r3, r3, #7
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	e001      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cf0:	693b      	ldr	r3, [r7, #16]
}
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b006      	add	sp, #24
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	00f42400 	.word	0x00f42400
 8003d04:	007a1200 	.word	0x007a1200

08003d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003d10:	2313      	movs	r3, #19
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d18:	2312      	movs	r3, #18
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	2380      	movs	r3, #128	@ 0x80
 8003d26:	029b      	lsls	r3, r3, #10
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d100      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003d2c:	e0a3      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2e:	2011      	movs	r0, #17
 8003d30:	183b      	adds	r3, r7, r0
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d36:	4b7f      	ldr	r3, [pc, #508]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d3a:	2380      	movs	r3, #128	@ 0x80
 8003d3c:	055b      	lsls	r3, r3, #21
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d110      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	4b7c      	ldr	r3, [pc, #496]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d46:	4b7b      	ldr	r3, [pc, #492]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d48:	2180      	movs	r1, #128	@ 0x80
 8003d4a:	0549      	lsls	r1, r1, #21
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d50:	4b78      	ldr	r3, [pc, #480]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d54:	2380      	movs	r3, #128	@ 0x80
 8003d56:	055b      	lsls	r3, r3, #21
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	183b      	adds	r3, r7, r0
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d64:	4b74      	ldr	r3, [pc, #464]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b73      	ldr	r3, [pc, #460]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d6a:	2180      	movs	r1, #128	@ 0x80
 8003d6c:	0049      	lsls	r1, r1, #1
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d72:	f7fe f999 	bl	80020a8 <HAL_GetTick>
 8003d76:	0003      	movs	r3, r0
 8003d78:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7c:	f7fe f994 	bl	80020a8 <HAL_GetTick>
 8003d80:	0002      	movs	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d904      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003d8a:	2313      	movs	r3, #19
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2203      	movs	r2, #3
 8003d90:	701a      	strb	r2, [r3, #0]
        break;
 8003d92:	e005      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d94:	4b68      	ldr	r3, [pc, #416]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	2380      	movs	r3, #128	@ 0x80
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d0ed      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003da0:	2313      	movs	r3, #19
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d154      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003daa:	4b62      	ldr	r3, [pc, #392]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dae:	23c0      	movs	r3, #192	@ 0xc0
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4013      	ands	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d019      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d014      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dca:	4a5c      	ldr	r2, [pc, #368]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dd0:	4b58      	ldr	r3, [pc, #352]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dd4:	4b57      	ldr	r3, [pc, #348]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dd6:	2180      	movs	r1, #128	@ 0x80
 8003dd8:	0249      	lsls	r1, r1, #9
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dde:	4b55      	ldr	r3, [pc, #340]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003de0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003de2:	4b54      	ldr	r3, [pc, #336]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003de4:	4956      	ldr	r1, [pc, #344]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003de6:	400a      	ands	r2, r1
 8003de8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dea:	4b52      	ldr	r3, [pc, #328]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2201      	movs	r2, #1
 8003df4:	4013      	ands	r3, r2
 8003df6:	d016      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fe f956 	bl	80020a8 <HAL_GetTick>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e00:	e00c      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fe f951 	bl	80020a8 <HAL_GetTick>
 8003e06:	0002      	movs	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	4a4d      	ldr	r2, [pc, #308]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d904      	bls.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003e12:	2313      	movs	r3, #19
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	2203      	movs	r2, #3
 8003e18:	701a      	strb	r2, [r3, #0]
            break;
 8003e1a:	e004      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1c:	4b45      	ldr	r3, [pc, #276]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e20:	2202      	movs	r2, #2
 8003e22:	4013      	ands	r3, r2
 8003e24:	d0ed      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003e26:	2313      	movs	r3, #19
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e30:	4b40      	ldr	r3, [pc, #256]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e34:	4a41      	ldr	r2, [pc, #260]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e40:	430a      	orrs	r2, r1
 8003e42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e44:	e00c      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e46:	2312      	movs	r3, #18
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	2213      	movs	r2, #19
 8003e4c:	18ba      	adds	r2, r7, r2
 8003e4e:	7812      	ldrb	r2, [r2, #0]
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e005      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	2312      	movs	r3, #18
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	2213      	movs	r2, #19
 8003e5a:	18ba      	adds	r2, r7, r2
 8003e5c:	7812      	ldrb	r2, [r2, #0]
 8003e5e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e60:	2311      	movs	r3, #17
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6a:	4b32      	ldr	r3, [pc, #200]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e6e:	4b31      	ldr	r3, [pc, #196]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e70:	4935      	ldr	r1, [pc, #212]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e72:	400a      	ands	r2, r1
 8003e74:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d009      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e80:	4b2c      	ldr	r3, [pc, #176]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e84:	2203      	movs	r2, #3
 8003e86:	4393      	bics	r3, r2
 8003e88:	0019      	movs	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4b29      	ldr	r3, [pc, #164]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e90:	430a      	orrs	r2, r1
 8003e92:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d009      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e9e:	4b25      	ldr	r3, [pc, #148]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	4b21      	ldr	r3, [pc, #132]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	2380      	movs	r3, #128	@ 0x80
 8003eb8:	01db      	lsls	r3, r3, #7
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d015      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	0899      	lsrs	r1, r3, #2
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	4b1a      	ldr	r3, [pc, #104]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	05db      	lsls	r3, r3, #23
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d106      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003edc:	4b15      	ldr	r3, [pc, #84]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	4b14      	ldr	r3, [pc, #80]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ee2:	2180      	movs	r1, #128	@ 0x80
 8003ee4:	0249      	lsls	r1, r1, #9
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	2380      	movs	r3, #128	@ 0x80
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d016      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efa:	4a15      	ldr	r2, [pc, #84]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	0019      	movs	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f06:	430a      	orrs	r2, r1
 8003f08:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	2380      	movs	r3, #128	@ 0x80
 8003f10:	01db      	lsls	r3, r3, #7
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d106      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f16:	4b07      	ldr	r3, [pc, #28]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f1c:	2180      	movs	r1, #128	@ 0x80
 8003f1e:	0249      	lsls	r1, r1, #9
 8003f20:	430a      	orrs	r2, r1
 8003f22:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003f24:	2312      	movs	r3, #18
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	781b      	ldrb	r3, [r3, #0]
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b006      	add	sp, #24
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			@ (mov r8, r8)
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	fffffcff 	.word	0xfffffcff
 8003f40:	fffeffff 	.word	0xfffeffff
 8003f44:	00001388 	.word	0x00001388
 8003f48:	efffffff 	.word	0xefffffff
 8003f4c:	ffffcfff 	.word	0xffffcfff
 8003f50:	ffff3fff 	.word	0xffff3fff

08003f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e04a      	b.n	8003ffc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	223d      	movs	r2, #61	@ 0x3d
 8003f6a:	5c9b      	ldrb	r3, [r3, r2]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d107      	bne.n	8003f82 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	223c      	movs	r2, #60	@ 0x3c
 8003f76:	2100      	movs	r1, #0
 8003f78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7fd ff67 	bl	8001e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	223d      	movs	r2, #61	@ 0x3d
 8003f86:	2102      	movs	r1, #2
 8003f88:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	0019      	movs	r1, r3
 8003f94:	0010      	movs	r0, r2
 8003f96:	f000 f9ab 	bl	80042f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2248      	movs	r2, #72	@ 0x48
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	223e      	movs	r2, #62	@ 0x3e
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	5499      	strb	r1, [r3, r2]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	223f      	movs	r2, #63	@ 0x3f
 8003fae:	2101      	movs	r1, #1
 8003fb0:	5499      	strb	r1, [r3, r2]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2240      	movs	r2, #64	@ 0x40
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	5499      	strb	r1, [r3, r2]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2241      	movs	r2, #65	@ 0x41
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	5499      	strb	r1, [r3, r2]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2242      	movs	r2, #66	@ 0x42
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	5499      	strb	r1, [r3, r2]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2243      	movs	r2, #67	@ 0x43
 8003fce:	2101      	movs	r1, #1
 8003fd0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2244      	movs	r2, #68	@ 0x44
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	5499      	strb	r1, [r3, r2]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2245      	movs	r2, #69	@ 0x45
 8003fde:	2101      	movs	r1, #1
 8003fe0:	5499      	strb	r1, [r3, r2]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2246      	movs	r2, #70	@ 0x46
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	5499      	strb	r1, [r3, r2]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2247      	movs	r2, #71	@ 0x47
 8003fee:	2101      	movs	r1, #1
 8003ff0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	223d      	movs	r2, #61	@ 0x3d
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b002      	add	sp, #8
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	223d      	movs	r2, #61	@ 0x3d
 8004010:	5c9b      	ldrb	r3, [r3, r2]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d001      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e037      	b.n	800408c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	223d      	movs	r2, #61	@ 0x3d
 8004020:	2102      	movs	r1, #2
 8004022:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2101      	movs	r1, #1
 8004030:	430a      	orrs	r2, r1
 8004032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a16      	ldr	r2, [pc, #88]	@ (8004094 <HAL_TIM_Base_Start_IT+0x90>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x44>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a15      	ldr	r2, [pc, #84]	@ (8004098 <HAL_TIM_Base_Start_IT+0x94>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d116      	bne.n	8004076 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	4a13      	ldr	r2, [pc, #76]	@ (800409c <HAL_TIM_Base_Start_IT+0x98>)
 8004050:	4013      	ands	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d016      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x84>
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	2380      	movs	r3, #128	@ 0x80
 800405e:	025b      	lsls	r3, r3, #9
 8004060:	429a      	cmp	r2, r3
 8004062:	d011      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2101      	movs	r1, #1
 8004070:	430a      	orrs	r2, r1
 8004072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004074:	e008      	b.n	8004088 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2101      	movs	r1, #1
 8004082:	430a      	orrs	r2, r1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e000      	b.n	800408a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	0018      	movs	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	b004      	add	sp, #16
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40012c00 	.word	0x40012c00
 8004098:	40000400 	.word	0x40000400
 800409c:	00010007 	.word	0x00010007

080040a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2202      	movs	r2, #2
 80040bc:	4013      	ands	r3, r2
 80040be:	d021      	beq.n	8004104 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2202      	movs	r2, #2
 80040c4:	4013      	ands	r3, r2
 80040c6:	d01d      	beq.n	8004104 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2203      	movs	r2, #3
 80040ce:	4252      	negs	r2, r2
 80040d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2203      	movs	r2, #3
 80040e0:	4013      	ands	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	0018      	movs	r0, r3
 80040e8:	f000 f8ea 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 80040ec:	e007      	b.n	80040fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 f8dd 	bl	80042b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	0018      	movs	r0, r3
 80040fa:	f000 f8e9 	bl	80042d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2204      	movs	r2, #4
 8004108:	4013      	ands	r3, r2
 800410a:	d022      	beq.n	8004152 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2204      	movs	r2, #4
 8004110:	4013      	ands	r3, r2
 8004112:	d01e      	beq.n	8004152 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2205      	movs	r2, #5
 800411a:	4252      	negs	r2, r2
 800411c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2202      	movs	r2, #2
 8004122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	23c0      	movs	r3, #192	@ 0xc0
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4013      	ands	r3, r2
 8004130:	d004      	beq.n	800413c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0018      	movs	r0, r3
 8004136:	f000 f8c3 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 800413a:	e007      	b.n	800414c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	0018      	movs	r0, r3
 8004140:	f000 f8b6 	bl	80042b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	0018      	movs	r0, r3
 8004148:	f000 f8c2 	bl	80042d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2208      	movs	r2, #8
 8004156:	4013      	ands	r3, r2
 8004158:	d021      	beq.n	800419e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2208      	movs	r2, #8
 800415e:	4013      	ands	r3, r2
 8004160:	d01d      	beq.n	800419e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2209      	movs	r2, #9
 8004168:	4252      	negs	r2, r2
 800416a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2204      	movs	r2, #4
 8004170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	2203      	movs	r2, #3
 800417a:	4013      	ands	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	0018      	movs	r0, r3
 8004182:	f000 f89d 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8004186:	e007      	b.n	8004198 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	0018      	movs	r0, r3
 800418c:	f000 f890 	bl	80042b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	0018      	movs	r0, r3
 8004194:	f000 f89c 	bl	80042d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2210      	movs	r2, #16
 80041a2:	4013      	ands	r3, r2
 80041a4:	d022      	beq.n	80041ec <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2210      	movs	r2, #16
 80041aa:	4013      	ands	r3, r2
 80041ac:	d01e      	beq.n	80041ec <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2211      	movs	r2, #17
 80041b4:	4252      	negs	r2, r2
 80041b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2208      	movs	r2, #8
 80041bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	23c0      	movs	r3, #192	@ 0xc0
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4013      	ands	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	0018      	movs	r0, r3
 80041d0:	f000 f876 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 80041d4:	e007      	b.n	80041e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	0018      	movs	r0, r3
 80041da:	f000 f869 	bl	80042b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0018      	movs	r0, r3
 80041e2:	f000 f875 	bl	80042d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2201      	movs	r2, #1
 80041f0:	4013      	ands	r3, r2
 80041f2:	d00c      	beq.n	800420e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	4013      	ands	r3, r2
 80041fa:	d008      	beq.n	800420e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2202      	movs	r2, #2
 8004202:	4252      	negs	r2, r2
 8004204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0018      	movs	r0, r3
 800420a:	f7fc fff5 	bl	80011f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2280      	movs	r2, #128	@ 0x80
 8004212:	4013      	ands	r3, r2
 8004214:	d104      	bne.n	8004220 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	2380      	movs	r3, #128	@ 0x80
 800421a:	019b      	lsls	r3, r3, #6
 800421c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800421e:	d00b      	beq.n	8004238 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2280      	movs	r2, #128	@ 0x80
 8004224:	4013      	ands	r3, r2
 8004226:	d007      	beq.n	8004238 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1e      	ldr	r2, [pc, #120]	@ (80042a8 <HAL_TIM_IRQHandler+0x208>)
 800422e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	0018      	movs	r0, r3
 8004234:	f000 f8de 	bl	80043f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	2380      	movs	r3, #128	@ 0x80
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4013      	ands	r3, r2
 8004240:	d00b      	beq.n	800425a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2280      	movs	r2, #128	@ 0x80
 8004246:	4013      	ands	r3, r2
 8004248:	d007      	beq.n	800425a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a17      	ldr	r2, [pc, #92]	@ (80042ac <HAL_TIM_IRQHandler+0x20c>)
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	0018      	movs	r0, r3
 8004256:	f000 f8d5 	bl	8004404 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2240      	movs	r2, #64	@ 0x40
 800425e:	4013      	ands	r3, r2
 8004260:	d00c      	beq.n	800427c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2240      	movs	r2, #64	@ 0x40
 8004266:	4013      	ands	r3, r2
 8004268:	d008      	beq.n	800427c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2241      	movs	r2, #65	@ 0x41
 8004270:	4252      	negs	r2, r2
 8004272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	0018      	movs	r0, r3
 8004278:	f000 f832 	bl	80042e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2220      	movs	r2, #32
 8004280:	4013      	ands	r3, r2
 8004282:	d00c      	beq.n	800429e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	4013      	ands	r3, r2
 800428a:	d008      	beq.n	800429e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2221      	movs	r2, #33	@ 0x21
 8004292:	4252      	negs	r2, r2
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	0018      	movs	r0, r3
 800429a:	f000 f8a3 	bl	80043e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b004      	add	sp, #16
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	ffffdf7f 	.word	0xffffdf7f
 80042ac:	fffffeff 	.word	0xfffffeff

080042b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042b8:	46c0      	nop			@ (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042c8:	46c0      	nop			@ (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b002      	add	sp, #8
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042d8:	46c0      	nop			@ (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	b002      	add	sp, #8
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e8:	46c0      	nop			@ (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b002      	add	sp, #8
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a32      	ldr	r2, [pc, #200]	@ (80043cc <TIM_Base_SetConfig+0xdc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_Base_SetConfig+0x20>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a31      	ldr	r2, [pc, #196]	@ (80043d0 <TIM_Base_SetConfig+0xe0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d108      	bne.n	8004322 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2270      	movs	r2, #112	@ 0x70
 8004314:	4393      	bics	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a29      	ldr	r2, [pc, #164]	@ (80043cc <TIM_Base_SetConfig+0xdc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00f      	beq.n	800434a <TIM_Base_SetConfig+0x5a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a28      	ldr	r2, [pc, #160]	@ (80043d0 <TIM_Base_SetConfig+0xe0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00b      	beq.n	800434a <TIM_Base_SetConfig+0x5a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a27      	ldr	r2, [pc, #156]	@ (80043d4 <TIM_Base_SetConfig+0xe4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <TIM_Base_SetConfig+0x5a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a26      	ldr	r2, [pc, #152]	@ (80043d8 <TIM_Base_SetConfig+0xe8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_Base_SetConfig+0x5a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a25      	ldr	r2, [pc, #148]	@ (80043dc <TIM_Base_SetConfig+0xec>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4a24      	ldr	r2, [pc, #144]	@ (80043e0 <TIM_Base_SetConfig+0xf0>)
 800434e:	4013      	ands	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2280      	movs	r2, #128	@ 0x80
 8004360:	4393      	bics	r3, r2
 8004362:	001a      	movs	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a11      	ldr	r2, [pc, #68]	@ (80043cc <TIM_Base_SetConfig+0xdc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <TIM_Base_SetConfig+0xaa>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a12      	ldr	r2, [pc, #72]	@ (80043d8 <TIM_Base_SetConfig+0xe8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_Base_SetConfig+0xaa>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a11      	ldr	r2, [pc, #68]	@ (80043dc <TIM_Base_SetConfig+0xec>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d103      	bne.n	80043a2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2201      	movs	r2, #1
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d106      	bne.n	80043c2 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2201      	movs	r2, #1
 80043ba:	4393      	bics	r3, r2
 80043bc:	001a      	movs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	611a      	str	r2, [r3, #16]
  }
}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b004      	add	sp, #16
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40002000 	.word	0x40002000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800
 80043e0:	fffffcff 	.word	0xfffffcff

080043e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043ec:	46c0      	nop			@ (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b002      	add	sp, #8
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043fc:	46c0      	nop			@ (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	b002      	add	sp, #8
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800440c:	46c0      	nop			@ (mov r8, r8)
 800440e:	46bd      	mov	sp, r7
 8004410:	b002      	add	sp, #8
 8004412:	bd80      	pop	{r7, pc}

08004414 <siprintf>:
 8004414:	b40e      	push	{r1, r2, r3}
 8004416:	b510      	push	{r4, lr}
 8004418:	2400      	movs	r4, #0
 800441a:	490c      	ldr	r1, [pc, #48]	@ (800444c <siprintf+0x38>)
 800441c:	b09d      	sub	sp, #116	@ 0x74
 800441e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004420:	9002      	str	r0, [sp, #8]
 8004422:	9006      	str	r0, [sp, #24]
 8004424:	9107      	str	r1, [sp, #28]
 8004426:	9104      	str	r1, [sp, #16]
 8004428:	4809      	ldr	r0, [pc, #36]	@ (8004450 <siprintf+0x3c>)
 800442a:	490a      	ldr	r1, [pc, #40]	@ (8004454 <siprintf+0x40>)
 800442c:	cb04      	ldmia	r3!, {r2}
 800442e:	9105      	str	r1, [sp, #20]
 8004430:	6800      	ldr	r0, [r0, #0]
 8004432:	a902      	add	r1, sp, #8
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004438:	f000 f9a8 	bl	800478c <_svfiprintf_r>
 800443c:	9b02      	ldr	r3, [sp, #8]
 800443e:	701c      	strb	r4, [r3, #0]
 8004440:	b01d      	add	sp, #116	@ 0x74
 8004442:	bc10      	pop	{r4}
 8004444:	bc08      	pop	{r3}
 8004446:	b003      	add	sp, #12
 8004448:	4718      	bx	r3
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	7fffffff 	.word	0x7fffffff
 8004450:	20000020 	.word	0x20000020
 8004454:	ffff0208 	.word	0xffff0208

08004458 <memset>:
 8004458:	0003      	movs	r3, r0
 800445a:	1882      	adds	r2, r0, r2
 800445c:	4293      	cmp	r3, r2
 800445e:	d100      	bne.n	8004462 <memset+0xa>
 8004460:	4770      	bx	lr
 8004462:	7019      	strb	r1, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	e7f9      	b.n	800445c <memset+0x4>

08004468 <__errno>:
 8004468:	4b01      	ldr	r3, [pc, #4]	@ (8004470 <__errno+0x8>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	4770      	bx	lr
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	20000020 	.word	0x20000020

08004474 <__libc_init_array>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	2600      	movs	r6, #0
 8004478:	4c0c      	ldr	r4, [pc, #48]	@ (80044ac <__libc_init_array+0x38>)
 800447a:	4d0d      	ldr	r5, [pc, #52]	@ (80044b0 <__libc_init_array+0x3c>)
 800447c:	1b64      	subs	r4, r4, r5
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	42a6      	cmp	r6, r4
 8004482:	d109      	bne.n	8004498 <__libc_init_array+0x24>
 8004484:	2600      	movs	r6, #0
 8004486:	f000 fc63 	bl	8004d50 <_init>
 800448a:	4c0a      	ldr	r4, [pc, #40]	@ (80044b4 <__libc_init_array+0x40>)
 800448c:	4d0a      	ldr	r5, [pc, #40]	@ (80044b8 <__libc_init_array+0x44>)
 800448e:	1b64      	subs	r4, r4, r5
 8004490:	10a4      	asrs	r4, r4, #2
 8004492:	42a6      	cmp	r6, r4
 8004494:	d105      	bne.n	80044a2 <__libc_init_array+0x2e>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	00b3      	lsls	r3, r6, #2
 800449a:	58eb      	ldr	r3, [r5, r3]
 800449c:	4798      	blx	r3
 800449e:	3601      	adds	r6, #1
 80044a0:	e7ee      	b.n	8004480 <__libc_init_array+0xc>
 80044a2:	00b3      	lsls	r3, r6, #2
 80044a4:	58eb      	ldr	r3, [r5, r3]
 80044a6:	4798      	blx	r3
 80044a8:	3601      	adds	r6, #1
 80044aa:	e7f2      	b.n	8004492 <__libc_init_array+0x1e>
 80044ac:	080093d8 	.word	0x080093d8
 80044b0:	080093d8 	.word	0x080093d8
 80044b4:	080093dc 	.word	0x080093dc
 80044b8:	080093d8 	.word	0x080093d8

080044bc <__retarget_lock_acquire_recursive>:
 80044bc:	4770      	bx	lr

080044be <__retarget_lock_release_recursive>:
 80044be:	4770      	bx	lr

080044c0 <memcpy>:
 80044c0:	2300      	movs	r3, #0
 80044c2:	b510      	push	{r4, lr}
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d100      	bne.n	80044ca <memcpy+0xa>
 80044c8:	bd10      	pop	{r4, pc}
 80044ca:	5ccc      	ldrb	r4, [r1, r3]
 80044cc:	54c4      	strb	r4, [r0, r3]
 80044ce:	3301      	adds	r3, #1
 80044d0:	e7f8      	b.n	80044c4 <memcpy+0x4>
	...

080044d4 <_free_r>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	0005      	movs	r5, r0
 80044d8:	1e0c      	subs	r4, r1, #0
 80044da:	d010      	beq.n	80044fe <_free_r+0x2a>
 80044dc:	3c04      	subs	r4, #4
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	da00      	bge.n	80044e6 <_free_r+0x12>
 80044e4:	18e4      	adds	r4, r4, r3
 80044e6:	0028      	movs	r0, r5
 80044e8:	f000 f8e0 	bl	80046ac <__malloc_lock>
 80044ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004564 <_free_r+0x90>)
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d105      	bne.n	8004500 <_free_r+0x2c>
 80044f4:	6063      	str	r3, [r4, #4]
 80044f6:	6014      	str	r4, [r2, #0]
 80044f8:	0028      	movs	r0, r5
 80044fa:	f000 f8df 	bl	80046bc <__malloc_unlock>
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	42a3      	cmp	r3, r4
 8004502:	d908      	bls.n	8004516 <_free_r+0x42>
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	1821      	adds	r1, r4, r0
 8004508:	428b      	cmp	r3, r1
 800450a:	d1f3      	bne.n	80044f4 <_free_r+0x20>
 800450c:	6819      	ldr	r1, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	1809      	adds	r1, r1, r0
 8004512:	6021      	str	r1, [r4, #0]
 8004514:	e7ee      	b.n	80044f4 <_free_r+0x20>
 8004516:	001a      	movs	r2, r3
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <_free_r+0x4e>
 800451e:	42a3      	cmp	r3, r4
 8004520:	d9f9      	bls.n	8004516 <_free_r+0x42>
 8004522:	6811      	ldr	r1, [r2, #0]
 8004524:	1850      	adds	r0, r2, r1
 8004526:	42a0      	cmp	r0, r4
 8004528:	d10b      	bne.n	8004542 <_free_r+0x6e>
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	1809      	adds	r1, r1, r0
 800452e:	1850      	adds	r0, r2, r1
 8004530:	6011      	str	r1, [r2, #0]
 8004532:	4283      	cmp	r3, r0
 8004534:	d1e0      	bne.n	80044f8 <_free_r+0x24>
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	1841      	adds	r1, r0, r1
 800453c:	6011      	str	r1, [r2, #0]
 800453e:	6053      	str	r3, [r2, #4]
 8004540:	e7da      	b.n	80044f8 <_free_r+0x24>
 8004542:	42a0      	cmp	r0, r4
 8004544:	d902      	bls.n	800454c <_free_r+0x78>
 8004546:	230c      	movs	r3, #12
 8004548:	602b      	str	r3, [r5, #0]
 800454a:	e7d5      	b.n	80044f8 <_free_r+0x24>
 800454c:	6820      	ldr	r0, [r4, #0]
 800454e:	1821      	adds	r1, r4, r0
 8004550:	428b      	cmp	r3, r1
 8004552:	d103      	bne.n	800455c <_free_r+0x88>
 8004554:	6819      	ldr	r1, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	1809      	adds	r1, r1, r0
 800455a:	6021      	str	r1, [r4, #0]
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	6054      	str	r4, [r2, #4]
 8004560:	e7ca      	b.n	80044f8 <_free_r+0x24>
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	200007d0 	.word	0x200007d0

08004568 <sbrk_aligned>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	4e0f      	ldr	r6, [pc, #60]	@ (80045a8 <sbrk_aligned+0x40>)
 800456c:	000d      	movs	r5, r1
 800456e:	6831      	ldr	r1, [r6, #0]
 8004570:	0004      	movs	r4, r0
 8004572:	2900      	cmp	r1, #0
 8004574:	d102      	bne.n	800457c <sbrk_aligned+0x14>
 8004576:	f000 fb95 	bl	8004ca4 <_sbrk_r>
 800457a:	6030      	str	r0, [r6, #0]
 800457c:	0029      	movs	r1, r5
 800457e:	0020      	movs	r0, r4
 8004580:	f000 fb90 	bl	8004ca4 <_sbrk_r>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d103      	bne.n	8004590 <sbrk_aligned+0x28>
 8004588:	2501      	movs	r5, #1
 800458a:	426d      	negs	r5, r5
 800458c:	0028      	movs	r0, r5
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	2303      	movs	r3, #3
 8004592:	1cc5      	adds	r5, r0, #3
 8004594:	439d      	bics	r5, r3
 8004596:	42a8      	cmp	r0, r5
 8004598:	d0f8      	beq.n	800458c <sbrk_aligned+0x24>
 800459a:	1a29      	subs	r1, r5, r0
 800459c:	0020      	movs	r0, r4
 800459e:	f000 fb81 	bl	8004ca4 <_sbrk_r>
 80045a2:	3001      	adds	r0, #1
 80045a4:	d1f2      	bne.n	800458c <sbrk_aligned+0x24>
 80045a6:	e7ef      	b.n	8004588 <sbrk_aligned+0x20>
 80045a8:	200007cc 	.word	0x200007cc

080045ac <_malloc_r>:
 80045ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ae:	2203      	movs	r2, #3
 80045b0:	1ccb      	adds	r3, r1, #3
 80045b2:	4393      	bics	r3, r2
 80045b4:	3308      	adds	r3, #8
 80045b6:	0005      	movs	r5, r0
 80045b8:	001f      	movs	r7, r3
 80045ba:	2b0c      	cmp	r3, #12
 80045bc:	d234      	bcs.n	8004628 <_malloc_r+0x7c>
 80045be:	270c      	movs	r7, #12
 80045c0:	42b9      	cmp	r1, r7
 80045c2:	d833      	bhi.n	800462c <_malloc_r+0x80>
 80045c4:	0028      	movs	r0, r5
 80045c6:	f000 f871 	bl	80046ac <__malloc_lock>
 80045ca:	4e37      	ldr	r6, [pc, #220]	@ (80046a8 <_malloc_r+0xfc>)
 80045cc:	6833      	ldr	r3, [r6, #0]
 80045ce:	001c      	movs	r4, r3
 80045d0:	2c00      	cmp	r4, #0
 80045d2:	d12f      	bne.n	8004634 <_malloc_r+0x88>
 80045d4:	0039      	movs	r1, r7
 80045d6:	0028      	movs	r0, r5
 80045d8:	f7ff ffc6 	bl	8004568 <sbrk_aligned>
 80045dc:	0004      	movs	r4, r0
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	d15f      	bne.n	80046a2 <_malloc_r+0xf6>
 80045e2:	6834      	ldr	r4, [r6, #0]
 80045e4:	9400      	str	r4, [sp, #0]
 80045e6:	9b00      	ldr	r3, [sp, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d14a      	bne.n	8004682 <_malloc_r+0xd6>
 80045ec:	2c00      	cmp	r4, #0
 80045ee:	d052      	beq.n	8004696 <_malloc_r+0xea>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	0028      	movs	r0, r5
 80045f4:	18e3      	adds	r3, r4, r3
 80045f6:	9900      	ldr	r1, [sp, #0]
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	f000 fb53 	bl	8004ca4 <_sbrk_r>
 80045fe:	9b01      	ldr	r3, [sp, #4]
 8004600:	4283      	cmp	r3, r0
 8004602:	d148      	bne.n	8004696 <_malloc_r+0xea>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	0028      	movs	r0, r5
 8004608:	1aff      	subs	r7, r7, r3
 800460a:	0039      	movs	r1, r7
 800460c:	f7ff ffac 	bl	8004568 <sbrk_aligned>
 8004610:	3001      	adds	r0, #1
 8004612:	d040      	beq.n	8004696 <_malloc_r+0xea>
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	19db      	adds	r3, r3, r7
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	6833      	ldr	r3, [r6, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	2a00      	cmp	r2, #0
 8004620:	d133      	bne.n	800468a <_malloc_r+0xde>
 8004622:	9b00      	ldr	r3, [sp, #0]
 8004624:	6033      	str	r3, [r6, #0]
 8004626:	e019      	b.n	800465c <_malloc_r+0xb0>
 8004628:	2b00      	cmp	r3, #0
 800462a:	dac9      	bge.n	80045c0 <_malloc_r+0x14>
 800462c:	230c      	movs	r3, #12
 800462e:	602b      	str	r3, [r5, #0]
 8004630:	2000      	movs	r0, #0
 8004632:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004634:	6821      	ldr	r1, [r4, #0]
 8004636:	1bc9      	subs	r1, r1, r7
 8004638:	d420      	bmi.n	800467c <_malloc_r+0xd0>
 800463a:	290b      	cmp	r1, #11
 800463c:	d90a      	bls.n	8004654 <_malloc_r+0xa8>
 800463e:	19e2      	adds	r2, r4, r7
 8004640:	6027      	str	r7, [r4, #0]
 8004642:	42a3      	cmp	r3, r4
 8004644:	d104      	bne.n	8004650 <_malloc_r+0xa4>
 8004646:	6032      	str	r2, [r6, #0]
 8004648:	6863      	ldr	r3, [r4, #4]
 800464a:	6011      	str	r1, [r2, #0]
 800464c:	6053      	str	r3, [r2, #4]
 800464e:	e005      	b.n	800465c <_malloc_r+0xb0>
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	e7f9      	b.n	8004648 <_malloc_r+0x9c>
 8004654:	6862      	ldr	r2, [r4, #4]
 8004656:	42a3      	cmp	r3, r4
 8004658:	d10e      	bne.n	8004678 <_malloc_r+0xcc>
 800465a:	6032      	str	r2, [r6, #0]
 800465c:	0028      	movs	r0, r5
 800465e:	f000 f82d 	bl	80046bc <__malloc_unlock>
 8004662:	0020      	movs	r0, r4
 8004664:	2207      	movs	r2, #7
 8004666:	300b      	adds	r0, #11
 8004668:	1d23      	adds	r3, r4, #4
 800466a:	4390      	bics	r0, r2
 800466c:	1ac2      	subs	r2, r0, r3
 800466e:	4298      	cmp	r0, r3
 8004670:	d0df      	beq.n	8004632 <_malloc_r+0x86>
 8004672:	1a1b      	subs	r3, r3, r0
 8004674:	50a3      	str	r3, [r4, r2]
 8004676:	e7dc      	b.n	8004632 <_malloc_r+0x86>
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	e7ef      	b.n	800465c <_malloc_r+0xb0>
 800467c:	0023      	movs	r3, r4
 800467e:	6864      	ldr	r4, [r4, #4]
 8004680:	e7a6      	b.n	80045d0 <_malloc_r+0x24>
 8004682:	9c00      	ldr	r4, [sp, #0]
 8004684:	6863      	ldr	r3, [r4, #4]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	e7ad      	b.n	80045e6 <_malloc_r+0x3a>
 800468a:	001a      	movs	r2, r3
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	42a3      	cmp	r3, r4
 8004690:	d1fb      	bne.n	800468a <_malloc_r+0xde>
 8004692:	2300      	movs	r3, #0
 8004694:	e7da      	b.n	800464c <_malloc_r+0xa0>
 8004696:	230c      	movs	r3, #12
 8004698:	0028      	movs	r0, r5
 800469a:	602b      	str	r3, [r5, #0]
 800469c:	f000 f80e 	bl	80046bc <__malloc_unlock>
 80046a0:	e7c6      	b.n	8004630 <_malloc_r+0x84>
 80046a2:	6007      	str	r7, [r0, #0]
 80046a4:	e7da      	b.n	800465c <_malloc_r+0xb0>
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	200007d0 	.word	0x200007d0

080046ac <__malloc_lock>:
 80046ac:	b510      	push	{r4, lr}
 80046ae:	4802      	ldr	r0, [pc, #8]	@ (80046b8 <__malloc_lock+0xc>)
 80046b0:	f7ff ff04 	bl	80044bc <__retarget_lock_acquire_recursive>
 80046b4:	bd10      	pop	{r4, pc}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	200007c8 	.word	0x200007c8

080046bc <__malloc_unlock>:
 80046bc:	b510      	push	{r4, lr}
 80046be:	4802      	ldr	r0, [pc, #8]	@ (80046c8 <__malloc_unlock+0xc>)
 80046c0:	f7ff fefd 	bl	80044be <__retarget_lock_release_recursive>
 80046c4:	bd10      	pop	{r4, pc}
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	200007c8 	.word	0x200007c8

080046cc <__ssputs_r>:
 80046cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ce:	688e      	ldr	r6, [r1, #8]
 80046d0:	b085      	sub	sp, #20
 80046d2:	001f      	movs	r7, r3
 80046d4:	000c      	movs	r4, r1
 80046d6:	680b      	ldr	r3, [r1, #0]
 80046d8:	9002      	str	r0, [sp, #8]
 80046da:	9203      	str	r2, [sp, #12]
 80046dc:	42be      	cmp	r6, r7
 80046de:	d830      	bhi.n	8004742 <__ssputs_r+0x76>
 80046e0:	210c      	movs	r1, #12
 80046e2:	5e62      	ldrsh	r2, [r4, r1]
 80046e4:	2190      	movs	r1, #144	@ 0x90
 80046e6:	00c9      	lsls	r1, r1, #3
 80046e8:	420a      	tst	r2, r1
 80046ea:	d028      	beq.n	800473e <__ssputs_r+0x72>
 80046ec:	2003      	movs	r0, #3
 80046ee:	6921      	ldr	r1, [r4, #16]
 80046f0:	1a5b      	subs	r3, r3, r1
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	6963      	ldr	r3, [r4, #20]
 80046f6:	4343      	muls	r3, r0
 80046f8:	9801      	ldr	r0, [sp, #4]
 80046fa:	0fdd      	lsrs	r5, r3, #31
 80046fc:	18ed      	adds	r5, r5, r3
 80046fe:	1c7b      	adds	r3, r7, #1
 8004700:	181b      	adds	r3, r3, r0
 8004702:	106d      	asrs	r5, r5, #1
 8004704:	42ab      	cmp	r3, r5
 8004706:	d900      	bls.n	800470a <__ssputs_r+0x3e>
 8004708:	001d      	movs	r5, r3
 800470a:	0552      	lsls	r2, r2, #21
 800470c:	d528      	bpl.n	8004760 <__ssputs_r+0x94>
 800470e:	0029      	movs	r1, r5
 8004710:	9802      	ldr	r0, [sp, #8]
 8004712:	f7ff ff4b 	bl	80045ac <_malloc_r>
 8004716:	1e06      	subs	r6, r0, #0
 8004718:	d02c      	beq.n	8004774 <__ssputs_r+0xa8>
 800471a:	9a01      	ldr	r2, [sp, #4]
 800471c:	6921      	ldr	r1, [r4, #16]
 800471e:	f7ff fecf 	bl	80044c0 <memcpy>
 8004722:	89a2      	ldrh	r2, [r4, #12]
 8004724:	4b18      	ldr	r3, [pc, #96]	@ (8004788 <__ssputs_r+0xbc>)
 8004726:	401a      	ands	r2, r3
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	4313      	orrs	r3, r2
 800472c:	81a3      	strh	r3, [r4, #12]
 800472e:	9b01      	ldr	r3, [sp, #4]
 8004730:	6126      	str	r6, [r4, #16]
 8004732:	18f6      	adds	r6, r6, r3
 8004734:	6026      	str	r6, [r4, #0]
 8004736:	003e      	movs	r6, r7
 8004738:	6165      	str	r5, [r4, #20]
 800473a:	1aed      	subs	r5, r5, r3
 800473c:	60a5      	str	r5, [r4, #8]
 800473e:	42be      	cmp	r6, r7
 8004740:	d900      	bls.n	8004744 <__ssputs_r+0x78>
 8004742:	003e      	movs	r6, r7
 8004744:	0032      	movs	r2, r6
 8004746:	9903      	ldr	r1, [sp, #12]
 8004748:	6820      	ldr	r0, [r4, #0]
 800474a:	f000 fa99 	bl	8004c80 <memmove>
 800474e:	2000      	movs	r0, #0
 8004750:	68a3      	ldr	r3, [r4, #8]
 8004752:	1b9b      	subs	r3, r3, r6
 8004754:	60a3      	str	r3, [r4, #8]
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	199b      	adds	r3, r3, r6
 800475a:	6023      	str	r3, [r4, #0]
 800475c:	b005      	add	sp, #20
 800475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004760:	002a      	movs	r2, r5
 8004762:	9802      	ldr	r0, [sp, #8]
 8004764:	f000 fabb 	bl	8004cde <_realloc_r>
 8004768:	1e06      	subs	r6, r0, #0
 800476a:	d1e0      	bne.n	800472e <__ssputs_r+0x62>
 800476c:	6921      	ldr	r1, [r4, #16]
 800476e:	9802      	ldr	r0, [sp, #8]
 8004770:	f7ff feb0 	bl	80044d4 <_free_r>
 8004774:	230c      	movs	r3, #12
 8004776:	2001      	movs	r0, #1
 8004778:	9a02      	ldr	r2, [sp, #8]
 800477a:	4240      	negs	r0, r0
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	89a2      	ldrh	r2, [r4, #12]
 8004780:	3334      	adds	r3, #52	@ 0x34
 8004782:	4313      	orrs	r3, r2
 8004784:	81a3      	strh	r3, [r4, #12]
 8004786:	e7e9      	b.n	800475c <__ssputs_r+0x90>
 8004788:	fffffb7f 	.word	0xfffffb7f

0800478c <_svfiprintf_r>:
 800478c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478e:	b0a1      	sub	sp, #132	@ 0x84
 8004790:	9003      	str	r0, [sp, #12]
 8004792:	001d      	movs	r5, r3
 8004794:	898b      	ldrh	r3, [r1, #12]
 8004796:	000f      	movs	r7, r1
 8004798:	0016      	movs	r6, r2
 800479a:	061b      	lsls	r3, r3, #24
 800479c:	d511      	bpl.n	80047c2 <_svfiprintf_r+0x36>
 800479e:	690b      	ldr	r3, [r1, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10e      	bne.n	80047c2 <_svfiprintf_r+0x36>
 80047a4:	2140      	movs	r1, #64	@ 0x40
 80047a6:	f7ff ff01 	bl	80045ac <_malloc_r>
 80047aa:	6038      	str	r0, [r7, #0]
 80047ac:	6138      	str	r0, [r7, #16]
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d105      	bne.n	80047be <_svfiprintf_r+0x32>
 80047b2:	230c      	movs	r3, #12
 80047b4:	9a03      	ldr	r2, [sp, #12]
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	2001      	movs	r0, #1
 80047ba:	4240      	negs	r0, r0
 80047bc:	e0cf      	b.n	800495e <_svfiprintf_r+0x1d2>
 80047be:	2340      	movs	r3, #64	@ 0x40
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	2300      	movs	r3, #0
 80047c4:	ac08      	add	r4, sp, #32
 80047c6:	6163      	str	r3, [r4, #20]
 80047c8:	3320      	adds	r3, #32
 80047ca:	7663      	strb	r3, [r4, #25]
 80047cc:	3310      	adds	r3, #16
 80047ce:	76a3      	strb	r3, [r4, #26]
 80047d0:	9507      	str	r5, [sp, #28]
 80047d2:	0035      	movs	r5, r6
 80047d4:	782b      	ldrb	r3, [r5, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <_svfiprintf_r+0x52>
 80047da:	2b25      	cmp	r3, #37	@ 0x25
 80047dc:	d148      	bne.n	8004870 <_svfiprintf_r+0xe4>
 80047de:	1bab      	subs	r3, r5, r6
 80047e0:	9305      	str	r3, [sp, #20]
 80047e2:	42b5      	cmp	r5, r6
 80047e4:	d00b      	beq.n	80047fe <_svfiprintf_r+0x72>
 80047e6:	0032      	movs	r2, r6
 80047e8:	0039      	movs	r1, r7
 80047ea:	9803      	ldr	r0, [sp, #12]
 80047ec:	f7ff ff6e 	bl	80046cc <__ssputs_r>
 80047f0:	3001      	adds	r0, #1
 80047f2:	d100      	bne.n	80047f6 <_svfiprintf_r+0x6a>
 80047f4:	e0ae      	b.n	8004954 <_svfiprintf_r+0x1c8>
 80047f6:	6963      	ldr	r3, [r4, #20]
 80047f8:	9a05      	ldr	r2, [sp, #20]
 80047fa:	189b      	adds	r3, r3, r2
 80047fc:	6163      	str	r3, [r4, #20]
 80047fe:	782b      	ldrb	r3, [r5, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d100      	bne.n	8004806 <_svfiprintf_r+0x7a>
 8004804:	e0a6      	b.n	8004954 <_svfiprintf_r+0x1c8>
 8004806:	2201      	movs	r2, #1
 8004808:	2300      	movs	r3, #0
 800480a:	4252      	negs	r2, r2
 800480c:	6062      	str	r2, [r4, #4]
 800480e:	a904      	add	r1, sp, #16
 8004810:	3254      	adds	r2, #84	@ 0x54
 8004812:	1852      	adds	r2, r2, r1
 8004814:	1c6e      	adds	r6, r5, #1
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	60e3      	str	r3, [r4, #12]
 800481a:	60a3      	str	r3, [r4, #8]
 800481c:	7013      	strb	r3, [r2, #0]
 800481e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004820:	4b54      	ldr	r3, [pc, #336]	@ (8004974 <_svfiprintf_r+0x1e8>)
 8004822:	2205      	movs	r2, #5
 8004824:	0018      	movs	r0, r3
 8004826:	7831      	ldrb	r1, [r6, #0]
 8004828:	9305      	str	r3, [sp, #20]
 800482a:	f000 fa4d 	bl	8004cc8 <memchr>
 800482e:	1c75      	adds	r5, r6, #1
 8004830:	2800      	cmp	r0, #0
 8004832:	d11f      	bne.n	8004874 <_svfiprintf_r+0xe8>
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	06d3      	lsls	r3, r2, #27
 8004838:	d504      	bpl.n	8004844 <_svfiprintf_r+0xb8>
 800483a:	2353      	movs	r3, #83	@ 0x53
 800483c:	a904      	add	r1, sp, #16
 800483e:	185b      	adds	r3, r3, r1
 8004840:	2120      	movs	r1, #32
 8004842:	7019      	strb	r1, [r3, #0]
 8004844:	0713      	lsls	r3, r2, #28
 8004846:	d504      	bpl.n	8004852 <_svfiprintf_r+0xc6>
 8004848:	2353      	movs	r3, #83	@ 0x53
 800484a:	a904      	add	r1, sp, #16
 800484c:	185b      	adds	r3, r3, r1
 800484e:	212b      	movs	r1, #43	@ 0x2b
 8004850:	7019      	strb	r1, [r3, #0]
 8004852:	7833      	ldrb	r3, [r6, #0]
 8004854:	2b2a      	cmp	r3, #42	@ 0x2a
 8004856:	d016      	beq.n	8004886 <_svfiprintf_r+0xfa>
 8004858:	0035      	movs	r5, r6
 800485a:	2100      	movs	r1, #0
 800485c:	200a      	movs	r0, #10
 800485e:	68e3      	ldr	r3, [r4, #12]
 8004860:	782a      	ldrb	r2, [r5, #0]
 8004862:	1c6e      	adds	r6, r5, #1
 8004864:	3a30      	subs	r2, #48	@ 0x30
 8004866:	2a09      	cmp	r2, #9
 8004868:	d950      	bls.n	800490c <_svfiprintf_r+0x180>
 800486a:	2900      	cmp	r1, #0
 800486c:	d111      	bne.n	8004892 <_svfiprintf_r+0x106>
 800486e:	e017      	b.n	80048a0 <_svfiprintf_r+0x114>
 8004870:	3501      	adds	r5, #1
 8004872:	e7af      	b.n	80047d4 <_svfiprintf_r+0x48>
 8004874:	9b05      	ldr	r3, [sp, #20]
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	1ac0      	subs	r0, r0, r3
 800487a:	2301      	movs	r3, #1
 800487c:	4083      	lsls	r3, r0
 800487e:	4313      	orrs	r3, r2
 8004880:	002e      	movs	r6, r5
 8004882:	6023      	str	r3, [r4, #0]
 8004884:	e7cc      	b.n	8004820 <_svfiprintf_r+0x94>
 8004886:	9b07      	ldr	r3, [sp, #28]
 8004888:	1d19      	adds	r1, r3, #4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	9107      	str	r1, [sp, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	db01      	blt.n	8004896 <_svfiprintf_r+0x10a>
 8004892:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004894:	e004      	b.n	80048a0 <_svfiprintf_r+0x114>
 8004896:	425b      	negs	r3, r3
 8004898:	60e3      	str	r3, [r4, #12]
 800489a:	2302      	movs	r3, #2
 800489c:	4313      	orrs	r3, r2
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	782b      	ldrb	r3, [r5, #0]
 80048a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80048a4:	d10c      	bne.n	80048c0 <_svfiprintf_r+0x134>
 80048a6:	786b      	ldrb	r3, [r5, #1]
 80048a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80048aa:	d134      	bne.n	8004916 <_svfiprintf_r+0x18a>
 80048ac:	9b07      	ldr	r3, [sp, #28]
 80048ae:	3502      	adds	r5, #2
 80048b0:	1d1a      	adds	r2, r3, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	9207      	str	r2, [sp, #28]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da01      	bge.n	80048be <_svfiprintf_r+0x132>
 80048ba:	2301      	movs	r3, #1
 80048bc:	425b      	negs	r3, r3
 80048be:	9309      	str	r3, [sp, #36]	@ 0x24
 80048c0:	4e2d      	ldr	r6, [pc, #180]	@ (8004978 <_svfiprintf_r+0x1ec>)
 80048c2:	2203      	movs	r2, #3
 80048c4:	0030      	movs	r0, r6
 80048c6:	7829      	ldrb	r1, [r5, #0]
 80048c8:	f000 f9fe 	bl	8004cc8 <memchr>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d006      	beq.n	80048de <_svfiprintf_r+0x152>
 80048d0:	2340      	movs	r3, #64	@ 0x40
 80048d2:	1b80      	subs	r0, r0, r6
 80048d4:	4083      	lsls	r3, r0
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	3501      	adds	r5, #1
 80048da:	4313      	orrs	r3, r2
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	7829      	ldrb	r1, [r5, #0]
 80048e0:	2206      	movs	r2, #6
 80048e2:	4826      	ldr	r0, [pc, #152]	@ (800497c <_svfiprintf_r+0x1f0>)
 80048e4:	1c6e      	adds	r6, r5, #1
 80048e6:	7621      	strb	r1, [r4, #24]
 80048e8:	f000 f9ee 	bl	8004cc8 <memchr>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d038      	beq.n	8004962 <_svfiprintf_r+0x1d6>
 80048f0:	4b23      	ldr	r3, [pc, #140]	@ (8004980 <_svfiprintf_r+0x1f4>)
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d122      	bne.n	800493c <_svfiprintf_r+0x1b0>
 80048f6:	2207      	movs	r2, #7
 80048f8:	9b07      	ldr	r3, [sp, #28]
 80048fa:	3307      	adds	r3, #7
 80048fc:	4393      	bics	r3, r2
 80048fe:	3308      	adds	r3, #8
 8004900:	9307      	str	r3, [sp, #28]
 8004902:	6963      	ldr	r3, [r4, #20]
 8004904:	9a04      	ldr	r2, [sp, #16]
 8004906:	189b      	adds	r3, r3, r2
 8004908:	6163      	str	r3, [r4, #20]
 800490a:	e762      	b.n	80047d2 <_svfiprintf_r+0x46>
 800490c:	4343      	muls	r3, r0
 800490e:	0035      	movs	r5, r6
 8004910:	2101      	movs	r1, #1
 8004912:	189b      	adds	r3, r3, r2
 8004914:	e7a4      	b.n	8004860 <_svfiprintf_r+0xd4>
 8004916:	2300      	movs	r3, #0
 8004918:	200a      	movs	r0, #10
 800491a:	0019      	movs	r1, r3
 800491c:	3501      	adds	r5, #1
 800491e:	6063      	str	r3, [r4, #4]
 8004920:	782a      	ldrb	r2, [r5, #0]
 8004922:	1c6e      	adds	r6, r5, #1
 8004924:	3a30      	subs	r2, #48	@ 0x30
 8004926:	2a09      	cmp	r2, #9
 8004928:	d903      	bls.n	8004932 <_svfiprintf_r+0x1a6>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0c8      	beq.n	80048c0 <_svfiprintf_r+0x134>
 800492e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004930:	e7c6      	b.n	80048c0 <_svfiprintf_r+0x134>
 8004932:	4341      	muls	r1, r0
 8004934:	0035      	movs	r5, r6
 8004936:	2301      	movs	r3, #1
 8004938:	1889      	adds	r1, r1, r2
 800493a:	e7f1      	b.n	8004920 <_svfiprintf_r+0x194>
 800493c:	aa07      	add	r2, sp, #28
 800493e:	9200      	str	r2, [sp, #0]
 8004940:	0021      	movs	r1, r4
 8004942:	003a      	movs	r2, r7
 8004944:	4b0f      	ldr	r3, [pc, #60]	@ (8004984 <_svfiprintf_r+0x1f8>)
 8004946:	9803      	ldr	r0, [sp, #12]
 8004948:	e000      	b.n	800494c <_svfiprintf_r+0x1c0>
 800494a:	bf00      	nop
 800494c:	9004      	str	r0, [sp, #16]
 800494e:	9b04      	ldr	r3, [sp, #16]
 8004950:	3301      	adds	r3, #1
 8004952:	d1d6      	bne.n	8004902 <_svfiprintf_r+0x176>
 8004954:	89bb      	ldrh	r3, [r7, #12]
 8004956:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004958:	065b      	lsls	r3, r3, #25
 800495a:	d500      	bpl.n	800495e <_svfiprintf_r+0x1d2>
 800495c:	e72c      	b.n	80047b8 <_svfiprintf_r+0x2c>
 800495e:	b021      	add	sp, #132	@ 0x84
 8004960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004962:	aa07      	add	r2, sp, #28
 8004964:	9200      	str	r2, [sp, #0]
 8004966:	0021      	movs	r1, r4
 8004968:	003a      	movs	r2, r7
 800496a:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <_svfiprintf_r+0x1f8>)
 800496c:	9803      	ldr	r0, [sp, #12]
 800496e:	f000 f87b 	bl	8004a68 <_printf_i>
 8004972:	e7eb      	b.n	800494c <_svfiprintf_r+0x1c0>
 8004974:	080093a4 	.word	0x080093a4
 8004978:	080093aa 	.word	0x080093aa
 800497c:	080093ae 	.word	0x080093ae
 8004980:	00000000 	.word	0x00000000
 8004984:	080046cd 	.word	0x080046cd

08004988 <_printf_common>:
 8004988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800498a:	0016      	movs	r6, r2
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	688a      	ldr	r2, [r1, #8]
 8004990:	690b      	ldr	r3, [r1, #16]
 8004992:	000c      	movs	r4, r1
 8004994:	9000      	str	r0, [sp, #0]
 8004996:	4293      	cmp	r3, r2
 8004998:	da00      	bge.n	800499c <_printf_common+0x14>
 800499a:	0013      	movs	r3, r2
 800499c:	0022      	movs	r2, r4
 800499e:	6033      	str	r3, [r6, #0]
 80049a0:	3243      	adds	r2, #67	@ 0x43
 80049a2:	7812      	ldrb	r2, [r2, #0]
 80049a4:	2a00      	cmp	r2, #0
 80049a6:	d001      	beq.n	80049ac <_printf_common+0x24>
 80049a8:	3301      	adds	r3, #1
 80049aa:	6033      	str	r3, [r6, #0]
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	069b      	lsls	r3, r3, #26
 80049b0:	d502      	bpl.n	80049b8 <_printf_common+0x30>
 80049b2:	6833      	ldr	r3, [r6, #0]
 80049b4:	3302      	adds	r3, #2
 80049b6:	6033      	str	r3, [r6, #0]
 80049b8:	6822      	ldr	r2, [r4, #0]
 80049ba:	2306      	movs	r3, #6
 80049bc:	0015      	movs	r5, r2
 80049be:	401d      	ands	r5, r3
 80049c0:	421a      	tst	r2, r3
 80049c2:	d027      	beq.n	8004a14 <_printf_common+0x8c>
 80049c4:	0023      	movs	r3, r4
 80049c6:	3343      	adds	r3, #67	@ 0x43
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	1e5a      	subs	r2, r3, #1
 80049cc:	4193      	sbcs	r3, r2
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	0692      	lsls	r2, r2, #26
 80049d2:	d430      	bmi.n	8004a36 <_printf_common+0xae>
 80049d4:	0022      	movs	r2, r4
 80049d6:	9901      	ldr	r1, [sp, #4]
 80049d8:	9800      	ldr	r0, [sp, #0]
 80049da:	9d08      	ldr	r5, [sp, #32]
 80049dc:	3243      	adds	r2, #67	@ 0x43
 80049de:	47a8      	blx	r5
 80049e0:	3001      	adds	r0, #1
 80049e2:	d025      	beq.n	8004a30 <_printf_common+0xa8>
 80049e4:	2206      	movs	r2, #6
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	2500      	movs	r5, #0
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d105      	bne.n	80049fc <_printf_common+0x74>
 80049f0:	6833      	ldr	r3, [r6, #0]
 80049f2:	68e5      	ldr	r5, [r4, #12]
 80049f4:	1aed      	subs	r5, r5, r3
 80049f6:	43eb      	mvns	r3, r5
 80049f8:	17db      	asrs	r3, r3, #31
 80049fa:	401d      	ands	r5, r3
 80049fc:	68a3      	ldr	r3, [r4, #8]
 80049fe:	6922      	ldr	r2, [r4, #16]
 8004a00:	4293      	cmp	r3, r2
 8004a02:	dd01      	ble.n	8004a08 <_printf_common+0x80>
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	18ed      	adds	r5, r5, r3
 8004a08:	2600      	movs	r6, #0
 8004a0a:	42b5      	cmp	r5, r6
 8004a0c:	d120      	bne.n	8004a50 <_printf_common+0xc8>
 8004a0e:	2000      	movs	r0, #0
 8004a10:	e010      	b.n	8004a34 <_printf_common+0xac>
 8004a12:	3501      	adds	r5, #1
 8004a14:	68e3      	ldr	r3, [r4, #12]
 8004a16:	6832      	ldr	r2, [r6, #0]
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	42ab      	cmp	r3, r5
 8004a1c:	ddd2      	ble.n	80049c4 <_printf_common+0x3c>
 8004a1e:	0022      	movs	r2, r4
 8004a20:	2301      	movs	r3, #1
 8004a22:	9901      	ldr	r1, [sp, #4]
 8004a24:	9800      	ldr	r0, [sp, #0]
 8004a26:	9f08      	ldr	r7, [sp, #32]
 8004a28:	3219      	adds	r2, #25
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d1f0      	bne.n	8004a12 <_printf_common+0x8a>
 8004a30:	2001      	movs	r0, #1
 8004a32:	4240      	negs	r0, r0
 8004a34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a36:	2030      	movs	r0, #48	@ 0x30
 8004a38:	18e1      	adds	r1, r4, r3
 8004a3a:	3143      	adds	r1, #67	@ 0x43
 8004a3c:	7008      	strb	r0, [r1, #0]
 8004a3e:	0021      	movs	r1, r4
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	3145      	adds	r1, #69	@ 0x45
 8004a44:	7809      	ldrb	r1, [r1, #0]
 8004a46:	18a2      	adds	r2, r4, r2
 8004a48:	3243      	adds	r2, #67	@ 0x43
 8004a4a:	3302      	adds	r3, #2
 8004a4c:	7011      	strb	r1, [r2, #0]
 8004a4e:	e7c1      	b.n	80049d4 <_printf_common+0x4c>
 8004a50:	0022      	movs	r2, r4
 8004a52:	2301      	movs	r3, #1
 8004a54:	9901      	ldr	r1, [sp, #4]
 8004a56:	9800      	ldr	r0, [sp, #0]
 8004a58:	9f08      	ldr	r7, [sp, #32]
 8004a5a:	321a      	adds	r2, #26
 8004a5c:	47b8      	blx	r7
 8004a5e:	3001      	adds	r0, #1
 8004a60:	d0e6      	beq.n	8004a30 <_printf_common+0xa8>
 8004a62:	3601      	adds	r6, #1
 8004a64:	e7d1      	b.n	8004a0a <_printf_common+0x82>
	...

08004a68 <_printf_i>:
 8004a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a6a:	b08b      	sub	sp, #44	@ 0x2c
 8004a6c:	9206      	str	r2, [sp, #24]
 8004a6e:	000a      	movs	r2, r1
 8004a70:	3243      	adds	r2, #67	@ 0x43
 8004a72:	9307      	str	r3, [sp, #28]
 8004a74:	9005      	str	r0, [sp, #20]
 8004a76:	9203      	str	r2, [sp, #12]
 8004a78:	7e0a      	ldrb	r2, [r1, #24]
 8004a7a:	000c      	movs	r4, r1
 8004a7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004a7e:	2a78      	cmp	r2, #120	@ 0x78
 8004a80:	d809      	bhi.n	8004a96 <_printf_i+0x2e>
 8004a82:	2a62      	cmp	r2, #98	@ 0x62
 8004a84:	d80b      	bhi.n	8004a9e <_printf_i+0x36>
 8004a86:	2a00      	cmp	r2, #0
 8004a88:	d100      	bne.n	8004a8c <_printf_i+0x24>
 8004a8a:	e0ba      	b.n	8004c02 <_printf_i+0x19a>
 8004a8c:	497a      	ldr	r1, [pc, #488]	@ (8004c78 <_printf_i+0x210>)
 8004a8e:	9104      	str	r1, [sp, #16]
 8004a90:	2a58      	cmp	r2, #88	@ 0x58
 8004a92:	d100      	bne.n	8004a96 <_printf_i+0x2e>
 8004a94:	e08e      	b.n	8004bb4 <_printf_i+0x14c>
 8004a96:	0025      	movs	r5, r4
 8004a98:	3542      	adds	r5, #66	@ 0x42
 8004a9a:	702a      	strb	r2, [r5, #0]
 8004a9c:	e022      	b.n	8004ae4 <_printf_i+0x7c>
 8004a9e:	0010      	movs	r0, r2
 8004aa0:	3863      	subs	r0, #99	@ 0x63
 8004aa2:	2815      	cmp	r0, #21
 8004aa4:	d8f7      	bhi.n	8004a96 <_printf_i+0x2e>
 8004aa6:	f7fb fb2b 	bl	8000100 <__gnu_thumb1_case_shi>
 8004aaa:	0016      	.short	0x0016
 8004aac:	fff6001f 	.word	0xfff6001f
 8004ab0:	fff6fff6 	.word	0xfff6fff6
 8004ab4:	001ffff6 	.word	0x001ffff6
 8004ab8:	fff6fff6 	.word	0xfff6fff6
 8004abc:	fff6fff6 	.word	0xfff6fff6
 8004ac0:	0036009f 	.word	0x0036009f
 8004ac4:	fff6007e 	.word	0xfff6007e
 8004ac8:	00b0fff6 	.word	0x00b0fff6
 8004acc:	0036fff6 	.word	0x0036fff6
 8004ad0:	fff6fff6 	.word	0xfff6fff6
 8004ad4:	0082      	.short	0x0082
 8004ad6:	0025      	movs	r5, r4
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	3542      	adds	r5, #66	@ 0x42
 8004adc:	1d11      	adds	r1, r2, #4
 8004ade:	6019      	str	r1, [r3, #0]
 8004ae0:	6813      	ldr	r3, [r2, #0]
 8004ae2:	702b      	strb	r3, [r5, #0]
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e09e      	b.n	8004c26 <_printf_i+0x1be>
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	6809      	ldr	r1, [r1, #0]
 8004aec:	1d02      	adds	r2, r0, #4
 8004aee:	060d      	lsls	r5, r1, #24
 8004af0:	d50b      	bpl.n	8004b0a <_printf_i+0xa2>
 8004af2:	6806      	ldr	r6, [r0, #0]
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	2e00      	cmp	r6, #0
 8004af8:	da03      	bge.n	8004b02 <_printf_i+0x9a>
 8004afa:	232d      	movs	r3, #45	@ 0x2d
 8004afc:	9a03      	ldr	r2, [sp, #12]
 8004afe:	4276      	negs	r6, r6
 8004b00:	7013      	strb	r3, [r2, #0]
 8004b02:	4b5d      	ldr	r3, [pc, #372]	@ (8004c78 <_printf_i+0x210>)
 8004b04:	270a      	movs	r7, #10
 8004b06:	9304      	str	r3, [sp, #16]
 8004b08:	e018      	b.n	8004b3c <_printf_i+0xd4>
 8004b0a:	6806      	ldr	r6, [r0, #0]
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	0649      	lsls	r1, r1, #25
 8004b10:	d5f1      	bpl.n	8004af6 <_printf_i+0x8e>
 8004b12:	b236      	sxth	r6, r6
 8004b14:	e7ef      	b.n	8004af6 <_printf_i+0x8e>
 8004b16:	6808      	ldr	r0, [r1, #0]
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	c940      	ldmia	r1!, {r6}
 8004b1c:	0605      	lsls	r5, r0, #24
 8004b1e:	d402      	bmi.n	8004b26 <_printf_i+0xbe>
 8004b20:	0640      	lsls	r0, r0, #25
 8004b22:	d500      	bpl.n	8004b26 <_printf_i+0xbe>
 8004b24:	b2b6      	uxth	r6, r6
 8004b26:	6019      	str	r1, [r3, #0]
 8004b28:	4b53      	ldr	r3, [pc, #332]	@ (8004c78 <_printf_i+0x210>)
 8004b2a:	270a      	movs	r7, #10
 8004b2c:	9304      	str	r3, [sp, #16]
 8004b2e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004b30:	d100      	bne.n	8004b34 <_printf_i+0xcc>
 8004b32:	3f02      	subs	r7, #2
 8004b34:	0023      	movs	r3, r4
 8004b36:	2200      	movs	r2, #0
 8004b38:	3343      	adds	r3, #67	@ 0x43
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	6863      	ldr	r3, [r4, #4]
 8004b3e:	60a3      	str	r3, [r4, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	db06      	blt.n	8004b52 <_printf_i+0xea>
 8004b44:	2104      	movs	r1, #4
 8004b46:	6822      	ldr	r2, [r4, #0]
 8004b48:	9d03      	ldr	r5, [sp, #12]
 8004b4a:	438a      	bics	r2, r1
 8004b4c:	6022      	str	r2, [r4, #0]
 8004b4e:	4333      	orrs	r3, r6
 8004b50:	d00c      	beq.n	8004b6c <_printf_i+0x104>
 8004b52:	9d03      	ldr	r5, [sp, #12]
 8004b54:	0030      	movs	r0, r6
 8004b56:	0039      	movs	r1, r7
 8004b58:	f7fb fb62 	bl	8000220 <__aeabi_uidivmod>
 8004b5c:	9b04      	ldr	r3, [sp, #16]
 8004b5e:	3d01      	subs	r5, #1
 8004b60:	5c5b      	ldrb	r3, [r3, r1]
 8004b62:	702b      	strb	r3, [r5, #0]
 8004b64:	0033      	movs	r3, r6
 8004b66:	0006      	movs	r6, r0
 8004b68:	429f      	cmp	r7, r3
 8004b6a:	d9f3      	bls.n	8004b54 <_printf_i+0xec>
 8004b6c:	2f08      	cmp	r7, #8
 8004b6e:	d109      	bne.n	8004b84 <_printf_i+0x11c>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	07db      	lsls	r3, r3, #31
 8004b74:	d506      	bpl.n	8004b84 <_printf_i+0x11c>
 8004b76:	6862      	ldr	r2, [r4, #4]
 8004b78:	6923      	ldr	r3, [r4, #16]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	dc02      	bgt.n	8004b84 <_printf_i+0x11c>
 8004b7e:	2330      	movs	r3, #48	@ 0x30
 8004b80:	3d01      	subs	r5, #1
 8004b82:	702b      	strb	r3, [r5, #0]
 8004b84:	9b03      	ldr	r3, [sp, #12]
 8004b86:	1b5b      	subs	r3, r3, r5
 8004b88:	6123      	str	r3, [r4, #16]
 8004b8a:	9b07      	ldr	r3, [sp, #28]
 8004b8c:	0021      	movs	r1, r4
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	9805      	ldr	r0, [sp, #20]
 8004b92:	9b06      	ldr	r3, [sp, #24]
 8004b94:	aa09      	add	r2, sp, #36	@ 0x24
 8004b96:	f7ff fef7 	bl	8004988 <_printf_common>
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d148      	bne.n	8004c30 <_printf_i+0x1c8>
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	4240      	negs	r0, r0
 8004ba2:	b00b      	add	sp, #44	@ 0x2c
 8004ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	6809      	ldr	r1, [r1, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	6022      	str	r2, [r4, #0]
 8004bae:	2278      	movs	r2, #120	@ 0x78
 8004bb0:	4932      	ldr	r1, [pc, #200]	@ (8004c7c <_printf_i+0x214>)
 8004bb2:	9104      	str	r1, [sp, #16]
 8004bb4:	0021      	movs	r1, r4
 8004bb6:	3145      	adds	r1, #69	@ 0x45
 8004bb8:	700a      	strb	r2, [r1, #0]
 8004bba:	6819      	ldr	r1, [r3, #0]
 8004bbc:	6822      	ldr	r2, [r4, #0]
 8004bbe:	c940      	ldmia	r1!, {r6}
 8004bc0:	0610      	lsls	r0, r2, #24
 8004bc2:	d402      	bmi.n	8004bca <_printf_i+0x162>
 8004bc4:	0650      	lsls	r0, r2, #25
 8004bc6:	d500      	bpl.n	8004bca <_printf_i+0x162>
 8004bc8:	b2b6      	uxth	r6, r6
 8004bca:	6019      	str	r1, [r3, #0]
 8004bcc:	07d3      	lsls	r3, r2, #31
 8004bce:	d502      	bpl.n	8004bd6 <_printf_i+0x16e>
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	2e00      	cmp	r6, #0
 8004bd8:	d001      	beq.n	8004bde <_printf_i+0x176>
 8004bda:	2710      	movs	r7, #16
 8004bdc:	e7aa      	b.n	8004b34 <_printf_i+0xcc>
 8004bde:	2220      	movs	r2, #32
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	4393      	bics	r3, r2
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	e7f8      	b.n	8004bda <_printf_i+0x172>
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	680d      	ldr	r5, [r1, #0]
 8004bec:	1d10      	adds	r0, r2, #4
 8004bee:	6949      	ldr	r1, [r1, #20]
 8004bf0:	6018      	str	r0, [r3, #0]
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	062e      	lsls	r6, r5, #24
 8004bf6:	d501      	bpl.n	8004bfc <_printf_i+0x194>
 8004bf8:	6019      	str	r1, [r3, #0]
 8004bfa:	e002      	b.n	8004c02 <_printf_i+0x19a>
 8004bfc:	066d      	lsls	r5, r5, #25
 8004bfe:	d5fb      	bpl.n	8004bf8 <_printf_i+0x190>
 8004c00:	8019      	strh	r1, [r3, #0]
 8004c02:	2300      	movs	r3, #0
 8004c04:	9d03      	ldr	r5, [sp, #12]
 8004c06:	6123      	str	r3, [r4, #16]
 8004c08:	e7bf      	b.n	8004b8a <_printf_i+0x122>
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	1d11      	adds	r1, r2, #4
 8004c0e:	6019      	str	r1, [r3, #0]
 8004c10:	6815      	ldr	r5, [r2, #0]
 8004c12:	2100      	movs	r1, #0
 8004c14:	0028      	movs	r0, r5
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	f000 f856 	bl	8004cc8 <memchr>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d001      	beq.n	8004c24 <_printf_i+0x1bc>
 8004c20:	1b40      	subs	r0, r0, r5
 8004c22:	6060      	str	r0, [r4, #4]
 8004c24:	6863      	ldr	r3, [r4, #4]
 8004c26:	6123      	str	r3, [r4, #16]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9a03      	ldr	r2, [sp, #12]
 8004c2c:	7013      	strb	r3, [r2, #0]
 8004c2e:	e7ac      	b.n	8004b8a <_printf_i+0x122>
 8004c30:	002a      	movs	r2, r5
 8004c32:	6923      	ldr	r3, [r4, #16]
 8004c34:	9906      	ldr	r1, [sp, #24]
 8004c36:	9805      	ldr	r0, [sp, #20]
 8004c38:	9d07      	ldr	r5, [sp, #28]
 8004c3a:	47a8      	blx	r5
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d0ae      	beq.n	8004b9e <_printf_i+0x136>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	079b      	lsls	r3, r3, #30
 8004c44:	d415      	bmi.n	8004c72 <_printf_i+0x20a>
 8004c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c48:	68e0      	ldr	r0, [r4, #12]
 8004c4a:	4298      	cmp	r0, r3
 8004c4c:	daa9      	bge.n	8004ba2 <_printf_i+0x13a>
 8004c4e:	0018      	movs	r0, r3
 8004c50:	e7a7      	b.n	8004ba2 <_printf_i+0x13a>
 8004c52:	0022      	movs	r2, r4
 8004c54:	2301      	movs	r3, #1
 8004c56:	9906      	ldr	r1, [sp, #24]
 8004c58:	9805      	ldr	r0, [sp, #20]
 8004c5a:	9e07      	ldr	r6, [sp, #28]
 8004c5c:	3219      	adds	r2, #25
 8004c5e:	47b0      	blx	r6
 8004c60:	3001      	adds	r0, #1
 8004c62:	d09c      	beq.n	8004b9e <_printf_i+0x136>
 8004c64:	3501      	adds	r5, #1
 8004c66:	68e3      	ldr	r3, [r4, #12]
 8004c68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	42ab      	cmp	r3, r5
 8004c6e:	dcf0      	bgt.n	8004c52 <_printf_i+0x1ea>
 8004c70:	e7e9      	b.n	8004c46 <_printf_i+0x1de>
 8004c72:	2500      	movs	r5, #0
 8004c74:	e7f7      	b.n	8004c66 <_printf_i+0x1fe>
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	080093b5 	.word	0x080093b5
 8004c7c:	080093c6 	.word	0x080093c6

08004c80 <memmove>:
 8004c80:	b510      	push	{r4, lr}
 8004c82:	4288      	cmp	r0, r1
 8004c84:	d902      	bls.n	8004c8c <memmove+0xc>
 8004c86:	188b      	adds	r3, r1, r2
 8004c88:	4298      	cmp	r0, r3
 8004c8a:	d308      	bcc.n	8004c9e <memmove+0x1e>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d007      	beq.n	8004ca2 <memmove+0x22>
 8004c92:	5ccc      	ldrb	r4, [r1, r3]
 8004c94:	54c4      	strb	r4, [r0, r3]
 8004c96:	3301      	adds	r3, #1
 8004c98:	e7f9      	b.n	8004c8e <memmove+0xe>
 8004c9a:	5c8b      	ldrb	r3, [r1, r2]
 8004c9c:	5483      	strb	r3, [r0, r2]
 8004c9e:	3a01      	subs	r2, #1
 8004ca0:	d2fb      	bcs.n	8004c9a <memmove+0x1a>
 8004ca2:	bd10      	pop	{r4, pc}

08004ca4 <_sbrk_r>:
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	b570      	push	{r4, r5, r6, lr}
 8004ca8:	4d06      	ldr	r5, [pc, #24]	@ (8004cc4 <_sbrk_r+0x20>)
 8004caa:	0004      	movs	r4, r0
 8004cac:	0008      	movs	r0, r1
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	f7fd f918 	bl	8001ee4 <_sbrk>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d103      	bne.n	8004cc0 <_sbrk_r+0x1c>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d000      	beq.n	8004cc0 <_sbrk_r+0x1c>
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	bd70      	pop	{r4, r5, r6, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	200007c4 	.word	0x200007c4

08004cc8 <memchr>:
 8004cc8:	b2c9      	uxtb	r1, r1
 8004cca:	1882      	adds	r2, r0, r2
 8004ccc:	4290      	cmp	r0, r2
 8004cce:	d101      	bne.n	8004cd4 <memchr+0xc>
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	4770      	bx	lr
 8004cd4:	7803      	ldrb	r3, [r0, #0]
 8004cd6:	428b      	cmp	r3, r1
 8004cd8:	d0fb      	beq.n	8004cd2 <memchr+0xa>
 8004cda:	3001      	adds	r0, #1
 8004cdc:	e7f6      	b.n	8004ccc <memchr+0x4>

08004cde <_realloc_r>:
 8004cde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ce0:	0006      	movs	r6, r0
 8004ce2:	000c      	movs	r4, r1
 8004ce4:	0015      	movs	r5, r2
 8004ce6:	2900      	cmp	r1, #0
 8004ce8:	d105      	bne.n	8004cf6 <_realloc_r+0x18>
 8004cea:	0011      	movs	r1, r2
 8004cec:	f7ff fc5e 	bl	80045ac <_malloc_r>
 8004cf0:	0004      	movs	r4, r0
 8004cf2:	0020      	movs	r0, r4
 8004cf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	d103      	bne.n	8004d02 <_realloc_r+0x24>
 8004cfa:	f7ff fbeb 	bl	80044d4 <_free_r>
 8004cfe:	002c      	movs	r4, r5
 8004d00:	e7f7      	b.n	8004cf2 <_realloc_r+0x14>
 8004d02:	f000 f81c 	bl	8004d3e <_malloc_usable_size_r>
 8004d06:	0007      	movs	r7, r0
 8004d08:	4285      	cmp	r5, r0
 8004d0a:	d802      	bhi.n	8004d12 <_realloc_r+0x34>
 8004d0c:	0843      	lsrs	r3, r0, #1
 8004d0e:	42ab      	cmp	r3, r5
 8004d10:	d3ef      	bcc.n	8004cf2 <_realloc_r+0x14>
 8004d12:	0029      	movs	r1, r5
 8004d14:	0030      	movs	r0, r6
 8004d16:	f7ff fc49 	bl	80045ac <_malloc_r>
 8004d1a:	9001      	str	r0, [sp, #4]
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d101      	bne.n	8004d24 <_realloc_r+0x46>
 8004d20:	9c01      	ldr	r4, [sp, #4]
 8004d22:	e7e6      	b.n	8004cf2 <_realloc_r+0x14>
 8004d24:	002a      	movs	r2, r5
 8004d26:	42bd      	cmp	r5, r7
 8004d28:	d900      	bls.n	8004d2c <_realloc_r+0x4e>
 8004d2a:	003a      	movs	r2, r7
 8004d2c:	0021      	movs	r1, r4
 8004d2e:	9801      	ldr	r0, [sp, #4]
 8004d30:	f7ff fbc6 	bl	80044c0 <memcpy>
 8004d34:	0021      	movs	r1, r4
 8004d36:	0030      	movs	r0, r6
 8004d38:	f7ff fbcc 	bl	80044d4 <_free_r>
 8004d3c:	e7f0      	b.n	8004d20 <_realloc_r+0x42>

08004d3e <_malloc_usable_size_r>:
 8004d3e:	1f0b      	subs	r3, r1, #4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	1f18      	subs	r0, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da01      	bge.n	8004d4c <_malloc_usable_size_r+0xe>
 8004d48:	580b      	ldr	r3, [r1, r0]
 8004d4a:	18c0      	adds	r0, r0, r3
 8004d4c:	4770      	bx	lr
	...

08004d50 <_init>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr

08004d5c <_fini>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr

08004d68 <__FLASH_Program_Fast_veneer>:
 8004d68:	b401      	push	{r0}
 8004d6a:	4802      	ldr	r0, [pc, #8]	@ (8004d74 <__FLASH_Program_Fast_veneer+0xc>)
 8004d6c:	4684      	mov	ip, r0
 8004d6e:	bc01      	pop	{r0}
 8004d70:	4760      	bx	ip
 8004d72:	bf00      	nop
 8004d74:	20000071 	.word	0x20000071

Disassembly of section .data:

20000000 <ani_idle>:
20000000:	08005210 08005610 08005a10 08005e10     .R...V...Z...^..
20000010:	08006210                                .b..

20000014 <SystemCoreClock>:
20000014:	00f42400                                .$..

20000018 <uwTickPrio>:
20000018:	00000004                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <_impure_ptr>:
20000020:	20000024                                $.. 

20000024 <_impure_data>:
20000024:	00000000 2000068c 200006f4 2000075c     ....... ... \.. 
	...

20000070 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000070:	b580      	push	{r7, lr}
20000072:	b088      	sub	sp, #32
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
20000078:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000007a:	231f      	movs	r3, #31
2000007c:	18fb      	adds	r3, r7, r3
2000007e:	2200      	movs	r2, #0
20000080:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000086:	683b      	ldr	r3, [r7, #0]
20000088:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000008a:	4b1a      	ldr	r3, [pc, #104]	@ (200000f4 <FLASH_Program_Fast+0x84>)
2000008c:	695a      	ldr	r2, [r3, #20]
2000008e:	4b19      	ldr	r3, [pc, #100]	@ (200000f4 <FLASH_Program_Fast+0x84>)
20000090:	2180      	movs	r1, #128	@ 0x80
20000092:	02c9      	lsls	r1, r1, #11
20000094:	430a      	orrs	r2, r1
20000096:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000098:	f3ef 8310 	mrs	r3, PRIMASK
2000009c:	60fb      	str	r3, [r7, #12]
  return(result);
2000009e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000a2:	b672      	cpsid	i
}
200000a4:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000a6:	e00f      	b.n	200000c8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000a8:	697a      	ldr	r2, [r7, #20]
200000aa:	69bb      	ldr	r3, [r7, #24]
200000ac:	6812      	ldr	r2, [r2, #0]
200000ae:	601a      	str	r2, [r3, #0]
    src += 4U;
200000b0:	697b      	ldr	r3, [r7, #20]
200000b2:	3304      	adds	r3, #4
200000b4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000b6:	69bb      	ldr	r3, [r7, #24]
200000b8:	3304      	adds	r3, #4
200000ba:	61bb      	str	r3, [r7, #24]
    index++;
200000bc:	211f      	movs	r1, #31
200000be:	187b      	adds	r3, r7, r1
200000c0:	781a      	ldrb	r2, [r3, #0]
200000c2:	187b      	adds	r3, r7, r1
200000c4:	3201      	adds	r2, #1
200000c6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000c8:	231f      	movs	r3, #31
200000ca:	18fb      	adds	r3, r7, r3
200000cc:	781b      	ldrb	r3, [r3, #0]
200000ce:	2b3f      	cmp	r3, #63	@ 0x3f
200000d0:	d9ea      	bls.n	200000a8 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000d2:	46c0      	nop			@ (mov r8, r8)
200000d4:	4b07      	ldr	r3, [pc, #28]	@ (200000f4 <FLASH_Program_Fast+0x84>)
200000d6:	691a      	ldr	r2, [r3, #16]
200000d8:	2380      	movs	r3, #128	@ 0x80
200000da:	025b      	lsls	r3, r3, #9
200000dc:	4013      	ands	r3, r2
200000de:	d1f9      	bne.n	200000d4 <FLASH_Program_Fast+0x64>
200000e0:	693b      	ldr	r3, [r7, #16]
200000e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e4:	68bb      	ldr	r3, [r7, #8]
200000e6:	f383 8810 	msr	PRIMASK, r3
}
200000ea:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000ec:	46c0      	nop			@ (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	b008      	add	sp, #32
200000f2:	bd80      	pop	{r7, pc}
200000f4:	40022000 	.word	0x40022000
