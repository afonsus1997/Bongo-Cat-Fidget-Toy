
Bongo-cat-fidget-toy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002840  08002698  08002698  00003698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed8  08004ed8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ed8  08004ed8  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ed8  08004ed8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed8  08004ed8  00005ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004edc  08004edc  00005edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004ee0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  2000005c  08004f3c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08004f3c  000064e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a7b  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4b  00000000  00000000  0000eaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  00010750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000690  00000000  00000000  00010ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145a4  00000000  00000000  00011680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc5c  00000000  00000000  00025c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d301  00000000  00000000  00031880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aeb81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dcc  00000000  00000000  000aebc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b0990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002680 	.word	0x08002680

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08002680 	.word	0x08002680

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fc11 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f82b 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f8bf 	bl	80003a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800022a:	f000 f87d 	bl	8000328 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800022e:	f000 f86d 	bl	800030c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  int x = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	603b      	str	r3, [r7, #0]
    ssd1306_Init();
 8000236:	f000 f919 	bl	800046c <ssd1306_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_Delay(100);
//	  x++;
	  for (int i = 0; i < 10; ++i) {
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	e017      	b.n	8000270 <main+0x58>
	 	  	  		  ssd1306_Fill(Black);
 8000240:	2000      	movs	r0, #0
 8000242:	f000 f97f 	bl	8000544 <ssd1306_Fill>
	 	  	  		  ssd1306_DrawBitmap(32,0,frames[i],64,64,White);
 8000246:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <main+0x60>)
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	0092      	lsls	r2, r2, #2
 800024c:	58d2      	ldr	r2, [r2, r3]
 800024e:	2301      	movs	r3, #1
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	2340      	movs	r3, #64	@ 0x40
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	2340      	movs	r3, #64	@ 0x40
 8000258:	2100      	movs	r1, #0
 800025a:	2020      	movs	r0, #32
 800025c:	f000 fa2c 	bl	80006b8 <ssd1306_DrawBitmap>
	 	  	  		  ssd1306_UpdateScreen();
 8000260:	f000 f98a 	bl	8000578 <ssd1306_UpdateScreen>
	 	  	  		  HAL_Delay(100);
 8000264:	2064      	movs	r0, #100	@ 0x64
 8000266:	f000 fc73 	bl	8000b50 <HAL_Delay>
	  for (int i = 0; i < 10; ++i) {
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3301      	adds	r3, #1
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b09      	cmp	r3, #9
 8000274:	dde4      	ble.n	8000240 <main+0x28>
 8000276:	e7e0      	b.n	800023a <main+0x22>
 8000278:	20000000 	.word	0x20000000

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b093      	sub	sp, #76	@ 0x4c
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	2414      	movs	r4, #20
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2334      	movs	r3, #52	@ 0x34
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f002 f9cb 	bl	8002628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	0018      	movs	r0, r3
 8000296:	2310      	movs	r3, #16
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f002 f9c4 	bl	8002628 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a0:	2380      	movs	r3, #128	@ 0x80
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f001 fbbf 	bl	8001a28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2202      	movs	r2, #2
 80002ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2280      	movs	r2, #128	@ 0x80
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2200      	movs	r2, #0
 80002bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	2240      	movs	r2, #64	@ 0x40
 80002c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	2200      	movs	r2, #0
 80002c8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 fbeb 	bl	8001aa8 <HAL_RCC_OscConfig>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002d6:	f000 f889 	bl	80003ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2207      	movs	r2, #7
 80002de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2100      	movs	r1, #0
 80002f6:	0018      	movs	r0, r3
 80002f8:	f001 fee6 	bl	80020c8 <HAL_RCC_ClockConfig>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000300:	f000 f874 	bl	80003ec <Error_Handler>
  }
}
 8000304:	46c0      	nop			@ (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	b013      	add	sp, #76	@ 0x4c
 800030a:	bd90      	pop	{r4, r7, pc}

0800030c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000310:	2200      	movs	r2, #0
 8000312:	2100      	movs	r1, #0
 8000314:	2004      	movs	r0, #4
 8000316:	f000 fceb 	bl	8000cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800031a:	2004      	movs	r0, #4
 800031c:	f000 fcfd 	bl	8000d1a <HAL_NVIC_EnableIRQ>
}
 8000320:	46c0      	nop			@ (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800032c:	4b1b      	ldr	r3, [pc, #108]	@ (800039c <MX_I2C1_Init+0x74>)
 800032e:	4a1c      	ldr	r2, [pc, #112]	@ (80003a0 <MX_I2C1_Init+0x78>)
 8000330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000332:	4b1a      	ldr	r3, [pc, #104]	@ (800039c <MX_I2C1_Init+0x74>)
 8000334:	4a1b      	ldr	r2, [pc, #108]	@ (80003a4 <MX_I2C1_Init+0x7c>)
 8000336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000338:	4b18      	ldr	r3, [pc, #96]	@ (800039c <MX_I2C1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033e:	4b17      	ldr	r3, [pc, #92]	@ (800039c <MX_I2C1_Init+0x74>)
 8000340:	2201      	movs	r2, #1
 8000342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000344:	4b15      	ldr	r3, [pc, #84]	@ (800039c <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800034a:	4b14      	ldr	r3, [pc, #80]	@ (800039c <MX_I2C1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000350:	4b12      	ldr	r3, [pc, #72]	@ (800039c <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000356:	4b11      	ldr	r3, [pc, #68]	@ (800039c <MX_I2C1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035c:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <MX_I2C1_Init+0x74>)
 8000364:	0018      	movs	r0, r3
 8000366:	f000 fe59 	bl	800101c <HAL_I2C_Init>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800036e:	f000 f83d 	bl	80003ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000372:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <MX_I2C1_Init+0x74>)
 8000374:	2100      	movs	r1, #0
 8000376:	0018      	movs	r0, r3
 8000378:	f001 fabe 	bl	80018f8 <HAL_I2CEx_ConfigAnalogFilter>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000380:	f000 f834 	bl	80003ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000384:	4b05      	ldr	r3, [pc, #20]	@ (800039c <MX_I2C1_Init+0x74>)
 8000386:	2100      	movs	r1, #0
 8000388:	0018      	movs	r0, r3
 800038a:	f001 fb01 	bl	8001990 <HAL_I2CEx_ConfigDigitalFilter>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000392:	f000 f82b 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000396:	46c0      	nop			@ (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000078 	.word	0x20000078
 80003a0:	40005400 	.word	0x40005400
 80003a4:	0010061a 	.word	0x0010061a

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <MX_GPIO_Init+0x40>)
 80003b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003b2:	4b0d      	ldr	r3, [pc, #52]	@ (80003e8 <MX_GPIO_Init+0x40>)
 80003b4:	2102      	movs	r1, #2
 80003b6:	430a      	orrs	r2, r1
 80003b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80003ba:	4b0b      	ldr	r3, [pc, #44]	@ (80003e8 <MX_GPIO_Init+0x40>)
 80003bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003be:	2202      	movs	r2, #2
 80003c0:	4013      	ands	r3, r2
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <MX_GPIO_Init+0x40>)
 80003c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003ca:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <MX_GPIO_Init+0x40>)
 80003cc:	2101      	movs	r1, #1
 80003ce:	430a      	orrs	r2, r1
 80003d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80003d2:	4b05      	ldr	r3, [pc, #20]	@ (80003e8 <MX_GPIO_Init+0x40>)
 80003d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003d6:	2201      	movs	r2, #1
 80003d8:	4013      	ands	r3, r2
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003de:	46c0      	nop			@ (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b002      	add	sp, #8
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	40021000 	.word	0x40021000

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
}
 80003f2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f4:	46c0      	nop			@ (mov r8, r8)
 80003f6:	e7fd      	b.n	80003f4 <Error_Handler+0x8>

080003f8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80003fc:	46c0      	nop			@ (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af04      	add	r7, sp, #16
 800040a:	0002      	movs	r2, r0
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000410:	4808      	ldr	r0, [pc, #32]	@ (8000434 <ssd1306_WriteCommand+0x30>)
 8000412:	2301      	movs	r3, #1
 8000414:	425b      	negs	r3, r3
 8000416:	9302      	str	r3, [sp, #8]
 8000418:	2301      	movs	r3, #1
 800041a:	9301      	str	r3, [sp, #4]
 800041c:	1dfb      	adds	r3, r7, #7
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2301      	movs	r3, #1
 8000422:	2200      	movs	r2, #0
 8000424:	2178      	movs	r1, #120	@ 0x78
 8000426:	f000 fe9f 	bl	8001168 <HAL_I2C_Mem_Write>
}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b002      	add	sp, #8
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)
 8000434:	20000078 	.word	0x20000078

08000438 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af04      	add	r7, sp, #16
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	b29b      	uxth	r3, r3
 8000446:	4808      	ldr	r0, [pc, #32]	@ (8000468 <ssd1306_WriteData+0x30>)
 8000448:	2201      	movs	r2, #1
 800044a:	4252      	negs	r2, r2
 800044c:	9202      	str	r2, [sp, #8]
 800044e:	9301      	str	r3, [sp, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2301      	movs	r3, #1
 8000456:	2240      	movs	r2, #64	@ 0x40
 8000458:	2178      	movs	r1, #120	@ 0x78
 800045a:	f000 fe85 	bl	8001168 <HAL_I2C_Mem_Write>
}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b002      	add	sp, #8
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	20000078 	.word	0x20000078

0800046c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000470:	f7ff ffc2 	bl	80003f8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000474:	2064      	movs	r0, #100	@ 0x64
 8000476:	f000 fb6b 	bl	8000b50 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800047a:	2000      	movs	r0, #0
 800047c:	f000 f9c2 	bl	8000804 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000480:	2020      	movs	r0, #32
 8000482:	f7ff ffbf 	bl	8000404 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000486:	2000      	movs	r0, #0
 8000488:	f7ff ffbc 	bl	8000404 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800048c:	20b0      	movs	r0, #176	@ 0xb0
 800048e:	f7ff ffb9 	bl	8000404 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8000492:	20c0      	movs	r0, #192	@ 0xc0
 8000494:	f7ff ffb6 	bl	8000404 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000498:	2000      	movs	r0, #0
 800049a:	f7ff ffb3 	bl	8000404 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800049e:	2010      	movs	r0, #16
 80004a0:	f7ff ffb0 	bl	8000404 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80004a4:	2040      	movs	r0, #64	@ 0x40
 80004a6:	f7ff ffad 	bl	8000404 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80004aa:	20ff      	movs	r0, #255	@ 0xff
 80004ac:	f000 f991 	bl	80007d2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 80004b0:	20a0      	movs	r0, #160	@ 0xa0
 80004b2:	f7ff ffa7 	bl	8000404 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80004b6:	20a6      	movs	r0, #166	@ 0xa6
 80004b8:	f7ff ffa4 	bl	8000404 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80004bc:	20a8      	movs	r0, #168	@ 0xa8
 80004be:	f7ff ffa1 	bl	8000404 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80004c2:	203f      	movs	r0, #63	@ 0x3f
 80004c4:	f7ff ff9e 	bl	8000404 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80004c8:	20a4      	movs	r0, #164	@ 0xa4
 80004ca:	f7ff ff9b 	bl	8000404 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80004ce:	20d3      	movs	r0, #211	@ 0xd3
 80004d0:	f7ff ff98 	bl	8000404 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff ff95 	bl	8000404 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80004da:	20d5      	movs	r0, #213	@ 0xd5
 80004dc:	f7ff ff92 	bl	8000404 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80004e0:	20f0      	movs	r0, #240	@ 0xf0
 80004e2:	f7ff ff8f 	bl	8000404 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80004e6:	20d9      	movs	r0, #217	@ 0xd9
 80004e8:	f7ff ff8c 	bl	8000404 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80004ec:	2022      	movs	r0, #34	@ 0x22
 80004ee:	f7ff ff89 	bl	8000404 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80004f2:	20da      	movs	r0, #218	@ 0xda
 80004f4:	f7ff ff86 	bl	8000404 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80004f8:	2012      	movs	r0, #18
 80004fa:	f7ff ff83 	bl	8000404 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80004fe:	20db      	movs	r0, #219	@ 0xdb
 8000500:	f7ff ff80 	bl	8000404 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000504:	2020      	movs	r0, #32
 8000506:	f7ff ff7d 	bl	8000404 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800050a:	208d      	movs	r0, #141	@ 0x8d
 800050c:	f7ff ff7a 	bl	8000404 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000510:	2014      	movs	r0, #20
 8000512:	f7ff ff77 	bl	8000404 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000516:	2001      	movs	r0, #1
 8000518:	f000 f974 	bl	8000804 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800051c:	2000      	movs	r0, #0
 800051e:	f000 f811 	bl	8000544 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000522:	f000 f829 	bl	8000578 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <ssd1306_Init+0xd4>)
 8000528:	2200      	movs	r2, #0
 800052a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800052c:	4b04      	ldr	r3, [pc, #16]	@ (8000540 <ssd1306_Init+0xd4>)
 800052e:	2200      	movs	r2, #0
 8000530:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000532:	4b03      	ldr	r3, [pc, #12]	@ (8000540 <ssd1306_Init+0xd4>)
 8000534:	2201      	movs	r2, #1
 8000536:	711a      	strb	r2, [r3, #4]
}
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	200004dc 	.word	0x200004dc

08000544 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	0002      	movs	r2, r0
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d101      	bne.n	800055c <ssd1306_Fill+0x18>
 8000558:	2300      	movs	r3, #0
 800055a:	e000      	b.n	800055e <ssd1306_Fill+0x1a>
 800055c:	23ff      	movs	r3, #255	@ 0xff
 800055e:	2282      	movs	r2, #130	@ 0x82
 8000560:	00d2      	lsls	r2, r2, #3
 8000562:	4804      	ldr	r0, [pc, #16]	@ (8000574 <ssd1306_Fill+0x30>)
 8000564:	0019      	movs	r1, r3
 8000566:	f002 f85f 	bl	8002628 <memset>
}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	200000cc 	.word	0x200000cc

08000578 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	e01e      	b.n	80005c4 <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	3b50      	subs	r3, #80	@ 0x50
 800058c:	b2db      	uxtb	r3, r3
 800058e:	0018      	movs	r0, r3
 8000590:	f7ff ff38 	bl	8000404 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ff35 	bl	8000404 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800059a:	2010      	movs	r0, #16
 800059c:	f7ff ff32 	bl	8000404 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	0013      	movs	r3, r2
 80005a6:	019b      	lsls	r3, r3, #6
 80005a8:	189b      	adds	r3, r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	001a      	movs	r2, r3
 80005ae:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <ssd1306_UpdateScreen+0x60>)
 80005b0:	18d3      	adds	r3, r2, r3
 80005b2:	2182      	movs	r1, #130	@ 0x82
 80005b4:	0018      	movs	r0, r3
 80005b6:	f7ff ff3f 	bl	8000438 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	3201      	adds	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b07      	cmp	r3, #7
 80005ca:	d9dc      	bls.n	8000586 <ssd1306_UpdateScreen+0xe>
    }
}
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b002      	add	sp, #8
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	200000cc 	.word	0x200000cc

080005dc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	0004      	movs	r4, r0
 80005e4:	0008      	movs	r0, r1
 80005e6:	0011      	movs	r1, r2
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	1c22      	adds	r2, r4, #0
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	1dbb      	adds	r3, r7, #6
 80005f0:	1c02      	adds	r2, r0, #0
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	1d7b      	adds	r3, r7, #5
 80005f6:	1c0a      	adds	r2, r1, #0
 80005f8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b81      	cmp	r3, #129	@ 0x81
 8000600:	d853      	bhi.n	80006aa <ssd1306_DrawPixel+0xce>
 8000602:	1dbb      	adds	r3, r7, #6
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b3f      	cmp	r3, #63	@ 0x3f
 8000608:	d84f      	bhi.n	80006aa <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800060a:	1d7b      	adds	r3, r7, #5
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d124      	bne.n	800065c <ssd1306_DrawPixel+0x80>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	1dbb      	adds	r3, r7, #6
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	b2d8      	uxtb	r0, r3
 800061e:	0001      	movs	r1, r0
 8000620:	000b      	movs	r3, r1
 8000622:	019b      	lsls	r3, r3, #6
 8000624:	185b      	adds	r3, r3, r1
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	18d3      	adds	r3, r2, r3
 800062a:	4a22      	ldr	r2, [pc, #136]	@ (80006b4 <ssd1306_DrawPixel+0xd8>)
 800062c:	5cd3      	ldrb	r3, [r2, r3]
 800062e:	b25a      	sxtb	r2, r3
 8000630:	1dbb      	adds	r3, r7, #6
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2107      	movs	r1, #7
 8000636:	400b      	ands	r3, r1
 8000638:	2101      	movs	r1, #1
 800063a:	4099      	lsls	r1, r3
 800063c:	000b      	movs	r3, r1
 800063e:	b25b      	sxtb	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b25c      	sxtb	r4, r3
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	0001      	movs	r1, r0
 800064a:	000b      	movs	r3, r1
 800064c:	019b      	lsls	r3, r3, #6
 800064e:	185b      	adds	r3, r3, r1
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	18d3      	adds	r3, r2, r3
 8000654:	b2e1      	uxtb	r1, r4
 8000656:	4a17      	ldr	r2, [pc, #92]	@ (80006b4 <ssd1306_DrawPixel+0xd8>)
 8000658:	54d1      	strb	r1, [r2, r3]
 800065a:	e027      	b.n	80006ac <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781a      	ldrb	r2, [r3, #0]
 8000660:	1dbb      	adds	r3, r7, #6
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	08db      	lsrs	r3, r3, #3
 8000666:	b2d8      	uxtb	r0, r3
 8000668:	0001      	movs	r1, r0
 800066a:	000b      	movs	r3, r1
 800066c:	019b      	lsls	r3, r3, #6
 800066e:	185b      	adds	r3, r3, r1
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	18d3      	adds	r3, r2, r3
 8000674:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <ssd1306_DrawPixel+0xd8>)
 8000676:	5cd3      	ldrb	r3, [r2, r3]
 8000678:	b25b      	sxtb	r3, r3
 800067a:	1dba      	adds	r2, r7, #6
 800067c:	7812      	ldrb	r2, [r2, #0]
 800067e:	2107      	movs	r1, #7
 8000680:	400a      	ands	r2, r1
 8000682:	2101      	movs	r1, #1
 8000684:	4091      	lsls	r1, r2
 8000686:	000a      	movs	r2, r1
 8000688:	b252      	sxtb	r2, r2
 800068a:	43d2      	mvns	r2, r2
 800068c:	b252      	sxtb	r2, r2
 800068e:	4013      	ands	r3, r2
 8000690:	b25c      	sxtb	r4, r3
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	781a      	ldrb	r2, [r3, #0]
 8000696:	0001      	movs	r1, r0
 8000698:	000b      	movs	r3, r1
 800069a:	019b      	lsls	r3, r3, #6
 800069c:	185b      	adds	r3, r3, r1
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	18d3      	adds	r3, r2, r3
 80006a2:	b2e1      	uxtb	r1, r4
 80006a4:	4a03      	ldr	r2, [pc, #12]	@ (80006b4 <ssd1306_DrawPixel+0xd8>)
 80006a6:	54d1      	strb	r1, [r2, r3]
 80006a8:	e000      	b.n	80006ac <ssd1306_DrawPixel+0xd0>
        return;
 80006aa:	46c0      	nop			@ (mov r8, r8)
    }
}
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b003      	add	sp, #12
 80006b0:	bd90      	pop	{r4, r7, pc}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	200000cc 	.word	0x200000cc

080006b8 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	0004      	movs	r4, r0
 80006c0:	0008      	movs	r0, r1
 80006c2:	603a      	str	r2, [r7, #0]
 80006c4:	0019      	movs	r1, r3
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	1c22      	adds	r2, r4, #0
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	1dbb      	adds	r3, r7, #6
 80006ce:	1c02      	adds	r2, r0, #0
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	1d7b      	adds	r3, r7, #5
 80006d4:	1c0a      	adds	r2, r1, #0
 80006d6:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80006d8:	1d7b      	adds	r3, r7, #5
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	3307      	adds	r3, #7
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da00      	bge.n	80006e4 <ssd1306_DrawBitmap+0x2c>
 80006e2:	3307      	adds	r3, #7
 80006e4:	10db      	asrs	r3, r3, #3
 80006e6:	001a      	movs	r2, r3
 80006e8:	230a      	movs	r3, #10
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 80006ee:	230f      	movs	r3, #15
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b81      	cmp	r3, #129	@ 0x81
 80006fc:	d865      	bhi.n	80007ca <ssd1306_DrawBitmap+0x112>
 80006fe:	1dbb      	adds	r3, r7, #6
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b3f      	cmp	r3, #63	@ 0x3f
 8000704:	d861      	bhi.n	80007ca <ssd1306_DrawBitmap+0x112>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000706:	230e      	movs	r3, #14
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	e053      	b.n	80007b8 <ssd1306_DrawBitmap+0x100>
        for (uint8_t i = 0; i < w; i++) {
 8000710:	230d      	movs	r3, #13
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	e03c      	b.n	8000794 <ssd1306_DrawBitmap+0xdc>
            if (i & 7) {
 800071a:	230d      	movs	r3, #13
 800071c:	18fb      	adds	r3, r7, r3
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2207      	movs	r2, #7
 8000722:	4013      	ands	r3, r2
 8000724:	d006      	beq.n	8000734 <ssd1306_DrawBitmap+0x7c>
                byte <<= 1;
 8000726:	230f      	movs	r3, #15
 8000728:	18fa      	adds	r2, r7, r3
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	18db      	adds	r3, r3, r3
 8000730:	7013      	strb	r3, [r2, #0]
 8000732:	e014      	b.n	800075e <ssd1306_DrawBitmap+0xa6>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000734:	230e      	movs	r3, #14
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	220a      	movs	r2, #10
 800073c:	18ba      	adds	r2, r7, r2
 800073e:	2100      	movs	r1, #0
 8000740:	5e52      	ldrsh	r2, [r2, r1]
 8000742:	4353      	muls	r3, r2
 8000744:	220d      	movs	r2, #13
 8000746:	18ba      	adds	r2, r7, r2
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	08d2      	lsrs	r2, r2, #3
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	189b      	adds	r3, r3, r2
 8000750:	001a      	movs	r2, r3
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	189a      	adds	r2, r3, r2
 8000756:	230f      	movs	r3, #15
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	7812      	ldrb	r2, [r2, #0]
 800075c:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 800075e:	230f      	movs	r3, #15
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b25b      	sxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	da0e      	bge.n	8000788 <ssd1306_DrawBitmap+0xd0>
                ssd1306_DrawPixel(x + i, y, color);
 800076a:	1dfa      	adds	r2, r7, #7
 800076c:	230d      	movs	r3, #13
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	18d3      	adds	r3, r2, r3
 8000776:	b2d8      	uxtb	r0, r3
 8000778:	2324      	movs	r3, #36	@ 0x24
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	1dbb      	adds	r3, r7, #6
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	0019      	movs	r1, r3
 8000784:	f7ff ff2a 	bl	80005dc <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000788:	210d      	movs	r1, #13
 800078a:	187b      	adds	r3, r7, r1
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	187b      	adds	r3, r7, r1
 8000790:	3201      	adds	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	230d      	movs	r3, #13
 8000796:	18fa      	adds	r2, r7, r3
 8000798:	1d7b      	adds	r3, r7, #5
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d3bb      	bcc.n	800071a <ssd1306_DrawBitmap+0x62>
    for (uint8_t j = 0; j < h; j++, y++) {
 80007a2:	210e      	movs	r1, #14
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	3201      	adds	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	1dbb      	adds	r3, r7, #6
 80007b0:	781a      	ldrb	r2, [r3, #0]
 80007b2:	1dbb      	adds	r3, r7, #6
 80007b4:	3201      	adds	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	230e      	movs	r3, #14
 80007ba:	18fa      	adds	r2, r7, r3
 80007bc:	2320      	movs	r3, #32
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d3a3      	bcc.n	8000710 <ssd1306_DrawBitmap+0x58>
            }
        }
    }
    return;
 80007c8:	e000      	b.n	80007cc <ssd1306_DrawBitmap+0x114>
        return;
 80007ca:	46c0      	nop			@ (mov r8, r8)
}
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b005      	add	sp, #20
 80007d0:	bd90      	pop	{r4, r7, pc}

080007d2 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b084      	sub	sp, #16
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	0002      	movs	r2, r0
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80007de:	210f      	movs	r1, #15
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2281      	movs	r2, #129	@ 0x81
 80007e4:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff fe0a 	bl	8000404 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	0018      	movs	r0, r3
 80007f6:	f7ff fe05 	bl	8000404 <ssd1306_WriteCommand>
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b004      	add	sp, #16
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	0002      	movs	r2, r0
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d007      	beq.n	8000828 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8000818:	230f      	movs	r3, #15
 800081a:	18fb      	adds	r3, r7, r3
 800081c:	22af      	movs	r2, #175	@ 0xaf
 800081e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <ssd1306_SetDisplayOn+0x48>)
 8000822:	2201      	movs	r2, #1
 8000824:	715a      	strb	r2, [r3, #5]
 8000826:	e006      	b.n	8000836 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8000828:	230f      	movs	r3, #15
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	22ae      	movs	r2, #174	@ 0xae
 800082e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <ssd1306_SetDisplayOn+0x48>)
 8000832:	2200      	movs	r2, #0
 8000834:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000836:	230f      	movs	r3, #15
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff fde1 	bl	8000404 <ssd1306_WriteCommand>
}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b004      	add	sp, #16
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	200004dc 	.word	0x200004dc

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <HAL_MspInit+0x44>)
 8000858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <HAL_MspInit+0x44>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	641a      	str	r2, [r3, #64]	@ 0x40
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <HAL_MspInit+0x44>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_MspInit+0x44>)
 8000870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <HAL_MspInit+0x44>)
 8000874:	2180      	movs	r1, #128	@ 0x80
 8000876:	0549      	lsls	r1, r1, #21
 8000878:	430a      	orrs	r2, r1
 800087a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <HAL_MspInit+0x44>)
 800087e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000880:	2380      	movs	r3, #128	@ 0x80
 8000882:	055b      	lsls	r3, r3, #21
 8000884:	4013      	ands	r3, r2
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b091      	sub	sp, #68	@ 0x44
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	232c      	movs	r3, #44	@ 0x2c
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	0018      	movs	r0, r3
 80008a6:	2314      	movs	r3, #20
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f001 febc 	bl	8002628 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b0:	2414      	movs	r4, #20
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	0018      	movs	r0, r3
 80008b6:	2318      	movs	r3, #24
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f001 feb4 	bl	8002628 <memset>
  if(hi2c->Instance==I2C1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a35      	ldr	r2, [pc, #212]	@ (800099c <HAL_I2C_MspInit+0x104>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d163      	bne.n	8000992 <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2220      	movs	r2, #32
 80008ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 fd7f 	bl	80023dc <HAL_RCCEx_PeriphCLKConfig>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008e2:	f7ff fd83 	bl	80003ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b2e      	ldr	r3, [pc, #184]	@ (80009a0 <HAL_I2C_MspInit+0x108>)
 80008e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ea:	4b2d      	ldr	r3, [pc, #180]	@ (80009a0 <HAL_I2C_MspInit+0x108>)
 80008ec:	2102      	movs	r1, #2
 80008ee:	430a      	orrs	r2, r1
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008f2:	4b2b      	ldr	r3, [pc, #172]	@ (80009a0 <HAL_I2C_MspInit+0x108>)
 80008f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008f6:	2202      	movs	r2, #2
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <HAL_I2C_MspInit+0x108>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000902:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <HAL_I2C_MspInit+0x108>)
 8000904:	2101      	movs	r1, #1
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	@ 0x34
 800090a:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <HAL_I2C_MspInit+0x108>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800090e:	2201      	movs	r2, #1
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000916:	212c      	movs	r1, #44	@ 0x2c
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	0092      	lsls	r2, r2, #2
 800091e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000920:	000c      	movs	r4, r1
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2212      	movs	r2, #18
 8000926:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2206      	movs	r2, #6
 8000938:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	193b      	adds	r3, r7, r4
 800093c:	4a19      	ldr	r2, [pc, #100]	@ (80009a4 <HAL_I2C_MspInit+0x10c>)
 800093e:	0019      	movs	r1, r3
 8000940:	0010      	movs	r0, r2
 8000942:	f000 fa07 	bl	8000d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000946:	0021      	movs	r1, r4
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2280      	movs	r2, #128	@ 0x80
 800094c:	0092      	lsls	r2, r2, #2
 800094e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2212      	movs	r2, #18
 8000954:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2206      	movs	r2, #6
 8000966:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	187a      	adds	r2, r7, r1
 800096a:	23a0      	movs	r3, #160	@ 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	0011      	movs	r1, r2
 8000970:	0018      	movs	r0, r3
 8000972:	f000 f9ef 	bl	8000d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_I2C_MspInit+0x108>)
 8000978:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <HAL_I2C_MspInit+0x108>)
 800097c:	2180      	movs	r1, #128	@ 0x80
 800097e:	0389      	lsls	r1, r1, #14
 8000980:	430a      	orrs	r2, r1
 8000982:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_I2C_MspInit+0x108>)
 8000986:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000988:	2380      	movs	r3, #128	@ 0x80
 800098a:	039b      	lsls	r3, r3, #14
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b011      	add	sp, #68	@ 0x44
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	40005400 	.word	0x40005400
 80009a0:	40021000 	.word	0x40021000
 80009a4:	50000400 	.word	0x50000400

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	e7fd      	b.n	80009ac <NMI_Handler+0x4>

080009b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	e7fd      	b.n	80009b4 <HardFault_Handler+0x4>

080009b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 f8a2 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f4:	f7ff fff6 	bl	80009e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a1e:	f001 fe0b 	bl	8002638 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a22:	f7ff fbf9 	bl	8000218 <main>

08000a26 <LoopForever>:

LoopForever:
  b LoopForever
 8000a26:	e7fe      	b.n	8000a26 <LoopForever>
  ldr   r0, =_estack
 8000a28:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a34:	08004ee0 	.word	0x08004ee0
  ldr r2, =_sbss
 8000a38:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a3c:	200004e8 	.word	0x200004e8

08000a40 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <HAL_Init+0x3c>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <HAL_Init+0x3c>)
 8000a56:	2180      	movs	r1, #128	@ 0x80
 8000a58:	0049      	lsls	r1, r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a5e:	2003      	movs	r0, #3
 8000a60:	f000 f810 	bl	8000a84 <HAL_InitTick>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	e001      	b.n	8000a74 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff feee 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a94:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <HAL_InitTick+0x88>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d02b      	beq.n	8000af4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <HAL_InitTick+0x8c>)
 8000a9e:	681c      	ldr	r4, [r3, #0]
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <HAL_InitTick+0x88>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	23fa      	movs	r3, #250	@ 0xfa
 8000aa8:	0098      	lsls	r0, r3, #2
 8000aaa:	f7ff fb29 	bl	8000100 <__udivsi3>
 8000aae:	0003      	movs	r3, r0
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	0020      	movs	r0, r4
 8000ab4:	f7ff fb24 	bl	8000100 <__udivsi3>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f93d 	bl	8000d3a <HAL_SYSTICK_Config>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d112      	bne.n	8000aea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d80a      	bhi.n	8000ae0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	2301      	movs	r3, #1
 8000ace:	425b      	negs	r3, r3
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f90c 	bl	8000cf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <HAL_InitTick+0x90>)
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e00d      	b.n	8000afc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	e008      	b.n	8000afc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aea:	230f      	movs	r3, #15
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e003      	b.n	8000afc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000af4:	230f      	movs	r3, #15
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000afc:	230f      	movs	r3, #15
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	781b      	ldrb	r3, [r3, #0]
}
 8000b02:	0018      	movs	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b005      	add	sp, #20
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	20000058 	.word	0x20000058
 8000b10:	20000050 	.word	0x20000050
 8000b14:	20000054 	.word	0x20000054

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	001a      	movs	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	18d2      	adds	r2, r2, r3
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	20000058 	.word	0x20000058
 8000b38:	200004e4 	.word	0x200004e4

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	@ (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	200004e4 	.word	0x200004e4

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff fff0 	bl	8000b3c <HAL_GetTick>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3301      	adds	r3, #1
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <HAL_Delay+0x44>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	001a      	movs	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	189b      	adds	r3, r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	f7ff ffe0 	bl	8000b3c <HAL_GetTick>
 8000b7c:	0002      	movs	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b004      	add	sp, #16
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	20000058 	.word	0x20000058

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	0002      	movs	r2, r0
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000baa:	d809      	bhi.n	8000bc0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	231f      	movs	r3, #31
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__NVIC_EnableIRQ+0x30>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	000a      	movs	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	0002      	movs	r2, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b7f      	cmp	r3, #127	@ 0x7f
 8000be0:	d828      	bhi.n	8000c34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be2:	4a2f      	ldr	r2, [pc, #188]	@ (8000ca0 <__NVIC_SetPriority+0xd4>)
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	33c0      	adds	r3, #192	@ 0xc0
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	589b      	ldr	r3, [r3, r2]
 8000bf2:	1dfa      	adds	r2, r7, #7
 8000bf4:	7812      	ldrb	r2, [r2, #0]
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	00d2      	lsls	r2, r2, #3
 8000bfe:	21ff      	movs	r1, #255	@ 0xff
 8000c00:	4091      	lsls	r1, r2
 8000c02:	000a      	movs	r2, r1
 8000c04:	43d2      	mvns	r2, r2
 8000c06:	401a      	ands	r2, r3
 8000c08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	019b      	lsls	r3, r3, #6
 8000c0e:	22ff      	movs	r2, #255	@ 0xff
 8000c10:	401a      	ands	r2, r3
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	0018      	movs	r0, r3
 8000c18:	2303      	movs	r3, #3
 8000c1a:	4003      	ands	r3, r0
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c20:	481f      	ldr	r0, [pc, #124]	@ (8000ca0 <__NVIC_SetPriority+0xd4>)
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	33c0      	adds	r3, #192	@ 0xc0
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c32:	e031      	b.n	8000c98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca4 <__NVIC_SetPriority+0xd8>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	400b      	ands	r3, r1
 8000c40:	3b08      	subs	r3, #8
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3306      	adds	r3, #6
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	1dfa      	adds	r2, r7, #7
 8000c50:	7812      	ldrb	r2, [r2, #0]
 8000c52:	0011      	movs	r1, r2
 8000c54:	2203      	movs	r2, #3
 8000c56:	400a      	ands	r2, r1
 8000c58:	00d2      	lsls	r2, r2, #3
 8000c5a:	21ff      	movs	r1, #255	@ 0xff
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	000a      	movs	r2, r1
 8000c60:	43d2      	mvns	r2, r2
 8000c62:	401a      	ands	r2, r3
 8000c64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	22ff      	movs	r2, #255	@ 0xff
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	0018      	movs	r0, r3
 8000c74:	2303      	movs	r3, #3
 8000c76:	4003      	ands	r3, r0
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7c:	4809      	ldr	r0, [pc, #36]	@ (8000ca4 <__NVIC_SetPriority+0xd8>)
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	001c      	movs	r4, r3
 8000c84:	230f      	movs	r3, #15
 8000c86:	4023      	ands	r3, r4
 8000c88:	3b08      	subs	r3, #8
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	3306      	adds	r3, #6
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	18c3      	adds	r3, r0, r3
 8000c94:	3304      	adds	r3, #4
 8000c96:	601a      	str	r2, [r3, #0]
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b003      	add	sp, #12
 8000c9e:	bd90      	pop	{r4, r7, pc}
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	1e5a      	subs	r2, r3, #1
 8000cb4:	2380      	movs	r3, #128	@ 0x80
 8000cb6:	045b      	lsls	r3, r3, #17
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d301      	bcc.n	8000cc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e010      	b.n	8000ce2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <SysTick_Config+0x44>)
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	3a01      	subs	r2, #1
 8000cc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc8:	2301      	movs	r3, #1
 8000cca:	425b      	negs	r3, r3
 8000ccc:	2103      	movs	r1, #3
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff ff7c 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <SysTick_Config+0x44>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <SysTick_Config+0x44>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	1c02      	adds	r2, r0, #0
 8000d00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	0002      	movs	r2, r0
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ff33 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff ffaf 	bl	8000ca8 <SysTick_Config>
 8000d4a:	0003      	movs	r3, r0
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d62:	e147      	b.n	8000ff4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2101      	movs	r1, #1
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	000a      	movs	r2, r1
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <HAL_GPIO_Init+0x28>
 8000d7a:	e138      	b.n	8000fee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2203      	movs	r2, #3
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d005      	beq.n	8000d94 <HAL_GPIO_Init+0x40>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d130      	bne.n	8000df6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	409a      	lsls	r2, r3
 8000da2:	0013      	movs	r3, r2
 8000da4:	43da      	mvns	r2, r3
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	409a      	lsls	r2, r3
 8000db6:	0013      	movs	r3, r2
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	2201      	movs	r2, #1
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d017      	beq.n	8000e32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	43da      	mvns	r2, r3
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2203      	movs	r2, #3
 8000e38:	4013      	ands	r3, r2
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d123      	bne.n	8000e86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3208      	adds	r2, #8
 8000e46:	0092      	lsls	r2, r2, #2
 8000e48:	58d3      	ldr	r3, [r2, r3]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	2207      	movs	r2, #7
 8000e50:	4013      	ands	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	691a      	ldr	r2, [r3, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2107      	movs	r1, #7
 8000e6a:	400b      	ands	r3, r1
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	6939      	ldr	r1, [r7, #16]
 8000e84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	43da      	mvns	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	23c0      	movs	r3, #192	@ 0xc0
 8000ec0:	029b      	lsls	r3, r3, #10
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d100      	bne.n	8000ec8 <HAL_GPIO_Init+0x174>
 8000ec6:	e092      	b.n	8000fee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ec8:	4a50      	ldr	r2, [pc, #320]	@ (800100c <HAL_GPIO_Init+0x2b8>)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3318      	adds	r3, #24
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	589b      	ldr	r3, [r3, r2]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2203      	movs	r2, #3
 8000eda:	4013      	ands	r3, r2
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	220f      	movs	r2, #15
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	43da      	mvns	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	23a0      	movs	r3, #160	@ 0xa0
 8000ef0:	05db      	lsls	r3, r3, #23
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0x1ca>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a45      	ldr	r2, [pc, #276]	@ (8001010 <HAL_GPIO_Init+0x2bc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00d      	beq.n	8000f1a <HAL_GPIO_Init+0x1c6>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a44      	ldr	r2, [pc, #272]	@ (8001014 <HAL_GPIO_Init+0x2c0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0x1c2>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a43      	ldr	r2, [pc, #268]	@ (8001018 <HAL_GPIO_Init+0x2c4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_GPIO_Init+0x1be>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e006      	b.n	8000f20 <HAL_GPIO_Init+0x1cc>
 8000f12:	2305      	movs	r3, #5
 8000f14:	e004      	b.n	8000f20 <HAL_GPIO_Init+0x1cc>
 8000f16:	2302      	movs	r3, #2
 8000f18:	e002      	b.n	8000f20 <HAL_GPIO_Init+0x1cc>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <HAL_GPIO_Init+0x1cc>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	2103      	movs	r1, #3
 8000f24:	400a      	ands	r2, r1
 8000f26:	00d2      	lsls	r2, r2, #3
 8000f28:	4093      	lsls	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f30:	4936      	ldr	r1, [pc, #216]	@ (800100c <HAL_GPIO_Init+0x2b8>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3318      	adds	r3, #24
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f3e:	4b33      	ldr	r3, [pc, #204]	@ (800100c <HAL_GPIO_Init+0x2b8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	035b      	lsls	r3, r3, #13
 8000f56:	4013      	ands	r3, r2
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f62:	4b2a      	ldr	r3, [pc, #168]	@ (800100c <HAL_GPIO_Init+0x2b8>)
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f68:	4b28      	ldr	r3, [pc, #160]	@ (800100c <HAL_GPIO_Init+0x2b8>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	43da      	mvns	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	039b      	lsls	r3, r3, #14
 8000f80:	4013      	ands	r3, r2
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <HAL_GPIO_Init+0x2b8>)
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f92:	4a1e      	ldr	r2, [pc, #120]	@ (800100c <HAL_GPIO_Init+0x2b8>)
 8000f94:	2384      	movs	r3, #132	@ 0x84
 8000f96:	58d3      	ldr	r3, [r2, r3]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43da      	mvns	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	029b      	lsls	r3, r3, #10
 8000fac:	4013      	ands	r3, r2
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fb8:	4914      	ldr	r1, [pc, #80]	@ (800100c <HAL_GPIO_Init+0x2b8>)
 8000fba:	2284      	movs	r2, #132	@ 0x84
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fc0:	4a12      	ldr	r2, [pc, #72]	@ (800100c <HAL_GPIO_Init+0x2b8>)
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	58d3      	ldr	r3, [r2, r3]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	2380      	movs	r3, #128	@ 0x80
 8000fd8:	025b      	lsls	r3, r3, #9
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fe6:	4909      	ldr	r1, [pc, #36]	@ (800100c <HAL_GPIO_Init+0x2b8>)
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	40da      	lsrs	r2, r3
 8000ffc:	1e13      	subs	r3, r2, #0
 8000ffe:	d000      	beq.n	8001002 <HAL_GPIO_Init+0x2ae>
 8001000:	e6b0      	b.n	8000d64 <HAL_GPIO_Init+0x10>
  }
}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b006      	add	sp, #24
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021800 	.word	0x40021800
 8001010:	50000400 	.word	0x50000400
 8001014:	50000800 	.word	0x50000800
 8001018:	50000c00 	.word	0x50000c00

0800101c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e08f      	b.n	800114e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2241      	movs	r2, #65	@ 0x41
 8001032:	5c9b      	ldrb	r3, [r3, r2]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d107      	bne.n	800104a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2240      	movs	r2, #64	@ 0x40
 800103e:	2100      	movs	r1, #0
 8001040:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff fc27 	bl	8000898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2241      	movs	r2, #65	@ 0x41
 800104e:	2124      	movs	r1, #36	@ 0x24
 8001050:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2101      	movs	r1, #1
 800105e:	438a      	bics	r2, r1
 8001060:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	493b      	ldr	r1, [pc, #236]	@ (8001158 <HAL_I2C_Init+0x13c>)
 800106c:	400a      	ands	r2, r1
 800106e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4938      	ldr	r1, [pc, #224]	@ (800115c <HAL_I2C_Init+0x140>)
 800107c:	400a      	ands	r2, r1
 800107e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d108      	bne.n	800109a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2180      	movs	r1, #128	@ 0x80
 8001092:	0209      	lsls	r1, r1, #8
 8001094:	430a      	orrs	r2, r1
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	e007      	b.n	80010aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2184      	movs	r1, #132	@ 0x84
 80010a4:	0209      	lsls	r1, r1, #8
 80010a6:	430a      	orrs	r2, r1
 80010a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d109      	bne.n	80010c6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2180      	movs	r1, #128	@ 0x80
 80010be:	0109      	lsls	r1, r1, #4
 80010c0:	430a      	orrs	r2, r1
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	e007      	b.n	80010d6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4923      	ldr	r1, [pc, #140]	@ (8001160 <HAL_I2C_Init+0x144>)
 80010d2:	400a      	ands	r2, r1
 80010d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4920      	ldr	r1, [pc, #128]	@ (8001164 <HAL_I2C_Init+0x148>)
 80010e2:	430a      	orrs	r2, r1
 80010e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	491a      	ldr	r1, [pc, #104]	@ (800115c <HAL_I2C_Init+0x140>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691a      	ldr	r2, [r3, #16]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	431a      	orrs	r2, r3
 8001100:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69d9      	ldr	r1, [r3, #28]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1a      	ldr	r2, [r3, #32]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2101      	movs	r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2241      	movs	r2, #65	@ 0x41
 800113a:	2120      	movs	r1, #32
 800113c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2242      	movs	r2, #66	@ 0x42
 8001148:	2100      	movs	r1, #0
 800114a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	f0ffffff 	.word	0xf0ffffff
 800115c:	ffff7fff 	.word	0xffff7fff
 8001160:	fffff7ff 	.word	0xfffff7ff
 8001164:	02008000 	.word	0x02008000

08001168 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af02      	add	r7, sp, #8
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	000c      	movs	r4, r1
 8001172:	0010      	movs	r0, r2
 8001174:	0019      	movs	r1, r3
 8001176:	230a      	movs	r3, #10
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	1c22      	adds	r2, r4, #0
 800117c:	801a      	strh	r2, [r3, #0]
 800117e:	2308      	movs	r3, #8
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	1c02      	adds	r2, r0, #0
 8001184:	801a      	strh	r2, [r3, #0]
 8001186:	1dbb      	adds	r3, r7, #6
 8001188:	1c0a      	adds	r2, r1, #0
 800118a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2241      	movs	r2, #65	@ 0x41
 8001190:	5c9b      	ldrb	r3, [r3, r2]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b20      	cmp	r3, #32
 8001196:	d000      	beq.n	800119a <HAL_I2C_Mem_Write+0x32>
 8001198:	e10c      	b.n	80013b4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800119a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <HAL_I2C_Mem_Write+0x42>
 80011a0:	232c      	movs	r3, #44	@ 0x2c
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d105      	bne.n	80011b6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e0ff      	b.n	80013b6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2240      	movs	r2, #64	@ 0x40
 80011ba:	5c9b      	ldrb	r3, [r3, r2]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_I2C_Mem_Write+0x5c>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e0f8      	b.n	80013b6 <HAL_I2C_Mem_Write+0x24e>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2240      	movs	r2, #64	@ 0x40
 80011c8:	2101      	movs	r1, #1
 80011ca:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011cc:	f7ff fcb6 	bl	8000b3c <HAL_GetTick>
 80011d0:	0003      	movs	r3, r0
 80011d2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011d4:	2380      	movs	r3, #128	@ 0x80
 80011d6:	0219      	lsls	r1, r3, #8
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2319      	movs	r3, #25
 80011e0:	2201      	movs	r2, #1
 80011e2:	f000 f975 	bl	80014d0 <I2C_WaitOnFlagUntilTimeout>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d001      	beq.n	80011ee <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0e3      	b.n	80013b6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2241      	movs	r2, #65	@ 0x41
 80011f2:	2121      	movs	r1, #33	@ 0x21
 80011f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2242      	movs	r2, #66	@ 0x42
 80011fa:	2140      	movs	r1, #64	@ 0x40
 80011fc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	222c      	movs	r2, #44	@ 0x2c
 800120e:	18ba      	adds	r2, r7, r2
 8001210:	8812      	ldrh	r2, [r2, #0]
 8001212:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800121a:	1dbb      	adds	r3, r7, #6
 800121c:	881c      	ldrh	r4, [r3, #0]
 800121e:	2308      	movs	r3, #8
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	881a      	ldrh	r2, [r3, #0]
 8001224:	230a      	movs	r3, #10
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	8819      	ldrh	r1, [r3, #0]
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	0023      	movs	r3, r4
 8001236:	f000 f8c5 	bl	80013c4 <I2C_RequestMemoryWrite>
 800123a:	1e03      	subs	r3, r0, #0
 800123c:	d005      	beq.n	800124a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2240      	movs	r2, #64	@ 0x40
 8001242:	2100      	movs	r1, #0
 8001244:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e0b5      	b.n	80013b6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800124e:	b29b      	uxth	r3, r3
 8001250:	2bff      	cmp	r3, #255	@ 0xff
 8001252:	d911      	bls.n	8001278 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	22ff      	movs	r2, #255	@ 0xff
 8001258:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800125e:	b2da      	uxtb	r2, r3
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	045c      	lsls	r4, r3, #17
 8001264:	230a      	movs	r3, #10
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	8819      	ldrh	r1, [r3, #0]
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	2300      	movs	r3, #0
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	0023      	movs	r3, r4
 8001272:	f000 fb07 	bl	8001884 <I2C_TransferConfig>
 8001276:	e012      	b.n	800129e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800127c:	b29a      	uxth	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001286:	b2da      	uxtb	r2, r3
 8001288:	2380      	movs	r3, #128	@ 0x80
 800128a:	049c      	lsls	r4, r3, #18
 800128c:	230a      	movs	r3, #10
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	8819      	ldrh	r1, [r3, #0]
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	2300      	movs	r3, #0
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	0023      	movs	r3, r4
 800129a:	f000 faf3 	bl	8001884 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f000 f96b 	bl	8001580 <I2C_WaitOnTXISFlagUntilTimeout>
 80012aa:	1e03      	subs	r3, r0, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e081      	b.n	80013b6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012da:	3b01      	subs	r3, #1
 80012dc:	b29a      	uxth	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d03a      	beq.n	8001362 <HAL_I2C_Mem_Write+0x1fa>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d136      	bne.n	8001362 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	0013      	movs	r3, r2
 80012fe:	2200      	movs	r2, #0
 8001300:	2180      	movs	r1, #128	@ 0x80
 8001302:	f000 f8e5 	bl	80014d0 <I2C_WaitOnFlagUntilTimeout>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d001      	beq.n	800130e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e053      	b.n	80013b6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001312:	b29b      	uxth	r3, r3
 8001314:	2bff      	cmp	r3, #255	@ 0xff
 8001316:	d911      	bls.n	800133c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	22ff      	movs	r2, #255	@ 0xff
 800131c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001322:	b2da      	uxtb	r2, r3
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	045c      	lsls	r4, r3, #17
 8001328:	230a      	movs	r3, #10
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	8819      	ldrh	r1, [r3, #0]
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	2300      	movs	r3, #0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	0023      	movs	r3, r4
 8001336:	f000 faa5 	bl	8001884 <I2C_TransferConfig>
 800133a:	e012      	b.n	8001362 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001340:	b29a      	uxth	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800134a:	b2da      	uxtb	r2, r3
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	049c      	lsls	r4, r3, #18
 8001350:	230a      	movs	r3, #10
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	8819      	ldrh	r1, [r3, #0]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	2300      	movs	r3, #0
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	0023      	movs	r3, r4
 800135e:	f000 fa91 	bl	8001884 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001366:	b29b      	uxth	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d198      	bne.n	800129e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	0018      	movs	r0, r3
 8001374:	f000 f94a 	bl	800160c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	d001      	beq.n	8001380 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e01a      	b.n	80013b6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2220      	movs	r2, #32
 8001386:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	490b      	ldr	r1, [pc, #44]	@ (80013c0 <HAL_I2C_Mem_Write+0x258>)
 8001394:	400a      	ands	r2, r1
 8001396:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2241      	movs	r2, #65	@ 0x41
 800139c:	2120      	movs	r1, #32
 800139e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2242      	movs	r2, #66	@ 0x42
 80013a4:	2100      	movs	r1, #0
 80013a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2240      	movs	r2, #64	@ 0x40
 80013ac:	2100      	movs	r1, #0
 80013ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e000      	b.n	80013b6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80013b4:	2302      	movs	r3, #2
  }
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b007      	add	sp, #28
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	fe00e800 	.word	0xfe00e800

080013c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	000c      	movs	r4, r1
 80013ce:	0010      	movs	r0, r2
 80013d0:	0019      	movs	r1, r3
 80013d2:	250a      	movs	r5, #10
 80013d4:	197b      	adds	r3, r7, r5
 80013d6:	1c22      	adds	r2, r4, #0
 80013d8:	801a      	strh	r2, [r3, #0]
 80013da:	2308      	movs	r3, #8
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	1c02      	adds	r2, r0, #0
 80013e0:	801a      	strh	r2, [r3, #0]
 80013e2:	1dbb      	adds	r3, r7, #6
 80013e4:	1c0a      	adds	r2, r1, #0
 80013e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013e8:	1dbb      	adds	r3, r7, #6
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	045c      	lsls	r4, r3, #17
 80013f2:	197b      	adds	r3, r7, r5
 80013f4:	8819      	ldrh	r1, [r3, #0]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <I2C_RequestMemoryWrite+0xc4>)
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	0023      	movs	r3, r4
 80013fe:	f000 fa41 	bl	8001884 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001404:	6a39      	ldr	r1, [r7, #32]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	0018      	movs	r0, r3
 800140a:	f000 f8b9 	bl	8001580 <I2C_WaitOnTXISFlagUntilTimeout>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e033      	b.n	800147e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001416:	1dbb      	adds	r3, r7, #6
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d107      	bne.n	800142e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800141e:	2308      	movs	r3, #8
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	629a      	str	r2, [r3, #40]	@ 0x28
 800142c:	e019      	b.n	8001462 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800142e:	2308      	movs	r3, #8
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	b29b      	uxth	r3, r3
 8001438:	b2da      	uxtb	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001442:	6a39      	ldr	r1, [r7, #32]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	0018      	movs	r0, r3
 8001448:	f000 f89a 	bl	8001580 <I2C_WaitOnTXISFlagUntilTimeout>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d001      	beq.n	8001454 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e014      	b.n	800147e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001454:	2308      	movs	r3, #8
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001462:	6a3a      	ldr	r2, [r7, #32]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	0013      	movs	r3, r2
 800146c:	2200      	movs	r2, #0
 800146e:	2180      	movs	r1, #128	@ 0x80
 8001470:	f000 f82e 	bl	80014d0 <I2C_WaitOnFlagUntilTimeout>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d001      	beq.n	800147c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	0018      	movs	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bdb0      	pop	{r4, r5, r7, pc}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	80002000 	.word	0x80002000

0800148c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2202      	movs	r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d103      	bne.n	80014aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d007      	beq.n	80014c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699a      	ldr	r2, [r3, #24]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2101      	movs	r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	619a      	str	r2, [r3, #24]
  }
}
 80014c8:	46c0      	nop			@ (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	1dfb      	adds	r3, r7, #7
 80014de:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014e0:	e03a      	b.n	8001558 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	0018      	movs	r0, r3
 80014ea:	f000 f8d3 	bl	8001694 <I2C_IsErrorOccurred>
 80014ee:	1e03      	subs	r3, r0, #0
 80014f0:	d001      	beq.n	80014f6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e040      	b.n	8001578 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	d02d      	beq.n	8001558 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014fc:	f7ff fb1e 	bl	8000b3c <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d302      	bcc.n	8001512 <I2C_WaitOnFlagUntilTimeout+0x42>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d122      	bne.n	8001558 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	4013      	ands	r3, r2
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	425a      	negs	r2, r3
 8001522:	4153      	adcs	r3, r2
 8001524:	b2db      	uxtb	r3, r3
 8001526:	001a      	movs	r2, r3
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d113      	bne.n	8001558 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001534:	2220      	movs	r2, #32
 8001536:	431a      	orrs	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2241      	movs	r2, #65	@ 0x41
 8001540:	2120      	movs	r1, #32
 8001542:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2242      	movs	r2, #66	@ 0x42
 8001548:	2100      	movs	r1, #0
 800154a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2240      	movs	r2, #64	@ 0x40
 8001550:	2100      	movs	r1, #0
 8001552:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e00f      	b.n	8001578 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	4013      	ands	r3, r2
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	425a      	negs	r2, r3
 8001568:	4153      	adcs	r3, r2
 800156a:	b2db      	uxtb	r3, r3
 800156c:	001a      	movs	r2, r3
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d0b5      	beq.n	80014e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bd80      	pop	{r7, pc}

08001580 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800158c:	e032      	b.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	0018      	movs	r0, r3
 8001596:	f000 f87d 	bl	8001694 <I2C_IsErrorOccurred>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d001      	beq.n	80015a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e030      	b.n	8001604 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	3301      	adds	r3, #1
 80015a6:	d025      	beq.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a8:	f7ff fac8 	bl	8000b3c <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d302      	bcc.n	80015be <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d11a      	bne.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2202      	movs	r2, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d013      	beq.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d0:	2220      	movs	r2, #32
 80015d2:	431a      	orrs	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2241      	movs	r2, #65	@ 0x41
 80015dc:	2120      	movs	r1, #32
 80015de:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2242      	movs	r2, #66	@ 0x42
 80015e4:	2100      	movs	r1, #0
 80015e6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2240      	movs	r2, #64	@ 0x40
 80015ec:	2100      	movs	r1, #0
 80015ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e007      	b.n	8001604 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2202      	movs	r2, #2
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d1c5      	bne.n	800158e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b004      	add	sp, #16
 800160a:	bd80      	pop	{r7, pc}

0800160c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001618:	e02f      	b.n	800167a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	0018      	movs	r0, r3
 8001622:	f000 f837 	bl	8001694 <I2C_IsErrorOccurred>
 8001626:	1e03      	subs	r3, r0, #0
 8001628:	d001      	beq.n	800162e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e02d      	b.n	800168a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800162e:	f7ff fa85 	bl	8000b3c <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	429a      	cmp	r2, r3
 800163c:	d302      	bcc.n	8001644 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d11a      	bne.n	800167a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2220      	movs	r2, #32
 800164c:	4013      	ands	r3, r2
 800164e:	2b20      	cmp	r3, #32
 8001650:	d013      	beq.n	800167a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	2220      	movs	r2, #32
 8001658:	431a      	orrs	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2241      	movs	r2, #65	@ 0x41
 8001662:	2120      	movs	r1, #32
 8001664:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2242      	movs	r2, #66	@ 0x42
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2240      	movs	r2, #64	@ 0x40
 8001672:	2100      	movs	r1, #0
 8001674:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e007      	b.n	800168a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2220      	movs	r2, #32
 8001682:	4013      	ands	r3, r2
 8001684:	2b20      	cmp	r3, #32
 8001686:	d1c8      	bne.n	800161a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b004      	add	sp, #16
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	2327      	movs	r3, #39	@ 0x27
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2210      	movs	r2, #16
 80016bc:	4013      	ands	r3, r2
 80016be:	d100      	bne.n	80016c2 <I2C_IsErrorOccurred+0x2e>
 80016c0:	e079      	b.n	80017b6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2210      	movs	r2, #16
 80016c8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016ca:	e057      	b.n	800177c <I2C_IsErrorOccurred+0xe8>
 80016cc:	2227      	movs	r2, #39	@ 0x27
 80016ce:	18bb      	adds	r3, r7, r2
 80016d0:	18ba      	adds	r2, r7, r2
 80016d2:	7812      	ldrb	r2, [r2, #0]
 80016d4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3301      	adds	r3, #1
 80016da:	d04f      	beq.n	800177c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016dc:	f7ff fa2e 	bl	8000b3c <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d302      	bcc.n	80016f2 <I2C_IsErrorOccurred+0x5e>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d144      	bne.n	800177c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	01db      	lsls	r3, r3, #7
 80016fc:	4013      	ands	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001700:	2013      	movs	r0, #19
 8001702:	183b      	adds	r3, r7, r0
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	2142      	movs	r1, #66	@ 0x42
 8001708:	5c52      	ldrb	r2, [r2, r1]
 800170a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	2380      	movs	r3, #128	@ 0x80
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	401a      	ands	r2, r3
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	429a      	cmp	r2, r3
 800171e:	d126      	bne.n	800176e <I2C_IsErrorOccurred+0xda>
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	2380      	movs	r3, #128	@ 0x80
 8001724:	01db      	lsls	r3, r3, #7
 8001726:	429a      	cmp	r2, r3
 8001728:	d021      	beq.n	800176e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800172a:	183b      	adds	r3, r7, r0
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b20      	cmp	r3, #32
 8001730:	d01d      	beq.n	800176e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2180      	movs	r1, #128	@ 0x80
 800173e:	01c9      	lsls	r1, r1, #7
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001744:	f7ff f9fa 	bl	8000b3c <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800174c:	e00f      	b.n	800176e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800174e:	f7ff f9f5 	bl	8000b3c <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b19      	cmp	r3, #25
 800175a:	d908      	bls.n	800176e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	2220      	movs	r2, #32
 8001760:	4313      	orrs	r3, r2
 8001762:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001764:	2327      	movs	r3, #39	@ 0x27
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]

              break;
 800176c:	e006      	b.n	800177c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2220      	movs	r2, #32
 8001776:	4013      	ands	r3, r2
 8001778:	2b20      	cmp	r3, #32
 800177a:	d1e8      	bne.n	800174e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2220      	movs	r2, #32
 8001784:	4013      	ands	r3, r2
 8001786:	2b20      	cmp	r3, #32
 8001788:	d004      	beq.n	8001794 <I2C_IsErrorOccurred+0x100>
 800178a:	2327      	movs	r3, #39	@ 0x27
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d09b      	beq.n	80016cc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001794:	2327      	movs	r3, #39	@ 0x27
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2220      	movs	r2, #32
 80017a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	2204      	movs	r2, #4
 80017aa:	4313      	orrs	r3, r2
 80017ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80017ae:	2327      	movs	r3, #39	@ 0x27
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	d00c      	beq.n	80017e2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4313      	orrs	r3, r2
 80017ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2280      	movs	r2, #128	@ 0x80
 80017d6:	0052      	lsls	r2, r2, #1
 80017d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017da:	2327      	movs	r3, #39	@ 0x27
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4013      	ands	r3, r2
 80017ea:	d00c      	beq.n	8001806 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	2208      	movs	r2, #8
 80017f0:	4313      	orrs	r3, r2
 80017f2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2280      	movs	r2, #128	@ 0x80
 80017fa:	00d2      	lsls	r2, r2, #3
 80017fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017fe:	2327      	movs	r3, #39	@ 0x27
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4013      	ands	r3, r2
 800180e:	d00c      	beq.n	800182a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	2202      	movs	r2, #2
 8001814:	4313      	orrs	r3, r2
 8001816:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2280      	movs	r2, #128	@ 0x80
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001822:	2327      	movs	r3, #39	@ 0x27
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800182a:	2327      	movs	r3, #39	@ 0x27
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01d      	beq.n	8001870 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff fe28 	bl	800148c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	490e      	ldr	r1, [pc, #56]	@ (8001880 <I2C_IsErrorOccurred+0x1ec>)
 8001848:	400a      	ands	r2, r1
 800184a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	431a      	orrs	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2241      	movs	r2, #65	@ 0x41
 800185c:	2120      	movs	r1, #32
 800185e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2242      	movs	r2, #66	@ 0x42
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2240      	movs	r2, #64	@ 0x40
 800186c:	2100      	movs	r1, #0
 800186e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001870:	2327      	movs	r3, #39	@ 0x27
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	781b      	ldrb	r3, [r3, #0]
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b00a      	add	sp, #40	@ 0x28
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	fe00e800 	.word	0xfe00e800

08001884 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	0008      	movs	r0, r1
 800188e:	0011      	movs	r1, r2
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	240a      	movs	r4, #10
 8001894:	193b      	adds	r3, r7, r4
 8001896:	1c02      	adds	r2, r0, #0
 8001898:	801a      	strh	r2, [r3, #0]
 800189a:	2009      	movs	r0, #9
 800189c:	183b      	adds	r3, r7, r0
 800189e:	1c0a      	adds	r2, r1, #0
 80018a0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	059b      	lsls	r3, r3, #22
 80018a8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018aa:	183b      	adds	r3, r7, r0
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	0419      	lsls	r1, r3, #16
 80018b0:	23ff      	movs	r3, #255	@ 0xff
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018b6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018be:	4313      	orrs	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	085b      	lsrs	r3, r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018ce:	0d51      	lsrs	r1, r2, #21
 80018d0:	2280      	movs	r2, #128	@ 0x80
 80018d2:	00d2      	lsls	r2, r2, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	4907      	ldr	r1, [pc, #28]	@ (80018f4 <I2C_TransferConfig+0x70>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	43d2      	mvns	r2, r2
 80018dc:	401a      	ands	r2, r3
 80018de:	0011      	movs	r1, r2
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b007      	add	sp, #28
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	03ff63ff 	.word	0x03ff63ff

080018f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2241      	movs	r2, #65	@ 0x41
 8001906:	5c9b      	ldrb	r3, [r3, r2]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b20      	cmp	r3, #32
 800190c:	d138      	bne.n	8001980 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2240      	movs	r2, #64	@ 0x40
 8001912:	5c9b      	ldrb	r3, [r3, r2]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001918:	2302      	movs	r3, #2
 800191a:	e032      	b.n	8001982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2240      	movs	r2, #64	@ 0x40
 8001920:	2101      	movs	r1, #1
 8001922:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2241      	movs	r2, #65	@ 0x41
 8001928:	2124      	movs	r1, #36	@ 0x24
 800192a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2101      	movs	r1, #1
 8001938:	438a      	bics	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4911      	ldr	r1, [pc, #68]	@ (800198c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001948:	400a      	ands	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2101      	movs	r1, #1
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2241      	movs	r2, #65	@ 0x41
 8001970:	2120      	movs	r1, #32
 8001972:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2240      	movs	r2, #64	@ 0x40
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	e000      	b.n	8001982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001980:	2302      	movs	r3, #2
  }
}
 8001982:	0018      	movs	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	b002      	add	sp, #8
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	ffffefff 	.word	0xffffefff

08001990 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2241      	movs	r2, #65	@ 0x41
 800199e:	5c9b      	ldrb	r3, [r3, r2]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	d139      	bne.n	8001a1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2240      	movs	r2, #64	@ 0x40
 80019aa:	5c9b      	ldrb	r3, [r3, r2]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e033      	b.n	8001a1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2240      	movs	r2, #64	@ 0x40
 80019b8:	2101      	movs	r1, #1
 80019ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2241      	movs	r2, #65	@ 0x41
 80019c0:	2124      	movs	r1, #36	@ 0x24
 80019c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2101      	movs	r1, #1
 80019d0:	438a      	bics	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2101      	movs	r1, #1
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2241      	movs	r2, #65	@ 0x41
 8001a0a:	2120      	movs	r1, #32
 8001a0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2240      	movs	r2, #64	@ 0x40
 8001a12:	2100      	movs	r1, #0
 8001a14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
  }
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b004      	add	sp, #16
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	fffff0ff 	.word	0xfffff0ff

08001a28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a30:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a19      	ldr	r2, [pc, #100]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	2380      	movs	r3, #128	@ 0x80
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d11f      	bne.n	8001a8c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a4c:	4b14      	ldr	r3, [pc, #80]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	0013      	movs	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	189b      	adds	r3, r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4912      	ldr	r1, [pc, #72]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7fe fb50 	bl	8000100 <__udivsi3>
 8001a60:	0003      	movs	r3, r0
 8001a62:	3301      	adds	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a66:	e008      	b.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e001      	b.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e009      	b.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a7a:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	401a      	ands	r2, r3
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d0ed      	beq.n	8001a68 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b004      	add	sp, #16
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	fffff9ff 	.word	0xfffff9ff
 8001aa0:	20000050 	.word	0x20000050
 8001aa4:	000f4240 	.word	0x000f4240

08001aa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e2f3      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d100      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x1e>
 8001ac4:	e07c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac6:	4bc3      	ldr	r3, [pc, #780]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2238      	movs	r2, #56	@ 0x38
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad0:	4bc0      	ldr	r3, [pc, #768]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d102      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x3e>
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d002      	beq.n	8001aec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d10b      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	4bb9      	ldr	r3, [pc, #740]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	029b      	lsls	r3, r3, #10
 8001af4:	4013      	ands	r3, r2
 8001af6:	d062      	beq.n	8001bbe <HAL_RCC_OscConfig+0x116>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d15e      	bne.n	8001bbe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e2ce      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	025b      	lsls	r3, r3, #9
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_OscConfig+0x78>
 8001b10:	4bb0      	ldr	r3, [pc, #704]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4baf      	ldr	r3, [pc, #700]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	2180      	movs	r1, #128	@ 0x80
 8001b18:	0249      	lsls	r1, r1, #9
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	e020      	b.n	8001b62 <HAL_RCC_OscConfig+0xba>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	23a0      	movs	r3, #160	@ 0xa0
 8001b26:	02db      	lsls	r3, r3, #11
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d10e      	bne.n	8001b4a <HAL_RCC_OscConfig+0xa2>
 8001b2c:	4ba9      	ldr	r3, [pc, #676]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4ba8      	ldr	r3, [pc, #672]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	2180      	movs	r1, #128	@ 0x80
 8001b34:	02c9      	lsls	r1, r1, #11
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	4ba6      	ldr	r3, [pc, #664]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4ba5      	ldr	r3, [pc, #660]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001b40:	2180      	movs	r1, #128	@ 0x80
 8001b42:	0249      	lsls	r1, r1, #9
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e00b      	b.n	8001b62 <HAL_RCC_OscConfig+0xba>
 8001b4a:	4ba2      	ldr	r3, [pc, #648]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4ba1      	ldr	r3, [pc, #644]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001b50:	49a1      	ldr	r1, [pc, #644]	@ (8001dd8 <HAL_RCC_OscConfig+0x330>)
 8001b52:	400a      	ands	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	4b9f      	ldr	r3, [pc, #636]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b9e      	ldr	r3, [pc, #632]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001b5c:	499f      	ldr	r1, [pc, #636]	@ (8001ddc <HAL_RCC_OscConfig+0x334>)
 8001b5e:	400a      	ands	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d014      	beq.n	8001b94 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7fe ffe7 	bl	8000b3c <HAL_GetTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7fe ffe2 	bl	8000b3c <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	@ 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e28d      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b86:	4b93      	ldr	r3, [pc, #588]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	029b      	lsls	r3, r3, #10
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0xcc>
 8001b92:	e015      	b.n	8001bc0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7fe ffd2 	bl	8000b3c <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9e:	f7fe ffcd 	bl	8000b3c <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b64      	cmp	r3, #100	@ 0x64
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e278      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb0:	4b88      	ldr	r3, [pc, #544]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	@ 0x80
 8001bb6:	029b      	lsls	r3, r3, #10
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0xf6>
 8001bbc:	e000      	b.n	8001bc0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d100      	bne.n	8001bcc <HAL_RCC_OscConfig+0x124>
 8001bca:	e099      	b.n	8001d00 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bcc:	4b81      	ldr	r3, [pc, #516]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2238      	movs	r2, #56	@ 0x38
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2203      	movs	r2, #3
 8001bdc:	4013      	ands	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d102      	bne.n	8001bec <HAL_RCC_OscConfig+0x144>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d002      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d135      	bne.n	8001c5e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf2:	4b78      	ldr	r3, [pc, #480]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	@ 0x80
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d005      	beq.n	8001c0a <HAL_RCC_OscConfig+0x162>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e24b      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	4b72      	ldr	r3, [pc, #456]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4a74      	ldr	r2, [pc, #464]	@ (8001de0 <HAL_RCC_OscConfig+0x338>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	0019      	movs	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	021a      	lsls	r2, r3, #8
 8001c1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d112      	bne.n	8001c4c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c26:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6e      	ldr	r2, [pc, #440]	@ (8001de4 <HAL_RCC_OscConfig+0x33c>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	4b67      	ldr	r3, [pc, #412]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001c36:	430a      	orrs	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c3a:	4b66      	ldr	r3, [pc, #408]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0adb      	lsrs	r3, r3, #11
 8001c40:	2207      	movs	r2, #7
 8001c42:	4013      	ands	r3, r2
 8001c44:	4a68      	ldr	r2, [pc, #416]	@ (8001de8 <HAL_RCC_OscConfig+0x340>)
 8001c46:	40da      	lsrs	r2, r3
 8001c48:	4b68      	ldr	r3, [pc, #416]	@ (8001dec <HAL_RCC_OscConfig+0x344>)
 8001c4a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c4c:	4b68      	ldr	r3, [pc, #416]	@ (8001df0 <HAL_RCC_OscConfig+0x348>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7fe ff17 	bl	8000a84 <HAL_InitTick>
 8001c56:	1e03      	subs	r3, r0, #0
 8001c58:	d051      	beq.n	8001cfe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e221      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d030      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c66:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8001de4 <HAL_RCC_OscConfig+0x33c>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	0019      	movs	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	4b57      	ldr	r3, [pc, #348]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c7a:	4b56      	ldr	r3, [pc, #344]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b55      	ldr	r3, [pc, #340]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001c80:	2180      	movs	r1, #128	@ 0x80
 8001c82:	0049      	lsls	r1, r1, #1
 8001c84:	430a      	orrs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7fe ff58 	bl	8000b3c <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c92:	f7fe ff53 	bl	8000b3c <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e1fe      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4013      	ands	r3, r2
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b48      	ldr	r3, [pc, #288]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8001de0 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	021a      	lsls	r2, r3, #8
 8001cc0:	4b44      	ldr	r3, [pc, #272]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	e01b      	b.n	8001d00 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001cc8:	4b42      	ldr	r3, [pc, #264]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b41      	ldr	r3, [pc, #260]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001cce:	4949      	ldr	r1, [pc, #292]	@ (8001df4 <HAL_RCC_OscConfig+0x34c>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7fe ff32 	bl	8000b3c <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7fe ff2d 	bl	8000b3c <HAL_GetTick>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1d8      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf0:	4b38      	ldr	r3, [pc, #224]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x236>
 8001cfc:	e000      	b.n	8001d00 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cfe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2208      	movs	r2, #8
 8001d06:	4013      	ands	r3, r2
 8001d08:	d047      	beq.n	8001d9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d0a:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2238      	movs	r2, #56	@ 0x38
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b18      	cmp	r3, #24
 8001d14:	d10a      	bne.n	8001d2c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001d16:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d03c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x2f2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d138      	bne.n	8001d9a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e1ba      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d019      	beq.n	8001d68 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d34:	4b27      	ldr	r3, [pc, #156]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d38:	4b26      	ldr	r3, [pc, #152]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe fefc 	bl	8000b3c <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7fe fef7 	bl	8000b3c <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1a2      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d0f1      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2a2>
 8001d66:	e018      	b.n	8001d9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001d6a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	438a      	bics	r2, r1
 8001d72:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7fe fee2 	bl	8000b3c <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7fe fedd 	bl	8000b3c <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e188      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d90:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d94:	2202      	movs	r2, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	d1f1      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	4013      	ands	r3, r2
 8001da2:	d100      	bne.n	8001da6 <HAL_RCC_OscConfig+0x2fe>
 8001da4:	e0c6      	b.n	8001f34 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da6:	231f      	movs	r3, #31
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2238      	movs	r2, #56	@ 0x38
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	d11e      	bne.n	8001df8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_RCC_OscConfig+0x32c>)
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d100      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x31e>
 8001dc4:	e0b6      	b.n	8001f34 <HAL_RCC_OscConfig+0x48c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d000      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x328>
 8001dce:	e0b1      	b.n	8001f34 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e166      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	fffeffff 	.word	0xfffeffff
 8001ddc:	fffbffff 	.word	0xfffbffff
 8001de0:	ffff80ff 	.word	0xffff80ff
 8001de4:	ffffc7ff 	.word	0xffffc7ff
 8001de8:	00f42400 	.word	0x00f42400
 8001dec:	20000050 	.word	0x20000050
 8001df0:	20000054 	.word	0x20000054
 8001df4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001df8:	4bac      	ldr	r3, [pc, #688]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001dfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dfc:	2380      	movs	r3, #128	@ 0x80
 8001dfe:	055b      	lsls	r3, r3, #21
 8001e00:	4013      	ands	r3, r2
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_OscConfig+0x360>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x362>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d011      	beq.n	8001e32 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	4ba7      	ldr	r3, [pc, #668]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001e10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e12:	4ba6      	ldr	r3, [pc, #664]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001e14:	2180      	movs	r1, #128	@ 0x80
 8001e16:	0549      	lsls	r1, r1, #21
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e1c:	4ba3      	ldr	r3, [pc, #652]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001e1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	055b      	lsls	r3, r3, #21
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001e2a:	231f      	movs	r3, #31
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e32:	4b9f      	ldr	r3, [pc, #636]	@ (80020b0 <HAL_RCC_OscConfig+0x608>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	2380      	movs	r3, #128	@ 0x80
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d11a      	bne.n	8001e74 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e3e:	4b9c      	ldr	r3, [pc, #624]	@ (80020b0 <HAL_RCC_OscConfig+0x608>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b9b      	ldr	r3, [pc, #620]	@ (80020b0 <HAL_RCC_OscConfig+0x608>)
 8001e44:	2180      	movs	r1, #128	@ 0x80
 8001e46:	0049      	lsls	r1, r1, #1
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fe76 	bl	8000b3c <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7fe fe71 	bl	8000b3c <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e11c      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e68:	4b91      	ldr	r3, [pc, #580]	@ (80020b0 <HAL_RCC_OscConfig+0x608>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3e2>
 8001e7c:	4b8b      	ldr	r3, [pc, #556]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001e7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e80:	4b8a      	ldr	r3, [pc, #552]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001e82:	2101      	movs	r1, #1
 8001e84:	430a      	orrs	r2, r1
 8001e86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e88:	e01c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x41c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x404>
 8001e92:	4b86      	ldr	r3, [pc, #536]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001e94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e96:	4b85      	ldr	r3, [pc, #532]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001e98:	2104      	movs	r1, #4
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e9e:	4b83      	ldr	r3, [pc, #524]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001ea0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ea2:	4b82      	ldr	r3, [pc, #520]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x41c>
 8001eac:	4b7f      	ldr	r3, [pc, #508]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001eae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eb0:	4b7e      	ldr	r3, [pc, #504]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eb8:	4b7c      	ldr	r3, [pc, #496]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001eba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ebc:	4b7b      	ldr	r3, [pc, #492]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	438a      	bics	r2, r1
 8001ec2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d014      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fe36 	bl	8000b3c <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed4:	e009      	b.n	8001eea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe fe31 	bl	8000b3c <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	4a74      	ldr	r2, [pc, #464]	@ (80020b4 <HAL_RCC_OscConfig+0x60c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e0db      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eea:	4b70      	ldr	r3, [pc, #448]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x42e>
 8001ef4:	e013      	b.n	8001f1e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7fe fe21 	bl	8000b3c <HAL_GetTick>
 8001efa:	0003      	movs	r3, r0
 8001efc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001efe:	e009      	b.n	8001f14 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7fe fe1c 	bl	8000b3c <HAL_GetTick>
 8001f04:	0002      	movs	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	4a6a      	ldr	r2, [pc, #424]	@ (80020b4 <HAL_RCC_OscConfig+0x60c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e0c6      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f14:	4b65      	ldr	r3, [pc, #404]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f1e:	231f      	movs	r3, #31
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f28:	4b60      	ldr	r3, [pc, #384]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f2c:	4b5f      	ldr	r3, [pc, #380]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001f2e:	4962      	ldr	r1, [pc, #392]	@ (80020b8 <HAL_RCC_OscConfig+0x610>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d100      	bne.n	8001f3e <HAL_RCC_OscConfig+0x496>
 8001f3c:	e0b0      	b.n	80020a0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2238      	movs	r2, #56	@ 0x38
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d100      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4a4>
 8001f4a:	e078      	b.n	800203e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d153      	bne.n	8001ffc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4b55      	ldr	r3, [pc, #340]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b54      	ldr	r3, [pc, #336]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001f5a:	4958      	ldr	r1, [pc, #352]	@ (80020bc <HAL_RCC_OscConfig+0x614>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe fdec 	bl	8000b3c <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7fe fde7 	bl	8000b3c <HAL_GetTick>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e092      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	049b      	lsls	r3, r3, #18
 8001f84:	4013      	ands	r3, r2
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f88:	4b48      	ldr	r3, [pc, #288]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80020c0 <HAL_RCC_OscConfig+0x618>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1a      	ldr	r2, [r3, #32]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b3c      	ldr	r3, [pc, #240]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001fbc:	2180      	movs	r1, #128	@ 0x80
 8001fbe:	0449      	lsls	r1, r1, #17
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001fc4:	4b39      	ldr	r3, [pc, #228]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	4b38      	ldr	r3, [pc, #224]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001fca:	2180      	movs	r1, #128	@ 0x80
 8001fcc:	0549      	lsls	r1, r1, #21
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fdb3 	bl	8000b3c <HAL_GetTick>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7fe fdae 	bl	8000b3c <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e059      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fee:	4b2f      	ldr	r3, [pc, #188]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	049b      	lsls	r3, r3, #18
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x534>
 8001ffa:	e051      	b.n	80020a0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b2a      	ldr	r3, [pc, #168]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8002002:	492e      	ldr	r1, [pc, #184]	@ (80020bc <HAL_RCC_OscConfig+0x614>)
 8002004:	400a      	ands	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7fe fd98 	bl	8000b3c <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7fe fd93 	bl	8000b3c <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e03e      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002024:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	049b      	lsls	r3, r3, #18
 800202c:	4013      	ands	r3, r2
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002030:	4b1e      	ldr	r3, [pc, #120]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 8002036:	4923      	ldr	r1, [pc, #140]	@ (80020c4 <HAL_RCC_OscConfig+0x61c>)
 8002038:	400a      	ands	r2, r1
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	e030      	b.n	80020a0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e02b      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800204a:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <HAL_RCC_OscConfig+0x604>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2203      	movs	r2, #3
 8002054:	401a      	ands	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	429a      	cmp	r2, r3
 800205c:	d11e      	bne.n	800209c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2270      	movs	r2, #112	@ 0x70
 8002062:	401a      	ands	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d117      	bne.n	800209c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	23fe      	movs	r3, #254	@ 0xfe
 8002070:	01db      	lsls	r3, r3, #7
 8002072:	401a      	ands	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002078:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d10e      	bne.n	800209c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	23f8      	movs	r3, #248	@ 0xf8
 8002082:	039b      	lsls	r3, r3, #14
 8002084:	401a      	ands	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d106      	bne.n	800209c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	0f5b      	lsrs	r3, r3, #29
 8002092:	075a      	lsls	r2, r3, #29
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	0018      	movs	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b008      	add	sp, #32
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			@ (mov r8, r8)
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
 80020b4:	00001388 	.word	0x00001388
 80020b8:	efffffff 	.word	0xefffffff
 80020bc:	feffffff 	.word	0xfeffffff
 80020c0:	1fc1808c 	.word	0x1fc1808c
 80020c4:	effefffc 	.word	0xeffefffc

080020c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0e9      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020dc:	4b76      	ldr	r3, [pc, #472]	@ (80022b8 <HAL_RCC_ClockConfig+0x1f0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2207      	movs	r2, #7
 80020e2:	4013      	ands	r3, r2
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d91e      	bls.n	8002128 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b73      	ldr	r3, [pc, #460]	@ (80022b8 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2207      	movs	r2, #7
 80020f0:	4393      	bics	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	4b70      	ldr	r3, [pc, #448]	@ (80022b8 <HAL_RCC_ClockConfig+0x1f0>)
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020fc:	f7fe fd1e 	bl	8000b3c <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002104:	e009      	b.n	800211a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002106:	f7fe fd19 	bl	8000b3c <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	4a6a      	ldr	r2, [pc, #424]	@ (80022bc <HAL_RCC_ClockConfig+0x1f4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e0ca      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800211a:	4b67      	ldr	r3, [pc, #412]	@ (80022b8 <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2207      	movs	r2, #7
 8002120:	4013      	ands	r3, r2
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d1ee      	bne.n	8002106 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2202      	movs	r2, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d015      	beq.n	800215e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2204      	movs	r2, #4
 8002138:	4013      	ands	r3, r2
 800213a:	d006      	beq.n	800214a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800213c:	4b60      	ldr	r3, [pc, #384]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	4b5f      	ldr	r3, [pc, #380]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002142:	21e0      	movs	r1, #224	@ 0xe0
 8002144:	01c9      	lsls	r1, r1, #7
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214a:	4b5d      	ldr	r3, [pc, #372]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	4a5d      	ldr	r2, [pc, #372]	@ (80022c4 <HAL_RCC_ClockConfig+0x1fc>)
 8002150:	4013      	ands	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	4b59      	ldr	r3, [pc, #356]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2201      	movs	r2, #1
 8002164:	4013      	ands	r3, r2
 8002166:	d057      	beq.n	8002218 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d107      	bne.n	8002180 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002170:	4b53      	ldr	r3, [pc, #332]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	2380      	movs	r3, #128	@ 0x80
 8002176:	029b      	lsls	r3, r3, #10
 8002178:	4013      	ands	r3, r2
 800217a:	d12b      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e097      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d107      	bne.n	8002198 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002188:	4b4d      	ldr	r3, [pc, #308]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	049b      	lsls	r3, r3, #18
 8002190:	4013      	ands	r3, r2
 8002192:	d11f      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e08b      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a0:	4b47      	ldr	r3, [pc, #284]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4013      	ands	r3, r2
 80021aa:	d113      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e07f      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021b8:	4b41      	ldr	r3, [pc, #260]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 80021ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021bc:	2202      	movs	r2, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	d108      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e074      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c6:	4b3e      	ldr	r3, [pc, #248]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 80021c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ca:	2202      	movs	r2, #2
 80021cc:	4013      	ands	r3, r2
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e06d      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021d4:	4b3a      	ldr	r3, [pc, #232]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2207      	movs	r2, #7
 80021da:	4393      	bics	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	4b37      	ldr	r3, [pc, #220]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e8:	f7fe fca8 	bl	8000b3c <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f0:	e009      	b.n	8002206 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f2:	f7fe fca3 	bl	8000b3c <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	4a2f      	ldr	r2, [pc, #188]	@ (80022bc <HAL_RCC_ClockConfig+0x1f4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e054      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	4b2e      	ldr	r3, [pc, #184]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2238      	movs	r2, #56	@ 0x38
 800220c:	401a      	ands	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	429a      	cmp	r2, r3
 8002216:	d1ec      	bne.n	80021f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002218:	4b27      	ldr	r3, [pc, #156]	@ (80022b8 <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2207      	movs	r2, #7
 800221e:	4013      	ands	r3, r2
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d21e      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b24      	ldr	r3, [pc, #144]	@ (80022b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2207      	movs	r2, #7
 800222c:	4393      	bics	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	4b21      	ldr	r3, [pc, #132]	@ (80022b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002238:	f7fe fc80 	bl	8000b3c <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002240:	e009      	b.n	8002256 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002242:	f7fe fc7b 	bl	8000b3c <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	4a1b      	ldr	r2, [pc, #108]	@ (80022bc <HAL_RCC_ClockConfig+0x1f4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e02c      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002256:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2207      	movs	r2, #7
 800225c:	4013      	ands	r3, r2
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d1ee      	bne.n	8002242 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2204      	movs	r2, #4
 800226a:	4013      	ands	r3, r2
 800226c:	d009      	beq.n	8002282 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800226e:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	4a15      	ldr	r2, [pc, #84]	@ (80022c8 <HAL_RCC_ClockConfig+0x200>)
 8002274:	4013      	ands	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 800227e:	430a      	orrs	r2, r1
 8002280:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002282:	f000 f829 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002286:	0001      	movs	r1, r0
 8002288:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <HAL_RCC_ClockConfig+0x1f8>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	220f      	movs	r2, #15
 8002290:	401a      	ands	r2, r3
 8002292:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <HAL_RCC_ClockConfig+0x204>)
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	58d3      	ldr	r3, [r2, r3]
 8002298:	221f      	movs	r2, #31
 800229a:	4013      	ands	r3, r2
 800229c:	000a      	movs	r2, r1
 800229e:	40da      	lsrs	r2, r3
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_RCC_ClockConfig+0x208>)
 80022a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022a4:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <HAL_RCC_ClockConfig+0x20c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7fe fbeb 	bl	8000a84 <HAL_InitTick>
 80022ae:	0003      	movs	r3, r0
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b004      	add	sp, #16
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40022000 	.word	0x40022000
 80022bc:	00001388 	.word	0x00001388
 80022c0:	40021000 	.word	0x40021000
 80022c4:	fffff0ff 	.word	0xfffff0ff
 80022c8:	ffff8fff 	.word	0xffff8fff
 80022cc:	08004e98 	.word	0x08004e98
 80022d0:	20000050 	.word	0x20000050
 80022d4:	20000054 	.word	0x20000054

080022d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022de:	4b3c      	ldr	r3, [pc, #240]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2238      	movs	r2, #56	@ 0x38
 80022e4:	4013      	ands	r3, r2
 80022e6:	d10f      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80022e8:	4b39      	ldr	r3, [pc, #228]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0adb      	lsrs	r3, r3, #11
 80022ee:	2207      	movs	r2, #7
 80022f0:	4013      	ands	r3, r2
 80022f2:	2201      	movs	r2, #1
 80022f4:	409a      	lsls	r2, r3
 80022f6:	0013      	movs	r3, r2
 80022f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80022fa:	6839      	ldr	r1, [r7, #0]
 80022fc:	4835      	ldr	r0, [pc, #212]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022fe:	f7fd feff 	bl	8000100 <__udivsi3>
 8002302:	0003      	movs	r3, r0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	e05d      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002308:	4b31      	ldr	r3, [pc, #196]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2238      	movs	r2, #56	@ 0x38
 800230e:	4013      	ands	r3, r2
 8002310:	2b08      	cmp	r3, #8
 8002312:	d102      	bne.n	800231a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002314:	4b30      	ldr	r3, [pc, #192]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	e054      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800231a:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2238      	movs	r2, #56	@ 0x38
 8002320:	4013      	ands	r3, r2
 8002322:	2b10      	cmp	r3, #16
 8002324:	d138      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002326:	4b2a      	ldr	r3, [pc, #168]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2203      	movs	r2, #3
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002330:	4b27      	ldr	r3, [pc, #156]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	2207      	movs	r2, #7
 8002338:	4013      	ands	r3, r2
 800233a:	3301      	adds	r3, #1
 800233c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d10d      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	4824      	ldr	r0, [pc, #144]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002348:	f7fd feda 	bl	8000100 <__udivsi3>
 800234c:	0003      	movs	r3, r0
 800234e:	0019      	movs	r1, r3
 8002350:	4b1f      	ldr	r3, [pc, #124]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	227f      	movs	r2, #127	@ 0x7f
 8002358:	4013      	ands	r3, r2
 800235a:	434b      	muls	r3, r1
 800235c:	617b      	str	r3, [r7, #20]
        break;
 800235e:	e00d      	b.n	800237c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	481c      	ldr	r0, [pc, #112]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002364:	f7fd fecc 	bl	8000100 <__udivsi3>
 8002368:	0003      	movs	r3, r0
 800236a:	0019      	movs	r1, r3
 800236c:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	227f      	movs	r2, #127	@ 0x7f
 8002374:	4013      	ands	r3, r2
 8002376:	434b      	muls	r3, r1
 8002378:	617b      	str	r3, [r7, #20]
        break;
 800237a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800237c:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0f5b      	lsrs	r3, r3, #29
 8002382:	2207      	movs	r2, #7
 8002384:	4013      	ands	r3, r2
 8002386:	3301      	adds	r3, #1
 8002388:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	6978      	ldr	r0, [r7, #20]
 800238e:	f7fd feb7 	bl	8000100 <__udivsi3>
 8002392:	0003      	movs	r3, r0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	e015      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002398:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2238      	movs	r2, #56	@ 0x38
 800239e:	4013      	ands	r3, r2
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d103      	bne.n	80023ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2238      	movs	r2, #56	@ 0x38
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b18      	cmp	r3, #24
 80023b6:	d103      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80023b8:	23fa      	movs	r3, #250	@ 0xfa
 80023ba:	01db      	lsls	r3, r3, #7
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e001      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023c4:	693b      	ldr	r3, [r7, #16]
}
 80023c6:	0018      	movs	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b006      	add	sp, #24
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	46c0      	nop			@ (mov r8, r8)
 80023d0:	40021000 	.word	0x40021000
 80023d4:	00f42400 	.word	0x00f42400
 80023d8:	007a1200 	.word	0x007a1200

080023dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80023e4:	2313      	movs	r3, #19
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023ec:	2312      	movs	r3, #18
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	029b      	lsls	r3, r3, #10
 80023fc:	4013      	ands	r3, r2
 80023fe:	d100      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002400:	e0a3      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2011      	movs	r0, #17
 8002404:	183b      	adds	r3, r7, r0
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240a:	4b7f      	ldr	r3, [pc, #508]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800240c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	055b      	lsls	r3, r3, #21
 8002412:	4013      	ands	r3, r2
 8002414:	d110      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	4b7c      	ldr	r3, [pc, #496]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800241a:	4b7b      	ldr	r3, [pc, #492]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	0549      	lsls	r1, r1, #21
 8002420:	430a      	orrs	r2, r1
 8002422:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002424:	4b78      	ldr	r3, [pc, #480]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	055b      	lsls	r3, r3, #21
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002432:	183b      	adds	r3, r7, r0
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002438:	4b74      	ldr	r3, [pc, #464]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b73      	ldr	r3, [pc, #460]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800243e:	2180      	movs	r1, #128	@ 0x80
 8002440:	0049      	lsls	r1, r1, #1
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002446:	f7fe fb79 	bl	8000b3c <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800244e:	e00b      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002450:	f7fe fb74 	bl	8000b3c <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d904      	bls.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800245e:	2313      	movs	r3, #19
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2203      	movs	r2, #3
 8002464:	701a      	strb	r2, [r3, #0]
        break;
 8002466:	e005      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002468:	4b68      	ldr	r3, [pc, #416]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4013      	ands	r3, r2
 8002472:	d0ed      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002474:	2313      	movs	r3, #19
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d154      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800247e:	4b62      	ldr	r3, [pc, #392]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002480:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002482:	23c0      	movs	r3, #192	@ 0xc0
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4013      	ands	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d019      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	429a      	cmp	r2, r3
 8002498:	d014      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800249a:	4b5b      	ldr	r3, [pc, #364]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800249c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249e:	4a5c      	ldr	r2, [pc, #368]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024a4:	4b58      	ldr	r3, [pc, #352]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024a8:	4b57      	ldr	r3, [pc, #348]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024aa:	2180      	movs	r1, #128	@ 0x80
 80024ac:	0249      	lsls	r1, r1, #9
 80024ae:	430a      	orrs	r2, r1
 80024b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024b2:	4b55      	ldr	r3, [pc, #340]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024b6:	4b54      	ldr	r3, [pc, #336]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024b8:	4956      	ldr	r1, [pc, #344]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80024ba:	400a      	ands	r2, r1
 80024bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024be:	4b52      	ldr	r3, [pc, #328]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	d016      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fb36 	bl	8000b3c <HAL_GetTick>
 80024d0:	0003      	movs	r3, r0
 80024d2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d4:	e00c      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fb31 	bl	8000b3c <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d904      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80024e6:	2313      	movs	r3, #19
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2203      	movs	r2, #3
 80024ec:	701a      	strb	r2, [r3, #0]
            break;
 80024ee:	e004      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f0:	4b45      	ldr	r3, [pc, #276]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f4:	2202      	movs	r2, #2
 80024f6:	4013      	ands	r3, r2
 80024f8:	d0ed      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80024fa:	2313      	movs	r3, #19
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002504:	4b40      	ldr	r3, [pc, #256]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002508:	4a41      	ldr	r2, [pc, #260]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	4b3d      	ldr	r3, [pc, #244]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002514:	430a      	orrs	r2, r1
 8002516:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002518:	e00c      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800251a:	2312      	movs	r3, #18
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	2213      	movs	r2, #19
 8002520:	18ba      	adds	r2, r7, r2
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e005      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002528:	2312      	movs	r3, #18
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	2213      	movs	r2, #19
 800252e:	18ba      	adds	r2, r7, r2
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002534:	2311      	movs	r3, #17
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d105      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253e:	4b32      	ldr	r3, [pc, #200]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002540:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002542:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002544:	4935      	ldr	r1, [pc, #212]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002546:	400a      	ands	r2, r1
 8002548:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2201      	movs	r2, #1
 8002550:	4013      	ands	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002554:	4b2c      	ldr	r3, [pc, #176]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002558:	2203      	movs	r2, #3
 800255a:	4393      	bics	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	4b29      	ldr	r3, [pc, #164]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002564:	430a      	orrs	r2, r1
 8002566:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2220      	movs	r2, #32
 800256e:	4013      	ands	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002572:	4b25      	ldr	r3, [pc, #148]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	4a2a      	ldr	r2, [pc, #168]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002578:	4013      	ands	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	4b21      	ldr	r3, [pc, #132]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002582:	430a      	orrs	r2, r1
 8002584:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	@ 0x80
 800258c:	01db      	lsls	r3, r3, #7
 800258e:	4013      	ands	r3, r2
 8002590:	d015      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002592:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	0899      	lsrs	r1, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	4b1a      	ldr	r3, [pc, #104]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025a0:	430a      	orrs	r2, r1
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	05db      	lsls	r3, r3, #23
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d106      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025b0:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025b6:	2180      	movs	r1, #128	@ 0x80
 80025b8:	0249      	lsls	r1, r1, #9
 80025ba:	430a      	orrs	r2, r1
 80025bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	4013      	ands	r3, r2
 80025c8:	d016      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80025ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ce:	4a15      	ldr	r2, [pc, #84]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	0019      	movs	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025da:	430a      	orrs	r2, r1
 80025dc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	01db      	lsls	r3, r3, #7
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d106      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025ea:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025f0:	2180      	movs	r1, #128	@ 0x80
 80025f2:	0249      	lsls	r1, r1, #9
 80025f4:	430a      	orrs	r2, r1
 80025f6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80025f8:	2312      	movs	r3, #18
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	781b      	ldrb	r3, [r3, #0]
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b006      	add	sp, #24
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			@ (mov r8, r8)
 8002608:	40021000 	.word	0x40021000
 800260c:	40007000 	.word	0x40007000
 8002610:	fffffcff 	.word	0xfffffcff
 8002614:	fffeffff 	.word	0xfffeffff
 8002618:	00001388 	.word	0x00001388
 800261c:	efffffff 	.word	0xefffffff
 8002620:	ffffcfff 	.word	0xffffcfff
 8002624:	ffff3fff 	.word	0xffff3fff

08002628 <memset>:
 8002628:	0003      	movs	r3, r0
 800262a:	1882      	adds	r2, r0, r2
 800262c:	4293      	cmp	r3, r2
 800262e:	d100      	bne.n	8002632 <memset+0xa>
 8002630:	4770      	bx	lr
 8002632:	7019      	strb	r1, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	e7f9      	b.n	800262c <memset+0x4>

08002638 <__libc_init_array>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	2600      	movs	r6, #0
 800263c:	4c0c      	ldr	r4, [pc, #48]	@ (8002670 <__libc_init_array+0x38>)
 800263e:	4d0d      	ldr	r5, [pc, #52]	@ (8002674 <__libc_init_array+0x3c>)
 8002640:	1b64      	subs	r4, r4, r5
 8002642:	10a4      	asrs	r4, r4, #2
 8002644:	42a6      	cmp	r6, r4
 8002646:	d109      	bne.n	800265c <__libc_init_array+0x24>
 8002648:	2600      	movs	r6, #0
 800264a:	f000 f819 	bl	8002680 <_init>
 800264e:	4c0a      	ldr	r4, [pc, #40]	@ (8002678 <__libc_init_array+0x40>)
 8002650:	4d0a      	ldr	r5, [pc, #40]	@ (800267c <__libc_init_array+0x44>)
 8002652:	1b64      	subs	r4, r4, r5
 8002654:	10a4      	asrs	r4, r4, #2
 8002656:	42a6      	cmp	r6, r4
 8002658:	d105      	bne.n	8002666 <__libc_init_array+0x2e>
 800265a:	bd70      	pop	{r4, r5, r6, pc}
 800265c:	00b3      	lsls	r3, r6, #2
 800265e:	58eb      	ldr	r3, [r5, r3]
 8002660:	4798      	blx	r3
 8002662:	3601      	adds	r6, #1
 8002664:	e7ee      	b.n	8002644 <__libc_init_array+0xc>
 8002666:	00b3      	lsls	r3, r6, #2
 8002668:	58eb      	ldr	r3, [r5, r3]
 800266a:	4798      	blx	r3
 800266c:	3601      	adds	r6, #1
 800266e:	e7f2      	b.n	8002656 <__libc_init_array+0x1e>
 8002670:	08004ed8 	.word	0x08004ed8
 8002674:	08004ed8 	.word	0x08004ed8
 8002678:	08004edc 	.word	0x08004edc
 800267c:	08004ed8 	.word	0x08004ed8

08002680 <_init>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr

0800268c <_fini>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr
