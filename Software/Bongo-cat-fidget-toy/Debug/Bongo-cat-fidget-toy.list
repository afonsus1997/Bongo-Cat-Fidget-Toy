
Bongo-cat-fidget-toy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000317c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c40  08003234  08003234  00004234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e74  08005e74  00007020  2**0
                  CONTENTS
  4 .ARM          00000000  08005e74  08005e74  00007020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e74  08005e74  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e74  08005e74  00006e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e78  08005e78  00006e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08005e7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000020  08005e9c  00007020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08005e9c  00007504  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e167  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235a  00000000  00000000  000151af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00017510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3a  00000000  00000000  00018368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015677  00000000  00000000  00018ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011960  00000000  00000000  0002e519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b9c  00000000  00000000  0003fe79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7a15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003444  00000000  00000000  000c7a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000cae9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000020 	.word	0x20000020
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800321c 	.word	0x0800321c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000024 	.word	0x20000024
 80000fc:	0800321c 	.word	0x0800321c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <draw_animation>:
int sw_state_right;

uint8_t idle_cnt;


void draw_animation(char* frame){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af02      	add	r7, sp, #8
 80003f2:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 fbab 	bl	8000b50 <ssd1306_Fill>
	ssd1306_DrawBitmap(0,0,frame,128,64,White);
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	2301      	movs	r3, #1
 80003fe:	9301      	str	r3, [sp, #4]
 8000400:	2340      	movs	r3, #64	@ 0x40
 8000402:	9300      	str	r3, [sp, #0]
 8000404:	2380      	movs	r3, #128	@ 0x80
 8000406:	2100      	movs	r1, #0
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fc5b 	bl	8000cc4 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 800040e:	f000 fbb9 	bl	8000b84 <ssd1306_UpdateScreen>
}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}

0800041a <draw_animation_erase>:

void draw_animation_erase(char* frame){
 800041a:	b580      	push	{r7, lr}
 800041c:	b084      	sub	sp, #16
 800041e:	af02      	add	r7, sp, #8
 8000420:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(0,0,frame,128,64,Black);
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	2300      	movs	r3, #0
 8000426:	9301      	str	r3, [sp, #4]
 8000428:	2340      	movs	r3, #64	@ 0x40
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2380      	movs	r3, #128	@ 0x80
 800042e:	2100      	movs	r1, #0
 8000430:	2000      	movs	r0, #0
 8000432:	f000 fc47 	bl	8000cc4 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8000436:	f000 fba5 	bl	8000b84 <ssd1306_UpdateScreen>
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}

08000442 <draw_animation_transparent>:

void draw_animation_transparent(char* frame){
 8000442:	b580      	push	{r7, lr}
 8000444:	b084      	sub	sp, #16
 8000446:	af02      	add	r7, sp, #8
 8000448:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(0,0,frame,128,64,White);
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	2301      	movs	r3, #1
 800044e:	9301      	str	r3, [sp, #4]
 8000450:	2340      	movs	r3, #64	@ 0x40
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2380      	movs	r3, #128	@ 0x80
 8000456:	2100      	movs	r1, #0
 8000458:	2000      	movs	r0, #0
 800045a:	f000 fc33 	bl	8000cc4 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 800045e:	f000 fb91 	bl	8000b84 <ssd1306_UpdateScreen>
}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b002      	add	sp, #8
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
//  // Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim14 )
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	4b0d      	ldr	r3, [pc, #52]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000478:	429a      	cmp	r2, r3
 800047a:	d112      	bne.n	80004a2 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		sw_state_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);
 800047c:	23a0      	movs	r3, #160	@ 0xa0
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	2140      	movs	r1, #64	@ 0x40
 8000482:	0018      	movs	r0, r3
 8000484:	f001 f8fc 	bl	8001680 <HAL_GPIO_ReadPin>
 8000488:	0003      	movs	r3, r0
 800048a:	001a      	movs	r2, r3
 800048c:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800048e:	601a      	str	r2, [r3, #0]
		sw_state_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);
 8000490:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000492:	2101      	movs	r1, #1
 8000494:	0018      	movs	r0, r3
 8000496:	f001 f8f3 	bl	8001680 <HAL_GPIO_ReadPin>
 800049a:	0003      	movs	r3, r0
 800049c:	001a      	movs	r2, r3
 800049e:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80004a0:	601a      	str	r2, [r3, #0]
	}
}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	20000090 	.word	0x20000090
 80004b0:	200000dc 	.word	0x200000dc
 80004b4:	50000400 	.word	0x50000400
 80004b8:	200000e0 	.word	0x200000e0

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fdf1 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f92f 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 fa09 	bl	80008e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ce:	f000 f99b 	bl	8000808 <MX_I2C1_Init>
  MX_TIM14_Init();
 80004d2:	f000 f9df 	bl	8000894 <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004d6:	f000 f981 	bl	80007dc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80004da:	f000 facd 	bl	8000a78 <ssd1306_Init>
//    ssd1306_TestAll();

  state_e state = IDLE;
 80004de:	2317      	movs	r3, #23
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
  int32_t idle_cntr = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  int32_t tap_left_cntr = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  int32_t tap_right_cntr = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
  uint8_t left_state = 0;
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
  uint8_t right_state = 0;
 80004f8:	1dbb      	adds	r3, r7, #6
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim14);
 80004fe:	4b7f      	ldr	r3, [pc, #508]	@ (80006fc <main+0x240>)
 8000500:	0018      	movs	r0, r3
 8000502:	f002 fc57 	bl	8002db4 <HAL_TIM_Base_Start_IT>
  while(1) {
	switch(state){
 8000506:	2317      	movs	r3, #23
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <main+0x5a>
 8000510:	2b01      	cmp	r3, #1
 8000512:	d02d      	beq.n	8000570 <main+0xb4>
 8000514:	e7f7      	b.n	8000506 <main+0x4a>
	case IDLE:
		if(sw_state_left == 0 || sw_state_right == 0){
 8000516:	4b7a      	ldr	r3, [pc, #488]	@ (8000700 <main+0x244>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d003      	beq.n	8000526 <main+0x6a>
 800051e:	4b79      	ldr	r3, [pc, #484]	@ (8000704 <main+0x248>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d10b      	bne.n	800053e <main+0x82>
			draw_animation(&img_both_up);
 8000526:	4b78      	ldr	r3, [pc, #480]	@ (8000708 <main+0x24c>)
 8000528:	0018      	movs	r0, r3
 800052a:	f7ff ff5f 	bl	80003ec <draw_animation>
			HAL_Delay(50);
 800052e:	2032      	movs	r0, #50	@ 0x32
 8000530:	f000 fe40 	bl	80011b4 <HAL_Delay>
			state = SWITCH;
 8000534:	2317      	movs	r3, #23
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
		}else {
			  draw_animation(ani_idle[idle_cnt]);
			  idle_cnt = (idle_cnt + 1 ) % ani_idle_LEN;
			  HAL_Delay(100);
		}
		break;
 800053c:	e0dc      	b.n	80006f8 <main+0x23c>
			  draw_animation(ani_idle[idle_cnt]);
 800053e:	4b73      	ldr	r3, [pc, #460]	@ (800070c <main+0x250>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	001a      	movs	r2, r3
 8000544:	4b72      	ldr	r3, [pc, #456]	@ (8000710 <main+0x254>)
 8000546:	0092      	lsls	r2, r2, #2
 8000548:	58d3      	ldr	r3, [r2, r3]
 800054a:	0018      	movs	r0, r3
 800054c:	f7ff ff4e 	bl	80003ec <draw_animation>
			  idle_cnt = (idle_cnt + 1 ) % ani_idle_LEN;
 8000550:	4b6e      	ldr	r3, [pc, #440]	@ (800070c <main+0x250>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	2205      	movs	r2, #5
 8000558:	0011      	movs	r1, r2
 800055a:	0018      	movs	r0, r3
 800055c:	f7ff ff40 	bl	80003e0 <__aeabi_idivmod>
 8000560:	000b      	movs	r3, r1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b69      	ldr	r3, [pc, #420]	@ (800070c <main+0x250>)
 8000566:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(100);
 8000568:	2064      	movs	r0, #100	@ 0x64
 800056a:	f000 fe23 	bl	80011b4 <HAL_Delay>
		break;
 800056e:	e0c3      	b.n	80006f8 <main+0x23c>
	case SWITCH:
		if(sw_state_left == 1 && sw_state_right == 1){
 8000570:	4b63      	ldr	r3, [pc, #396]	@ (8000700 <main+0x244>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d12d      	bne.n	80005d4 <main+0x118>
 8000578:	4b62      	ldr	r3, [pc, #392]	@ (8000704 <main+0x248>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d129      	bne.n	80005d4 <main+0x118>
			draw_animation(&img_both_up);
 8000580:	4b61      	ldr	r3, [pc, #388]	@ (8000708 <main+0x24c>)
 8000582:	0018      	movs	r0, r3
 8000584:	f7ff ff32 	bl	80003ec <draw_animation>
			if(idle_cntr == 0){
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d103      	bne.n	8000596 <main+0xda>
				idle_cntr = HAL_GetTick();
 800058e:	f000 fe07 	bl	80011a0 <HAL_GetTick>
 8000592:	0003      	movs	r3, r0
 8000594:	613b      	str	r3, [r7, #16]
			}
			if(HAL_GetTick() - idle_cntr >= IDLE_TIME){
 8000596:	f000 fe03 	bl	80011a0 <HAL_GetTick>
 800059a:	0002      	movs	r2, r0
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	1ad2      	subs	r2, r2, r3
 80005a0:	23fa      	movs	r3, #250	@ 0xfa
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d305      	bcc.n	80005b4 <main+0xf8>
				idle_cntr = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
				state = IDLE;
 80005ac:	2317      	movs	r3, #23
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
			}
			if(left_state)
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <main+0x106>
				left_state = 0;
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
			if(right_state)
 80005c2:	1dbb      	adds	r3, r7, #6
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d100      	bne.n	80005cc <main+0x110>
 80005ca:	e074      	b.n	80006b6 <main+0x1fa>
				right_state = 0;
 80005cc:	1dbb      	adds	r3, r7, #6
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
			if(right_state)
 80005d2:	e070      	b.n	80006b6 <main+0x1fa>

		}
		else {
			idle_cntr = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
			if((sw_state_left == 0 && sw_state_right == 0) && (right_state == 0 && left_state == 0)){
 80005d8:	4b49      	ldr	r3, [pc, #292]	@ (8000700 <main+0x244>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d122      	bne.n	8000626 <main+0x16a>
 80005e0:	4b48      	ldr	r3, [pc, #288]	@ (8000704 <main+0x248>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d11e      	bne.n	8000626 <main+0x16a>
 80005e8:	1dbb      	adds	r3, r7, #6
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d11a      	bne.n	8000626 <main+0x16a>
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d116      	bne.n	8000626 <main+0x16a>
				draw_animation(&img_both_down_alt);
 80005f8:	4b46      	ldr	r3, [pc, #280]	@ (8000714 <main+0x258>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff fef6 	bl	80003ec <draw_animation>
				draw_animation_transparent(&img_tap_left);
 8000600:	4b45      	ldr	r3, [pc, #276]	@ (8000718 <main+0x25c>)
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff ff1d 	bl	8000442 <draw_animation_transparent>
				draw_animation_transparent(&img_tap_right);
 8000608:	4b44      	ldr	r3, [pc, #272]	@ (800071c <main+0x260>)
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff ff19 	bl	8000442 <draw_animation_transparent>
				tap_left_cntr = HAL_GetTick(); tap_right_cntr = HAL_GetTick();
 8000610:	f000 fdc6 	bl	80011a0 <HAL_GetTick>
 8000614:	0003      	movs	r3, r0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	f000 fdc2 	bl	80011a0 <HAL_GetTick>
 800061c:	0003      	movs	r3, r0
 800061e:	60bb      	str	r3, [r7, #8]
				right_state = 1; left_state == 1;
 8000620:	1dbb      	adds	r3, r7, #6
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
			}
			if(sw_state_left == 1 && sw_state_right == 0){
 8000626:	4b36      	ldr	r3, [pc, #216]	@ (8000700 <main+0x244>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d11d      	bne.n	800066a <main+0x1ae>
 800062e:	4b35      	ldr	r3, [pc, #212]	@ (8000704 <main+0x248>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d119      	bne.n	800066a <main+0x1ae>
				if(right_state == 0){
 8000636:	1dbb      	adds	r3, r7, #6
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d10e      	bne.n	800065c <main+0x1a0>
					draw_animation(&img_right_down_alt);
 800063e:	4b38      	ldr	r3, [pc, #224]	@ (8000720 <main+0x264>)
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff fed3 	bl	80003ec <draw_animation>
					draw_animation_transparent(&img_tap_right);
 8000646:	4b35      	ldr	r3, [pc, #212]	@ (800071c <main+0x260>)
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fefa 	bl	8000442 <draw_animation_transparent>
					tap_right_cntr = HAL_GetTick();
 800064e:	f000 fda7 	bl	80011a0 <HAL_GetTick>
 8000652:	0003      	movs	r3, r0
 8000654:	60bb      	str	r3, [r7, #8]
					right_state = 1;
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
				}
				if(left_state)
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <main+0x1ae>
					left_state = 0;
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
			}
			if(sw_state_left == 0 && sw_state_right == 1 && left_state == 0){
 800066a:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <main+0x244>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d121      	bne.n	80006b6 <main+0x1fa>
 8000672:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <main+0x248>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d11d      	bne.n	80006b6 <main+0x1fa>
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d119      	bne.n	80006b6 <main+0x1fa>
				if(right_state == 0){
 8000682:	1dbb      	adds	r3, r7, #6
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10e      	bne.n	80006a8 <main+0x1ec>
					draw_animation(&img_left_down_alt);
 800068a:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <main+0x268>)
 800068c:	0018      	movs	r0, r3
 800068e:	f7ff fead 	bl	80003ec <draw_animation>
					draw_animation_transparent(&img_tap_left);
 8000692:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <main+0x25c>)
 8000694:	0018      	movs	r0, r3
 8000696:	f7ff fed4 	bl	8000442 <draw_animation_transparent>
					tap_left_cntr = HAL_GetTick();
 800069a:	f000 fd81 	bl	80011a0 <HAL_GetTick>
 800069e:	0003      	movs	r3, r0
 80006a0:	60fb      	str	r3, [r7, #12]
					left_state = 1;
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
				}
				if(right_state)
 80006a8:	1dbb      	adds	r3, r7, #6
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <main+0x1fa>
					right_state = 0;
 80006b0:	1dbb      	adds	r3, r7, #6
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
			}
		}

		if(tap_left_cntr > 0){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	dd0c      	ble.n	80006d6 <main+0x21a>
			if(HAL_GetTick() - tap_left_cntr > TAP_DECAY_TIME) {
 80006bc:	f000 fd70 	bl	80011a0 <HAL_GetTick>
 80006c0:	0002      	movs	r2, r0
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80006c8:	d905      	bls.n	80006d6 <main+0x21a>
				draw_animation_erase(&img_tap_left);
 80006ca:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <main+0x25c>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f7ff fea4 	bl	800041a <draw_animation_erase>
				tap_left_cntr = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
				}
			}
		if(tap_right_cntr > 0){
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	dd0c      	ble.n	80006f6 <main+0x23a>
			if(HAL_GetTick() - tap_right_cntr > TAP_DECAY_TIME) {
 80006dc:	f000 fd60 	bl	80011a0 <HAL_GetTick>
 80006e0:	0002      	movs	r2, r0
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80006e8:	d905      	bls.n	80006f6 <main+0x23a>
				draw_animation_erase(&img_tap_right);
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <main+0x260>)
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff fe94 	bl	800041a <draw_animation_erase>
				tap_right_cntr = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
				}
			}

//		HAL_Delay(100);
		break;
 80006f6:	46c0      	nop			@ (mov r8, r8)
	switch(state){
 80006f8:	e705      	b.n	8000506 <main+0x4a>
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	20000090 	.word	0x20000090
 8000700:	200000dc 	.word	0x200000dc
 8000704:	200000e0 	.word	0x200000e0
 8000708:	08003234 	.word	0x08003234
 800070c:	200000e4 	.word	0x200000e4
 8000710:	20000000 	.word	0x20000000
 8000714:	08004a34 	.word	0x08004a34
 8000718:	08005634 	.word	0x08005634
 800071c:	08005a34 	.word	0x08005a34
 8000720:	08005234 	.word	0x08005234
 8000724:	08004e34 	.word	0x08004e34

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b093      	sub	sp, #76	@ 0x4c
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	2414      	movs	r4, #20
 8000730:	193b      	adds	r3, r7, r4
 8000732:	0018      	movs	r0, r3
 8000734:	2334      	movs	r3, #52	@ 0x34
 8000736:	001a      	movs	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	f002 fd43 	bl	80031c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	0018      	movs	r0, r3
 8000742:	2310      	movs	r3, #16
 8000744:	001a      	movs	r2, r3
 8000746:	2100      	movs	r1, #0
 8000748:	f002 fd3c 	bl	80031c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fcd7 	bl	8002104 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2202      	movs	r2, #2
 800075a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2280      	movs	r2, #128	@ 0x80
 8000760:	0052      	lsls	r2, r2, #1
 8000762:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000764:	0021      	movs	r1, r4
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2240      	movs	r2, #64	@ 0x40
 8000770:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2202      	movs	r2, #2
 8000776:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2202      	movs	r2, #2
 800077c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2208      	movs	r2, #8
 8000788:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2280      	movs	r2, #128	@ 0x80
 800078e:	0292      	lsls	r2, r2, #10
 8000790:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2280      	movs	r2, #128	@ 0x80
 8000796:	0592      	lsls	r2, r2, #22
 8000798:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	187b      	adds	r3, r7, r1
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fcf1 	bl	8002184 <HAL_RCC_OscConfig>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007a6:	f000 f927 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2207      	movs	r2, #7
 80007ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2202      	movs	r2, #2
 80007b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2102      	movs	r1, #2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 ffec 	bl	80027a4 <HAL_RCC_ClockConfig>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007d0:	f000 f912 	bl	80009f8 <Error_Handler>
  }
}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b013      	add	sp, #76	@ 0x4c
 80007da:	bd90      	pop	{r4, r7, pc}

080007dc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2004      	movs	r0, #4
 80007e6:	f000 fdb5 	bl	8001354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80007ea:	2004      	movs	r0, #4
 80007ec:	f000 fdc7 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2013      	movs	r0, #19
 80007f6:	f000 fdad 	bl	8001354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80007fa:	2013      	movs	r0, #19
 80007fc:	f000 fdbf 	bl	800137e <HAL_NVIC_EnableIRQ>
}
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_I2C1_Init+0x80>)
 800080e:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <MX_I2C1_Init+0x84>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300B29;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_I2C1_Init+0x80>)
 8000814:	4a1e      	ldr	r2, [pc, #120]	@ (8000890 <MX_I2C1_Init+0x88>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_I2C1_Init+0x80>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_I2C1_Init+0x80>)
 8000820:	2201      	movs	r2, #1
 8000822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_I2C1_Init+0x80>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_I2C1_Init+0x80>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_I2C1_Init+0x80>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_I2C1_Init+0x80>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x80>)
 800083e:	2280      	movs	r2, #128	@ 0x80
 8000840:	0292      	lsls	r2, r2, #10
 8000842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000844:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_I2C1_Init+0x80>)
 8000846:	0018      	movs	r0, r3
 8000848:	f000 ff38 	bl	80016bc <HAL_I2C_Init>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000850:	f000 f8d2 	bl	80009f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_I2C1_Init+0x80>)
 8000856:	2100      	movs	r1, #0
 8000858:	0018      	movs	r0, r3
 800085a:	f001 fb9d 	bl	8001f98 <HAL_I2CEx_ConfigAnalogFilter>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000862:	f000 f8c9 	bl	80009f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <MX_I2C1_Init+0x80>)
 8000868:	2100      	movs	r1, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fbe0 	bl	8002030 <HAL_I2CEx_ConfigDigitalFilter>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000874:	f000 f8c0 	bl	80009f8 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000878:	2380      	movs	r3, #128	@ 0x80
 800087a:	035b      	lsls	r3, r3, #13
 800087c:	0018      	movs	r0, r3
 800087e:	f001 fc23 	bl	80020c8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000003c 	.word	0x2000003c
 800088c:	40005400 	.word	0x40005400
 8000890:	00300b29 	.word	0x00300b29

08000894 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_TIM14_Init+0x40>)
 800089a:	4a0f      	ldr	r2, [pc, #60]	@ (80008d8 <MX_TIM14_Init+0x44>)
 800089c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 100-1;
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <MX_TIM14_Init+0x40>)
 80008a0:	2263      	movs	r2, #99	@ 0x63
 80008a2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <MX_TIM14_Init+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 64000-1;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <MX_TIM14_Init+0x40>)
 80008ac:	4a0b      	ldr	r2, [pc, #44]	@ (80008dc <MX_TIM14_Init+0x48>)
 80008ae:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <MX_TIM14_Init+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <MX_TIM14_Init+0x40>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <MX_TIM14_Init+0x40>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f002 fa20 	bl	8002d04 <HAL_TIM_Base_Init>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80008c8:	f000 f896 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	20000090 	.word	0x20000090
 80008d8:	40002000 	.word	0x40002000
 80008dc:	0000f9ff 	.word	0x0000f9ff

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b089      	sub	sp, #36	@ 0x24
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	240c      	movs	r4, #12
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	0018      	movs	r0, r3
 80008ec:	2314      	movs	r3, #20
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	f002 fc67 	bl	80031c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b3b      	ldr	r3, [pc, #236]	@ (80009e4 <MX_GPIO_Init+0x104>)
 80008f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008fa:	4b3a      	ldr	r3, [pc, #232]	@ (80009e4 <MX_GPIO_Init+0x104>)
 80008fc:	2102      	movs	r1, #2
 80008fe:	430a      	orrs	r2, r1
 8000900:	635a      	str	r2, [r3, #52]	@ 0x34
 8000902:	4b38      	ldr	r3, [pc, #224]	@ (80009e4 <MX_GPIO_Init+0x104>)
 8000904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000906:	2202      	movs	r2, #2
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b35      	ldr	r3, [pc, #212]	@ (80009e4 <MX_GPIO_Init+0x104>)
 8000910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000912:	4b34      	ldr	r3, [pc, #208]	@ (80009e4 <MX_GPIO_Init+0x104>)
 8000914:	2104      	movs	r1, #4
 8000916:	430a      	orrs	r2, r1
 8000918:	635a      	str	r2, [r3, #52]	@ 0x34
 800091a:	4b32      	ldr	r3, [pc, #200]	@ (80009e4 <MX_GPIO_Init+0x104>)
 800091c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800091e:	2204      	movs	r2, #4
 8000920:	4013      	ands	r3, r2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b2f      	ldr	r3, [pc, #188]	@ (80009e4 <MX_GPIO_Init+0x104>)
 8000928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800092a:	4b2e      	ldr	r3, [pc, #184]	@ (80009e4 <MX_GPIO_Init+0x104>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	635a      	str	r2, [r3, #52]	@ 0x34
 8000932:	4b2c      	ldr	r3, [pc, #176]	@ (80009e4 <MX_GPIO_Init+0x104>)
 8000934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	4a29      	ldr	r2, [pc, #164]	@ (80009e8 <MX_GPIO_Init+0x108>)
 8000942:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2203      	movs	r2, #3
 8000948:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	193b      	adds	r3, r7, r4
 8000952:	4a26      	ldr	r2, [pc, #152]	@ (80009ec <MX_GPIO_Init+0x10c>)
 8000954:	0019      	movs	r1, r3
 8000956:	0010      	movs	r0, r2
 8000958:	f000 fd2e 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 PA8
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800095c:	193b      	adds	r3, r7, r4
 800095e:	4a24      	ldr	r2, [pc, #144]	@ (80009f0 <MX_GPIO_Init+0x110>)
 8000960:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2203      	movs	r2, #3
 8000966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	193a      	adds	r2, r7, r4
 8000970:	23a0      	movs	r3, #160	@ 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fd1e 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_LEFT_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2240      	movs	r2, #64	@ 0x40
 8000980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_LEFT_GPIO_Port, &GPIO_InitStruct);
 800098e:	193a      	adds	r2, r7, r4
 8000990:	23a0      	movs	r3, #160	@ 0xa0
 8000992:	05db      	lsls	r3, r3, #23
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f000 fd0e 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2201      	movs	r2, #1
 80009a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <MX_GPIO_Init+0x114>)
 80009b2:	0019      	movs	r1, r3
 80009b4:	0010      	movs	r0, r2
 80009b6:	f000 fcff 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80009ba:	0021      	movs	r1, r4
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	22ff      	movs	r2, #255	@ 0xff
 80009c0:	0052      	lsls	r2, r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2203      	movs	r2, #3
 80009c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <MX_GPIO_Init+0x114>)
 80009d4:	0019      	movs	r1, r3
 80009d6:	0010      	movs	r0, r2
 80009d8:	f000 fcee 	bl	80013b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b009      	add	sp, #36	@ 0x24
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	0000c040 	.word	0x0000c040
 80009ec:	50000800 	.word	0x50000800
 80009f0:	00009dbf 	.word	0x00009dbf
 80009f4:	50000400 	.word	0x50000400

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af04      	add	r7, sp, #16
 8000a16:	0002      	movs	r2, r0
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000a1c:	4808      	ldr	r0, [pc, #32]	@ (8000a40 <ssd1306_WriteCommand+0x30>)
 8000a1e:	2301      	movs	r3, #1
 8000a20:	425b      	negs	r3, r3
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2301      	movs	r3, #1
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2178      	movs	r1, #120	@ 0x78
 8000a32:	f000 fee9 	bl	8001808 <HAL_I2C_Mem_Write>
}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	2000003c 	.word	0x2000003c

08000a44 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af04      	add	r7, sp, #16
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	4808      	ldr	r0, [pc, #32]	@ (8000a74 <ssd1306_WriteData+0x30>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	4252      	negs	r2, r2
 8000a58:	9202      	str	r2, [sp, #8]
 8000a5a:	9301      	str	r3, [sp, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2301      	movs	r3, #1
 8000a62:	2240      	movs	r2, #64	@ 0x40
 8000a64:	2178      	movs	r1, #120	@ 0x78
 8000a66:	f000 fecf 	bl	8001808 <HAL_I2C_Mem_Write>
}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	2000003c 	.word	0x2000003c

08000a78 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000a7c:	f7ff ffc2 	bl	8000a04 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000a80:	2064      	movs	r0, #100	@ 0x64
 8000a82:	f000 fb97 	bl	80011b4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 f9c2 	bl	8000e10 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000a8c:	2020      	movs	r0, #32
 8000a8e:	f7ff ffbf 	bl	8000a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff ffbc 	bl	8000a10 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a98:	20b0      	movs	r0, #176	@ 0xb0
 8000a9a:	f7ff ffb9 	bl	8000a10 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8000a9e:	20c0      	movs	r0, #192	@ 0xc0
 8000aa0:	f7ff ffb6 	bl	8000a10 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff ffb3 	bl	8000a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000aaa:	2010      	movs	r0, #16
 8000aac:	f7ff ffb0 	bl	8000a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ab0:	2040      	movs	r0, #64	@ 0x40
 8000ab2:	f7ff ffad 	bl	8000a10 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);//FF
 8000ab6:	20ff      	movs	r0, #255	@ 0xff
 8000ab8:	f000 f991 	bl	8000dde <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8000abc:	20a0      	movs	r0, #160	@ 0xa0
 8000abe:	f7ff ffa7 	bl	8000a10 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000ac2:	20a6      	movs	r0, #166	@ 0xa6
 8000ac4:	f7ff ffa4 	bl	8000a10 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000ac8:	20a8      	movs	r0, #168	@ 0xa8
 8000aca:	f7ff ffa1 	bl	8000a10 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000ace:	203f      	movs	r0, #63	@ 0x3f
 8000ad0:	f7ff ff9e 	bl	8000a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ad4:	20a4      	movs	r0, #164	@ 0xa4
 8000ad6:	f7ff ff9b 	bl	8000a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000ada:	20d3      	movs	r0, #211	@ 0xd3
 8000adc:	f7ff ff98 	bl	8000a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff ff95 	bl	8000a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ae6:	20d5      	movs	r0, #213	@ 0xd5
 8000ae8:	f7ff ff92 	bl	8000a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000aec:	20f0      	movs	r0, #240	@ 0xf0
 8000aee:	f7ff ff8f 	bl	8000a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000af2:	20d9      	movs	r0, #217	@ 0xd9
 8000af4:	f7ff ff8c 	bl	8000a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000af8:	2022      	movs	r0, #34	@ 0x22
 8000afa:	f7ff ff89 	bl	8000a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000afe:	20da      	movs	r0, #218	@ 0xda
 8000b00:	f7ff ff86 	bl	8000a10 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000b04:	2012      	movs	r0, #18
 8000b06:	f7ff ff83 	bl	8000a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000b0a:	20db      	movs	r0, #219	@ 0xdb
 8000b0c:	f7ff ff80 	bl	8000a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000b10:	2020      	movs	r0, #32
 8000b12:	f7ff ff7d 	bl	8000a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000b16:	208d      	movs	r0, #141	@ 0x8d
 8000b18:	f7ff ff7a 	bl	8000a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000b1c:	2014      	movs	r0, #20
 8000b1e:	f7ff ff77 	bl	8000a10 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000b22:	2001      	movs	r0, #1
 8000b24:	f000 f974 	bl	8000e10 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 f811 	bl	8000b50 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000b2e:	f000 f829 	bl	8000b84 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <ssd1306_Init+0xd4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <ssd1306_Init+0xd4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000b3e:	4b03      	ldr	r3, [pc, #12]	@ (8000b4c <ssd1306_Init+0xd4>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	711a      	strb	r2, [r3, #4]
}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	200004f8 	.word	0x200004f8

08000b50 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	0002      	movs	r2, r0
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <ssd1306_Fill+0x18>
 8000b64:	2300      	movs	r3, #0
 8000b66:	e000      	b.n	8000b6a <ssd1306_Fill+0x1a>
 8000b68:	23ff      	movs	r3, #255	@ 0xff
 8000b6a:	2282      	movs	r2, #130	@ 0x82
 8000b6c:	00d2      	lsls	r2, r2, #3
 8000b6e:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <ssd1306_Fill+0x30>)
 8000b70:	0019      	movs	r1, r3
 8000b72:	f002 fb27 	bl	80031c4 <memset>
}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	200000e8 	.word	0x200000e8

08000b84 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e01e      	b.n	8000bd0 <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	3b50      	subs	r3, #80	@ 0x50
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff ff38 	bl	8000a10 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff ff35 	bl	8000a10 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000ba6:	2010      	movs	r0, #16
 8000ba8:	f7ff ff32 	bl	8000a10 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	019b      	lsls	r3, r3, #6
 8000bb4:	189b      	adds	r3, r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	001a      	movs	r2, r3
 8000bba:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <ssd1306_UpdateScreen+0x60>)
 8000bbc:	18d3      	adds	r3, r2, r3
 8000bbe:	2182      	movs	r1, #130	@ 0x82
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff3f 	bl	8000a44 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	3201      	adds	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b07      	cmp	r3, #7
 8000bd6:	d9dc      	bls.n	8000b92 <ssd1306_UpdateScreen+0xe>
    }
}
 8000bd8:	46c0      	nop			@ (mov r8, r8)
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	200000e8 	.word	0x200000e8

08000be8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	0004      	movs	r4, r0
 8000bf0:	0008      	movs	r0, r1
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	1c22      	adds	r2, r4, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	1dbb      	adds	r3, r7, #6
 8000bfc:	1c02      	adds	r2, r0, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	1d7b      	adds	r3, r7, #5
 8000c02:	1c0a      	adds	r2, r1, #0
 8000c04:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b81      	cmp	r3, #129	@ 0x81
 8000c0c:	d853      	bhi.n	8000cb6 <ssd1306_DrawPixel+0xce>
 8000c0e:	1dbb      	adds	r3, r7, #6
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c14:	d84f      	bhi.n	8000cb6 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000c16:	1d7b      	adds	r3, r7, #5
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d124      	bne.n	8000c68 <ssd1306_DrawPixel+0x80>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	1dbb      	adds	r3, r7, #6
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	08db      	lsrs	r3, r3, #3
 8000c28:	b2d8      	uxtb	r0, r3
 8000c2a:	0001      	movs	r1, r0
 8000c2c:	000b      	movs	r3, r1
 8000c2e:	019b      	lsls	r3, r3, #6
 8000c30:	185b      	adds	r3, r3, r1
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	4a22      	ldr	r2, [pc, #136]	@ (8000cc0 <ssd1306_DrawPixel+0xd8>)
 8000c38:	5cd3      	ldrb	r3, [r2, r3]
 8000c3a:	b25a      	sxtb	r2, r3
 8000c3c:	1dbb      	adds	r3, r7, #6
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2107      	movs	r1, #7
 8000c42:	400b      	ands	r3, r1
 8000c44:	2101      	movs	r1, #1
 8000c46:	4099      	lsls	r1, r3
 8000c48:	000b      	movs	r3, r1
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b25c      	sxtb	r4, r3
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	0001      	movs	r1, r0
 8000c56:	000b      	movs	r3, r1
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	185b      	adds	r3, r3, r1
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	18d3      	adds	r3, r2, r3
 8000c60:	b2e1      	uxtb	r1, r4
 8000c62:	4a17      	ldr	r2, [pc, #92]	@ (8000cc0 <ssd1306_DrawPixel+0xd8>)
 8000c64:	54d1      	strb	r1, [r2, r3]
 8000c66:	e027      	b.n	8000cb8 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	1dbb      	adds	r3, r7, #6
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	08db      	lsrs	r3, r3, #3
 8000c72:	b2d8      	uxtb	r0, r3
 8000c74:	0001      	movs	r1, r0
 8000c76:	000b      	movs	r3, r1
 8000c78:	019b      	lsls	r3, r3, #6
 8000c7a:	185b      	adds	r3, r3, r1
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	18d3      	adds	r3, r2, r3
 8000c80:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc0 <ssd1306_DrawPixel+0xd8>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	1dba      	adds	r2, r7, #6
 8000c88:	7812      	ldrb	r2, [r2, #0]
 8000c8a:	2107      	movs	r1, #7
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4091      	lsls	r1, r2
 8000c92:	000a      	movs	r2, r1
 8000c94:	b252      	sxtb	r2, r2
 8000c96:	43d2      	mvns	r2, r2
 8000c98:	b252      	sxtb	r2, r2
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	b25c      	sxtb	r4, r3
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	0001      	movs	r1, r0
 8000ca4:	000b      	movs	r3, r1
 8000ca6:	019b      	lsls	r3, r3, #6
 8000ca8:	185b      	adds	r3, r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	18d3      	adds	r3, r2, r3
 8000cae:	b2e1      	uxtb	r1, r4
 8000cb0:	4a03      	ldr	r2, [pc, #12]	@ (8000cc0 <ssd1306_DrawPixel+0xd8>)
 8000cb2:	54d1      	strb	r1, [r2, r3]
 8000cb4:	e000      	b.n	8000cb8 <ssd1306_DrawPixel+0xd0>
        return;
 8000cb6:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b003      	add	sp, #12
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	200000e8 	.word	0x200000e8

08000cc4 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0004      	movs	r4, r0
 8000ccc:	0008      	movs	r0, r1
 8000cce:	603a      	str	r2, [r7, #0]
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	1c22      	adds	r2, r4, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	1dbb      	adds	r3, r7, #6
 8000cda:	1c02      	adds	r2, r0, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	1d7b      	adds	r3, r7, #5
 8000ce0:	1c0a      	adds	r2, r1, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000ce4:	1d7b      	adds	r3, r7, #5
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	3307      	adds	r3, #7
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	da00      	bge.n	8000cf0 <ssd1306_DrawBitmap+0x2c>
 8000cee:	3307      	adds	r3, #7
 8000cf0:	10db      	asrs	r3, r3, #3
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b81      	cmp	r3, #129	@ 0x81
 8000d08:	d865      	bhi.n	8000dd6 <ssd1306_DrawBitmap+0x112>
 8000d0a:	1dbb      	adds	r3, r7, #6
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d10:	d861      	bhi.n	8000dd6 <ssd1306_DrawBitmap+0x112>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000d12:	230e      	movs	r3, #14
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e053      	b.n	8000dc4 <ssd1306_DrawBitmap+0x100>
        for (uint8_t i = 0; i < w; i++) {
 8000d1c:	230d      	movs	r3, #13
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	e03c      	b.n	8000da0 <ssd1306_DrawBitmap+0xdc>
            if (i & 7) {
 8000d26:	230d      	movs	r3, #13
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d006      	beq.n	8000d40 <ssd1306_DrawBitmap+0x7c>
                byte <<= 1;
 8000d32:	230f      	movs	r3, #15
 8000d34:	18fa      	adds	r2, r7, r3
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	18db      	adds	r3, r3, r3
 8000d3c:	7013      	strb	r3, [r2, #0]
 8000d3e:	e014      	b.n	8000d6a <ssd1306_DrawBitmap+0xa6>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000d40:	230e      	movs	r3, #14
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	220a      	movs	r2, #10
 8000d48:	18ba      	adds	r2, r7, r2
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	5e52      	ldrsh	r2, [r2, r1]
 8000d4e:	4353      	muls	r3, r2
 8000d50:	220d      	movs	r2, #13
 8000d52:	18ba      	adds	r2, r7, r2
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	08d2      	lsrs	r2, r2, #3
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	189b      	adds	r3, r3, r2
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	189a      	adds	r2, r3, r2
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da0e      	bge.n	8000d94 <ssd1306_DrawBitmap+0xd0>
                ssd1306_DrawPixel(x + i, y, color);
 8000d76:	1dfa      	adds	r2, r7, #7
 8000d78:	230d      	movs	r3, #13
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	18d3      	adds	r3, r2, r3
 8000d82:	b2d8      	uxtb	r0, r3
 8000d84:	2324      	movs	r3, #36	@ 0x24
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	781a      	ldrb	r2, [r3, #0]
 8000d8a:	1dbb      	adds	r3, r7, #6
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	0019      	movs	r1, r3
 8000d90:	f7ff ff2a 	bl	8000be8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000d94:	210d      	movs	r1, #13
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	781a      	ldrb	r2, [r3, #0]
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	3201      	adds	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	230d      	movs	r3, #13
 8000da2:	18fa      	adds	r2, r7, r3
 8000da4:	1d7b      	adds	r3, r7, #5
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d3bb      	bcc.n	8000d26 <ssd1306_DrawBitmap+0x62>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000dae:	210e      	movs	r1, #14
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	3201      	adds	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	1dbb      	adds	r3, r7, #6
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	1dbb      	adds	r3, r7, #6
 8000dc0:	3201      	adds	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]
 8000dc4:	230e      	movs	r3, #14
 8000dc6:	18fa      	adds	r2, r7, r3
 8000dc8:	2320      	movs	r3, #32
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d3a3      	bcc.n	8000d1c <ssd1306_DrawBitmap+0x58>
            }
        }
    }
    return;
 8000dd4:	e000      	b.n	8000dd8 <ssd1306_DrawBitmap+0x114>
        return;
 8000dd6:	46c0      	nop			@ (mov r8, r8)
}
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b005      	add	sp, #20
 8000ddc:	bd90      	pop	{r4, r7, pc}

08000dde <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	0002      	movs	r2, r0
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000dea:	210f      	movs	r1, #15
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2281      	movs	r2, #129	@ 0x81
 8000df0:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff fe0a 	bl	8000a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff fe05 	bl	8000a10 <ssd1306_WriteCommand>
}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b004      	add	sp, #16
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	0002      	movs	r2, r0
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d007      	beq.n	8000e34 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	22af      	movs	r2, #175	@ 0xaf
 8000e2a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <ssd1306_SetDisplayOn+0x48>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	715a      	strb	r2, [r3, #5]
 8000e32:	e006      	b.n	8000e42 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8000e34:	230f      	movs	r3, #15
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	22ae      	movs	r2, #174	@ 0xae
 8000e3a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <ssd1306_SetDisplayOn+0x48>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000e42:	230f      	movs	r3, #15
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff fde1 	bl	8000a10 <ssd1306_WriteCommand>
}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b004      	add	sp, #16
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	200004f8 	.word	0x200004f8

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e68:	2101      	movs	r1, #1
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	2201      	movs	r2, #1
 8000e74:	4013      	ands	r3, r2
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e80:	2180      	movs	r1, #128	@ 0x80
 8000e82:	0549      	lsls	r1, r1, #21
 8000e84:	430a      	orrs	r2, r1
 8000e86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	055b      	lsls	r3, r3, #21
 8000e90:	4013      	ands	r3, r2
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b091      	sub	sp, #68	@ 0x44
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	232c      	movs	r3, #44	@ 0x2c
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	2314      	movs	r3, #20
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f002 f984 	bl	80031c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebc:	2414      	movs	r4, #20
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	2318      	movs	r3, #24
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f002 f97c 	bl	80031c4 <memset>
  if(hi2c->Instance==I2C1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a35      	ldr	r2, [pc, #212]	@ (8000fa8 <HAL_I2C_MspInit+0x104>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d163      	bne.n	8000f9e <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	2220      	movs	r2, #32
 8000eda:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f001 fde7 	bl	8002ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000eea:	1e03      	subs	r3, r0, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000eee:	f7ff fd83 	bl	80009f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <HAL_I2C_MspInit+0x108>)
 8000ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8000fac <HAL_I2C_MspInit+0x108>)
 8000ef8:	2102      	movs	r1, #2
 8000efa:	430a      	orrs	r2, r1
 8000efc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000efe:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <HAL_I2C_MspInit+0x108>)
 8000f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f02:	2202      	movs	r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <HAL_I2C_MspInit+0x108>)
 8000f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f0e:	4b27      	ldr	r3, [pc, #156]	@ (8000fac <HAL_I2C_MspInit+0x108>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	430a      	orrs	r2, r1
 8000f14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <HAL_I2C_MspInit+0x108>)
 8000f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f22:	212c      	movs	r1, #44	@ 0x2c
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2c:	000c      	movs	r4, r1
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2212      	movs	r2, #18
 8000f32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2201      	movs	r2, #1
 8000f38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	2206      	movs	r2, #6
 8000f44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	4a19      	ldr	r2, [pc, #100]	@ (8000fb0 <HAL_I2C_MspInit+0x10c>)
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	0010      	movs	r0, r2
 8000f4e:	f000 fa33 	bl	80013b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f52:	0021      	movs	r1, r4
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2212      	movs	r2, #18
 8000f60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2201      	movs	r2, #1
 8000f66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2206      	movs	r2, #6
 8000f72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	187a      	adds	r2, r7, r1
 8000f76:	23a0      	movs	r3, #160	@ 0xa0
 8000f78:	05db      	lsls	r3, r3, #23
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 fa1b 	bl	80013b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_I2C_MspInit+0x108>)
 8000f84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <HAL_I2C_MspInit+0x108>)
 8000f88:	2180      	movs	r1, #128	@ 0x80
 8000f8a:	0389      	lsls	r1, r1, #14
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_I2C_MspInit+0x108>)
 8000f92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	039b      	lsls	r3, r3, #14
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b011      	add	sp, #68	@ 0x44
 8000fa4:	bd90      	pop	{r4, r7, pc}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	50000400 	.word	0x50000400

08000fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <HAL_TIM_Base_MspInit+0x38>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10d      	bne.n	8000fe2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	0209      	lsls	r1, r1, #8
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	40002000 	.word	0x40002000
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	46c0      	nop			@ (mov r8, r8)
 8000ffa:	e7fd      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	e7fd      	b.n	8001000 <HardFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f8ae 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	46c0      	nop			@ (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <TIM14_IRQHandler+0x14>)
 8001036:	0018      	movs	r0, r3
 8001038:	f001 ff0a 	bl	8002e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	20000090 	.word	0x20000090

08001048 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001054:	480d      	ldr	r0, [pc, #52]	@ (800108c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001056:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001058:	f7ff fff6 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <LoopForever+0x6>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	@ (8001094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <LoopForever+0xe>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	@ (80010a0 <LoopForever+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001082:	f002 f8a7 	bl	80031d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001086:	f7ff fa19 	bl	80004bc <main>

0800108a <LoopForever>:

LoopForever:
  b LoopForever
 800108a:	e7fe      	b.n	800108a <LoopForever>
  ldr   r0, =_estack
 800108c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001098:	08005e7c 	.word	0x08005e7c
  ldr r2, =_sbss
 800109c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80010a0:	20000504 	.word	0x20000504

080010a4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <HAL_Init+0x3c>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_Init+0x3c>)
 80010ba:	2180      	movs	r1, #128	@ 0x80
 80010bc:	0049      	lsls	r1, r1, #1
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 f810 	bl	80010e8 <HAL_InitTick>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e001      	b.n	80010d8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fec2 	bl	8000e5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	781b      	ldrb	r3, [r3, #0]
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40022000 	.word	0x40022000

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	230f      	movs	r3, #15
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <HAL_InitTick+0x88>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d02b      	beq.n	8001158 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_InitTick+0x8c>)
 8001102:	681c      	ldr	r4, [r3, #0]
 8001104:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <HAL_InitTick+0x88>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	0019      	movs	r1, r3
 800110a:	23fa      	movs	r3, #250	@ 0xfa
 800110c:	0098      	lsls	r0, r3, #2
 800110e:	f7fe fff7 	bl	8000100 <__udivsi3>
 8001112:	0003      	movs	r3, r0
 8001114:	0019      	movs	r1, r3
 8001116:	0020      	movs	r0, r4
 8001118:	f7fe fff2 	bl	8000100 <__udivsi3>
 800111c:	0003      	movs	r3, r0
 800111e:	0018      	movs	r0, r3
 8001120:	f000 f93d 	bl	800139e <HAL_SYSTICK_Config>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d112      	bne.n	800114e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d80a      	bhi.n	8001144 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	2301      	movs	r3, #1
 8001132:	425b      	negs	r3, r3
 8001134:	2200      	movs	r2, #0
 8001136:	0018      	movs	r0, r3
 8001138:	f000 f90c 	bl	8001354 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800113c:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <HAL_InitTick+0x90>)
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e00d      	b.n	8001160 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001144:	230f      	movs	r3, #15
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e008      	b.n	8001160 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800114e:	230f      	movs	r3, #15
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	e003      	b.n	8001160 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001158:	230f      	movs	r3, #15
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001160:	230f      	movs	r3, #15
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	781b      	ldrb	r3, [r3, #0]
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b005      	add	sp, #20
 800116c:	bd90      	pop	{r4, r7, pc}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	2000001c 	.word	0x2000001c
 8001174:	20000014 	.word	0x20000014
 8001178:	20000018 	.word	0x20000018

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_IncTick+0x1c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	001a      	movs	r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	@ (800119c <HAL_IncTick+0x20>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	18d2      	adds	r2, r2, r3
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <HAL_IncTick+0x20>)
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	2000001c 	.word	0x2000001c
 800119c:	20000500 	.word	0x20000500

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b02      	ldr	r3, [pc, #8]	@ (80011b0 <HAL_GetTick+0x10>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	20000500 	.word	0x20000500

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff fff0 	bl	80011a0 <HAL_GetTick>
 80011c0:	0003      	movs	r3, r0
 80011c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	001a      	movs	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	189b      	adds	r3, r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	f7ff ffe0 	bl	80011a0 <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	46c0      	nop			@ (mov r8, r8)
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b004      	add	sp, #16
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	2000001c 	.word	0x2000001c

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	0002      	movs	r2, r0
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b7f      	cmp	r3, #127	@ 0x7f
 800120e:	d809      	bhi.n	8001224 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	001a      	movs	r2, r3
 8001216:	231f      	movs	r3, #31
 8001218:	401a      	ands	r2, r3
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__NVIC_EnableIRQ+0x30>)
 800121c:	2101      	movs	r1, #1
 800121e:	4091      	lsls	r1, r2
 8001220:	000a      	movs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b002      	add	sp, #8
 800122a:	bd80      	pop	{r7, pc}
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	0002      	movs	r2, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b7f      	cmp	r3, #127	@ 0x7f
 8001244:	d828      	bhi.n	8001298 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001246:	4a2f      	ldr	r2, [pc, #188]	@ (8001304 <__NVIC_SetPriority+0xd4>)
 8001248:	1dfb      	adds	r3, r7, #7
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b25b      	sxtb	r3, r3
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	33c0      	adds	r3, #192	@ 0xc0
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	589b      	ldr	r3, [r3, r2]
 8001256:	1dfa      	adds	r2, r7, #7
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	0011      	movs	r1, r2
 800125c:	2203      	movs	r2, #3
 800125e:	400a      	ands	r2, r1
 8001260:	00d2      	lsls	r2, r2, #3
 8001262:	21ff      	movs	r1, #255	@ 0xff
 8001264:	4091      	lsls	r1, r2
 8001266:	000a      	movs	r2, r1
 8001268:	43d2      	mvns	r2, r2
 800126a:	401a      	ands	r2, r3
 800126c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	019b      	lsls	r3, r3, #6
 8001272:	22ff      	movs	r2, #255	@ 0xff
 8001274:	401a      	ands	r2, r3
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	0018      	movs	r0, r3
 800127c:	2303      	movs	r3, #3
 800127e:	4003      	ands	r3, r0
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001284:	481f      	ldr	r0, [pc, #124]	@ (8001304 <__NVIC_SetPriority+0xd4>)
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b25b      	sxtb	r3, r3
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	430a      	orrs	r2, r1
 8001290:	33c0      	adds	r3, #192	@ 0xc0
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001296:	e031      	b.n	80012fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001298:	4a1b      	ldr	r2, [pc, #108]	@ (8001308 <__NVIC_SetPriority+0xd8>)
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	0019      	movs	r1, r3
 80012a0:	230f      	movs	r3, #15
 80012a2:	400b      	ands	r3, r1
 80012a4:	3b08      	subs	r3, #8
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3306      	adds	r3, #6
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	18d3      	adds	r3, r2, r3
 80012ae:	3304      	adds	r3, #4
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	1dfa      	adds	r2, r7, #7
 80012b4:	7812      	ldrb	r2, [r2, #0]
 80012b6:	0011      	movs	r1, r2
 80012b8:	2203      	movs	r2, #3
 80012ba:	400a      	ands	r2, r1
 80012bc:	00d2      	lsls	r2, r2, #3
 80012be:	21ff      	movs	r1, #255	@ 0xff
 80012c0:	4091      	lsls	r1, r2
 80012c2:	000a      	movs	r2, r1
 80012c4:	43d2      	mvns	r2, r2
 80012c6:	401a      	ands	r2, r3
 80012c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	019b      	lsls	r3, r3, #6
 80012ce:	22ff      	movs	r2, #255	@ 0xff
 80012d0:	401a      	ands	r2, r3
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	0018      	movs	r0, r3
 80012d8:	2303      	movs	r3, #3
 80012da:	4003      	ands	r3, r0
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e0:	4809      	ldr	r0, [pc, #36]	@ (8001308 <__NVIC_SetPriority+0xd8>)
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	001c      	movs	r4, r3
 80012e8:	230f      	movs	r3, #15
 80012ea:	4023      	ands	r3, r4
 80012ec:	3b08      	subs	r3, #8
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	430a      	orrs	r2, r1
 80012f2:	3306      	adds	r3, #6
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	18c3      	adds	r3, r0, r3
 80012f8:	3304      	adds	r3, #4
 80012fa:	601a      	str	r2, [r3, #0]
}
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b003      	add	sp, #12
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	1e5a      	subs	r2, r3, #1
 8001318:	2380      	movs	r3, #128	@ 0x80
 800131a:	045b      	lsls	r3, r3, #17
 800131c:	429a      	cmp	r2, r3
 800131e:	d301      	bcc.n	8001324 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001320:	2301      	movs	r3, #1
 8001322:	e010      	b.n	8001346 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001324:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <SysTick_Config+0x44>)
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	3a01      	subs	r2, #1
 800132a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132c:	2301      	movs	r3, #1
 800132e:	425b      	negs	r3, r3
 8001330:	2103      	movs	r1, #3
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff ff7c 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <SysTick_Config+0x44>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <SysTick_Config+0x44>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	0018      	movs	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	b002      	add	sp, #8
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	210f      	movs	r1, #15
 8001360:	187b      	adds	r3, r7, r1
 8001362:	1c02      	adds	r2, r0, #0
 8001364:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	187b      	adds	r3, r7, r1
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b25b      	sxtb	r3, r3
 800136e:	0011      	movs	r1, r2
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b004      	add	sp, #16
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	0002      	movs	r2, r0
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff ff33 	bl	80011fc <__NVIC_EnableIRQ>
}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff ffaf 	bl	800130c <SysTick_Config>
 80013ae:	0003      	movs	r3, r0
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c6:	e147      	b.n	8001658 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2101      	movs	r1, #1
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4091      	lsls	r1, r2
 80013d2:	000a      	movs	r2, r1
 80013d4:	4013      	ands	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d100      	bne.n	80013e0 <HAL_GPIO_Init+0x28>
 80013de:	e138      	b.n	8001652 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2203      	movs	r2, #3
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d005      	beq.n	80013f8 <HAL_GPIO_Init+0x40>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d130      	bne.n	800145a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	409a      	lsls	r2, r3
 8001406:	0013      	movs	r3, r2
 8001408:	43da      	mvns	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	409a      	lsls	r2, r3
 800141a:	0013      	movs	r3, r2
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142e:	2201      	movs	r2, #1
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	43da      	mvns	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	2201      	movs	r2, #1
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2203      	movs	r2, #3
 8001460:	4013      	ands	r3, r2
 8001462:	2b03      	cmp	r3, #3
 8001464:	d017      	beq.n	8001496 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	409a      	lsls	r2, r3
 8001488:	0013      	movs	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	4013      	ands	r3, r2
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d123      	bne.n	80014ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	58d3      	ldr	r3, [r2, r3]
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2207      	movs	r2, #7
 80014b4:	4013      	ands	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	409a      	lsls	r2, r3
 80014bc:	0013      	movs	r3, r2
 80014be:	43da      	mvns	r2, r3
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2107      	movs	r1, #7
 80014ce:	400b      	ands	r3, r1
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	409a      	lsls	r2, r3
 80014d4:	0013      	movs	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	08da      	lsrs	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3208      	adds	r2, #8
 80014e4:	0092      	lsls	r2, r2, #2
 80014e6:	6939      	ldr	r1, [r7, #16]
 80014e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	43da      	mvns	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2203      	movs	r2, #3
 8001508:	401a      	ands	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	409a      	lsls	r2, r3
 8001510:	0013      	movs	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	23c0      	movs	r3, #192	@ 0xc0
 8001524:	029b      	lsls	r3, r3, #10
 8001526:	4013      	ands	r3, r2
 8001528:	d100      	bne.n	800152c <HAL_GPIO_Init+0x174>
 800152a:	e092      	b.n	8001652 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800152c:	4a50      	ldr	r2, [pc, #320]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3318      	adds	r3, #24
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	589b      	ldr	r3, [r3, r2]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2203      	movs	r2, #3
 800153e:	4013      	ands	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	220f      	movs	r2, #15
 8001544:	409a      	lsls	r2, r3
 8001546:	0013      	movs	r3, r2
 8001548:	43da      	mvns	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	23a0      	movs	r3, #160	@ 0xa0
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	429a      	cmp	r2, r3
 8001558:	d013      	beq.n	8001582 <HAL_GPIO_Init+0x1ca>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a45      	ldr	r2, [pc, #276]	@ (8001674 <HAL_GPIO_Init+0x2bc>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d00d      	beq.n	800157e <HAL_GPIO_Init+0x1c6>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a44      	ldr	r2, [pc, #272]	@ (8001678 <HAL_GPIO_Init+0x2c0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d007      	beq.n	800157a <HAL_GPIO_Init+0x1c2>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a43      	ldr	r2, [pc, #268]	@ (800167c <HAL_GPIO_Init+0x2c4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d101      	bne.n	8001576 <HAL_GPIO_Init+0x1be>
 8001572:	2303      	movs	r3, #3
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x1cc>
 8001576:	2305      	movs	r3, #5
 8001578:	e004      	b.n	8001584 <HAL_GPIO_Init+0x1cc>
 800157a:	2302      	movs	r3, #2
 800157c:	e002      	b.n	8001584 <HAL_GPIO_Init+0x1cc>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_GPIO_Init+0x1cc>
 8001582:	2300      	movs	r3, #0
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	2103      	movs	r1, #3
 8001588:	400a      	ands	r2, r1
 800158a:	00d2      	lsls	r2, r2, #3
 800158c:	4093      	lsls	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001594:	4936      	ldr	r1, [pc, #216]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3318      	adds	r3, #24
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a2:	4b33      	ldr	r3, [pc, #204]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	035b      	lsls	r3, r3, #13
 80015ba:	4013      	ands	r3, r2
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015cc:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43da      	mvns	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	039b      	lsls	r3, r3, #14
 80015e4:	4013      	ands	r3, r2
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 80015f8:	2384      	movs	r3, #132	@ 0x84
 80015fa:	58d3      	ldr	r3, [r2, r3]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43da      	mvns	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	029b      	lsls	r3, r3, #10
 8001610:	4013      	ands	r3, r2
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800161c:	4914      	ldr	r1, [pc, #80]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 800161e:	2284      	movs	r2, #132	@ 0x84
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001624:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	58d3      	ldr	r3, [r2, r3]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43da      	mvns	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	025b      	lsls	r3, r3, #9
 800163e:	4013      	ands	r3, r2
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800164a:	4909      	ldr	r1, [pc, #36]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 800164c:	2280      	movs	r2, #128	@ 0x80
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	40da      	lsrs	r2, r3
 8001660:	1e13      	subs	r3, r2, #0
 8001662:	d000      	beq.n	8001666 <HAL_GPIO_Init+0x2ae>
 8001664:	e6b0      	b.n	80013c8 <HAL_GPIO_Init+0x10>
  }
}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	46c0      	nop			@ (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b006      	add	sp, #24
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021800 	.word	0x40021800
 8001674:	50000400 	.word	0x50000400
 8001678:	50000800 	.word	0x50000800
 800167c:	50000c00 	.word	0x50000c00

08001680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	000a      	movs	r2, r1
 800168a:	1cbb      	adds	r3, r7, #2
 800168c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	1cba      	adds	r2, r7, #2
 8001694:	8812      	ldrh	r2, [r2, #0]
 8001696:	4013      	ands	r3, r2
 8001698:	d004      	beq.n	80016a4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800169a:	230f      	movs	r3, #15
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	e003      	b.n	80016ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016a4:	230f      	movs	r3, #15
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80016ac:	230f      	movs	r3, #15
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	781b      	ldrb	r3, [r3, #0]
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b004      	add	sp, #16
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e08f      	b.n	80017ee <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2241      	movs	r2, #65	@ 0x41
 80016d2:	5c9b      	ldrb	r3, [r3, r2]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d107      	bne.n	80016ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2240      	movs	r2, #64	@ 0x40
 80016de:	2100      	movs	r1, #0
 80016e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff fbdd 	bl	8000ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2241      	movs	r2, #65	@ 0x41
 80016ee:	2124      	movs	r1, #36	@ 0x24
 80016f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	438a      	bics	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	493b      	ldr	r1, [pc, #236]	@ (80017f8 <HAL_I2C_Init+0x13c>)
 800170c:	400a      	ands	r2, r1
 800170e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4938      	ldr	r1, [pc, #224]	@ (80017fc <HAL_I2C_Init+0x140>)
 800171c:	400a      	ands	r2, r1
 800171e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d108      	bne.n	800173a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2180      	movs	r1, #128	@ 0x80
 8001732:	0209      	lsls	r1, r1, #8
 8001734:	430a      	orrs	r2, r1
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	e007      	b.n	800174a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2184      	movs	r1, #132	@ 0x84
 8001744:	0209      	lsls	r1, r1, #8
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d109      	bne.n	8001766 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2180      	movs	r1, #128	@ 0x80
 800175e:	0109      	lsls	r1, r1, #4
 8001760:	430a      	orrs	r2, r1
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	e007      	b.n	8001776 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4923      	ldr	r1, [pc, #140]	@ (8001800 <HAL_I2C_Init+0x144>)
 8001772:	400a      	ands	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4920      	ldr	r1, [pc, #128]	@ (8001804 <HAL_I2C_Init+0x148>)
 8001782:	430a      	orrs	r2, r1
 8001784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	491a      	ldr	r1, [pc, #104]	@ (80017fc <HAL_I2C_Init+0x140>)
 8001792:	400a      	ands	r2, r1
 8001794:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691a      	ldr	r2, [r3, #16]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	431a      	orrs	r2, r3
 80017a0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69d9      	ldr	r1, [r3, #28]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2101      	movs	r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2241      	movs	r2, #65	@ 0x41
 80017da:	2120      	movs	r1, #32
 80017dc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2242      	movs	r2, #66	@ 0x42
 80017e8:	2100      	movs	r1, #0
 80017ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	f0ffffff 	.word	0xf0ffffff
 80017fc:	ffff7fff 	.word	0xffff7fff
 8001800:	fffff7ff 	.word	0xfffff7ff
 8001804:	02008000 	.word	0x02008000

08001808 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af02      	add	r7, sp, #8
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	000c      	movs	r4, r1
 8001812:	0010      	movs	r0, r2
 8001814:	0019      	movs	r1, r3
 8001816:	230a      	movs	r3, #10
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	1c22      	adds	r2, r4, #0
 800181c:	801a      	strh	r2, [r3, #0]
 800181e:	2308      	movs	r3, #8
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	1c02      	adds	r2, r0, #0
 8001824:	801a      	strh	r2, [r3, #0]
 8001826:	1dbb      	adds	r3, r7, #6
 8001828:	1c0a      	adds	r2, r1, #0
 800182a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2241      	movs	r2, #65	@ 0x41
 8001830:	5c9b      	ldrb	r3, [r3, r2]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b20      	cmp	r3, #32
 8001836:	d000      	beq.n	800183a <HAL_I2C_Mem_Write+0x32>
 8001838:	e10c      	b.n	8001a54 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800183a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_I2C_Mem_Write+0x42>
 8001840:	232c      	movs	r3, #44	@ 0x2c
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d105      	bne.n	8001856 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2280      	movs	r2, #128	@ 0x80
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0ff      	b.n	8001a56 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2240      	movs	r2, #64	@ 0x40
 800185a:	5c9b      	ldrb	r3, [r3, r2]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_I2C_Mem_Write+0x5c>
 8001860:	2302      	movs	r3, #2
 8001862:	e0f8      	b.n	8001a56 <HAL_I2C_Mem_Write+0x24e>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2240      	movs	r2, #64	@ 0x40
 8001868:	2101      	movs	r1, #1
 800186a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800186c:	f7ff fc98 	bl	80011a0 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001874:	2380      	movs	r3, #128	@ 0x80
 8001876:	0219      	lsls	r1, r3, #8
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2319      	movs	r3, #25
 8001880:	2201      	movs	r2, #1
 8001882:	f000 f975 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 8001886:	1e03      	subs	r3, r0, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0e3      	b.n	8001a56 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2241      	movs	r2, #65	@ 0x41
 8001892:	2121      	movs	r1, #33	@ 0x21
 8001894:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2242      	movs	r2, #66	@ 0x42
 800189a:	2140      	movs	r1, #64	@ 0x40
 800189c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	222c      	movs	r2, #44	@ 0x2c
 80018ae:	18ba      	adds	r2, r7, r2
 80018b0:	8812      	ldrh	r2, [r2, #0]
 80018b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018ba:	1dbb      	adds	r3, r7, #6
 80018bc:	881c      	ldrh	r4, [r3, #0]
 80018be:	2308      	movs	r3, #8
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	881a      	ldrh	r2, [r3, #0]
 80018c4:	230a      	movs	r3, #10
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	8819      	ldrh	r1, [r3, #0]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	0023      	movs	r3, r4
 80018d6:	f000 f8c5 	bl	8001a64 <I2C_RequestMemoryWrite>
 80018da:	1e03      	subs	r3, r0, #0
 80018dc:	d005      	beq.n	80018ea <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2240      	movs	r2, #64	@ 0x40
 80018e2:	2100      	movs	r1, #0
 80018e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0b5      	b.n	8001a56 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	2bff      	cmp	r3, #255	@ 0xff
 80018f2:	d911      	bls.n	8001918 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	22ff      	movs	r2, #255	@ 0xff
 80018f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	2380      	movs	r3, #128	@ 0x80
 8001902:	045c      	lsls	r4, r3, #17
 8001904:	230a      	movs	r3, #10
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	8819      	ldrh	r1, [r3, #0]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	2300      	movs	r3, #0
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	0023      	movs	r3, r4
 8001912:	f000 fb07 	bl	8001f24 <I2C_TransferConfig>
 8001916:	e012      	b.n	800193e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001926:	b2da      	uxtb	r2, r3
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	049c      	lsls	r4, r3, #18
 800192c:	230a      	movs	r3, #10
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	8819      	ldrh	r1, [r3, #0]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	2300      	movs	r3, #0
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	0023      	movs	r3, r4
 800193a:	f000 faf3 	bl	8001f24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	0018      	movs	r0, r3
 8001946:	f000 f96b 	bl	8001c20 <I2C_WaitOnTXISFlagUntilTimeout>
 800194a:	1e03      	subs	r3, r0, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e081      	b.n	8001a56 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196c:	b29b      	uxth	r3, r3
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800197a:	3b01      	subs	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001986:	b29b      	uxth	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d03a      	beq.n	8001a02 <HAL_I2C_Mem_Write+0x1fa>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	d136      	bne.n	8001a02 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	0013      	movs	r3, r2
 800199e:	2200      	movs	r2, #0
 80019a0:	2180      	movs	r1, #128	@ 0x80
 80019a2:	f000 f8e5 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e053      	b.n	8001a56 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2bff      	cmp	r3, #255	@ 0xff
 80019b6:	d911      	bls.n	80019dc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	22ff      	movs	r2, #255	@ 0xff
 80019bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	045c      	lsls	r4, r3, #17
 80019c8:	230a      	movs	r3, #10
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	8819      	ldrh	r1, [r3, #0]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	0023      	movs	r3, r4
 80019d6:	f000 faa5 	bl	8001f24 <I2C_TransferConfig>
 80019da:	e012      	b.n	8001a02 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	049c      	lsls	r4, r3, #18
 80019f0:	230a      	movs	r3, #10
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	8819      	ldrh	r1, [r3, #0]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	2300      	movs	r3, #0
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	0023      	movs	r3, r4
 80019fe:	f000 fa91 	bl	8001f24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d198      	bne.n	800193e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 f94a 	bl	8001cac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a18:	1e03      	subs	r3, r0, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e01a      	b.n	8001a56 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2220      	movs	r2, #32
 8001a26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	490b      	ldr	r1, [pc, #44]	@ (8001a60 <HAL_I2C_Mem_Write+0x258>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2241      	movs	r2, #65	@ 0x41
 8001a3c:	2120      	movs	r1, #32
 8001a3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2242      	movs	r2, #66	@ 0x42
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2240      	movs	r2, #64	@ 0x40
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e000      	b.n	8001a56 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001a54:	2302      	movs	r3, #2
  }
}
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b007      	add	sp, #28
 8001a5c:	bd90      	pop	{r4, r7, pc}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	fe00e800 	.word	0xfe00e800

08001a64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a64:	b5b0      	push	{r4, r5, r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	000c      	movs	r4, r1
 8001a6e:	0010      	movs	r0, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	250a      	movs	r5, #10
 8001a74:	197b      	adds	r3, r7, r5
 8001a76:	1c22      	adds	r2, r4, #0
 8001a78:	801a      	strh	r2, [r3, #0]
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	1c02      	adds	r2, r0, #0
 8001a80:	801a      	strh	r2, [r3, #0]
 8001a82:	1dbb      	adds	r3, r7, #6
 8001a84:	1c0a      	adds	r2, r1, #0
 8001a86:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a88:	1dbb      	adds	r3, r7, #6
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	2380      	movs	r3, #128	@ 0x80
 8001a90:	045c      	lsls	r4, r3, #17
 8001a92:	197b      	adds	r3, r7, r5
 8001a94:	8819      	ldrh	r1, [r3, #0]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <I2C_RequestMemoryWrite+0xc4>)
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	0023      	movs	r3, r4
 8001a9e:	f000 fa41 	bl	8001f24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa4:	6a39      	ldr	r1, [r7, #32]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 f8b9 	bl	8001c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e033      	b.n	8001b1e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ab6:	1dbb      	adds	r3, r7, #6
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001abe:	2308      	movs	r3, #8
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
 8001acc:	e019      	b.n	8001b02 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ace:	2308      	movs	r3, #8
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae2:	6a39      	ldr	r1, [r7, #32]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 f89a 	bl	8001c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aec:	1e03      	subs	r3, r0, #0
 8001aee:	d001      	beq.n	8001af4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e014      	b.n	8001b1e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001af4:	2308      	movs	r3, #8
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b02:	6a3a      	ldr	r2, [r7, #32]
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	0013      	movs	r3, r2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2180      	movs	r1, #128	@ 0x80
 8001b10:	f000 f82e 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d001      	beq.n	8001b1c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b004      	add	sp, #16
 8001b24:	bdb0      	pop	{r4, r5, r7, pc}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	80002000 	.word	0x80002000

08001b2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d103      	bne.n	8001b4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2201      	movs	r2, #1
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d007      	beq.n	8001b68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2101      	movs	r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	619a      	str	r2, [r3, #24]
  }
}
 8001b68:	46c0      	nop			@ (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b80:	e03a      	b.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 f8d3 	bl	8001d34 <I2C_IsErrorOccurred>
 8001b8e:	1e03      	subs	r3, r0, #0
 8001b90:	d001      	beq.n	8001b96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e040      	b.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	d02d      	beq.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b9c:	f7ff fb00 	bl	80011a0 <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d302      	bcc.n	8001bb2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d122      	bne.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	425a      	negs	r2, r3
 8001bc2:	4153      	adcs	r3, r2
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	1dfb      	adds	r3, r7, #7
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d113      	bne.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2241      	movs	r2, #65	@ 0x41
 8001be0:	2120      	movs	r1, #32
 8001be2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2242      	movs	r2, #66	@ 0x42
 8001be8:	2100      	movs	r1, #0
 8001bea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2240      	movs	r2, #64	@ 0x40
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e00f      	b.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4013      	ands	r3, r2
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	425a      	negs	r2, r3
 8001c08:	4153      	adcs	r3, r2
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d0b5      	beq.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c2c:	e032      	b.n	8001c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	0018      	movs	r0, r3
 8001c36:	f000 f87d 	bl	8001d34 <I2C_IsErrorOccurred>
 8001c3a:	1e03      	subs	r3, r0, #0
 8001c3c:	d001      	beq.n	8001c42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e030      	b.n	8001ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3301      	adds	r3, #1
 8001c46:	d025      	beq.n	8001c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c48:	f7ff faaa 	bl	80011a0 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d302      	bcc.n	8001c5e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d11a      	bne.n	8001c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2202      	movs	r2, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d013      	beq.n	8001c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c70:	2220      	movs	r2, #32
 8001c72:	431a      	orrs	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2241      	movs	r2, #65	@ 0x41
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2242      	movs	r2, #66	@ 0x42
 8001c84:	2100      	movs	r1, #0
 8001c86:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2240      	movs	r2, #64	@ 0x40
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e007      	b.n	8001ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d1c5      	bne.n	8001c2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b004      	add	sp, #16
 8001caa:	bd80      	pop	{r7, pc}

08001cac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb8:	e02f      	b.n	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f000 f837 	bl	8001d34 <I2C_IsErrorOccurred>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d001      	beq.n	8001cce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e02d      	b.n	8001d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cce:	f7ff fa67 	bl	80011a0 <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d302      	bcc.n	8001ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d11a      	bne.n	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2220      	movs	r2, #32
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b20      	cmp	r3, #32
 8001cf0:	d013      	beq.n	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2241      	movs	r2, #65	@ 0x41
 8001d02:	2120      	movs	r1, #32
 8001d04:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2242      	movs	r2, #66	@ 0x42
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2240      	movs	r2, #64	@ 0x40
 8001d12:	2100      	movs	r1, #0
 8001d14:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e007      	b.n	8001d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2220      	movs	r2, #32
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d1c8      	bne.n	8001cba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2327      	movs	r3, #39	@ 0x27
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d100      	bne.n	8001d62 <I2C_IsErrorOccurred+0x2e>
 8001d60:	e079      	b.n	8001e56 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2210      	movs	r2, #16
 8001d68:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d6a:	e057      	b.n	8001e1c <I2C_IsErrorOccurred+0xe8>
 8001d6c:	2227      	movs	r2, #39	@ 0x27
 8001d6e:	18bb      	adds	r3, r7, r2
 8001d70:	18ba      	adds	r2, r7, r2
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	d04f      	beq.n	8001e1c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d7c:	f7ff fa10 	bl	80011a0 <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d302      	bcc.n	8001d92 <I2C_IsErrorOccurred+0x5e>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d144      	bne.n	8001e1c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	01db      	lsls	r3, r3, #7
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001da0:	2013      	movs	r0, #19
 8001da2:	183b      	adds	r3, r7, r0
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	2142      	movs	r1, #66	@ 0x42
 8001da8:	5c52      	ldrb	r2, [r2, r1]
 8001daa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	401a      	ands	r2, r3
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d126      	bne.n	8001e0e <I2C_IsErrorOccurred+0xda>
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	2380      	movs	r3, #128	@ 0x80
 8001dc4:	01db      	lsls	r3, r3, #7
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d021      	beq.n	8001e0e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001dca:	183b      	adds	r3, r7, r0
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	d01d      	beq.n	8001e0e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	01c9      	lsls	r1, r1, #7
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001de4:	f7ff f9dc 	bl	80011a0 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dec:	e00f      	b.n	8001e0e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001dee:	f7ff f9d7 	bl	80011a0 <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b19      	cmp	r3, #25
 8001dfa:	d908      	bls.n	8001e0e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	4313      	orrs	r3, r2
 8001e02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e04:	2327      	movs	r3, #39	@ 0x27
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]

              break;
 8001e0c:	e006      	b.n	8001e1c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2220      	movs	r2, #32
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d1e8      	bne.n	8001dee <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2220      	movs	r2, #32
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d004      	beq.n	8001e34 <I2C_IsErrorOccurred+0x100>
 8001e2a:	2327      	movs	r3, #39	@ 0x27
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d09b      	beq.n	8001d6c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e34:	2327      	movs	r3, #39	@ 0x27
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d103      	bne.n	8001e46 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2220      	movs	r2, #32
 8001e44:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e4e:	2327      	movs	r3, #39	@ 0x27
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	2380      	movs	r3, #128	@ 0x80
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	d00c      	beq.n	8001e82 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2280      	movs	r2, #128	@ 0x80
 8001e76:	0052      	lsls	r2, r2, #1
 8001e78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e7a:	2327      	movs	r3, #39	@ 0x27
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d00c      	beq.n	8001ea6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	2208      	movs	r2, #8
 8001e90:	4313      	orrs	r3, r2
 8001e92:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2280      	movs	r2, #128	@ 0x80
 8001e9a:	00d2      	lsls	r2, r2, #3
 8001e9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e9e:	2327      	movs	r3, #39	@ 0x27
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d00c      	beq.n	8001eca <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2280      	movs	r2, #128	@ 0x80
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ec2:	2327      	movs	r3, #39	@ 0x27
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001eca:	2327      	movs	r3, #39	@ 0x27
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01d      	beq.n	8001f10 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff fe28 	bl	8001b2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	490e      	ldr	r1, [pc, #56]	@ (8001f20 <I2C_IsErrorOccurred+0x1ec>)
 8001ee8:	400a      	ands	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2241      	movs	r2, #65	@ 0x41
 8001efc:	2120      	movs	r1, #32
 8001efe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2242      	movs	r2, #66	@ 0x42
 8001f04:	2100      	movs	r1, #0
 8001f06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2240      	movs	r2, #64	@ 0x40
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001f10:	2327      	movs	r3, #39	@ 0x27
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	781b      	ldrb	r3, [r3, #0]
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b00a      	add	sp, #40	@ 0x28
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	fe00e800 	.word	0xfe00e800

08001f24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	0008      	movs	r0, r1
 8001f2e:	0011      	movs	r1, r2
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	240a      	movs	r4, #10
 8001f34:	193b      	adds	r3, r7, r4
 8001f36:	1c02      	adds	r2, r0, #0
 8001f38:	801a      	strh	r2, [r3, #0]
 8001f3a:	2009      	movs	r0, #9
 8001f3c:	183b      	adds	r3, r7, r0
 8001f3e:	1c0a      	adds	r2, r1, #0
 8001f40:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f42:	193b      	adds	r3, r7, r4
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	059b      	lsls	r3, r3, #22
 8001f48:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f4a:	183b      	adds	r3, r7, r0
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	0419      	lsls	r1, r3, #16
 8001f50:	23ff      	movs	r3, #255	@ 0xff
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f56:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f6e:	0d51      	lsrs	r1, r2, #21
 8001f70:	2280      	movs	r2, #128	@ 0x80
 8001f72:	00d2      	lsls	r2, r2, #3
 8001f74:	400a      	ands	r2, r1
 8001f76:	4907      	ldr	r1, [pc, #28]	@ (8001f94 <I2C_TransferConfig+0x70>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	43d2      	mvns	r2, r2
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	0011      	movs	r1, r2
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b007      	add	sp, #28
 8001f90:	bd90      	pop	{r4, r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	03ff63ff 	.word	0x03ff63ff

08001f98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2241      	movs	r2, #65	@ 0x41
 8001fa6:	5c9b      	ldrb	r3, [r3, r2]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d138      	bne.n	8002020 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2240      	movs	r2, #64	@ 0x40
 8001fb2:	5c9b      	ldrb	r3, [r3, r2]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e032      	b.n	8002022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2240      	movs	r2, #64	@ 0x40
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2241      	movs	r2, #65	@ 0x41
 8001fc8:	2124      	movs	r1, #36	@ 0x24
 8001fca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	438a      	bics	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4911      	ldr	r1, [pc, #68]	@ (800202c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6819      	ldr	r1, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2101      	movs	r1, #1
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2241      	movs	r2, #65	@ 0x41
 8002010:	2120      	movs	r1, #32
 8002012:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2240      	movs	r2, #64	@ 0x40
 8002018:	2100      	movs	r1, #0
 800201a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002020:	2302      	movs	r3, #2
  }
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b002      	add	sp, #8
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	ffffefff 	.word	0xffffefff

08002030 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2241      	movs	r2, #65	@ 0x41
 800203e:	5c9b      	ldrb	r3, [r3, r2]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b20      	cmp	r3, #32
 8002044:	d139      	bne.n	80020ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2240      	movs	r2, #64	@ 0x40
 800204a:	5c9b      	ldrb	r3, [r3, r2]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002050:	2302      	movs	r3, #2
 8002052:	e033      	b.n	80020bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2240      	movs	r2, #64	@ 0x40
 8002058:	2101      	movs	r1, #1
 800205a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2241      	movs	r2, #65	@ 0x41
 8002060:	2124      	movs	r1, #36	@ 0x24
 8002062:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2101      	movs	r1, #1
 8002070:	438a      	bics	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a11      	ldr	r2, [pc, #68]	@ (80020c4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2101      	movs	r1, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2241      	movs	r2, #65	@ 0x41
 80020aa:	2120      	movs	r1, #32
 80020ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2240      	movs	r2, #64	@ 0x40
 80020b2:	2100      	movs	r1, #0
 80020b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020ba:	2302      	movs	r3, #2
  }
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	fffff0ff 	.word	0xfffff0ff

080020c8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d0:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <HAL_I2CEx_EnableFastModePlus+0x34>)
 80020d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <HAL_I2CEx_EnableFastModePlus+0x34>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	430a      	orrs	r2, r1
 80020da:	641a      	str	r2, [r3, #64]	@ 0x40
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <HAL_I2CEx_EnableFastModePlus+0x34>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	2201      	movs	r2, #1
 80020e2:	4013      	ands	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80020ea:	6819      	ldr	r1, [r3, #0]
 80020ec:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
}
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b004      	add	sp, #16
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010000 	.word	0x40010000

08002104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800210c:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a19      	ldr	r2, [pc, #100]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002112:	4013      	ands	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	2380      	movs	r3, #128	@ 0x80
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d11f      	bne.n	8002168 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002128:	4b14      	ldr	r3, [pc, #80]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	0013      	movs	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	189b      	adds	r3, r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4912      	ldr	r1, [pc, #72]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002136:	0018      	movs	r0, r3
 8002138:	f7fd ffe2 	bl	8000100 <__udivsi3>
 800213c:	0003      	movs	r3, r0
 800213e:	3301      	adds	r3, #1
 8002140:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002142:	e008      	b.n	8002156 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3b01      	subs	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e001      	b.n	8002156 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e009      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002156:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	401a      	ands	r2, r3
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	429a      	cmp	r2, r3
 8002166:	d0ed      	beq.n	8002144 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	40007000 	.word	0x40007000
 8002178:	fffff9ff 	.word	0xfffff9ff
 800217c:	20000014 	.word	0x20000014
 8002180:	000f4240 	.word	0x000f4240

08002184 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e2f3      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	4013      	ands	r3, r2
 800219e:	d100      	bne.n	80021a2 <HAL_RCC_OscConfig+0x1e>
 80021a0:	e07c      	b.n	800229c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a2:	4bc3      	ldr	r3, [pc, #780]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2238      	movs	r2, #56	@ 0x38
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ac:	4bc0      	ldr	r3, [pc, #768]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2203      	movs	r2, #3
 80021b2:	4013      	ands	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d102      	bne.n	80021c2 <HAL_RCC_OscConfig+0x3e>
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d002      	beq.n	80021c8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d10b      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	4bb9      	ldr	r3, [pc, #740]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	029b      	lsls	r3, r3, #10
 80021d0:	4013      	ands	r3, r2
 80021d2:	d062      	beq.n	800229a <HAL_RCC_OscConfig+0x116>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d15e      	bne.n	800229a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e2ce      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_OscConfig+0x78>
 80021ec:	4bb0      	ldr	r3, [pc, #704]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4baf      	ldr	r3, [pc, #700]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80021f2:	2180      	movs	r1, #128	@ 0x80
 80021f4:	0249      	lsls	r1, r1, #9
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e020      	b.n	800223e <HAL_RCC_OscConfig+0xba>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	23a0      	movs	r3, #160	@ 0xa0
 8002202:	02db      	lsls	r3, r3, #11
 8002204:	429a      	cmp	r2, r3
 8002206:	d10e      	bne.n	8002226 <HAL_RCC_OscConfig+0xa2>
 8002208:	4ba9      	ldr	r3, [pc, #676]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4ba8      	ldr	r3, [pc, #672]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800220e:	2180      	movs	r1, #128	@ 0x80
 8002210:	02c9      	lsls	r1, r1, #11
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	4ba6      	ldr	r3, [pc, #664]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4ba5      	ldr	r3, [pc, #660]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	0249      	lsls	r1, r1, #9
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e00b      	b.n	800223e <HAL_RCC_OscConfig+0xba>
 8002226:	4ba2      	ldr	r3, [pc, #648]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4ba1      	ldr	r3, [pc, #644]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800222c:	49a1      	ldr	r1, [pc, #644]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800222e:	400a      	ands	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	4b9f      	ldr	r3, [pc, #636]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b9e      	ldr	r3, [pc, #632]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002238:	499f      	ldr	r1, [pc, #636]	@ (80024b8 <HAL_RCC_OscConfig+0x334>)
 800223a:	400a      	ands	r2, r1
 800223c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d014      	beq.n	8002270 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe ffab 	bl	80011a0 <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7fe ffa6 	bl	80011a0 <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	@ 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e28d      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002262:	4b93      	ldr	r3, [pc, #588]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	029b      	lsls	r3, r3, #10
 800226a:	4013      	ands	r3, r2
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0xcc>
 800226e:	e015      	b.n	800229c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe ff96 	bl	80011a0 <HAL_GetTick>
 8002274:	0003      	movs	r3, r0
 8002276:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227a:	f7fe ff91 	bl	80011a0 <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	@ 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e278      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800228c:	4b88      	ldr	r3, [pc, #544]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2380      	movs	r3, #128	@ 0x80
 8002292:	029b      	lsls	r3, r3, #10
 8002294:	4013      	ands	r3, r2
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0xf6>
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2202      	movs	r2, #2
 80022a2:	4013      	ands	r3, r2
 80022a4:	d100      	bne.n	80022a8 <HAL_RCC_OscConfig+0x124>
 80022a6:	e099      	b.n	80023dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a8:	4b81      	ldr	r3, [pc, #516]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2238      	movs	r2, #56	@ 0x38
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b2:	4b7f      	ldr	r3, [pc, #508]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2203      	movs	r2, #3
 80022b8:	4013      	ands	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d102      	bne.n	80022c8 <HAL_RCC_OscConfig+0x144>
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d002      	beq.n	80022ce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d135      	bne.n	800233a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ce:	4b78      	ldr	r3, [pc, #480]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4013      	ands	r3, r2
 80022d8:	d005      	beq.n	80022e6 <HAL_RCC_OscConfig+0x162>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e24b      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b72      	ldr	r3, [pc, #456]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a74      	ldr	r2, [pc, #464]	@ (80024bc <HAL_RCC_OscConfig+0x338>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	0019      	movs	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	021a      	lsls	r2, r3, #8
 80022f6:	4b6e      	ldr	r3, [pc, #440]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d112      	bne.n	8002328 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002302:	4b6b      	ldr	r3, [pc, #428]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6e      	ldr	r2, [pc, #440]	@ (80024c0 <HAL_RCC_OscConfig+0x33c>)
 8002308:	4013      	ands	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	4b67      	ldr	r3, [pc, #412]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002316:	4b66      	ldr	r3, [pc, #408]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0adb      	lsrs	r3, r3, #11
 800231c:	2207      	movs	r2, #7
 800231e:	4013      	ands	r3, r2
 8002320:	4a68      	ldr	r2, [pc, #416]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 8002322:	40da      	lsrs	r2, r3
 8002324:	4b68      	ldr	r3, [pc, #416]	@ (80024c8 <HAL_RCC_OscConfig+0x344>)
 8002326:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002328:	4b68      	ldr	r3, [pc, #416]	@ (80024cc <HAL_RCC_OscConfig+0x348>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0018      	movs	r0, r3
 800232e:	f7fe fedb 	bl	80010e8 <HAL_InitTick>
 8002332:	1e03      	subs	r3, r0, #0
 8002334:	d051      	beq.n	80023da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e221      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d030      	beq.n	80023a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002342:	4b5b      	ldr	r3, [pc, #364]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a5e      	ldr	r2, [pc, #376]	@ (80024c0 <HAL_RCC_OscConfig+0x33c>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	4b57      	ldr	r3, [pc, #348]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002356:	4b56      	ldr	r3, [pc, #344]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b55      	ldr	r3, [pc, #340]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	0049      	lsls	r1, r1, #1
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe ff1c 	bl	80011a0 <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236e:	f7fe ff17 	bl	80011a0 <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1fe      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002380:	4b4b      	ldr	r3, [pc, #300]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4013      	ands	r3, r2
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b48      	ldr	r3, [pc, #288]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a4a      	ldr	r2, [pc, #296]	@ (80024bc <HAL_RCC_OscConfig+0x338>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	021a      	lsls	r2, r3, #8
 800239c:	4b44      	ldr	r3, [pc, #272]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	e01b      	b.n	80023dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80023a4:	4b42      	ldr	r3, [pc, #264]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b41      	ldr	r3, [pc, #260]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80023aa:	4949      	ldr	r1, [pc, #292]	@ (80024d0 <HAL_RCC_OscConfig+0x34c>)
 80023ac:	400a      	ands	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fe fef6 	bl	80011a0 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ba:	f7fe fef1 	bl	80011a0 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e1d8      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023cc:	4b38      	ldr	r3, [pc, #224]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4013      	ands	r3, r2
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x236>
 80023d8:	e000      	b.n	80023dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023da:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2208      	movs	r2, #8
 80023e2:	4013      	ands	r3, r2
 80023e4:	d047      	beq.n	8002476 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023e6:	4b32      	ldr	r3, [pc, #200]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2238      	movs	r2, #56	@ 0x38
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b18      	cmp	r3, #24
 80023f0:	d10a      	bne.n	8002408 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80023f2:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 80023f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f6:	2202      	movs	r2, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	d03c      	beq.n	8002476 <HAL_RCC_OscConfig+0x2f2>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d138      	bne.n	8002476 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e1ba      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d019      	beq.n	8002444 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002410:	4b27      	ldr	r3, [pc, #156]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002412:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002414:	4b26      	ldr	r3, [pc, #152]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002416:	2101      	movs	r1, #1
 8002418:	430a      	orrs	r2, r1
 800241a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fec0 	bl	80011a0 <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002426:	f7fe febb 	bl	80011a0 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e1a2      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002438:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800243a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243c:	2202      	movs	r2, #2
 800243e:	4013      	ands	r3, r2
 8002440:	d0f1      	beq.n	8002426 <HAL_RCC_OscConfig+0x2a2>
 8002442:	e018      	b.n	8002476 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002444:	4b1a      	ldr	r3, [pc, #104]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002446:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002448:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800244a:	2101      	movs	r1, #1
 800244c:	438a      	bics	r2, r1
 800244e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fea6 	bl	80011a0 <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245a:	f7fe fea1 	bl	80011a0 <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e188      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800246c:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800246e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002470:	2202      	movs	r2, #2
 8002472:	4013      	ands	r3, r2
 8002474:	d1f1      	bne.n	800245a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2204      	movs	r2, #4
 800247c:	4013      	ands	r3, r2
 800247e:	d100      	bne.n	8002482 <HAL_RCC_OscConfig+0x2fe>
 8002480:	e0c6      	b.n	8002610 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	231f      	movs	r3, #31
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2238      	movs	r2, #56	@ 0x38
 8002490:	4013      	ands	r3, r2
 8002492:	2b20      	cmp	r3, #32
 8002494:	d11e      	bne.n	80024d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002496:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <HAL_RCC_OscConfig+0x32c>)
 8002498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249a:	2202      	movs	r2, #2
 800249c:	4013      	ands	r3, r2
 800249e:	d100      	bne.n	80024a2 <HAL_RCC_OscConfig+0x31e>
 80024a0:	e0b6      	b.n	8002610 <HAL_RCC_OscConfig+0x48c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d000      	beq.n	80024ac <HAL_RCC_OscConfig+0x328>
 80024aa:	e0b1      	b.n	8002610 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e166      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
 80024b0:	40021000 	.word	0x40021000
 80024b4:	fffeffff 	.word	0xfffeffff
 80024b8:	fffbffff 	.word	0xfffbffff
 80024bc:	ffff80ff 	.word	0xffff80ff
 80024c0:	ffffc7ff 	.word	0xffffc7ff
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	20000014 	.word	0x20000014
 80024cc:	20000018 	.word	0x20000018
 80024d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024d4:	4bac      	ldr	r3, [pc, #688]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 80024d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	4013      	ands	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_OscConfig+0x360>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x362>
 80024e4:	2300      	movs	r3, #0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d011      	beq.n	800250e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4ba7      	ldr	r3, [pc, #668]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 80024ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024ee:	4ba6      	ldr	r3, [pc, #664]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 80024f0:	2180      	movs	r1, #128	@ 0x80
 80024f2:	0549      	lsls	r1, r1, #21
 80024f4:	430a      	orrs	r2, r1
 80024f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024f8:	4ba3      	ldr	r3, [pc, #652]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 80024fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	055b      	lsls	r3, r3, #21
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002506:	231f      	movs	r3, #31
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250e:	4b9f      	ldr	r3, [pc, #636]	@ (800278c <HAL_RCC_OscConfig+0x608>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4013      	ands	r3, r2
 8002518:	d11a      	bne.n	8002550 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800251a:	4b9c      	ldr	r3, [pc, #624]	@ (800278c <HAL_RCC_OscConfig+0x608>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b9b      	ldr	r3, [pc, #620]	@ (800278c <HAL_RCC_OscConfig+0x608>)
 8002520:	2180      	movs	r1, #128	@ 0x80
 8002522:	0049      	lsls	r1, r1, #1
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002528:	f7fe fe3a 	bl	80011a0 <HAL_GetTick>
 800252c:	0003      	movs	r3, r0
 800252e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002532:	f7fe fe35 	bl	80011a0 <HAL_GetTick>
 8002536:	0002      	movs	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e11c      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002544:	4b91      	ldr	r3, [pc, #580]	@ (800278c <HAL_RCC_OscConfig+0x608>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	@ 0x80
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4013      	ands	r3, r2
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x3e2>
 8002558:	4b8b      	ldr	r3, [pc, #556]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 800255a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800255c:	4b8a      	ldr	r3, [pc, #552]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 800255e:	2101      	movs	r1, #1
 8002560:	430a      	orrs	r2, r1
 8002562:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002564:	e01c      	b.n	80025a0 <HAL_RCC_OscConfig+0x41c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b05      	cmp	r3, #5
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x404>
 800256e:	4b86      	ldr	r3, [pc, #536]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002570:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002572:	4b85      	ldr	r3, [pc, #532]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002574:	2104      	movs	r1, #4
 8002576:	430a      	orrs	r2, r1
 8002578:	65da      	str	r2, [r3, #92]	@ 0x5c
 800257a:	4b83      	ldr	r3, [pc, #524]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 800257c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800257e:	4b82      	ldr	r3, [pc, #520]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002580:	2101      	movs	r1, #1
 8002582:	430a      	orrs	r2, r1
 8002584:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002586:	e00b      	b.n	80025a0 <HAL_RCC_OscConfig+0x41c>
 8002588:	4b7f      	ldr	r3, [pc, #508]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 800258a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800258c:	4b7e      	ldr	r3, [pc, #504]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 800258e:	2101      	movs	r1, #1
 8002590:	438a      	bics	r2, r1
 8002592:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002594:	4b7c      	ldr	r3, [pc, #496]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002596:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002598:	4b7b      	ldr	r3, [pc, #492]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 800259a:	2104      	movs	r1, #4
 800259c:	438a      	bics	r2, r1
 800259e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d014      	beq.n	80025d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe fdfa 	bl	80011a0 <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b0:	e009      	b.n	80025c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe fdf5 	bl	80011a0 <HAL_GetTick>
 80025b6:	0002      	movs	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	4a74      	ldr	r2, [pc, #464]	@ (8002790 <HAL_RCC_OscConfig+0x60c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0db      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c6:	4b70      	ldr	r3, [pc, #448]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x42e>
 80025d0:	e013      	b.n	80025fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7fe fde5 	bl	80011a0 <HAL_GetTick>
 80025d6:	0003      	movs	r3, r0
 80025d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025da:	e009      	b.n	80025f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7fe fde0 	bl	80011a0 <HAL_GetTick>
 80025e0:	0002      	movs	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002790 <HAL_RCC_OscConfig+0x60c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0c6      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f0:	4b65      	ldr	r3, [pc, #404]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 80025f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f4:	2202      	movs	r2, #2
 80025f6:	4013      	ands	r3, r2
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025fa:	231f      	movs	r3, #31
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002604:	4b60      	ldr	r3, [pc, #384]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002606:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002608:	4b5f      	ldr	r3, [pc, #380]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 800260a:	4962      	ldr	r1, [pc, #392]	@ (8002794 <HAL_RCC_OscConfig+0x610>)
 800260c:	400a      	ands	r2, r1
 800260e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d100      	bne.n	800261a <HAL_RCC_OscConfig+0x496>
 8002618:	e0b0      	b.n	800277c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261a:	4b5b      	ldr	r3, [pc, #364]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2238      	movs	r2, #56	@ 0x38
 8002620:	4013      	ands	r3, r2
 8002622:	2b10      	cmp	r3, #16
 8002624:	d100      	bne.n	8002628 <HAL_RCC_OscConfig+0x4a4>
 8002626:	e078      	b.n	800271a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d153      	bne.n	80026d8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	4b55      	ldr	r3, [pc, #340]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b54      	ldr	r3, [pc, #336]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002636:	4958      	ldr	r1, [pc, #352]	@ (8002798 <HAL_RCC_OscConfig+0x614>)
 8002638:	400a      	ands	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fdb0 	bl	80011a0 <HAL_GetTick>
 8002640:	0003      	movs	r3, r0
 8002642:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002646:	f7fe fdab 	bl	80011a0 <HAL_GetTick>
 800264a:	0002      	movs	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e092      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002658:	4b4b      	ldr	r3, [pc, #300]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	049b      	lsls	r3, r3, #18
 8002660:	4013      	ands	r3, r2
 8002662:	d1f0      	bne.n	8002646 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002664:	4b48      	ldr	r3, [pc, #288]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a4c      	ldr	r2, [pc, #304]	@ (800279c <HAL_RCC_OscConfig+0x618>)
 800266a:	4013      	ands	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1a      	ldr	r2, [r3, #32]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	431a      	orrs	r2, r3
 800268c:	4b3e      	ldr	r3, [pc, #248]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 800268e:	430a      	orrs	r2, r1
 8002690:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002692:	4b3d      	ldr	r3, [pc, #244]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b3c      	ldr	r3, [pc, #240]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002698:	2180      	movs	r1, #128	@ 0x80
 800269a:	0449      	lsls	r1, r1, #17
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80026a0:	4b39      	ldr	r3, [pc, #228]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	4b38      	ldr	r3, [pc, #224]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 80026a6:	2180      	movs	r1, #128	@ 0x80
 80026a8:	0549      	lsls	r1, r1, #21
 80026aa:	430a      	orrs	r2, r1
 80026ac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fd77 	bl	80011a0 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fd72 	bl	80011a0 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e059      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	049b      	lsls	r3, r3, #18
 80026d2:	4013      	ands	r3, r2
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x534>
 80026d6:	e051      	b.n	800277c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 80026de:	492e      	ldr	r1, [pc, #184]	@ (8002798 <HAL_RCC_OscConfig+0x614>)
 80026e0:	400a      	ands	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe fd5c 	bl	80011a0 <HAL_GetTick>
 80026e8:	0003      	movs	r3, r0
 80026ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe fd57 	bl	80011a0 <HAL_GetTick>
 80026f2:	0002      	movs	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e03e      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	4b21      	ldr	r3, [pc, #132]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	049b      	lsls	r3, r3, #18
 8002708:	4013      	ands	r3, r2
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800270c:	4b1e      	ldr	r3, [pc, #120]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4b1d      	ldr	r3, [pc, #116]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002712:	4923      	ldr	r1, [pc, #140]	@ (80027a0 <HAL_RCC_OscConfig+0x61c>)
 8002714:	400a      	ands	r2, r1
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	e030      	b.n	800277c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02b      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002726:	4b18      	ldr	r3, [pc, #96]	@ (8002788 <HAL_RCC_OscConfig+0x604>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2203      	movs	r2, #3
 8002730:	401a      	ands	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	429a      	cmp	r2, r3
 8002738:	d11e      	bne.n	8002778 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2270      	movs	r2, #112	@ 0x70
 800273e:	401a      	ands	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d117      	bne.n	8002778 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	23fe      	movs	r3, #254	@ 0xfe
 800274c:	01db      	lsls	r3, r3, #7
 800274e:	401a      	ands	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002754:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d10e      	bne.n	8002778 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	23f8      	movs	r3, #248	@ 0xf8
 800275e:	039b      	lsls	r3, r3, #14
 8002760:	401a      	ands	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d106      	bne.n	8002778 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	0f5b      	lsrs	r3, r3, #29
 800276e:	075a      	lsls	r2, r3, #29
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	b008      	add	sp, #32
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	40021000 	.word	0x40021000
 800278c:	40007000 	.word	0x40007000
 8002790:	00001388 	.word	0x00001388
 8002794:	efffffff 	.word	0xefffffff
 8002798:	feffffff 	.word	0xfeffffff
 800279c:	1fc1808c 	.word	0x1fc1808c
 80027a0:	effefffc 	.word	0xeffefffc

080027a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0e9      	b.n	800298c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b8:	4b76      	ldr	r3, [pc, #472]	@ (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2207      	movs	r2, #7
 80027be:	4013      	ands	r3, r2
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d91e      	bls.n	8002804 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b73      	ldr	r3, [pc, #460]	@ (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2207      	movs	r2, #7
 80027cc:	4393      	bics	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	4b70      	ldr	r3, [pc, #448]	@ (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027d8:	f7fe fce2 	bl	80011a0 <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027e0:	e009      	b.n	80027f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e2:	f7fe fcdd 	bl	80011a0 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002998 <HAL_RCC_ClockConfig+0x1f4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0ca      	b.n	800298c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027f6:	4b67      	ldr	r3, [pc, #412]	@ (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2207      	movs	r2, #7
 80027fc:	4013      	ands	r3, r2
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d1ee      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2202      	movs	r2, #2
 800280a:	4013      	ands	r3, r2
 800280c:	d015      	beq.n	800283a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2204      	movs	r2, #4
 8002814:	4013      	ands	r3, r2
 8002816:	d006      	beq.n	8002826 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002818:	4b60      	ldr	r3, [pc, #384]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	4b5f      	ldr	r3, [pc, #380]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 800281e:	21e0      	movs	r1, #224	@ 0xe0
 8002820:	01c9      	lsls	r1, r1, #7
 8002822:	430a      	orrs	r2, r1
 8002824:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002826:	4b5d      	ldr	r3, [pc, #372]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	4a5d      	ldr	r2, [pc, #372]	@ (80029a0 <HAL_RCC_ClockConfig+0x1fc>)
 800282c:	4013      	ands	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	4b59      	ldr	r3, [pc, #356]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 8002836:	430a      	orrs	r2, r1
 8002838:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2201      	movs	r2, #1
 8002840:	4013      	ands	r3, r2
 8002842:	d057      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d107      	bne.n	800285c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284c:	4b53      	ldr	r3, [pc, #332]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	029b      	lsls	r3, r3, #10
 8002854:	4013      	ands	r3, r2
 8002856:	d12b      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e097      	b.n	800298c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d107      	bne.n	8002874 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002864:	4b4d      	ldr	r3, [pc, #308]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	049b      	lsls	r3, r3, #18
 800286c:	4013      	ands	r3, r2
 800286e:	d11f      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e08b      	b.n	800298c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d107      	bne.n	800288c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287c:	4b47      	ldr	r3, [pc, #284]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	@ 0x80
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4013      	ands	r3, r2
 8002886:	d113      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e07f      	b.n	800298c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002894:	4b41      	ldr	r3, [pc, #260]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 8002896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002898:	2202      	movs	r2, #2
 800289a:	4013      	ands	r3, r2
 800289c:	d108      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e074      	b.n	800298c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a2:	4b3e      	ldr	r3, [pc, #248]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	2202      	movs	r2, #2
 80028a8:	4013      	ands	r3, r2
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e06d      	b.n	800298c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028b0:	4b3a      	ldr	r3, [pc, #232]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2207      	movs	r2, #7
 80028b6:	4393      	bics	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	4b37      	ldr	r3, [pc, #220]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fe fc6c 	bl	80011a0 <HAL_GetTick>
 80028c8:	0003      	movs	r3, r0
 80028ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028cc:	e009      	b.n	80028e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ce:	f7fe fc67 	bl	80011a0 <HAL_GetTick>
 80028d2:	0002      	movs	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002998 <HAL_RCC_ClockConfig+0x1f4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e054      	b.n	800298c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b2e      	ldr	r3, [pc, #184]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2238      	movs	r2, #56	@ 0x38
 80028e8:	401a      	ands	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1ec      	bne.n	80028ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2207      	movs	r2, #7
 80028fa:	4013      	ands	r3, r2
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d21e      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2207      	movs	r2, #7
 8002908:	4393      	bics	r3, r2
 800290a:	0019      	movs	r1, r3
 800290c:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002914:	f7fe fc44 	bl	80011a0 <HAL_GetTick>
 8002918:	0003      	movs	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800291c:	e009      	b.n	8002932 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291e:	f7fe fc3f 	bl	80011a0 <HAL_GetTick>
 8002922:	0002      	movs	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	4a1b      	ldr	r2, [pc, #108]	@ (8002998 <HAL_RCC_ClockConfig+0x1f4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e02c      	b.n	800298c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002932:	4b18      	ldr	r3, [pc, #96]	@ (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2207      	movs	r2, #7
 8002938:	4013      	ands	r3, r2
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d1ee      	bne.n	800291e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2204      	movs	r2, #4
 8002946:	4013      	ands	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800294a:	4b14      	ldr	r3, [pc, #80]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	4a15      	ldr	r2, [pc, #84]	@ (80029a4 <HAL_RCC_ClockConfig+0x200>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 800295a:	430a      	orrs	r2, r1
 800295c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800295e:	f000 f829 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002962:	0001      	movs	r1, r0
 8002964:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <HAL_RCC_ClockConfig+0x1f8>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	220f      	movs	r2, #15
 800296c:	401a      	ands	r2, r3
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <HAL_RCC_ClockConfig+0x204>)
 8002970:	0092      	lsls	r2, r2, #2
 8002972:	58d3      	ldr	r3, [r2, r3]
 8002974:	221f      	movs	r2, #31
 8002976:	4013      	ands	r3, r2
 8002978:	000a      	movs	r2, r1
 800297a:	40da      	lsrs	r2, r3
 800297c:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCC_ClockConfig+0x208>)
 800297e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002980:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_RCC_ClockConfig+0x20c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0018      	movs	r0, r3
 8002986:	f7fe fbaf 	bl	80010e8 <HAL_InitTick>
 800298a:	0003      	movs	r3, r0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b004      	add	sp, #16
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40022000 	.word	0x40022000
 8002998:	00001388 	.word	0x00001388
 800299c:	40021000 	.word	0x40021000
 80029a0:	fffff0ff 	.word	0xfffff0ff
 80029a4:	ffff8fff 	.word	0xffff8fff
 80029a8:	08005e34 	.word	0x08005e34
 80029ac:	20000014 	.word	0x20000014
 80029b0:	20000018 	.word	0x20000018

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ba:	4b3c      	ldr	r3, [pc, #240]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2238      	movs	r2, #56	@ 0x38
 80029c0:	4013      	ands	r3, r2
 80029c2:	d10f      	bne.n	80029e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80029c4:	4b39      	ldr	r3, [pc, #228]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0adb      	lsrs	r3, r3, #11
 80029ca:	2207      	movs	r2, #7
 80029cc:	4013      	ands	r3, r2
 80029ce:	2201      	movs	r2, #1
 80029d0:	409a      	lsls	r2, r3
 80029d2:	0013      	movs	r3, r2
 80029d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	4835      	ldr	r0, [pc, #212]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029da:	f7fd fb91 	bl	8000100 <__udivsi3>
 80029de:	0003      	movs	r3, r0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	e05d      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e4:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2238      	movs	r2, #56	@ 0x38
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d102      	bne.n	80029f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029f0:	4b30      	ldr	r3, [pc, #192]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x100>)
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	e054      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f6:	4b2d      	ldr	r3, [pc, #180]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2238      	movs	r2, #56	@ 0x38
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d138      	bne.n	8002a74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a02:	4b2a      	ldr	r3, [pc, #168]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2203      	movs	r2, #3
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a0c:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	2207      	movs	r2, #7
 8002a14:	4013      	ands	r3, r2
 8002a16:	3301      	adds	r3, #1
 8002a18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	4824      	ldr	r0, [pc, #144]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a24:	f7fd fb6c 	bl	8000100 <__udivsi3>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	227f      	movs	r2, #127	@ 0x7f
 8002a34:	4013      	ands	r3, r2
 8002a36:	434b      	muls	r3, r1
 8002a38:	617b      	str	r3, [r7, #20]
        break;
 8002a3a:	e00d      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	481c      	ldr	r0, [pc, #112]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a40:	f7fd fb5e 	bl	8000100 <__udivsi3>
 8002a44:	0003      	movs	r3, r0
 8002a46:	0019      	movs	r1, r3
 8002a48:	4b18      	ldr	r3, [pc, #96]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	227f      	movs	r2, #127	@ 0x7f
 8002a50:	4013      	ands	r3, r2
 8002a52:	434b      	muls	r3, r1
 8002a54:	617b      	str	r3, [r7, #20]
        break;
 8002a56:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a58:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0f5b      	lsrs	r3, r3, #29
 8002a5e:	2207      	movs	r2, #7
 8002a60:	4013      	ands	r3, r2
 8002a62:	3301      	adds	r3, #1
 8002a64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	6978      	ldr	r0, [r7, #20]
 8002a6a:	f7fd fb49 	bl	8000100 <__udivsi3>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	e015      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a74:	4b0d      	ldr	r3, [pc, #52]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2238      	movs	r2, #56	@ 0x38
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d103      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a80:	2380      	movs	r3, #128	@ 0x80
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a88:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2238      	movs	r2, #56	@ 0x38
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b18      	cmp	r3, #24
 8002a92:	d103      	bne.n	8002a9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a94:	23fa      	movs	r3, #250	@ 0xfa
 8002a96:	01db      	lsls	r3, r3, #7
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	e001      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002aa0:	693b      	ldr	r3, [r7, #16]
}
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b006      	add	sp, #24
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	00f42400 	.word	0x00f42400
 8002ab4:	007a1200 	.word	0x007a1200

08002ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ac0:	2313      	movs	r3, #19
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ac8:	2312      	movs	r3, #18
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	029b      	lsls	r3, r3, #10
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d100      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002adc:	e0a3      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2011      	movs	r0, #17
 8002ae0:	183b      	adds	r3, r7, r0
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ae8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	055b      	lsls	r3, r3, #21
 8002aee:	4013      	ands	r3, r2
 8002af0:	d110      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002af4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002af6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002af8:	2180      	movs	r1, #128	@ 0x80
 8002afa:	0549      	lsls	r1, r1, #21
 8002afc:	430a      	orrs	r2, r1
 8002afe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b00:	4b78      	ldr	r3, [pc, #480]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b04:	2380      	movs	r3, #128	@ 0x80
 8002b06:	055b      	lsls	r3, r3, #21
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0e:	183b      	adds	r3, r7, r0
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b14:	4b74      	ldr	r3, [pc, #464]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b73      	ldr	r3, [pc, #460]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b1a:	2180      	movs	r1, #128	@ 0x80
 8002b1c:	0049      	lsls	r1, r1, #1
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b22:	f7fe fb3d 	bl	80011a0 <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2c:	f7fe fb38 	bl	80011a0 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d904      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b3a:	2313      	movs	r3, #19
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2203      	movs	r2, #3
 8002b40:	701a      	strb	r2, [r3, #0]
        break;
 8002b42:	e005      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b44:	4b68      	ldr	r3, [pc, #416]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d0ed      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b50:	2313      	movs	r3, #19
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d154      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b5a:	4b62      	ldr	r3, [pc, #392]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b5e:	23c0      	movs	r3, #192	@ 0xc0
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4013      	ands	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d019      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d014      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b76:	4b5b      	ldr	r3, [pc, #364]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b80:	4b58      	ldr	r3, [pc, #352]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b84:	4b57      	ldr	r3, [pc, #348]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b86:	2180      	movs	r1, #128	@ 0x80
 8002b88:	0249      	lsls	r1, r1, #9
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b8e:	4b55      	ldr	r3, [pc, #340]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b92:	4b54      	ldr	r3, [pc, #336]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b94:	4956      	ldr	r1, [pc, #344]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002b96:	400a      	ands	r2, r1
 8002b98:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b9a:	4b52      	ldr	r3, [pc, #328]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d016      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fafa 	bl	80011a0 <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb0:	e00c      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe faf5 	bl	80011a0 <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d904      	bls.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002bc2:	2313      	movs	r3, #19
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	701a      	strb	r2, [r3, #0]
            break;
 8002bca:	e004      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bcc:	4b45      	ldr	r3, [pc, #276]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d0ed      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002bd6:	2313      	movs	r3, #19
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be0:	4b40      	ldr	r3, [pc, #256]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	4a41      	ldr	r2, [pc, #260]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	0019      	movs	r1, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bf4:	e00c      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bf6:	2312      	movs	r3, #18
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2213      	movs	r2, #19
 8002bfc:	18ba      	adds	r2, r7, r2
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e005      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c04:	2312      	movs	r3, #18
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2213      	movs	r2, #19
 8002c0a:	18ba      	adds	r2, r7, r2
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c10:	2311      	movs	r3, #17
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d105      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1a:	4b32      	ldr	r3, [pc, #200]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c20:	4935      	ldr	r1, [pc, #212]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c22:	400a      	ands	r2, r1
 8002c24:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c30:	4b2c      	ldr	r3, [pc, #176]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c34:	2203      	movs	r2, #3
 8002c36:	4393      	bics	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4b29      	ldr	r3, [pc, #164]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c4e:	4b25      	ldr	r3, [pc, #148]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c52:	4a2a      	ldr	r2, [pc, #168]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	01db      	lsls	r3, r3, #7
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d015      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	0899      	lsrs	r1, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	2380      	movs	r3, #128	@ 0x80
 8002c86:	05db      	lsls	r3, r3, #23
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d106      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	4b14      	ldr	r3, [pc, #80]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c92:	2180      	movs	r1, #128	@ 0x80
 8002c94:	0249      	lsls	r1, r1, #9
 8002c96:	430a      	orrs	r2, r1
 8002c98:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d016      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	4a15      	ldr	r2, [pc, #84]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	0019      	movs	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	2380      	movs	r3, #128	@ 0x80
 8002cc0:	01db      	lsls	r3, r3, #7
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cc6:	4b07      	ldr	r3, [pc, #28]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ccc:	2180      	movs	r1, #128	@ 0x80
 8002cce:	0249      	lsls	r1, r1, #9
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002cd4:	2312      	movs	r3, #18
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	781b      	ldrb	r3, [r3, #0]
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b006      	add	sp, #24
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	fffffcff 	.word	0xfffffcff
 8002cf0:	fffeffff 	.word	0xfffeffff
 8002cf4:	00001388 	.word	0x00001388
 8002cf8:	efffffff 	.word	0xefffffff
 8002cfc:	ffffcfff 	.word	0xffffcfff
 8002d00:	ffff3fff 	.word	0xffff3fff

08002d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e04a      	b.n	8002dac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	223d      	movs	r2, #61	@ 0x3d
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d107      	bne.n	8002d32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	223c      	movs	r2, #60	@ 0x3c
 8002d26:	2100      	movs	r1, #0
 8002d28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7fe f941 	bl	8000fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	223d      	movs	r2, #61	@ 0x3d
 8002d36:	2102      	movs	r1, #2
 8002d38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3304      	adds	r3, #4
 8002d42:	0019      	movs	r1, r3
 8002d44:	0010      	movs	r0, r2
 8002d46:	f000 f9ab 	bl	80030a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2248      	movs	r2, #72	@ 0x48
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	223e      	movs	r2, #62	@ 0x3e
 8002d56:	2101      	movs	r1, #1
 8002d58:	5499      	strb	r1, [r3, r2]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	223f      	movs	r2, #63	@ 0x3f
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2240      	movs	r2, #64	@ 0x40
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2241      	movs	r2, #65	@ 0x41
 8002d6e:	2101      	movs	r1, #1
 8002d70:	5499      	strb	r1, [r3, r2]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2242      	movs	r2, #66	@ 0x42
 8002d76:	2101      	movs	r1, #1
 8002d78:	5499      	strb	r1, [r3, r2]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2243      	movs	r2, #67	@ 0x43
 8002d7e:	2101      	movs	r1, #1
 8002d80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2244      	movs	r2, #68	@ 0x44
 8002d86:	2101      	movs	r1, #1
 8002d88:	5499      	strb	r1, [r3, r2]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2245      	movs	r2, #69	@ 0x45
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2246      	movs	r2, #70	@ 0x46
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2247      	movs	r2, #71	@ 0x47
 8002d9e:	2101      	movs	r1, #1
 8002da0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	223d      	movs	r2, #61	@ 0x3d
 8002da6:	2101      	movs	r1, #1
 8002da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	223d      	movs	r2, #61	@ 0x3d
 8002dc0:	5c9b      	ldrb	r3, [r3, r2]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d001      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e037      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	223d      	movs	r2, #61	@ 0x3d
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2101      	movs	r1, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a16      	ldr	r2, [pc, #88]	@ (8002e44 <HAL_TIM_Base_Start_IT+0x90>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <HAL_TIM_Base_Start_IT+0x44>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a15      	ldr	r2, [pc, #84]	@ (8002e48 <HAL_TIM_Base_Start_IT+0x94>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d116      	bne.n	8002e26 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4a13      	ldr	r2, [pc, #76]	@ (8002e4c <HAL_TIM_Base_Start_IT+0x98>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d016      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0x84>
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	2380      	movs	r3, #128	@ 0x80
 8002e0e:	025b      	lsls	r3, r3, #9
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d011      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2101      	movs	r1, #1
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e24:	e008      	b.n	8002e38 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2101      	movs	r1, #1
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e000      	b.n	8002e3a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e38:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b004      	add	sp, #16
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	00010007 	.word	0x00010007

08002e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d021      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2202      	movs	r2, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	d01d      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	4252      	negs	r2, r2
 8002e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	4013      	ands	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 f8ea 	bl	8003070 <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e007      	b.n	8002eae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f000 f8dd 	bl	8003060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 f8e9 	bl	8003080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d022      	beq.n	8002f02 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d01e      	beq.n	8002f02 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2205      	movs	r2, #5
 8002eca:	4252      	negs	r2, r2
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	23c0      	movs	r3, #192	@ 0xc0
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f000 f8c3 	bl	8003070 <HAL_TIM_IC_CaptureCallback>
 8002eea:	e007      	b.n	8002efc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 f8b6 	bl	8003060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 f8c2 	bl	8003080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2208      	movs	r2, #8
 8002f06:	4013      	ands	r3, r2
 8002f08:	d021      	beq.n	8002f4e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d01d      	beq.n	8002f4e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2209      	movs	r2, #9
 8002f18:	4252      	negs	r2, r2
 8002f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 f89d 	bl	8003070 <HAL_TIM_IC_CaptureCallback>
 8002f36:	e007      	b.n	8002f48 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 f890 	bl	8003060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f89c 	bl	8003080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2210      	movs	r2, #16
 8002f52:	4013      	ands	r3, r2
 8002f54:	d022      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d01e      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2211      	movs	r2, #17
 8002f64:	4252      	negs	r2, r2
 8002f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	23c0      	movs	r3, #192	@ 0xc0
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f000 f876 	bl	8003070 <HAL_TIM_IC_CaptureCallback>
 8002f84:	e007      	b.n	8002f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f869 	bl	8003060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f875 	bl	8003080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d00c      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d008      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	4252      	negs	r2, r2
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f7fd fa57 	bl	800046c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2280      	movs	r2, #128	@ 0x80
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d104      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	019b      	lsls	r3, r3, #6
 8002fcc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fce:	d00b      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2280      	movs	r2, #128	@ 0x80
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003058 <HAL_TIM_IRQHandler+0x208>)
 8002fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 f8de 	bl	80031a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	2380      	movs	r3, #128	@ 0x80
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d00b      	beq.n	800300a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d007      	beq.n	800300a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a17      	ldr	r2, [pc, #92]	@ (800305c <HAL_TIM_IRQHandler+0x20c>)
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0018      	movs	r0, r3
 8003006:	f000 f8d5 	bl	80031b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2240      	movs	r2, #64	@ 0x40
 800300e:	4013      	ands	r3, r2
 8003010:	d00c      	beq.n	800302c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2240      	movs	r2, #64	@ 0x40
 8003016:	4013      	ands	r3, r2
 8003018:	d008      	beq.n	800302c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2241      	movs	r2, #65	@ 0x41
 8003020:	4252      	negs	r2, r2
 8003022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f000 f832 	bl	8003090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2220      	movs	r2, #32
 8003030:	4013      	ands	r3, r2
 8003032:	d00c      	beq.n	800304e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	4013      	ands	r3, r2
 800303a:	d008      	beq.n	800304e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2221      	movs	r2, #33	@ 0x21
 8003042:	4252      	negs	r2, r2
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	0018      	movs	r0, r3
 800304a:	f000 f8a3 	bl	8003194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	ffffdf7f 	.word	0xffffdf7f
 800305c:	fffffeff 	.word	0xfffffeff

08003060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003068:	46c0      	nop			@ (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b002      	add	sp, #8
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003078:	46c0      	nop			@ (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b002      	add	sp, #8
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003088:	46c0      	nop			@ (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003098:	46c0      	nop			@ (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b002      	add	sp, #8
 800309e:	bd80      	pop	{r7, pc}

080030a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a32      	ldr	r2, [pc, #200]	@ (800317c <TIM_Base_SetConfig+0xdc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_Base_SetConfig+0x20>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a31      	ldr	r2, [pc, #196]	@ (8003180 <TIM_Base_SetConfig+0xe0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d108      	bne.n	80030d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2270      	movs	r2, #112	@ 0x70
 80030c4:	4393      	bics	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a29      	ldr	r2, [pc, #164]	@ (800317c <TIM_Base_SetConfig+0xdc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00f      	beq.n	80030fa <TIM_Base_SetConfig+0x5a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a28      	ldr	r2, [pc, #160]	@ (8003180 <TIM_Base_SetConfig+0xe0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00b      	beq.n	80030fa <TIM_Base_SetConfig+0x5a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a27      	ldr	r2, [pc, #156]	@ (8003184 <TIM_Base_SetConfig+0xe4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <TIM_Base_SetConfig+0x5a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a26      	ldr	r2, [pc, #152]	@ (8003188 <TIM_Base_SetConfig+0xe8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d003      	beq.n	80030fa <TIM_Base_SetConfig+0x5a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a25      	ldr	r2, [pc, #148]	@ (800318c <TIM_Base_SetConfig+0xec>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d108      	bne.n	800310c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a24      	ldr	r2, [pc, #144]	@ (8003190 <TIM_Base_SetConfig+0xf0>)
 80030fe:	4013      	ands	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2280      	movs	r2, #128	@ 0x80
 8003110:	4393      	bics	r3, r2
 8003112:	001a      	movs	r2, r3
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a11      	ldr	r2, [pc, #68]	@ (800317c <TIM_Base_SetConfig+0xdc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <TIM_Base_SetConfig+0xaa>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a12      	ldr	r2, [pc, #72]	@ (8003188 <TIM_Base_SetConfig+0xe8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <TIM_Base_SetConfig+0xaa>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a11      	ldr	r2, [pc, #68]	@ (800318c <TIM_Base_SetConfig+0xec>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d103      	bne.n	8003152 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2201      	movs	r2, #1
 800315e:	4013      	ands	r3, r2
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	2201      	movs	r2, #1
 800316a:	4393      	bics	r3, r2
 800316c:	001a      	movs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	611a      	str	r2, [r3, #16]
  }
}
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	46bd      	mov	sp, r7
 8003176:	b004      	add	sp, #16
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			@ (mov r8, r8)
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400
 8003184:	40002000 	.word	0x40002000
 8003188:	40014400 	.word	0x40014400
 800318c:	40014800 	.word	0x40014800
 8003190:	fffffcff 	.word	0xfffffcff

08003194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ac:	46c0      	nop			@ (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031bc:	46c0      	nop			@ (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <memset>:
 80031c4:	0003      	movs	r3, r0
 80031c6:	1882      	adds	r2, r0, r2
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d100      	bne.n	80031ce <memset+0xa>
 80031cc:	4770      	bx	lr
 80031ce:	7019      	strb	r1, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	e7f9      	b.n	80031c8 <memset+0x4>

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	2600      	movs	r6, #0
 80031d8:	4c0c      	ldr	r4, [pc, #48]	@ (800320c <__libc_init_array+0x38>)
 80031da:	4d0d      	ldr	r5, [pc, #52]	@ (8003210 <__libc_init_array+0x3c>)
 80031dc:	1b64      	subs	r4, r4, r5
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	2600      	movs	r6, #0
 80031e6:	f000 f819 	bl	800321c <_init>
 80031ea:	4c0a      	ldr	r4, [pc, #40]	@ (8003214 <__libc_init_array+0x40>)
 80031ec:	4d0a      	ldr	r5, [pc, #40]	@ (8003218 <__libc_init_array+0x44>)
 80031ee:	1b64      	subs	r4, r4, r5
 80031f0:	10a4      	asrs	r4, r4, #2
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	00b3      	lsls	r3, r6, #2
 80031fa:	58eb      	ldr	r3, [r5, r3]
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	00b3      	lsls	r3, r6, #2
 8003204:	58eb      	ldr	r3, [r5, r3]
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08005e74 	.word	0x08005e74
 8003210:	08005e74 	.word	0x08005e74
 8003214:	08005e78 	.word	0x08005e78
 8003218:	08005e74 	.word	0x08005e74

0800321c <_init>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003222:	bc08      	pop	{r3}
 8003224:	469e      	mov	lr, r3
 8003226:	4770      	bx	lr

08003228 <_fini>:
 8003228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322e:	bc08      	pop	{r3}
 8003230:	469e      	mov	lr, r3
 8003232:	4770      	bx	lr
