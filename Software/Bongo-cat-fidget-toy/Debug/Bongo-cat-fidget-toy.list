
Bongo-cat-fidget-toy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a38  080000b8  080000b8  000010b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003660  08004af0  08004af0  00005af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008150  08008150  0000a0f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008150  08008150  0000a0f8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008150  08008150  0000a0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008150  08008150  00009150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008154  08008154  00009154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  08008158  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000674  200000f8  08008250  0000a0f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08008250  0000a76c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a0f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6bc  00000000  00000000  0000a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b57  00000000  00000000  000197dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9e  00000000  00000000  0001d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162c5  00000000  00000000  0001e01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001346d  00000000  00000000  000342e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008918c  00000000  00000000  00047750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d08dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f94  00000000  00000000  000d0920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d48b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000f8 	.word	0x200000f8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004ac4 	.word	0x08004ac4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000fc 	.word	0x200000fc
 80000fc:	08004ac4 	.word	0x08004ac4

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <toggle_display_invert>:

/* USER CODE BEGIN PFP */

// timer value = desired_sec * 64e6/prescaler

void toggle_display_invert(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
    display_inverted = !display_inverted;
 8000406:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <toggle_display_invert+0x64>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	425a      	negs	r2, r3
 800040c:	4153      	adcs	r3, r2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	001a      	movs	r2, r3
 8000412:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <toggle_display_invert+0x64>)
 8000414:	701a      	strb	r2, [r3, #0]
    ssd1306_InvertDisplay(display_inverted);
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <toggle_display_invert+0x64>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	0018      	movs	r0, r3
 800041c:	f001 fb10 	bl	8001a40 <ssd1306_InvertDisplay>

    // Mark data as changed
    data_changed = 1;
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <toggle_display_invert+0x68>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]

    // Visual feedback
    for(int i = 0; i < 2; i++) {
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	e012      	b.n	8000452 <toggle_display_invert+0x52>
        ssd1306_Fill(White);
 800042c:	2001      	movs	r0, #1
 800042e:	f001 f899 	bl	8001564 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000432:	f001 f8b1 	bl	8001598 <ssd1306_UpdateScreen>
        HAL_Delay(50);
 8000436:	2032      	movs	r0, #50	@ 0x32
 8000438:	f001 fcfa 	bl	8001e30 <HAL_Delay>
        ssd1306_Fill(Black);
 800043c:	2000      	movs	r0, #0
 800043e:	f001 f891 	bl	8001564 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000442:	f001 f8a9 	bl	8001598 <ssd1306_UpdateScreen>
        HAL_Delay(50);
 8000446:	2032      	movs	r0, #50	@ 0x32
 8000448:	f001 fcf2 	bl	8001e30 <HAL_Delay>
    for(int i = 0; i < 2; i++) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3301      	adds	r3, #1
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b01      	cmp	r3, #1
 8000456:	dde9      	ble.n	800042c <toggle_display_invert+0x2c>
    }
}
 8000458:	46c0      	nop			@ (mov r8, r8)
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	200001bd 	.word	0x200001bd
 8000468:	200001dc 	.word	0x200001dc

0800046c <draw_animation>:

void draw_animation(char* frame){
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af02      	add	r7, sp, #8
 8000472:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 8000474:	2000      	movs	r0, #0
 8000476:	f001 f875 	bl	8001564 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,frame,128,64,White);
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	2301      	movs	r3, #1
 800047e:	9301      	str	r3, [sp, #4]
 8000480:	2340      	movs	r3, #64	@ 0x40
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	2380      	movs	r3, #128	@ 0x80
 8000486:	2100      	movs	r1, #0
 8000488:	2000      	movs	r0, #0
 800048a:	f001 fa0d 	bl	80018a8 <ssd1306_DrawBitmap>
}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}

08000496 <draw_animation_erase>:

void draw_animation_erase(char* frame){
 8000496:	b580      	push	{r7, lr}
 8000498:	b084      	sub	sp, #16
 800049a:	af02      	add	r7, sp, #8
 800049c:	6078      	str	r0, [r7, #4]
    ssd1306_DrawBitmap(0,0,frame,128,64,Black);
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	2300      	movs	r3, #0
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	2340      	movs	r3, #64	@ 0x40
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2380      	movs	r3, #128	@ 0x80
 80004aa:	2100      	movs	r1, #0
 80004ac:	2000      	movs	r0, #0
 80004ae:	f001 f9fb 	bl	80018a8 <ssd1306_DrawBitmap>
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}

080004ba <draw_animation_transparent>:

void draw_animation_transparent(char* frame){
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b084      	sub	sp, #16
 80004be:	af02      	add	r7, sp, #8
 80004c0:	6078      	str	r0, [r7, #4]
    ssd1306_DrawBitmap(0,0,frame,128,64,White);
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	2301      	movs	r3, #1
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2340      	movs	r3, #64	@ 0x40
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	2100      	movs	r1, #0
 80004d0:	2000      	movs	r0, #0
 80004d2:	f001 f9e9 	bl	80018a8 <ssd1306_DrawBitmap>
}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <readPins>:

void readPins(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
    sw_state_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);
 80004e4:	23a0      	movs	r3, #160	@ 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2140      	movs	r1, #64	@ 0x40
 80004ea:	0018      	movs	r0, r3
 80004ec:	f002 f8ac 	bl	8002648 <HAL_GPIO_ReadPin>
 80004f0:	0003      	movs	r3, r0
 80004f2:	001a      	movs	r2, r3
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <readPins+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
    sw_state_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <readPins+0x34>)
 80004fa:	2101      	movs	r1, #1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 f8a3 	bl	8002648 <HAL_GPIO_ReadPin>
 8000502:	0003      	movs	r3, r0
 8000504:	001a      	movs	r2, r3
 8000506:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <readPins+0x38>)
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200001b4 	.word	0x200001b4
 8000514:	50000400 	.word	0x50000400
 8000518:	200001b8 	.word	0x200001b8

0800051c <display_tap_count_overlay>:

// Display tap count as overlay
void display_tap_count_overlay(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	@ 0x28
 8000520:	af02      	add	r7, sp, #8
    char buffer[32];
    // Display counts in a single line to save space
    sprintf(buffer, "%lu", total_taps);
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <display_tap_count_overlay+0x38>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	490c      	ldr	r1, [pc, #48]	@ (8000558 <display_tap_count_overlay+0x3c>)
 8000528:	003b      	movs	r3, r7
 800052a:	0018      	movs	r0, r3
 800052c:	f003 fe2c 	bl	8004188 <siprintf>
    ssd1306_SetCursor(2, 1);
 8000530:	2101      	movs	r1, #1
 8000532:	2002      	movs	r0, #2
 8000534:	f001 f99e 	bl	8001874 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, ComicSans_11x12, White);
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <display_tap_count_overlay+0x40>)
 800053a:	0038      	movs	r0, r7
 800053c:	2201      	movs	r2, #1
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	6819      	ldr	r1, [r3, #0]
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f001 f969 	bl	800181c <ssd1306_WriteString>
}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b008      	add	sp, #32
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	200001c0 	.word	0x200001c0
 8000558:	08004af0 	.word	0x08004af0
 800055c:	080080d0 	.word	0x080080d0

08000560 <display_saved_indicator>:

// Display saved indicator
void display_saved_indicator(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af02      	add	r7, sp, #8
    // Display "saved!" in bottom right corner
	if(!display_mode){
 8000566:	4b1d      	ldr	r3, [pc, #116]	@ (80005dc <display_saved_indicator+0x7c>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d125      	bne.n	80005ba <display_saved_indicator+0x5a>
		char buffer[32];
		sprintf(buffer, "saved! (%lu)", total_taps);
 800056e:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <display_saved_indicator+0x80>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	491c      	ldr	r1, [pc, #112]	@ (80005e4 <display_saved_indicator+0x84>)
 8000574:	003b      	movs	r3, r7
 8000576:	0018      	movs	r0, r3
 8000578:	f003 fe06 	bl	8004188 <siprintf>
		ssd1306_SetCursor(80-(total_taps%10)*11, 52);
 800057c:	4b18      	ldr	r3, [pc, #96]	@ (80005e0 <display_saved_indicator+0x80>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	210a      	movs	r1, #10
 8000582:	0018      	movs	r0, r3
 8000584:	f7ff fe4c 	bl	8000220 <__aeabi_uidivmod>
 8000588:	000b      	movs	r3, r1
 800058a:	b2db      	uxtb	r3, r3
 800058c:	1c1a      	adds	r2, r3, #0
 800058e:	0092      	lsls	r2, r2, #2
 8000590:	18d2      	adds	r2, r2, r3
 8000592:	1892      	adds	r2, r2, r2
 8000594:	18d3      	adds	r3, r2, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2250      	movs	r2, #80	@ 0x50
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2134      	movs	r1, #52	@ 0x34
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 f967 	bl	8001874 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, ComicSans_11x12, White);
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <display_saved_indicator+0x88>)
 80005a8:	0038      	movs	r0, r7
 80005aa:	2201      	movs	r2, #1
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f001 f932 	bl	800181c <ssd1306_WriteString>
	} else{
		ssd1306_SetCursor(80, 52);
		ssd1306_WriteString("saved!", ComicSans_11x12, White);
	}
}
 80005b8:	e00c      	b.n	80005d4 <display_saved_indicator+0x74>
		ssd1306_SetCursor(80, 52);
 80005ba:	2134      	movs	r1, #52	@ 0x34
 80005bc:	2050      	movs	r0, #80	@ 0x50
 80005be:	f001 f959 	bl	8001874 <ssd1306_SetCursor>
		ssd1306_WriteString("saved!", ComicSans_11x12, White);
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <display_saved_indicator+0x88>)
 80005c4:	4809      	ldr	r0, [pc, #36]	@ (80005ec <display_saved_indicator+0x8c>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	6819      	ldr	r1, [r3, #0]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f001 f924 	bl	800181c <ssd1306_WriteString>
}
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b008      	add	sp, #32
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200001d0 	.word	0x200001d0
 80005e0:	200001c0 	.word	0x200001c0
 80005e4:	08004af4 	.word	0x08004af4
 80005e8:	080080d0 	.word	0x080080d0
 80005ec:	08004b04 	.word	0x08004b04

080005f0 <update_display_with_overlays>:

// Update display with overlays
void update_display_with_overlays(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    // Draw overlay on top if enabled
    if (display_mode) {
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <update_display_with_overlays+0x28>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <update_display_with_overlays+0x10>
        display_tap_count_overlay();
 80005fc:	f7ff ff8e 	bl	800051c <display_tap_count_overlay>
    }

    // Show saved indicator if active
    if (show_saved_indicator) {
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <update_display_with_overlays+0x2c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <update_display_with_overlays+0x1c>
        display_saved_indicator();
 8000608:	f7ff ffaa 	bl	8000560 <display_saved_indicator>
    }

    ssd1306_UpdateScreen();
 800060c:	f000 ffc4 	bl	8001598 <ssd1306_UpdateScreen>
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	200001d0 	.word	0x200001d0
 800061c:	200001e4 	.word	0x200001e4

08000620 <handle_display_mode_switch>:

// Handle display mode switching (both buttons held)
uint8_t handle_display_mode_switch(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    if (BOTH_PRESSED) {
 8000624:	4b19      	ldr	r3, [pc, #100]	@ (800068c <handle_display_mode_switch+0x6c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d125      	bne.n	8000678 <handle_display_mode_switch+0x58>
 800062c:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <handle_display_mode_switch+0x70>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d121      	bne.n	8000678 <handle_display_mode_switch+0x58>
        if (both_pressed_timer == 0) {
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <handle_display_mode_switch+0x74>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d105      	bne.n	8000648 <handle_display_mode_switch+0x28>
            both_pressed_timer = HAL_GetTick();
 800063c:	f001 fbee 	bl	8001e1c <HAL_GetTick>
 8000640:	0002      	movs	r2, r0
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <handle_display_mode_switch+0x74>)
 8000644:	601a      	str	r2, [r3, #0]
        if (both_pressed_timer == 0) {
 8000646:	e01b      	b.n	8000680 <handle_display_mode_switch+0x60>
        } else if (HAL_GetTick() - both_pressed_timer >= MODE_SWITCH_TIME) {
 8000648:	f001 fbe8 	bl	8001e1c <HAL_GetTick>
 800064c:	0002      	movs	r2, r0
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <handle_display_mode_switch+0x74>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	4a10      	ldr	r2, [pc, #64]	@ (8000698 <handle_display_mode_switch+0x78>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d912      	bls.n	8000680 <handle_display_mode_switch+0x60>
            display_mode = !display_mode;
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <handle_display_mode_switch+0x7c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	425a      	negs	r2, r3
 8000660:	4153      	adcs	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	001a      	movs	r2, r3
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <handle_display_mode_switch+0x7c>)
 8000668:	701a      	strb	r2, [r3, #0]
            both_pressed_timer = 0;
 800066a:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <handle_display_mode_switch+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]

            // Force save when switching modes
            force_save();
 8000670:	f000 fbda 	bl	8000e28 <force_save>
            // Wait for button release
//            while(BOTH_PRESSED) {
//                HAL_Delay(10);
//                readPins();
//            }
            return 1; // Mode switched
 8000674:	2301      	movs	r3, #1
 8000676:	e005      	b.n	8000684 <handle_display_mode_switch+0x64>
        }
    } else {
        both_pressed_timer = 0;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <handle_display_mode_switch+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	e000      	b.n	8000682 <handle_display_mode_switch+0x62>
        if (both_pressed_timer == 0) {
 8000680:	46c0      	nop			@ (mov r8, r8)
    }
    return 0; // No mode switch
 8000682:	2300      	movs	r3, #0
}
 8000684:	0018      	movs	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	200001b4 	.word	0x200001b4
 8000690:	200001b8 	.word	0x200001b8
 8000694:	200001cc 	.word	0x200001cc
 8000698:	000009c3 	.word	0x000009c3
 800069c:	200001d0 	.word	0x200001d0

080006a0 <handle_invert_toggle>:

// Handle invert toggle (left button held)
uint8_t handle_invert_toggle(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    if (LEFT_PRESSED && !RIGHT_PRESSED && both_pressed_timer == 0) {
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <handle_invert_toggle+0x90>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d138      	bne.n	800071e <handle_invert_toggle+0x7e>
 80006ac:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <handle_invert_toggle+0x94>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d134      	bne.n	800071e <handle_invert_toggle+0x7e>
 80006b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <handle_invert_toggle+0x90>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d103      	bne.n	80006c4 <handle_invert_toggle+0x24>
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <handle_invert_toggle+0x94>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d02c      	beq.n	800071e <handle_invert_toggle+0x7e>
 80006c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <handle_invert_toggle+0x98>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d128      	bne.n	800071e <handle_invert_toggle+0x7e>
        if (invert_timer == 0) {
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <handle_invert_toggle+0x9c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d105      	bne.n	80006e0 <handle_invert_toggle+0x40>
            invert_timer = HAL_GetTick();
 80006d4:	f001 fba2 	bl	8001e1c <HAL_GetTick>
 80006d8:	0002      	movs	r2, r0
 80006da:	4b18      	ldr	r3, [pc, #96]	@ (800073c <handle_invert_toggle+0x9c>)
 80006dc:	601a      	str	r2, [r3, #0]
        if (invert_timer == 0) {
 80006de:	e022      	b.n	8000726 <handle_invert_toggle+0x86>
        } else if (HAL_GetTick() - invert_timer >= INVERT_HOLD_TIME) {
 80006e0:	f001 fb9c 	bl	8001e1c <HAL_GetTick>
 80006e4:	0002      	movs	r2, r0
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <handle_invert_toggle+0x9c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1ad2      	subs	r2, r2, r3
 80006ec:	23fa      	movs	r3, #250	@ 0xfa
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d318      	bcc.n	8000726 <handle_invert_toggle+0x86>
            toggle_display_invert();
 80006f4:	f7ff fe84 	bl	8000400 <toggle_display_invert>
            invert_timer = 0;
 80006f8:	4b10      	ldr	r3, [pc, #64]	@ (800073c <handle_invert_toggle+0x9c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]

            // Wait for button release
            while(LEFT_PRESSED) {
 80006fe:	e004      	b.n	800070a <handle_invert_toggle+0x6a>
                HAL_Delay(10);
 8000700:	200a      	movs	r0, #10
 8000702:	f001 fb95 	bl	8001e30 <HAL_Delay>
                readPins();
 8000706:	f7ff feeb 	bl	80004e0 <readPins>
            while(LEFT_PRESSED) {
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <handle_invert_toggle+0x90>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d103      	bne.n	800071a <handle_invert_toggle+0x7a>
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <handle_invert_toggle+0x94>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d0f2      	beq.n	8000700 <handle_invert_toggle+0x60>
            }
            return 1; // Inverted
 800071a:	2301      	movs	r3, #1
 800071c:	e005      	b.n	800072a <handle_invert_toggle+0x8a>
        }
    } else {
        invert_timer = 0;
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <handle_invert_toggle+0x9c>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	e000      	b.n	8000728 <handle_invert_toggle+0x88>
        if (invert_timer == 0) {
 8000726:	46c0      	nop			@ (mov r8, r8)
    }
    return 0; // No invert
 8000728:	2300      	movs	r3, #0
}
 800072a:	0018      	movs	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200001b4 	.word	0x200001b4
 8000734:	200001b8 	.word	0x200001b8
 8000738:	200001cc 	.word	0x200001cc
 800073c:	200001d4 	.word	0x200001d4

08000740 <register_tap>:

// Register a tap and increment counters
void register_tap(uint8_t is_left) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	0002      	movs	r2, r0
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	701a      	strb	r2, [r3, #0]
    if (is_left) {
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d005      	beq.n	8000760 <register_tap+0x20>
        left_taps++;
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <register_tap+0x44>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <register_tap+0x44>)
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	e004      	b.n	800076a <register_tap+0x2a>
    } else {
        right_taps++;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <register_tap+0x48>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <register_tap+0x48>)
 8000768:	601a      	str	r2, [r3, #0]
    }
    total_taps++;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <register_tap+0x4c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <register_tap+0x4c>)
 8000772:	601a      	str	r2, [r3, #0]
    data_changed = 1;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <register_tap+0x50>)
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	200001c4 	.word	0x200001c4
 8000788:	200001c8 	.word	0x200001c8
 800078c:	200001c0 	.word	0x200001c0
 8000790:	200001dc 	.word	0x200001dc

08000794 <handle_tap_decay>:

// Handle tap animations and decay
void handle_tap_decay(int32_t *tap_left_cntr, int32_t *tap_right_cntr) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
    if(*tap_left_cntr > 0){
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dd13      	ble.n	80007ce <handle_tap_decay+0x3a>
        if(HAL_GetTick() - *tap_left_cntr > TAP_DECAY_TIME) {
 80007a6:	f001 fb39 	bl	8001e1c <HAL_GetTick>
 80007aa:	0002      	movs	r2, r0
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80007b4:	d907      	bls.n	80007c6 <handle_tap_decay+0x32>
            draw_animation_erase(&img_tap_left);
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <handle_tap_decay+0x74>)
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fe6c 	bl	8000496 <draw_animation_erase>
            *tap_left_cntr = 0;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	e003      	b.n	80007ce <handle_tap_decay+0x3a>
        }
        else{
            draw_animation_transparent(&img_tap_left);
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <handle_tap_decay+0x74>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f7ff fe76 	bl	80004ba <draw_animation_transparent>
        }
    }
    if(*tap_right_cntr > 0){
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	dd13      	ble.n	80007fe <handle_tap_decay+0x6a>
        if(HAL_GetTick() - *tap_right_cntr > TAP_DECAY_TIME) {
 80007d6:	f001 fb21 	bl	8001e1c <HAL_GetTick>
 80007da:	0002      	movs	r2, r0
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80007e4:	d907      	bls.n	80007f6 <handle_tap_decay+0x62>
            draw_animation_erase(&img_tap_right);
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <handle_tap_decay+0x78>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff fe54 	bl	8000496 <draw_animation_erase>
            *tap_right_cntr = 0;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
        }
        else{
            draw_animation_transparent(&img_tap_right);
        }
    }
}
 80007f4:	e003      	b.n	80007fe <handle_tap_decay+0x6a>
            draw_animation_transparent(&img_tap_right);
 80007f6:	4b05      	ldr	r3, [pc, #20]	@ (800080c <handle_tap_decay+0x78>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fe5e 	bl	80004ba <draw_animation_transparent>
}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	08006f88 	.word	0x08006f88
 800080c:	08007388 	.word	0x08007388

08000810 <handle_paw_animations>:

// Handle paw animations based on button states
void handle_paw_animations(uint8_t *left_state, uint8_t *right_state,
                          int32_t *tap_left_cntr, int32_t *tap_right_cntr,
                          int32_t *idle_cntr) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	603b      	str	r3, [r7, #0]
    *idle_cntr = 0;
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]

    if((BOTH_PRESSED) && ((*left_state | *right_state) == 0 || (*left_state ^ *right_state) == 1)){
 8000824:	4b54      	ldr	r3, [pc, #336]	@ (8000978 <handle_paw_animations+0x168>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d140      	bne.n	80008ae <handle_paw_animations+0x9e>
 800082c:	4b53      	ldr	r3, [pc, #332]	@ (800097c <handle_paw_animations+0x16c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d13c      	bne.n	80008ae <handle_paw_animations+0x9e>
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4313      	orrs	r3, r2
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d007      	beq.n	8000854 <handle_paw_animations+0x44>
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	781a      	ldrb	r2, [r3, #0]
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4053      	eors	r3, r2
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b01      	cmp	r3, #1
 8000852:	d12c      	bne.n	80008ae <handle_paw_animations+0x9e>
        draw_animation(&img_both_down_alt);
 8000854:	4b4a      	ldr	r3, [pc, #296]	@ (8000980 <handle_paw_animations+0x170>)
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff fe08 	bl	800046c <draw_animation>
        if(!*right_state){
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d10c      	bne.n	800087e <handle_paw_animations+0x6e>
            draw_animation_transparent(&img_tap_right);
 8000864:	4b47      	ldr	r3, [pc, #284]	@ (8000984 <handle_paw_animations+0x174>)
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff fe27 	bl	80004ba <draw_animation_transparent>
            *tap_right_cntr = HAL_GetTick();
 800086c:	f001 fad6 	bl	8001e1c <HAL_GetTick>
 8000870:	0003      	movs	r3, r0
 8000872:	001a      	movs	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	601a      	str	r2, [r3, #0]
            register_tap(0); // Right tap
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff ff61 	bl	8000740 <register_tap>
        }
        if(!*left_state){
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10c      	bne.n	80008a0 <handle_paw_animations+0x90>
            draw_animation_transparent(&img_tap_left);
 8000886:	4b40      	ldr	r3, [pc, #256]	@ (8000988 <handle_paw_animations+0x178>)
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff fe16 	bl	80004ba <draw_animation_transparent>
            *tap_left_cntr = HAL_GetTick();
 800088e:	f001 fac5 	bl	8001e1c <HAL_GetTick>
 8000892:	0003      	movs	r3, r0
 8000894:	001a      	movs	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	601a      	str	r2, [r3, #0]
            register_tap(1); // Left tap
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff ff50 	bl	8000740 <register_tap>
        }
        *right_state = 1;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
        *left_state = 1;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	e05f      	b.n	800096e <handle_paw_animations+0x15e>
    }
    else if(RIGHT_PRESSED){
 80008ae:	4b32      	ldr	r3, [pc, #200]	@ (8000978 <handle_paw_animations+0x168>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d12b      	bne.n	800090e <handle_paw_animations+0xfe>
 80008b6:	4b31      	ldr	r3, [pc, #196]	@ (800097c <handle_paw_animations+0x16c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d127      	bne.n	800090e <handle_paw_animations+0xfe>
        if(*right_state == 0 || *left_state == 1){
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d003      	beq.n	80008ce <handle_paw_animations+0xbe>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d117      	bne.n	80008fe <handle_paw_animations+0xee>
            draw_animation(&img_right_down_alt);
 80008ce:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <handle_paw_animations+0x17c>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff fdcb 	bl	800046c <draw_animation>
            if(!*right_state){
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10c      	bne.n	80008f8 <handle_paw_animations+0xe8>
                draw_animation_transparent(&img_tap_right);
 80008de:	4b29      	ldr	r3, [pc, #164]	@ (8000984 <handle_paw_animations+0x174>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff fdea 	bl	80004ba <draw_animation_transparent>
                *tap_right_cntr = HAL_GetTick();
 80008e6:	f001 fa99 	bl	8001e1c <HAL_GetTick>
 80008ea:	0003      	movs	r3, r0
 80008ec:	001a      	movs	r2, r3
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	601a      	str	r2, [r3, #0]
                register_tap(0); // Right tap
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff ff24 	bl	8000740 <register_tap>
            }
            *right_state = 1;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
        }
        if(*left_state)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d033      	beq.n	800096e <handle_paw_animations+0x15e>
            *left_state = 0;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
        if(*left_state)
 800090c:	e02f      	b.n	800096e <handle_paw_animations+0x15e>
    }
    else if(LEFT_PRESSED){
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <handle_paw_animations+0x168>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d12b      	bne.n	800096e <handle_paw_animations+0x15e>
 8000916:	4b19      	ldr	r3, [pc, #100]	@ (800097c <handle_paw_animations+0x16c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d127      	bne.n	800096e <handle_paw_animations+0x15e>
        if(*left_state == 0 || *right_state == 1){
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d003      	beq.n	800092e <handle_paw_animations+0x11e>
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d117      	bne.n	800095e <handle_paw_animations+0x14e>
            draw_animation(&img_left_down_alt);
 800092e:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <handle_paw_animations+0x180>)
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff fd9b 	bl	800046c <draw_animation>
            if(!*left_state){
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d10c      	bne.n	8000958 <handle_paw_animations+0x148>
                draw_animation_transparent(&img_tap_left);
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <handle_paw_animations+0x178>)
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff fdba 	bl	80004ba <draw_animation_transparent>
                *tap_left_cntr = HAL_GetTick();
 8000946:	f001 fa69 	bl	8001e1c <HAL_GetTick>
 800094a:	0003      	movs	r3, r0
 800094c:	001a      	movs	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
                register_tap(1); // Left tap
 8000952:	2001      	movs	r0, #1
 8000954:	f7ff fef4 	bl	8000740 <register_tap>
            }
            *left_state = 1;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
        }
        if(*right_state)
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <handle_paw_animations+0x15e>
            *right_state = 0;
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
    }
}
 800096c:	e7ff      	b.n	800096e <handle_paw_animations+0x15e>
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b004      	add	sp, #16
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	200001b4 	.word	0x200001b4
 800097c:	200001b8 	.word	0x200001b8
 8000980:	08006388 	.word	0x08006388
 8000984:	08007388 	.word	0x08007388
 8000988:	08006f88 	.word	0x08006f88
 800098c:	08006b88 	.word	0x08006b88
 8000990:	08006788 	.word	0x08006788

08000994 <check_idle_transition>:

// Check if should return to idle state
uint8_t check_idle_transition(int32_t *idle_cntr, uint8_t *left_state, uint8_t *right_state) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
    if(NONE_PRESSED){
 80009a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <check_idle_transition+0x80>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d130      	bne.n	8000a0a <check_idle_transition+0x76>
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <check_idle_transition+0x84>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d12c      	bne.n	8000a0a <check_idle_transition+0x76>
        draw_animation(&img_both_up);
 80009b0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <check_idle_transition+0x88>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff fd5a 	bl	800046c <draw_animation>
        if(*idle_cntr == 0){
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d105      	bne.n	80009cc <check_idle_transition+0x38>
            *idle_cntr = HAL_GetTick();
 80009c0:	f001 fa2c 	bl	8001e1c <HAL_GetTick>
 80009c4:	0003      	movs	r3, r0
 80009c6:	001a      	movs	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	601a      	str	r2, [r3, #0]
        }
        if(HAL_GetTick() - *idle_cntr >= IDLE_TIME){
 80009cc:	f001 fa26 	bl	8001e1c <HAL_GetTick>
 80009d0:	0002      	movs	r2, r0
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	1ad2      	subs	r2, r2, r3
 80009d8:	23fa      	movs	r3, #250	@ 0xfa
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	429a      	cmp	r2, r3
 80009de:	d306      	bcc.n	80009ee <check_idle_transition+0x5a>
            *idle_cntr = 0;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
            // Force save before going to idle
            force_save();
 80009e6:	f000 fa1f 	bl	8000e28 <force_save>
            return 1; // Should transition to idle
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <check_idle_transition+0x78>
        }
        if(*left_state)
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <check_idle_transition+0x68>
            *left_state = 0;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
        if(*right_state)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <check_idle_transition+0x76>
            *right_state = 0;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
    }
    return 0; // Stay in current state
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b004      	add	sp, #16
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200001b4 	.word	0x200001b4
 8000a18:	200001b8 	.word	0x200001b8
 8000a1c:	08004b88 	.word	0x08004b88

08000a20 <handle_reset>:

void handle_reset(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af02      	add	r7, sp, #8
	// Show confirmation prompt

	ssd1306_SetCursor(27, 10);  // x = 9
 8000a26:	210a      	movs	r1, #10
 8000a28:	201b      	movs	r0, #27
 8000a2a:	f000 ff23 	bl	8001874 <ssd1306_SetCursor>
	ssd1306_WriteString("RESET ALL?", ComicSans_11x12, White);
 8000a2e:	4b51      	ldr	r3, [pc, #324]	@ (8000b74 <handle_reset+0x154>)
 8000a30:	4851      	ldr	r0, [pc, #324]	@ (8000b78 <handle_reset+0x158>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	9200      	str	r2, [sp, #0]
 8000a36:	6819      	ldr	r1, [r3, #0]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	f000 feee 	bl	800181c <ssd1306_WriteString>
	ssd1306_SetCursor(27, 26);  // x = 3
 8000a40:	211a      	movs	r1, #26
 8000a42:	201b      	movs	r0, #27
 8000a44:	f000 ff16 	bl	8001874 <ssd1306_SetCursor>
	ssd1306_WriteString("Press again", ComicSans_11x12, White);
 8000a48:	4b4a      	ldr	r3, [pc, #296]	@ (8000b74 <handle_reset+0x154>)
 8000a4a:	484c      	ldr	r0, [pc, #304]	@ (8000b7c <handle_reset+0x15c>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	9200      	str	r2, [sp, #0]
 8000a50:	6819      	ldr	r1, [r3, #0]
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f000 fee1 	bl	800181c <ssd1306_WriteString>
	ssd1306_SetCursor(27, 42);  // x = 9
 8000a5a:	212a      	movs	r1, #42	@ 0x2a
 8000a5c:	201b      	movs	r0, #27
 8000a5e:	f000 ff09 	bl	8001874 <ssd1306_SetCursor>
	ssd1306_WriteString("to confirm", ComicSans_11x12, White);
 8000a62:	4b44      	ldr	r3, [pc, #272]	@ (8000b74 <handle_reset+0x154>)
 8000a64:	4846      	ldr	r0, [pc, #280]	@ (8000b80 <handle_reset+0x160>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	9200      	str	r2, [sp, #0]
 8000a6a:	6819      	ldr	r1, [r3, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f000 fed4 	bl	800181c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000a74:	f000 fd90 	bl	8001598 <ssd1306_UpdateScreen>
	// Wait for button release
	while(RIGHT_PRESSED) {
 8000a78:	e004      	b.n	8000a84 <handle_reset+0x64>
		HAL_Delay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f001 f9d8 	bl	8001e30 <HAL_Delay>
		readPins();
 8000a80:	f7ff fd2e 	bl	80004e0 <readPins>
	while(RIGHT_PRESSED) {
 8000a84:	4b3f      	ldr	r3, [pc, #252]	@ (8000b84 <handle_reset+0x164>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d103      	bne.n	8000a94 <handle_reset+0x74>
 8000a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b88 <handle_reset+0x168>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0f2      	beq.n	8000a7a <handle_reset+0x5a>
	}

	// Wait for confirmation press
	uint32_t confirm_start = HAL_GetTick();
 8000a94:	f001 f9c2 	bl	8001e1c <HAL_GetTick>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	603b      	str	r3, [r7, #0]
	uint8_t confirmed = 0;
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]

	while(HAL_GetTick() - confirm_start < RESET_CONFIRM_TIMEOUT) {
 8000aa2:	e010      	b.n	8000ac6 <handle_reset+0xa6>
		readPins();
 8000aa4:	f7ff fd1c 	bl	80004e0 <readPins>

		if(RIGHT_PRESSED) {
 8000aa8:	4b36      	ldr	r3, [pc, #216]	@ (8000b84 <handle_reset+0x164>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d107      	bne.n	8000ac0 <handle_reset+0xa0>
 8000ab0:	4b35      	ldr	r3, [pc, #212]	@ (8000b88 <handle_reset+0x168>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d103      	bne.n	8000ac0 <handle_reset+0xa0>
			confirmed = 1;
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
			break;
 8000abe:	e00a      	b.n	8000ad6 <handle_reset+0xb6>
		}

		HAL_Delay(100);
 8000ac0:	2064      	movs	r0, #100	@ 0x64
 8000ac2:	f001 f9b5 	bl	8001e30 <HAL_Delay>
	while(HAL_GetTick() - confirm_start < RESET_CONFIRM_TIMEOUT) {
 8000ac6:	f001 f9a9 	bl	8001e1c <HAL_GetTick>
 8000aca:	0002      	movs	r2, r0
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	4a2e      	ldr	r2, [pc, #184]	@ (8000b8c <handle_reset+0x16c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d9e6      	bls.n	8000aa4 <handle_reset+0x84>
	}

	if(confirmed) {
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d02a      	beq.n	8000b34 <handle_reset+0x114>
		// Perform reset
		reset_all_settings();
 8000ade:	f000 f9fd 	bl	8000edc <reset_all_settings>
		ssd1306_InvertDisplay(0);  // Apply default display mode
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 ffac 	bl	8001a40 <ssd1306_InvertDisplay>

		// Show success feedback
		ssd1306_Fill(Black);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 fd3b 	bl	8001564 <ssd1306_Fill>
		ssd1306_SetCursor(35, 20);
 8000aee:	2114      	movs	r1, #20
 8000af0:	2023      	movs	r0, #35	@ 0x23
 8000af2:	f000 febf 	bl	8001874 <ssd1306_SetCursor>
		ssd1306_WriteString("RESET OK!", ComicSans_11x12, White);
 8000af6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <handle_reset+0x154>)
 8000af8:	4825      	ldr	r0, [pc, #148]	@ (8000b90 <handle_reset+0x170>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	9200      	str	r2, [sp, #0]
 8000afe:	6819      	ldr	r1, [r3, #0]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f000 fe8a 	bl	800181c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000b08:	f000 fd46 	bl	8001598 <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 8000b0c:	23fa      	movs	r3, #250	@ 0xfa
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 f98d 	bl	8001e30 <HAL_Delay>

		// Wait for button release
		while(RIGHT_PRESSED) {
 8000b16:	e004      	b.n	8000b22 <handle_reset+0x102>
			HAL_Delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f001 f989 	bl	8001e30 <HAL_Delay>
			readPins();
 8000b1e:	f7ff fcdf 	bl	80004e0 <readPins>
		while(RIGHT_PRESSED) {
 8000b22:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <handle_reset+0x164>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d11b      	bne.n	8000b62 <handle_reset+0x142>
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <handle_reset+0x168>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f2      	beq.n	8000b18 <handle_reset+0xf8>
 8000b32:	e016      	b.n	8000b62 <handle_reset+0x142>
		}
	} else {
		// Cancelled
		ssd1306_Fill(Black);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 fd15 	bl	8001564 <ssd1306_Fill>
		ssd1306_SetCursor(40, 25);
 8000b3a:	2119      	movs	r1, #25
 8000b3c:	2028      	movs	r0, #40	@ 0x28
 8000b3e:	f000 fe99 	bl	8001874 <ssd1306_SetCursor>
		ssd1306_WriteString("Cancelled", ComicSans_11x12, White);
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <handle_reset+0x154>)
 8000b44:	4813      	ldr	r0, [pc, #76]	@ (8000b94 <handle_reset+0x174>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	9200      	str	r2, [sp, #0]
 8000b4a:	6819      	ldr	r1, [r3, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f000 fe64 	bl	800181c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000b54:	f000 fd20 	bl	8001598 <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 8000b58:	23fa      	movs	r3, #250	@ 0xfa
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 f967 	bl	8001e30 <HAL_Delay>
	}

	// Clear screen
	ssd1306_Fill(Black);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 fcfe 	bl	8001564 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000b68:	f000 fd16 	bl	8001598 <ssd1306_UpdateScreen>
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	080080d0 	.word	0x080080d0
 8000b78:	08004b0c 	.word	0x08004b0c
 8000b7c:	08004b18 	.word	0x08004b18
 8000b80:	08004b24 	.word	0x08004b24
 8000b84:	200001b4 	.word	0x200001b4
 8000b88:	200001b8 	.word	0x200001b8
 8000b8c:	0000270f 	.word	0x0000270f
 8000b90:	08004b30 	.word	0x08004b30
 8000b94:	08004b3c 	.word	0x08004b3c

08000b98 <handle_credits>:

void handle_credits(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af02      	add	r7, sp, #8
	// Show confirmation prompt

	ssd1306_SetCursor(5, 10);  // x = 9
 8000b9e:	210a      	movs	r1, #10
 8000ba0:	2005      	movs	r0, #5
 8000ba2:	f000 fe67 	bl	8001874 <ssd1306_SetCursor>
	ssd1306_WriteString("Bongo Cat Fidget Toy", ComicSans_11x12, White);
 8000ba6:	4b35      	ldr	r3, [pc, #212]	@ (8000c7c <handle_credits+0xe4>)
 8000ba8:	4835      	ldr	r0, [pc, #212]	@ (8000c80 <handle_credits+0xe8>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	9200      	str	r2, [sp, #0]
 8000bae:	6819      	ldr	r1, [r3, #0]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f000 fe32 	bl	800181c <ssd1306_WriteString>
	ssd1306_SetCursor(13, 21);  // x = 3
 8000bb8:	2115      	movs	r1, #21
 8000bba:	200d      	movs	r0, #13
 8000bbc:	f000 fe5a 	bl	8001874 <ssd1306_SetCursor>
	ssd1306_WriteString("by Afonso Muralha", ComicSans_11x12, White);
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c7c <handle_credits+0xe4>)
 8000bc2:	4830      	ldr	r0, [pc, #192]	@ (8000c84 <handle_credits+0xec>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	9200      	str	r2, [sp, #0]
 8000bc8:	6819      	ldr	r1, [r3, #0]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f000 fe25 	bl	800181c <ssd1306_WriteString>
	ssd1306_SetCursor(13, 40);  // x = 9
 8000bd2:	2128      	movs	r1, #40	@ 0x28
 8000bd4:	200d      	movs	r0, #13
 8000bd6:	f000 fe4d 	bl	8001874 <ssd1306_SetCursor>
	ssd1306_WriteString("afonsomuralha.com", ComicSans_11x12, White);
 8000bda:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <handle_credits+0xe4>)
 8000bdc:	482a      	ldr	r0, [pc, #168]	@ (8000c88 <handle_credits+0xf0>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	9200      	str	r2, [sp, #0]
 8000be2:	6819      	ldr	r1, [r3, #0]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f000 fe18 	bl	800181c <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000bec:	f000 fcd4 	bl	8001598 <ssd1306_UpdateScreen>
	// Wait for button release
	while(BOTH_PRESSED || LEFT_PRESSED || RIGHT_PRESSED) {
 8000bf0:	e004      	b.n	8000bfc <handle_credits+0x64>
		HAL_Delay(10);
 8000bf2:	200a      	movs	r0, #10
 8000bf4:	f001 f91c 	bl	8001e30 <HAL_Delay>
		readPins();
 8000bf8:	f7ff fc72 	bl	80004e0 <readPins>
	while(BOTH_PRESSED || LEFT_PRESSED || RIGHT_PRESSED) {
 8000bfc:	4b23      	ldr	r3, [pc, #140]	@ (8000c8c <handle_credits+0xf4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d103      	bne.n	8000c0c <handle_credits+0x74>
 8000c04:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <handle_credits+0xf8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f2      	beq.n	8000bf2 <handle_credits+0x5a>
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <handle_credits+0xf4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d103      	bne.n	8000c1c <handle_credits+0x84>
 8000c14:	4b1e      	ldr	r3, [pc, #120]	@ (8000c90 <handle_credits+0xf8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d0ea      	beq.n	8000bf2 <handle_credits+0x5a>
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <handle_credits+0xf4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d000      	beq.n	8000c26 <handle_credits+0x8e>
 8000c24:	e003      	b.n	8000c2e <handle_credits+0x96>
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <handle_credits+0xf8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0e1      	beq.n	8000bf2 <handle_credits+0x5a>
	}

	while(1) {
		readPins();
 8000c2e:	f7ff fc57 	bl	80004e0 <readPins>

		if(RIGHT_PRESSED || LEFT_PRESSED || BOTH_PRESSED) {
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <handle_credits+0xf4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d103      	bne.n	8000c42 <handle_credits+0xaa>
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <handle_credits+0xf8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d013      	beq.n	8000c6a <handle_credits+0xd2>
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <handle_credits+0xf4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d103      	bne.n	8000c52 <handle_credits+0xba>
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <handle_credits+0xf8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d00b      	beq.n	8000c6a <handle_credits+0xd2>
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <handle_credits+0xf4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d103      	bne.n	8000c62 <handle_credits+0xca>
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <handle_credits+0xf8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <handle_credits+0xd2>
			break;
		}

		HAL_Delay(100);
 8000c62:	2064      	movs	r0, #100	@ 0x64
 8000c64:	f001 f8e4 	bl	8001e30 <HAL_Delay>
		readPins();
 8000c68:	e7e1      	b.n	8000c2e <handle_credits+0x96>
	}

	// Clear screen
	ssd1306_Fill(Black);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 fc7a 	bl	8001564 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000c70:	f000 fc92 	bl	8001598 <ssd1306_UpdateScreen>
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	080080d0 	.word	0x080080d0
 8000c80:	08004b48 	.word	0x08004b48
 8000c84:	08004b60 	.word	0x08004b60
 8000c88:	08004b74 	.word	0x08004b74
 8000c8c:	200001b4 	.word	0x200001b4
 8000c90:	200001b8 	.word	0x200001b8

08000c94 <handle_boot_overrides>:

// Handle boot-time button overrides
void handle_boot_overrides(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
    readPins();
 8000c98:	f7ff fc22 	bl	80004e0 <readPins>

    // Show credits
	if(BOTH_PRESSED){
 8000c9c:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <handle_boot_overrides+0x6c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d106      	bne.n	8000cb2 <handle_boot_overrides+0x1e>
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <handle_boot_overrides+0x70>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <handle_boot_overrides+0x1e>
		handle_credits();
 8000cac:	f7ff ff74 	bl	8000b98 <handle_credits>
		if(RIGHT_PRESSED) {
			handle_reset();
		}
	}

}
 8000cb0:	e023      	b.n	8000cfa <handle_boot_overrides+0x66>
		if(LEFT_PRESSED) {
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <handle_boot_overrides+0x6c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d115      	bne.n	8000ce6 <handle_boot_overrides+0x52>
 8000cba:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <handle_boot_overrides+0x70>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d111      	bne.n	8000ce6 <handle_boot_overrides+0x52>
			toggle_display_invert();
 8000cc2:	f7ff fb9d 	bl	8000400 <toggle_display_invert>
			force_save();  // Save immediately for boot-time changes
 8000cc6:	f000 f8af 	bl	8000e28 <force_save>
			while(LEFT_PRESSED) {
 8000cca:	e004      	b.n	8000cd6 <handle_boot_overrides+0x42>
				HAL_Delay(10);
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f001 f8af 	bl	8001e30 <HAL_Delay>
				readPins();
 8000cd2:	f7ff fc05 	bl	80004e0 <readPins>
			while(LEFT_PRESSED) {
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <handle_boot_overrides+0x6c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d103      	bne.n	8000ce6 <handle_boot_overrides+0x52>
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <handle_boot_overrides+0x70>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d0f2      	beq.n	8000ccc <handle_boot_overrides+0x38>
		if(RIGHT_PRESSED) {
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <handle_boot_overrides+0x6c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d105      	bne.n	8000cfa <handle_boot_overrides+0x66>
 8000cee:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <handle_boot_overrides+0x70>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <handle_boot_overrides+0x66>
			handle_reset();
 8000cf6:	f7ff fe93 	bl	8000a20 <handle_reset>
}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200001b4 	.word	0x200001b4
 8000d04:	200001b8 	.word	0x200001b8

08000d08 <save_settings>:

// Save all settings to flash
void save_settings(void) {
 8000d08:	b5b0      	push	{r4, r5, r7, lr}
 8000d0a:	b08c      	sub	sp, #48	@ 0x30
 8000d0c:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8000d0e:	f001 f9df 	bl	80020d0 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError;

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000d12:	2108      	movs	r1, #8
 8000d14:	2018      	movs	r0, #24
 8000d16:	180b      	adds	r3, r1, r0
 8000d18:	19db      	adds	r3, r3, r7
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	601a      	str	r2, [r3, #0]
    EraseInitStruct.Page = 31;  // Last page for 64KB device
 8000d1e:	180b      	adds	r3, r1, r0
 8000d20:	19db      	adds	r3, r3, r7
 8000d22:	221f      	movs	r2, #31
 8000d24:	609a      	str	r2, [r3, #8]
    EraseInitStruct.NbPages = 1;
 8000d26:	180b      	adds	r3, r1, r0
 8000d28:	19db      	adds	r3, r3, r7
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	60da      	str	r2, [r3, #12]

    HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000d2e:	231c      	movs	r3, #28
 8000d30:	18fa      	adds	r2, r7, r3
 8000d32:	180b      	adds	r3, r1, r0
 8000d34:	19db      	adds	r3, r3, r7
 8000d36:	0011      	movs	r1, r2
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 fa7d 	bl	8002238 <HAL_FLASHEx_Erase>

    // Write counters and settings
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000d3e:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <save_settings+0xbc>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	491f      	ldr	r1, [pc, #124]	@ (8000dc8 <save_settings+0xc0>)
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f001 f970 	bl	8002034 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_TOTAL_TAPS,
                     total_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000d54:	4b1d      	ldr	r3, [pc, #116]	@ (8000dcc <save_settings+0xc4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	491c      	ldr	r1, [pc, #112]	@ (8000dd0 <save_settings+0xc8>)
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2001      	movs	r0, #1
 8000d66:	f001 f965 	bl	8002034 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_LEFT_TAPS,
                     left_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <save_settings+0xcc>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	4918      	ldr	r1, [pc, #96]	@ (8000dd8 <save_settings+0xd0>)
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f001 f95a 	bl	8002034 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_RIGHT_TAPS,
                     right_taps);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <save_settings+0xd4>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	001c      	movs	r4, r3
 8000d86:	2300      	movs	r3, #0
 8000d88:	001d      	movs	r5, r3
 8000d8a:	4915      	ldr	r1, [pc, #84]	@ (8000de0 <save_settings+0xd8>)
 8000d8c:	0022      	movs	r2, r4
 8000d8e:	002b      	movs	r3, r5
 8000d90:	2001      	movs	r0, #1
 8000d92:	f001 f94f 	bl	8002034 <HAL_FLASH_Program>
                     FLASH_USER_START_ADDR + FLASH_OFFSET_DISPLAY_INV,
                     (uint64_t)display_inverted);

    HAL_FLASH_Lock();
 8000d96:	f001 f9bf 	bl	8002118 <HAL_FLASH_Lock>

    // Update last save time
    last_save_time = HAL_GetTick();
 8000d9a:	f001 f83f 	bl	8001e1c <HAL_GetTick>
 8000d9e:	0002      	movs	r2, r0
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <save_settings+0xdc>)
 8000da2:	601a      	str	r2, [r3, #0]
    data_changed = 0;  // Clear the changed flag
 8000da4:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <save_settings+0xe0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]

    // Trigger saved indicator
    show_saved_indicator = 1;
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <save_settings+0xe4>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
    saved_indicator_timer = HAL_GetTick();
 8000db0:	f001 f834 	bl	8001e1c <HAL_GetTick>
 8000db4:	0002      	movs	r2, r0
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <save_settings+0xe8>)
 8000db8:	601a      	str	r2, [r3, #0]
}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b00c      	add	sp, #48	@ 0x30
 8000dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	200001c0 	.word	0x200001c0
 8000dc8:	0800f800 	.word	0x0800f800
 8000dcc:	200001c4 	.word	0x200001c4
 8000dd0:	0800f808 	.word	0x0800f808
 8000dd4:	200001c8 	.word	0x200001c8
 8000dd8:	0800f810 	.word	0x0800f810
 8000ddc:	200001bd 	.word	0x200001bd
 8000de0:	0800f818 	.word	0x0800f818
 8000de4:	200001d8 	.word	0x200001d8
 8000de8:	200001dc 	.word	0x200001dc
 8000dec:	200001e4 	.word	0x200001e4
 8000df0:	200001e0 	.word	0x200001e0

08000df4 <check_and_save>:

// Check if it's time to save to flash
void check_and_save(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    if (data_changed && (HAL_GetTick() - last_save_time >= FLASH_SAVE_INTERVAL)) {
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <check_and_save+0x28>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00a      	beq.n	8000e16 <check_and_save+0x22>
 8000e00:	f001 f80c 	bl	8001e1c <HAL_GetTick>
 8000e04:	0002      	movs	r2, r0
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <check_and_save+0x2c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <check_and_save+0x30>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d901      	bls.n	8000e16 <check_and_save+0x22>
        save_settings();
 8000e12:	f7ff ff79 	bl	8000d08 <save_settings>
    }
}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200001dc 	.word	0x200001dc
 8000e20:	200001d8 	.word	0x200001d8
 8000e24:	0000752f 	.word	0x0000752f

08000e28 <force_save>:

// Force save (for important events)
void force_save(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    if (data_changed) {
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <force_save+0x18>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <force_save+0x10>
        save_settings();
 8000e34:	f7ff ff68 	bl	8000d08 <save_settings>
    }
}
 8000e38:	46c0      	nop			@ (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	200001dc 	.word	0x200001dc

08000e44 <load_settings>:

// Load all settings from flash
void load_settings(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
    // Load tap counters
    total_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_TOTAL_TAPS);
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <load_settings+0x78>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <load_settings+0x7c>)
 8000e50:	601a      	str	r2, [r3, #0]
    left_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_LEFT_TAPS);
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <load_settings+0x80>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <load_settings+0x84>)
 8000e58:	601a      	str	r2, [r3, #0]
    right_taps = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_RIGHT_TAPS);
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <load_settings+0x88>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <load_settings+0x8c>)
 8000e60:	601a      	str	r2, [r3, #0]

    // Load display invert setting
    uint32_t invert_setting = *(__IO uint32_t*)(FLASH_USER_START_ADDR + FLASH_OFFSET_DISPLAY_INV);
 8000e62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <load_settings+0x90>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	607b      	str	r3, [r7, #4]

    // Check for valid data (not 0xFFFFFFFF)
    if(total_taps == 0xFFFFFFFF) total_taps = 0;
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <load_settings+0x7c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	d102      	bne.n	8000e76 <load_settings+0x32>
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <load_settings+0x7c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
    if(left_taps == 0xFFFFFFFF) left_taps = 0;
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <load_settings+0x84>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	d102      	bne.n	8000e84 <load_settings+0x40>
 8000e7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <load_settings+0x84>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
    if(right_taps == 0xFFFFFFFF) right_taps = 0;
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <load_settings+0x8c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	d102      	bne.n	8000e92 <load_settings+0x4e>
 8000e8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <load_settings+0x8c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]

    // For display_inverted, only check the first byte
    if((invert_setting & 0xFF) != 0xFF) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	22ff      	movs	r2, #255	@ 0xff
 8000e96:	4013      	ands	r3, r2
 8000e98:	2bff      	cmp	r3, #255	@ 0xff
 8000e9a:	d007      	beq.n	8000eac <load_settings+0x68>
        display_inverted = (uint8_t)(invert_setting & 0x01);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <load_settings+0x94>)
 8000ea8:	701a      	strb	r2, [r3, #0]
    } else {
        display_inverted = 0;  // Default to normal display
    }
}
 8000eaa:	e002      	b.n	8000eb2 <load_settings+0x6e>
        display_inverted = 0;  // Default to normal display
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <load_settings+0x94>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b002      	add	sp, #8
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	0800f800 	.word	0x0800f800
 8000ec0:	200001c0 	.word	0x200001c0
 8000ec4:	0800f808 	.word	0x0800f808
 8000ec8:	200001c4 	.word	0x200001c4
 8000ecc:	0800f810 	.word	0x0800f810
 8000ed0:	200001c8 	.word	0x200001c8
 8000ed4:	0800f818 	.word	0x0800f818
 8000ed8:	200001bd 	.word	0x200001bd

08000edc <reset_all_settings>:

// Reset all counters and settings
void reset_all_settings(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    // Don't do flash operations too early
    if (HAL_GetTick() < 100) {
 8000ee0:	f000 ff9c 	bl	8001e1c <HAL_GetTick>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	2b63      	cmp	r3, #99	@ 0x63
 8000ee8:	d802      	bhi.n	8000ef0 <reset_all_settings+0x14>
        HAL_Delay(100);  // Ensure system is stable
 8000eea:	2064      	movs	r0, #100	@ 0x64
 8000eec:	f000 ffa0 	bl	8001e30 <HAL_Delay>
    }

    // Set values to defaults
    total_taps = 0;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <reset_all_settings+0x38>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
    left_taps = 0;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <reset_all_settings+0x3c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
    right_taps = 0;
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <reset_all_settings+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
    display_inverted = 0;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <reset_all_settings+0x44>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]

    // Add error checking
    save_settings();
 8000f08:	f7ff fefe 	bl	8000d08 <save_settings>
}
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	200001c0 	.word	0x200001c0
 8000f18:	200001c4 	.word	0x200001c4
 8000f1c:	200001c8 	.word	0x200001c8
 8000f20:	200001bd 	.word	0x200001bd

08000f24 <update_saved_indicator>:

// Update saved indicator visibility
void update_saved_indicator(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
    if (show_saved_indicator && (HAL_GetTick() - saved_indicator_timer >= SAVED_DISPLAY_TIME)) {
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <update_saved_indicator+0x2c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00c      	beq.n	8000f4a <update_saved_indicator+0x26>
 8000f30:	f000 ff74 	bl	8001e1c <HAL_GetTick>
 8000f34:	0002      	movs	r2, r0
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <update_saved_indicator+0x30>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	23fa      	movs	r3, #250	@ 0xfa
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d302      	bcc.n	8000f4a <update_saved_indicator+0x26>
        show_saved_indicator = 0;
 8000f44:	4b02      	ldr	r3, [pc, #8]	@ (8000f50 <update_saved_indicator+0x2c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
    }
}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200001e4 	.word	0x200001e4
 8000f54:	200001e0 	.word	0x200001e0

08000f58 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    if (htim == &htim14)
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d101      	bne.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0x14>
    {
        readPins();
 8000f68:	f7ff faba 	bl	80004e0 <readPins>
    }
}
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b002      	add	sp, #8
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000168 	.word	0x20000168

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f000 fed1 	bl	8001d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f8bf 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 f997 	bl	80012b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f8a:	f000 f92b 	bl	80011e4 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000f8e:	f000 f96d 	bl	800126c <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f92:	f000 f912 	bl	80011ba <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000f96:	2380      	movs	r3, #128	@ 0x80
 8000f98:	0219      	lsls	r1, r3, #8
 8000f9a:	23a0      	movs	r3, #160	@ 0xa0
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f001 fb6e 	bl	8002682 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000fa6:	200a      	movs	r0, #10
 8000fa8:	f000 ff42 	bl	8001e30 <HAL_Delay>
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	0219      	lsls	r1, r3, #8
 8000fb0:	23a0      	movs	r3, #160	@ 0xa0
 8000fb2:	05db      	lsls	r3, r3, #23
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f001 fb63 	bl	8002682 <HAL_GPIO_WritePin>
  ssd1306_Init();
 8000fbc:	f000 fa66 	bl	800148c <ssd1306_Init>


  load_settings();
 8000fc0:	f7ff ff40 	bl	8000e44 <load_settings>

  // Apply the loaded display invert setting
  ssd1306_InvertDisplay(display_inverted);
 8000fc4:	4b47      	ldr	r3, [pc, #284]	@ (80010e4 <main+0x16c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 fd39 	bl	8001a40 <ssd1306_InvertDisplay>

  // Initialize save time
  last_save_time = HAL_GetTick();
 8000fce:	f000 ff25 	bl	8001e1c <HAL_GetTick>
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	4b44      	ldr	r3, [pc, #272]	@ (80010e8 <main+0x170>)
 8000fd6:	601a      	str	r2, [r3, #0]

  // Check button states at boot for override options
  handle_boot_overrides();
 8000fd8:	f7ff fe5c 	bl	8000c94 <handle_boot_overrides>

  state_e state = IDLE;
 8000fdc:	2317      	movs	r3, #23
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
  int32_t idle_cntr = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
  int32_t tap_left_cntr = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  int32_t tap_right_cntr = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  uint8_t left_state = 0;
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
  uint8_t right_state = 0;
 8000ff6:	1dbb      	adds	r3, r7, #6
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim14);
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80010ec <main+0x174>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f002 feba 	bl	8003d78 <HAL_TIM_Base_Start_IT>

  while(1) {
    // Periodic tasks
    check_and_save();
 8001004:	f7ff fef6 	bl	8000df4 <check_and_save>
    update_saved_indicator();
 8001008:	f7ff ff8c 	bl	8000f24 <update_saved_indicator>

    switch(state){
 800100c:	2317      	movs	r3, #23
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <main+0xa4>
 8001016:	2b01      	cmp	r3, #1
 8001018:	d031      	beq.n	800107e <main+0x106>
 800101a:	e061      	b.n	80010e0 <main+0x168>
    case IDLE:
        if(sw_state_left == 0 || sw_state_right == 0){
 800101c:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <main+0x178>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <main+0xb4>
 8001024:	4b33      	ldr	r3, [pc, #204]	@ (80010f4 <main+0x17c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10d      	bne.n	8001048 <main+0xd0>
            draw_animation(&img_both_up);
 800102c:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <main+0x180>)
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff fa1c 	bl	800046c <draw_animation>
            ssd1306_UpdateScreen();
 8001034:	f000 fab0 	bl	8001598 <ssd1306_UpdateScreen>
            HAL_Delay(50);
 8001038:	2032      	movs	r0, #50	@ 0x32
 800103a:	f000 fef9 	bl	8001e30 <HAL_Delay>
            state = SWITCH;
 800103e:	2317      	movs	r3, #23
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
            draw_animation(ani_idle[idle_cnt]);
            update_display_with_overlays();
            idle_cnt = (idle_cnt + 1) % ani_idle_LEN;
            HAL_Delay(100);
        }
        break;
 8001046:	e04b      	b.n	80010e0 <main+0x168>
            draw_animation(ani_idle[idle_cnt]);
 8001048:	4b2c      	ldr	r3, [pc, #176]	@ (80010fc <main+0x184>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	001a      	movs	r2, r3
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <main+0x188>)
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	58d3      	ldr	r3, [r2, r3]
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff fa09 	bl	800046c <draw_animation>
            update_display_with_overlays();
 800105a:	f7ff fac9 	bl	80005f0 <update_display_with_overlays>
            idle_cnt = (idle_cnt + 1) % ani_idle_LEN;
 800105e:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <main+0x184>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	2205      	movs	r2, #5
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff f9c3 	bl	80003f4 <__aeabi_idivmod>
 800106e:	000b      	movs	r3, r1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <main+0x184>)
 8001074:	701a      	strb	r2, [r3, #0]
            HAL_Delay(100);
 8001076:	2064      	movs	r0, #100	@ 0x64
 8001078:	f000 feda 	bl	8001e30 <HAL_Delay>
        break;
 800107c:	e030      	b.n	80010e0 <main+0x168>

    case SWITCH:
        // Handle special button combos
        handle_display_mode_switch();
 800107e:	f7ff facf 	bl	8000620 <handle_display_mode_switch>
        handle_invert_toggle();
 8001082:	f7ff fb0d 	bl	80006a0 <handle_invert_toggle>

        // Check for idle transition
        if(check_idle_transition(&idle_cntr, &left_state, &right_state)) {
 8001086:	1dba      	adds	r2, r7, #6
 8001088:	1df9      	adds	r1, r7, #7
 800108a:	2310      	movs	r3, #16
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff fc80 	bl	8000994 <check_idle_transition>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d004      	beq.n	80010a2 <main+0x12a>
            state = IDLE;
 8001098:	2317      	movs	r3, #23
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e013      	b.n	80010ca <main+0x152>
        }
        // Handle normal paw animations
        else if(!NONE_PRESSED) {
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <main+0x178>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d103      	bne.n	80010b2 <main+0x13a>
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <main+0x17c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d00b      	beq.n	80010ca <main+0x152>
            handle_paw_animations(&left_state, &right_state,
 80010b2:	2308      	movs	r3, #8
 80010b4:	18fc      	adds	r4, r7, r3
 80010b6:	230c      	movs	r3, #12
 80010b8:	18fa      	adds	r2, r7, r3
 80010ba:	1db9      	adds	r1, r7, #6
 80010bc:	1df8      	adds	r0, r7, #7
 80010be:	2310      	movs	r3, #16
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	0023      	movs	r3, r4
 80010c6:	f7ff fba3 	bl	8000810 <handle_paw_animations>
                                &tap_left_cntr, &tap_right_cntr, &idle_cntr);
        }

        // Handle tap decay animations
        handle_tap_decay(&tap_left_cntr, &tap_right_cntr);
 80010ca:	2308      	movs	r3, #8
 80010cc:	18fa      	adds	r2, r7, r3
 80010ce:	230c      	movs	r3, #12
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff fb5d 	bl	8000794 <handle_tap_decay>

        // Update display with all overlays
        update_display_with_overlays();
 80010da:	f7ff fa89 	bl	80005f0 <update_display_with_overlays>
        break;
 80010de:	46c0      	nop			@ (mov r8, r8)
    check_and_save();
 80010e0:	e790      	b.n	8001004 <main+0x8c>
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	200001bd 	.word	0x200001bd
 80010e8:	200001d8 	.word	0x200001d8
 80010ec:	20000168 	.word	0x20000168
 80010f0:	200001b4 	.word	0x200001b4
 80010f4:	200001b8 	.word	0x200001b8
 80010f8:	08004b88 	.word	0x08004b88
 80010fc:	200001bc 	.word	0x200001bc
 8001100:	20000000 	.word	0x20000000

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b093      	sub	sp, #76	@ 0x4c
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	2414      	movs	r4, #20
 800110c:	193b      	adds	r3, r7, r4
 800110e:	0018      	movs	r0, r3
 8001110:	2334      	movs	r3, #52	@ 0x34
 8001112:	001a      	movs	r2, r3
 8001114:	2100      	movs	r1, #0
 8001116:	f003 f859 	bl	80041cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	0018      	movs	r0, r3
 800111e:	2310      	movs	r3, #16
 8001120:	001a      	movs	r2, r3
 8001122:	2100      	movs	r1, #0
 8001124:	f003 f852 	bl	80041cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	0018      	movs	r0, r3
 800112e:	f001 ffcb 	bl	80030c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001132:	193b      	adds	r3, r7, r4
 8001134:	2202      	movs	r2, #2
 8001136:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001138:	193b      	adds	r3, r7, r4
 800113a:	2280      	movs	r2, #128	@ 0x80
 800113c:	0052      	lsls	r2, r2, #1
 800113e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001140:	0021      	movs	r1, r4
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001148:	187b      	adds	r3, r7, r1
 800114a:	2240      	movs	r2, #64	@ 0x40
 800114c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2202      	movs	r2, #2
 8001152:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2202      	movs	r2, #2
 8001158:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2208      	movs	r2, #8
 8001164:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2280      	movs	r2, #128	@ 0x80
 800116a:	0292      	lsls	r2, r2, #10
 800116c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2280      	movs	r2, #128	@ 0x80
 8001172:	0592      	lsls	r2, r2, #22
 8001174:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	187b      	adds	r3, r7, r1
 8001178:	0018      	movs	r0, r3
 800117a:	f001 ffe5 	bl	8003148 <HAL_RCC_OscConfig>
 800117e:	1e03      	subs	r3, r0, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001182:	f000 f943 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2202      	movs	r2, #2
 8001190:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2280      	movs	r2, #128	@ 0x80
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2101      	movs	r1, #1
 80011a4:	0018      	movs	r0, r3
 80011a6:	f002 fadf 	bl	8003768 <HAL_RCC_ClockConfig>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011ae:	f000 f92d 	bl	800140c <Error_Handler>
  }
}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b013      	add	sp, #76	@ 0x4c
 80011b8:	bd90      	pop	{r4, r7, pc}

080011ba <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2004      	movs	r0, #4
 80011c4:	f000 ff04 	bl	8001fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80011c8:	2004      	movs	r0, #4
 80011ca:	f000 ff16 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2013      	movs	r0, #19
 80011d4:	f000 fefc 	bl	8001fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80011d8:	2013      	movs	r0, #19
 80011da:	f000 ff0e 	bl	8001ffa <HAL_NVIC_EnableIRQ>
}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <MX_I2C1_Init+0x7c>)
 80011ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001264 <MX_I2C1_Init+0x80>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00601133;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <MX_I2C1_Init+0x7c>)
 80011f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <MX_I2C1_Init+0x84>)
 80011f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <MX_I2C1_Init+0x7c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <MX_I2C1_Init+0x7c>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MX_I2C1_Init+0x7c>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <MX_I2C1_Init+0x7c>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_I2C1_Init+0x7c>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001212:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <MX_I2C1_Init+0x7c>)
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x7c>)
 800121a:	2280      	movs	r2, #128	@ 0x80
 800121c:	0292      	lsls	r2, r2, #10
 800121e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x7c>)
 8001222:	0018      	movs	r0, r3
 8001224:	f001 fa4a 	bl	80026bc <HAL_I2C_Init>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800122c:	f000 f8ee 	bl	800140c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	015a      	lsls	r2, r3, #5
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x7c>)
 8001236:	0011      	movs	r1, r2
 8001238:	0018      	movs	r0, r3
 800123a:	f001 fead 	bl	8002f98 <HAL_I2CEx_ConfigAnalogFilter>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d001      	beq.n	8001246 <MX_I2C1_Init+0x62>
  {
    Error_Handler();
 8001242:	f000 f8e3 	bl	800140c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x7c>)
 8001248:	2100      	movs	r1, #0
 800124a:	0018      	movs	r0, r3
 800124c:	f001 fef0 	bl	8003030 <HAL_I2CEx_ConfigDigitalFilter>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C1_Init+0x74>
  {
    Error_Handler();
 8001254:	f000 f8da 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001258:	46c0      	nop			@ (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	20000114 	.word	0x20000114
 8001264:	40005400 	.word	0x40005400
 8001268:	00601133 	.word	0x00601133

0800126c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  htim14.Instance = TIM14;
 8001270:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_TIM14_Init+0x40>)
 8001272:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <MX_TIM14_Init+0x44>)
 8001274:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 32-1;      // Was 100-1
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <MX_TIM14_Init+0x40>)
 8001278:	221f      	movs	r2, #31
 800127a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <MX_TIM14_Init+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;      // 32MHz/32/10000 = 100Hz
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <MX_TIM14_Init+0x40>)
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <MX_TIM14_Init+0x48>)
 8001286:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <MX_TIM14_Init+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <MX_TIM14_Init+0x40>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <MX_TIM14_Init+0x40>)
 8001296:	0018      	movs	r0, r3
 8001298:	f002 fd16 	bl	8003cc8 <HAL_TIM_Base_Init>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80012a0:	f000 f8b4 	bl	800140c <Error_Handler>
  }
}
 80012a4:	46c0      	nop			@ (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	20000168 	.word	0x20000168
 80012b0:	40002000 	.word	0x40002000
 80012b4:	0000270f 	.word	0x0000270f

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	240c      	movs	r4, #12
 80012c0:	193b      	adds	r3, r7, r4
 80012c2:	0018      	movs	r0, r3
 80012c4:	2314      	movs	r3, #20
 80012c6:	001a      	movs	r2, r3
 80012c8:	2100      	movs	r1, #0
 80012ca:	f002 ff7f 	bl	80041cc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b4a      	ldr	r3, [pc, #296]	@ (80013f8 <MX_GPIO_Init+0x140>)
 80012d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012d2:	4b49      	ldr	r3, [pc, #292]	@ (80013f8 <MX_GPIO_Init+0x140>)
 80012d4:	2102      	movs	r1, #2
 80012d6:	430a      	orrs	r2, r1
 80012d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80012da:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <MX_GPIO_Init+0x140>)
 80012dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012de:	2202      	movs	r2, #2
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <MX_GPIO_Init+0x140>)
 80012e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ea:	4b43      	ldr	r3, [pc, #268]	@ (80013f8 <MX_GPIO_Init+0x140>)
 80012ec:	2104      	movs	r1, #4
 80012ee:	430a      	orrs	r2, r1
 80012f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012f2:	4b41      	ldr	r3, [pc, #260]	@ (80013f8 <MX_GPIO_Init+0x140>)
 80012f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012f6:	2204      	movs	r2, #4
 80012f8:	4013      	ands	r3, r2
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b3e      	ldr	r3, [pc, #248]	@ (80013f8 <MX_GPIO_Init+0x140>)
 8001300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001302:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <MX_GPIO_Init+0x140>)
 8001304:	2101      	movs	r1, #1
 8001306:	430a      	orrs	r2, r1
 8001308:	635a      	str	r2, [r3, #52]	@ 0x34
 800130a:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <MX_GPIO_Init+0x140>)
 800130c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800130e:	2201      	movs	r2, #1
 8001310:	4013      	ands	r3, r2
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	0219      	lsls	r1, r3, #8
 800131a:	23a0      	movs	r3, #160	@ 0xa0
 800131c:	05db      	lsls	r3, r3, #23
 800131e:	2200      	movs	r2, #0
 8001320:	0018      	movs	r0, r3
 8001322:	f001 f9ae 	bl	8002682 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 8001326:	193b      	adds	r3, r7, r4
 8001328:	4a34      	ldr	r2, [pc, #208]	@ (80013fc <MX_GPIO_Init+0x144>)
 800132a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132c:	193b      	adds	r3, r7, r4
 800132e:	2203      	movs	r2, #3
 8001330:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	193b      	adds	r3, r7, r4
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001338:	193b      	adds	r3, r7, r4
 800133a:	4a31      	ldr	r2, [pc, #196]	@ (8001400 <MX_GPIO_Init+0x148>)
 800133c:	0019      	movs	r1, r3
 800133e:	0010      	movs	r0, r2
 8001340:	f001 f81e 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 PA8
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001344:	193b      	adds	r3, r7, r4
 8001346:	4a2f      	ldr	r2, [pc, #188]	@ (8001404 <MX_GPIO_Init+0x14c>)
 8001348:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	193b      	adds	r3, r7, r4
 800134c:	2203      	movs	r2, #3
 800134e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	193b      	adds	r3, r7, r4
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	193a      	adds	r2, r7, r4
 8001358:	23a0      	movs	r3, #160	@ 0xa0
 800135a:	05db      	lsls	r3, r3, #23
 800135c:	0011      	movs	r1, r2
 800135e:	0018      	movs	r0, r3
 8001360:	f001 f80e 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_LEFT_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin;
 8001364:	193b      	adds	r3, r7, r4
 8001366:	2240      	movs	r2, #64	@ 0x40
 8001368:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	193b      	adds	r3, r7, r4
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	193b      	adds	r3, r7, r4
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001376:	193a      	adds	r2, r7, r4
 8001378:	23a0      	movs	r3, #160	@ 0xa0
 800137a:	05db      	lsls	r3, r3, #23
 800137c:	0011      	movs	r1, r2
 800137e:	0018      	movs	r0, r3
 8001380:	f000 fffe 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 8001384:	193b      	adds	r3, r7, r4
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	193b      	adds	r3, r7, r4
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	193b      	adds	r3, r7, r4
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001396:	193b      	adds	r3, r7, r4
 8001398:	4a1b      	ldr	r2, [pc, #108]	@ (8001408 <MX_GPIO_Init+0x150>)
 800139a:	0019      	movs	r1, r3
 800139c:	0010      	movs	r0, r2
 800139e:	f000 ffef 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80013a2:	0021      	movs	r1, r4
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	22ff      	movs	r2, #255	@ 0xff
 80013a8:	0052      	lsls	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ac:	000c      	movs	r4, r1
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	2203      	movs	r2, #3
 80013b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	193b      	adds	r3, r7, r4
 80013bc:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <MX_GPIO_Init+0x150>)
 80013be:	0019      	movs	r1, r3
 80013c0:	0010      	movs	r0, r2
 80013c2:	f000 ffdd 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 80013c6:	0021      	movs	r1, r4
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2280      	movs	r2, #128	@ 0x80
 80013cc:	0212      	lsls	r2, r2, #8
 80013ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2201      	movs	r2, #1
 80013d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80013e2:	187a      	adds	r2, r7, r1
 80013e4:	23a0      	movs	r3, #160	@ 0xa0
 80013e6:	05db      	lsls	r3, r3, #23
 80013e8:	0011      	movs	r1, r2
 80013ea:	0018      	movs	r0, r3
 80013ec:	f000 ffc8 	bl	8002380 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013f0:	46c0      	nop			@ (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b009      	add	sp, #36	@ 0x24
 80013f6:	bd90      	pop	{r4, r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	0000c040 	.word	0x0000c040
 8001400:	50000800 	.word	0x50000800
 8001404:	00001dbf 	.word	0x00001dbf
 8001408:	50000400 	.word	0x50000400

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	e7fd      	b.n	8001414 <Error_Handler+0x8>

08001418 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af04      	add	r7, sp, #16
 800142a:	0002      	movs	r2, r0
 800142c:	1dfb      	adds	r3, r7, #7
 800142e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001430:	4808      	ldr	r0, [pc, #32]	@ (8001454 <ssd1306_WriteCommand+0x30>)
 8001432:	2301      	movs	r3, #1
 8001434:	425b      	negs	r3, r3
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	2301      	movs	r3, #1
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	2200      	movs	r2, #0
 8001444:	2178      	movs	r1, #120	@ 0x78
 8001446:	f001 f9df 	bl	8002808 <HAL_I2C_Mem_Write>
}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	20000114 	.word	0x20000114

08001458 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af04      	add	r7, sp, #16
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4808      	ldr	r0, [pc, #32]	@ (8001488 <ssd1306_WriteData+0x30>)
 8001468:	2201      	movs	r2, #1
 800146a:	4252      	negs	r2, r2
 800146c:	9202      	str	r2, [sp, #8]
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	2240      	movs	r2, #64	@ 0x40
 8001478:	2178      	movs	r1, #120	@ 0x78
 800147a:	f001 f9c5 	bl	8002808 <HAL_I2C_Mem_Write>
}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b002      	add	sp, #8
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	20000114 	.word	0x20000114

0800148c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001490:	f7ff ffc2 	bl	8001418 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001494:	2064      	movs	r0, #100	@ 0x64
 8001496:	f000 fccb 	bl	8001e30 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800149a:	2000      	movs	r0, #0
 800149c:	f000 faaa 	bl	80019f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80014a0:	2020      	movs	r0, #32
 80014a2:	f7ff ffbf 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff ffbc 	bl	8001424 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014ac:	20b0      	movs	r0, #176	@ 0xb0
 80014ae:	f7ff ffb9 	bl	8001424 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 80014b2:	20c0      	movs	r0, #192	@ 0xc0
 80014b4:	f7ff ffb6 	bl	8001424 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff ffb3 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80014be:	2010      	movs	r0, #16
 80014c0:	f7ff ffb0 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80014c4:	2040      	movs	r0, #64	@ 0x40
 80014c6:	f7ff ffad 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);//FF
 80014ca:	20ff      	movs	r0, #255	@ 0xff
 80014cc:	f000 fa79 	bl	80019c2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 80014d0:	20a0      	movs	r0, #160	@ 0xa0
 80014d2:	f7ff ffa7 	bl	8001424 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80014d6:	20a6      	movs	r0, #166	@ 0xa6
 80014d8:	f7ff ffa4 	bl	8001424 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80014dc:	20a8      	movs	r0, #168	@ 0xa8
 80014de:	f7ff ffa1 	bl	8001424 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80014e2:	203f      	movs	r0, #63	@ 0x3f
 80014e4:	f7ff ff9e 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014e8:	20a4      	movs	r0, #164	@ 0xa4
 80014ea:	f7ff ff9b 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80014ee:	20d3      	movs	r0, #211	@ 0xd3
 80014f0:	f7ff ff98 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff ff95 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80014fa:	20d5      	movs	r0, #213	@ 0xd5
 80014fc:	f7ff ff92 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001500:	20f0      	movs	r0, #240	@ 0xf0
 8001502:	f7ff ff8f 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001506:	20d9      	movs	r0, #217	@ 0xd9
 8001508:	f7ff ff8c 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800150c:	2022      	movs	r0, #34	@ 0x22
 800150e:	f7ff ff89 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001512:	20da      	movs	r0, #218	@ 0xda
 8001514:	f7ff ff86 	bl	8001424 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001518:	2012      	movs	r0, #18
 800151a:	f7ff ff83 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800151e:	20db      	movs	r0, #219	@ 0xdb
 8001520:	f7ff ff80 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001524:	2020      	movs	r0, #32
 8001526:	f7ff ff7d 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800152a:	208d      	movs	r0, #141	@ 0x8d
 800152c:	f7ff ff7a 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001530:	2014      	movs	r0, #20
 8001532:	f7ff ff77 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001536:	2001      	movs	r0, #1
 8001538:	f000 fa5c 	bl	80019f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800153c:	2000      	movs	r0, #0
 800153e:	f000 f811 	bl	8001564 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001542:	f000 f829 	bl	8001598 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <ssd1306_Init+0xd4>)
 8001548:	2200      	movs	r2, #0
 800154a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <ssd1306_Init+0xd4>)
 800154e:	2200      	movs	r2, #0
 8001550:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001552:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <ssd1306_Init+0xd4>)
 8001554:	2201      	movs	r2, #1
 8001556:	711a      	strb	r2, [r3, #4]
}
 8001558:	46c0      	nop			@ (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	200005f8 	.word	0x200005f8

08001564 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	0002      	movs	r2, r0
 800156c:	1dfb      	adds	r3, r7, #7
 800156e:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001570:	1dfb      	adds	r3, r7, #7
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <ssd1306_Fill+0x18>
 8001578:	2300      	movs	r3, #0
 800157a:	e000      	b.n	800157e <ssd1306_Fill+0x1a>
 800157c:	23ff      	movs	r3, #255	@ 0xff
 800157e:	2282      	movs	r2, #130	@ 0x82
 8001580:	00d2      	lsls	r2, r2, #3
 8001582:	4804      	ldr	r0, [pc, #16]	@ (8001594 <ssd1306_Fill+0x30>)
 8001584:	0019      	movs	r1, r3
 8001586:	f002 fe21 	bl	80041cc <memset>
}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b002      	add	sp, #8
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	200001e8 	.word	0x200001e8

08001598 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	e01e      	b.n	80015e4 <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	3b50      	subs	r3, #80	@ 0x50
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7ff ff38 	bl	8001424 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff ff35 	bl	8001424 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80015ba:	2010      	movs	r0, #16
 80015bc:	f7ff ff32 	bl	8001424 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	0013      	movs	r3, r2
 80015c6:	019b      	lsls	r3, r3, #6
 80015c8:	189b      	adds	r3, r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	001a      	movs	r2, r3
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <ssd1306_UpdateScreen+0x60>)
 80015d0:	18d3      	adds	r3, r2, r3
 80015d2:	2182      	movs	r1, #130	@ 0x82
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff ff3f 	bl	8001458 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	3201      	adds	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b07      	cmp	r3, #7
 80015ea:	d9dc      	bls.n	80015a6 <ssd1306_UpdateScreen+0xe>
    }
}
 80015ec:	46c0      	nop			@ (mov r8, r8)
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b002      	add	sp, #8
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	200001e8 	.word	0x200001e8

080015fc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	0004      	movs	r4, r0
 8001604:	0008      	movs	r0, r1
 8001606:	0011      	movs	r1, r2
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	1c22      	adds	r2, r4, #0
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	1dbb      	adds	r3, r7, #6
 8001610:	1c02      	adds	r2, r0, #0
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	1d7b      	adds	r3, r7, #5
 8001616:	1c0a      	adds	r2, r1, #0
 8001618:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b81      	cmp	r3, #129	@ 0x81
 8001620:	d853      	bhi.n	80016ca <ssd1306_DrawPixel+0xce>
 8001622:	1dbb      	adds	r3, r7, #6
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b3f      	cmp	r3, #63	@ 0x3f
 8001628:	d84f      	bhi.n	80016ca <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800162a:	1d7b      	adds	r3, r7, #5
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d124      	bne.n	800167c <ssd1306_DrawPixel+0x80>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	1dbb      	adds	r3, r7, #6
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	08db      	lsrs	r3, r3, #3
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	0001      	movs	r1, r0
 8001640:	000b      	movs	r3, r1
 8001642:	019b      	lsls	r3, r3, #6
 8001644:	185b      	adds	r3, r3, r1
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	18d3      	adds	r3, r2, r3
 800164a:	4a22      	ldr	r2, [pc, #136]	@ (80016d4 <ssd1306_DrawPixel+0xd8>)
 800164c:	5cd3      	ldrb	r3, [r2, r3]
 800164e:	b25a      	sxtb	r2, r3
 8001650:	1dbb      	adds	r3, r7, #6
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2107      	movs	r1, #7
 8001656:	400b      	ands	r3, r1
 8001658:	2101      	movs	r1, #1
 800165a:	4099      	lsls	r1, r3
 800165c:	000b      	movs	r3, r1
 800165e:	b25b      	sxtb	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b25c      	sxtb	r4, r3
 8001664:	1dfb      	adds	r3, r7, #7
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	0001      	movs	r1, r0
 800166a:	000b      	movs	r3, r1
 800166c:	019b      	lsls	r3, r3, #6
 800166e:	185b      	adds	r3, r3, r1
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	18d3      	adds	r3, r2, r3
 8001674:	b2e1      	uxtb	r1, r4
 8001676:	4a17      	ldr	r2, [pc, #92]	@ (80016d4 <ssd1306_DrawPixel+0xd8>)
 8001678:	54d1      	strb	r1, [r2, r3]
 800167a:	e027      	b.n	80016cc <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	1dbb      	adds	r3, r7, #6
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	b2d8      	uxtb	r0, r3
 8001688:	0001      	movs	r1, r0
 800168a:	000b      	movs	r3, r1
 800168c:	019b      	lsls	r3, r3, #6
 800168e:	185b      	adds	r3, r3, r1
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	18d3      	adds	r3, r2, r3
 8001694:	4a0f      	ldr	r2, [pc, #60]	@ (80016d4 <ssd1306_DrawPixel+0xd8>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	b25b      	sxtb	r3, r3
 800169a:	1dba      	adds	r2, r7, #6
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	2107      	movs	r1, #7
 80016a0:	400a      	ands	r2, r1
 80016a2:	2101      	movs	r1, #1
 80016a4:	4091      	lsls	r1, r2
 80016a6:	000a      	movs	r2, r1
 80016a8:	b252      	sxtb	r2, r2
 80016aa:	43d2      	mvns	r2, r2
 80016ac:	b252      	sxtb	r2, r2
 80016ae:	4013      	ands	r3, r2
 80016b0:	b25c      	sxtb	r4, r3
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	0001      	movs	r1, r0
 80016b8:	000b      	movs	r3, r1
 80016ba:	019b      	lsls	r3, r3, #6
 80016bc:	185b      	adds	r3, r3, r1
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	18d3      	adds	r3, r2, r3
 80016c2:	b2e1      	uxtb	r1, r4
 80016c4:	4a03      	ldr	r2, [pc, #12]	@ (80016d4 <ssd1306_DrawPixel+0xd8>)
 80016c6:	54d1      	strb	r1, [r2, r3]
 80016c8:	e000      	b.n	80016cc <ssd1306_DrawPixel+0xd0>
        return;
 80016ca:	46c0      	nop			@ (mov r8, r8)
    }
}
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b003      	add	sp, #12
 80016d0:	bd90      	pop	{r4, r7, pc}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	200001e8 	.word	0x200001e8

080016d8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b089      	sub	sp, #36	@ 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	0004      	movs	r4, r0
 80016e0:	0038      	movs	r0, r7
 80016e2:	6001      	str	r1, [r0, #0]
 80016e4:	6042      	str	r2, [r0, #4]
 80016e6:	6083      	str	r3, [r0, #8]
 80016e8:	210f      	movs	r1, #15
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	1c22      	adds	r2, r4, #0
 80016ee:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80016f0:	000a      	movs	r2, r1
 80016f2:	18bb      	adds	r3, r7, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b1f      	cmp	r3, #31
 80016f8:	d903      	bls.n	8001702 <ssd1306_WriteChar+0x2a>
 80016fa:	18bb      	adds	r3, r7, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b7e      	cmp	r3, #126	@ 0x7e
 8001700:	d901      	bls.n	8001706 <ssd1306_WriteChar+0x2e>
        return 0;
 8001702:	2300      	movs	r3, #0
 8001704:	e084      	b.n	8001810 <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001706:	4b44      	ldr	r3, [pc, #272]	@ (8001818 <ssd1306_WriteChar+0x140>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	001a      	movs	r2, r3
 800170c:	003b      	movs	r3, r7
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	18d3      	adds	r3, r2, r3
 8001712:	2b82      	cmp	r3, #130	@ 0x82
 8001714:	dc07      	bgt.n	8001726 <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001716:	4b40      	ldr	r3, [pc, #256]	@ (8001818 <ssd1306_WriteChar+0x140>)
 8001718:	885b      	ldrh	r3, [r3, #2]
 800171a:	001a      	movs	r2, r3
 800171c:	003b      	movs	r3, r7
 800171e:	785b      	ldrb	r3, [r3, #1]
 8001720:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001722:	2b40      	cmp	r3, #64	@ 0x40
 8001724:	dd01      	ble.n	800172a <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 8001726:	2300      	movs	r3, #0
 8001728:	e072      	b.n	8001810 <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e051      	b.n	80017d4 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 8001730:	003b      	movs	r3, r7
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	230f      	movs	r3, #15
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	3b20      	subs	r3, #32
 800173c:	0039      	movs	r1, r7
 800173e:	7849      	ldrb	r1, [r1, #1]
 8001740:	434b      	muls	r3, r1
 8001742:	0019      	movs	r1, r3
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	18cb      	adds	r3, r1, r3
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	18d3      	adds	r3, r2, r3
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	e035      	b.n	80017c2 <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	409a      	lsls	r2, r3
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	4013      	ands	r3, r2
 8001762:	d014      	beq.n	800178e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001764:	4b2c      	ldr	r3, [pc, #176]	@ (8001818 <ssd1306_WriteChar+0x140>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	18d3      	adds	r3, r2, r3
 8001770:	b2d8      	uxtb	r0, r3
 8001772:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <ssd1306_WriteChar+0x140>)
 8001774:	885b      	ldrh	r3, [r3, #2]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	18d3      	adds	r3, r2, r3
 800177e:	b2d9      	uxtb	r1, r3
 8001780:	2330      	movs	r3, #48	@ 0x30
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	001a      	movs	r2, r3
 8001788:	f7ff ff38 	bl	80015fc <ssd1306_DrawPixel>
 800178c:	e016      	b.n	80017bc <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800178e:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <ssd1306_WriteChar+0x140>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	18d3      	adds	r3, r2, r3
 800179a:	b2d8      	uxtb	r0, r3
 800179c:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <ssd1306_WriteChar+0x140>)
 800179e:	885b      	ldrh	r3, [r3, #2]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	18d3      	adds	r3, r2, r3
 80017a8:	b2d9      	uxtb	r1, r3
 80017aa:	2330      	movs	r3, #48	@ 0x30
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	425a      	negs	r2, r3
 80017b2:	4153      	adcs	r3, r2
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	001a      	movs	r2, r3
 80017b8:	f7ff ff20 	bl	80015fc <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	3301      	adds	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	003b      	movs	r3, r7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	001a      	movs	r2, r3
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d3c3      	bcc.n	8001756 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3301      	adds	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	003b      	movs	r3, r7
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	001a      	movs	r2, r3
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4293      	cmp	r3, r2
 80017de:	d3a7      	bcc.n	8001730 <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <ssd1306_WriteChar+0x140>)
 80017e2:	881a      	ldrh	r2, [r3, #0]
 80017e4:	003b      	movs	r3, r7
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <ssd1306_WriteChar+0x126>
 80017ec:	003b      	movs	r3, r7
 80017ee:	6899      	ldr	r1, [r3, #8]
 80017f0:	230f      	movs	r3, #15
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	3b20      	subs	r3, #32
 80017f8:	18cb      	adds	r3, r1, r3
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	e001      	b.n	8001802 <ssd1306_WriteChar+0x12a>
 80017fe:	003b      	movs	r3, r7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	189b      	adds	r3, r3, r2
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <ssd1306_WriteChar+0x140>)
 8001808:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800180a:	230f      	movs	r3, #15
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	781b      	ldrb	r3, [r3, #0]
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b009      	add	sp, #36	@ 0x24
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	200005f8 	.word	0x200005f8

0800181c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	0038      	movs	r0, r7
 8001826:	6001      	str	r1, [r0, #0]
 8001828:	6042      	str	r2, [r0, #4]
 800182a:	6083      	str	r3, [r0, #8]
    while (*str) {
 800182c:	e017      	b.n	800185e <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	7818      	ldrb	r0, [r3, #0]
 8001832:	003b      	movs	r3, r7
 8001834:	2218      	movs	r2, #24
 8001836:	18ba      	adds	r2, r7, r2
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	9200      	str	r2, [sp, #0]
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f7ff ff49 	bl	80016d8 <ssd1306_WriteChar>
 8001846:	0003      	movs	r3, r0
 8001848:	001a      	movs	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d002      	beq.n	8001858 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	e008      	b.n	800186a <ssd1306_WriteString+0x4e>
        }
        str++;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3301      	adds	r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1e3      	bne.n	800182e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	781b      	ldrb	r3, [r3, #0]
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b004      	add	sp, #16
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	0002      	movs	r2, r0
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	1dbb      	adds	r3, r7, #6
 8001882:	1c0a      	adds	r2, r1, #0
 8001884:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b29a      	uxth	r2, r3
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <ssd1306_SetCursor+0x30>)
 800188e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001890:	1dbb      	adds	r3, r7, #6
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b03      	ldr	r3, [pc, #12]	@ (80018a4 <ssd1306_SetCursor+0x30>)
 8001898:	805a      	strh	r2, [r3, #2]
}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b002      	add	sp, #8
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	200005f8 	.word	0x200005f8

080018a8 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	0004      	movs	r4, r0
 80018b0:	0008      	movs	r0, r1
 80018b2:	603a      	str	r2, [r7, #0]
 80018b4:	0019      	movs	r1, r3
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	1c22      	adds	r2, r4, #0
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	1dbb      	adds	r3, r7, #6
 80018be:	1c02      	adds	r2, r0, #0
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	1d7b      	adds	r3, r7, #5
 80018c4:	1c0a      	adds	r2, r1, #0
 80018c6:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80018c8:	1d7b      	adds	r3, r7, #5
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	3307      	adds	r3, #7
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da00      	bge.n	80018d4 <ssd1306_DrawBitmap+0x2c>
 80018d2:	3307      	adds	r3, #7
 80018d4:	10db      	asrs	r3, r3, #3
 80018d6:	001a      	movs	r2, r3
 80018d8:	230a      	movs	r3, #10
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 80018de:	230f      	movs	r3, #15
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b81      	cmp	r3, #129	@ 0x81
 80018ec:	d865      	bhi.n	80019ba <ssd1306_DrawBitmap+0x112>
 80018ee:	1dbb      	adds	r3, r7, #6
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80018f4:	d861      	bhi.n	80019ba <ssd1306_DrawBitmap+0x112>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80018f6:	230e      	movs	r3, #14
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e053      	b.n	80019a8 <ssd1306_DrawBitmap+0x100>
        for (uint8_t i = 0; i < w; i++) {
 8001900:	230d      	movs	r3, #13
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e03c      	b.n	8001984 <ssd1306_DrawBitmap+0xdc>
            if (i & 7) {
 800190a:	230d      	movs	r3, #13
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2207      	movs	r2, #7
 8001912:	4013      	ands	r3, r2
 8001914:	d006      	beq.n	8001924 <ssd1306_DrawBitmap+0x7c>
                byte <<= 1;
 8001916:	230f      	movs	r3, #15
 8001918:	18fa      	adds	r2, r7, r3
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	18db      	adds	r3, r3, r3
 8001920:	7013      	strb	r3, [r2, #0]
 8001922:	e014      	b.n	800194e <ssd1306_DrawBitmap+0xa6>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001924:	230e      	movs	r3, #14
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	220a      	movs	r2, #10
 800192c:	18ba      	adds	r2, r7, r2
 800192e:	2100      	movs	r1, #0
 8001930:	5e52      	ldrsh	r2, [r2, r1]
 8001932:	4353      	muls	r3, r2
 8001934:	220d      	movs	r2, #13
 8001936:	18ba      	adds	r2, r7, r2
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	08d2      	lsrs	r2, r2, #3
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	189b      	adds	r3, r3, r2
 8001940:	001a      	movs	r2, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	189a      	adds	r2, r3, r2
 8001946:	230f      	movs	r3, #15
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	7812      	ldrb	r2, [r2, #0]
 800194c:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 800194e:	230f      	movs	r3, #15
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b25b      	sxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	da0e      	bge.n	8001978 <ssd1306_DrawBitmap+0xd0>
                ssd1306_DrawPixel(x + i, y, color);
 800195a:	1dfa      	adds	r2, r7, #7
 800195c:	230d      	movs	r3, #13
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	7812      	ldrb	r2, [r2, #0]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	18d3      	adds	r3, r2, r3
 8001966:	b2d8      	uxtb	r0, r3
 8001968:	2324      	movs	r3, #36	@ 0x24
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	1dbb      	adds	r3, r7, #6
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	0019      	movs	r1, r3
 8001974:	f7ff fe42 	bl	80015fc <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001978:	210d      	movs	r1, #13
 800197a:	187b      	adds	r3, r7, r1
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	187b      	adds	r3, r7, r1
 8001980:	3201      	adds	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	230d      	movs	r3, #13
 8001986:	18fa      	adds	r2, r7, r3
 8001988:	1d7b      	adds	r3, r7, #5
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d3bb      	bcc.n	800190a <ssd1306_DrawBitmap+0x62>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001992:	210e      	movs	r1, #14
 8001994:	187b      	adds	r3, r7, r1
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	187b      	adds	r3, r7, r1
 800199a:	3201      	adds	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	1dbb      	adds	r3, r7, #6
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	1dbb      	adds	r3, r7, #6
 80019a4:	3201      	adds	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	230e      	movs	r3, #14
 80019aa:	18fa      	adds	r2, r7, r3
 80019ac:	2320      	movs	r3, #32
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3a3      	bcc.n	8001900 <ssd1306_DrawBitmap+0x58>
            }
        }
    }
    return;
 80019b8:	e000      	b.n	80019bc <ssd1306_DrawBitmap+0x114>
        return;
 80019ba:	46c0      	nop			@ (mov r8, r8)
}
 80019bc:	46bd      	mov	sp, r7
 80019be:	b005      	add	sp, #20
 80019c0:	bd90      	pop	{r4, r7, pc}

080019c2 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	0002      	movs	r2, r0
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80019ce:	210f      	movs	r1, #15
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	2281      	movs	r2, #129	@ 0x81
 80019d4:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff fd22 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7ff fd1d 	bl	8001424 <ssd1306_WriteCommand>
}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b004      	add	sp, #16
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	0002      	movs	r2, r0
 80019fc:	1dfb      	adds	r3, r7, #7
 80019fe:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001a00:	1dfb      	adds	r3, r7, #7
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001a08:	230f      	movs	r3, #15
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	22af      	movs	r2, #175	@ 0xaf
 8001a0e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <ssd1306_SetDisplayOn+0x48>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	715a      	strb	r2, [r3, #5]
 8001a16:	e006      	b.n	8001a26 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8001a18:	230f      	movs	r3, #15
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	22ae      	movs	r2, #174	@ 0xae
 8001a1e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <ssd1306_SetDisplayOn+0x48>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001a26:	230f      	movs	r3, #15
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff fcf9 	bl	8001424 <ssd1306_WriteCommand>
}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b004      	add	sp, #16
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	200005f8 	.word	0x200005f8

08001a40 <ssd1306_InvertDisplay>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_InvertDisplay(uint8_t invert) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	0002      	movs	r2, r0
 8001a48:	1dfb      	adds	r3, r7, #7
 8001a4a:	701a      	strb	r2, [r3, #0]
    if (invert) {
 8001a4c:	1dfb      	adds	r3, r7, #7
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <ssd1306_InvertDisplay+0x1c>
        ssd1306_WriteCommand(0xA7); // Inverted display mode
 8001a54:	20a7      	movs	r0, #167	@ 0xa7
 8001a56:	f7ff fce5 	bl	8001424 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xA6); // Normal display mode
    }
}
 8001a5a:	e002      	b.n	8001a62 <ssd1306_InvertDisplay+0x22>
        ssd1306_WriteCommand(0xA6); // Normal display mode
 8001a5c:	20a6      	movs	r0, #166	@ 0xa6
 8001a5e:	f7ff fce1 	bl	8001424 <ssd1306_WriteCommand>
}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b002      	add	sp, #8
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_MspInit>:
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <HAL_MspInit+0x44>)
 8001a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <HAL_MspInit+0x44>)
 8001a78:	2101      	movs	r1, #1
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_MspInit+0x44>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	2201      	movs	r2, #1
 8001a84:	4013      	ands	r3, r2
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <HAL_MspInit+0x44>)
 8001a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_MspInit+0x44>)
 8001a90:	2180      	movs	r1, #128	@ 0x80
 8001a92:	0549      	lsls	r1, r1, #21
 8001a94:	430a      	orrs	r2, r1
 8001a96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_MspInit+0x44>)
 8001a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	055b      	lsls	r3, r3, #21
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <HAL_I2C_MspInit>:
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b091      	sub	sp, #68	@ 0x44
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	232c      	movs	r3, #44	@ 0x2c
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	2314      	movs	r3, #20
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	f002 fb80 	bl	80041cc <memset>
 8001acc:	2414      	movs	r4, #20
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	2318      	movs	r3, #24
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f002 fb78 	bl	80041cc <memset>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a35      	ldr	r2, [pc, #212]	@ (8001bb8 <HAL_I2C_MspInit+0x104>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d163      	bne.n	8001bae <HAL_I2C_MspInit+0xfa>
 8001ae6:	193b      	adds	r3, r7, r4
 8001ae8:	2220      	movs	r2, #32
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	193b      	adds	r3, r7, r4
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	193b      	adds	r3, r7, r4
 8001af4:	0018      	movs	r0, r3
 8001af6:	f001 ffc1 	bl	8003a7c <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_I2C_MspInit+0x4e>
 8001afe:	f7ff fc85 	bl	800140c <Error_Handler>
 8001b02:	4b2e      	ldr	r3, [pc, #184]	@ (8001bbc <HAL_I2C_MspInit+0x108>)
 8001b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b06:	4b2d      	ldr	r3, [pc, #180]	@ (8001bbc <HAL_I2C_MspInit+0x108>)
 8001b08:	2102      	movs	r1, #2
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bbc <HAL_I2C_MspInit+0x108>)
 8001b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4b28      	ldr	r3, [pc, #160]	@ (8001bbc <HAL_I2C_MspInit+0x108>)
 8001b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b1e:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_I2C_MspInit+0x108>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	430a      	orrs	r2, r1
 8001b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b26:	4b25      	ldr	r3, [pc, #148]	@ (8001bbc <HAL_I2C_MspInit+0x108>)
 8001b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	212c      	movs	r1, #44	@ 0x2c
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	2280      	movs	r2, #128	@ 0x80
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	000c      	movs	r4, r1
 8001b3e:	193b      	adds	r3, r7, r4
 8001b40:	2212      	movs	r2, #18
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	193b      	adds	r3, r7, r4
 8001b46:	2201      	movs	r2, #1
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	193b      	adds	r3, r7, r4
 8001b52:	2206      	movs	r2, #6
 8001b54:	611a      	str	r2, [r3, #16]
 8001b56:	193b      	adds	r3, r7, r4
 8001b58:	4a19      	ldr	r2, [pc, #100]	@ (8001bc0 <HAL_I2C_MspInit+0x10c>)
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	0010      	movs	r0, r2
 8001b5e:	f000 fc0f 	bl	8002380 <HAL_GPIO_Init>
 8001b62:	0021      	movs	r1, r4
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	2280      	movs	r2, #128	@ 0x80
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	2212      	movs	r2, #18
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	187b      	adds	r3, r7, r1
 8001b74:	2201      	movs	r2, #1
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	187b      	adds	r3, r7, r1
 8001b80:	2206      	movs	r2, #6
 8001b82:	611a      	str	r2, [r3, #16]
 8001b84:	187a      	adds	r2, r7, r1
 8001b86:	23a0      	movs	r3, #160	@ 0xa0
 8001b88:	05db      	lsls	r3, r3, #23
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 fbf7 	bl	8002380 <HAL_GPIO_Init>
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_I2C_MspInit+0x108>)
 8001b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_I2C_MspInit+0x108>)
 8001b98:	2180      	movs	r1, #128	@ 0x80
 8001b9a:	0389      	lsls	r1, r1, #14
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_I2C_MspInit+0x108>)
 8001ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	039b      	lsls	r3, r3, #14
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b011      	add	sp, #68	@ 0x44
 8001bb4:	bd90      	pop	{r4, r7, pc}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	40005400 	.word	0x40005400
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	50000400 	.word	0x50000400

08001bc4 <HAL_TIM_Base_MspInit>:
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <HAL_TIM_Base_MspInit+0x38>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d10d      	bne.n	8001bf2 <HAL_TIM_Base_MspInit+0x2e>
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <HAL_TIM_Base_MspInit+0x3c>)
 8001bdc:	2180      	movs	r1, #128	@ 0x80
 8001bde:	0209      	lsls	r1, r1, #8
 8001be0:	430a      	orrs	r2, r1
 8001be2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_TIM_Base_MspInit+0x3c>)
 8001be6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b004      	add	sp, #16
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	40002000 	.word	0x40002000
 8001c00:	40021000 	.word	0x40021000

08001c04 <NMI_Handler>:
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	46c0      	nop			@ (mov r8, r8)
 8001c0a:	e7fd      	b.n	8001c08 <NMI_Handler+0x4>

08001c0c <HardFault_Handler>:
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	46c0      	nop			@ (mov r8, r8)
 8001c12:	e7fd      	b.n	8001c10 <HardFault_Handler+0x4>

08001c14 <SVC_Handler>:
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	46c0      	nop			@ (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <PendSV_Handler>:
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	46c0      	nop			@ (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <SysTick_Handler>:
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	f000 f8e4 	bl	8001df8 <HAL_IncTick>
 8001c30:	46c0      	nop			@ (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <RCC_IRQHandler>:
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <TIM14_IRQHandler>:
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4b03      	ldr	r3, [pc, #12]	@ (8001c54 <TIM14_IRQHandler+0x14>)
 8001c46:	0018      	movs	r0, r3
 8001c48:	f002 f8e4 	bl	8003e14 <HAL_TIM_IRQHandler>
 8001c4c:	46c0      	nop			@ (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	20000168 	.word	0x20000168

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	@ (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	@ (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	18d3      	adds	r3, r2, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f002 faa8 	bl	80041dc <__errno>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	425b      	negs	r3, r3
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	18d2      	adds	r2, r2, r3
 8001ca6:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <_sbrk+0x64>)
 8001ca8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b006      	add	sp, #24
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20002000 	.word	0x20002000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20000600 	.word	0x20000600
 8001cc0:	20000770 	.word	0x20000770

08001cc4 <SystemInit>:
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	46c0      	nop			@ (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cd0:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cd4:	f7ff fff6 	bl	8001cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd8:	480c      	ldr	r0, [pc, #48]	@ (8001d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001cda:	490d      	ldr	r1, [pc, #52]	@ (8001d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d14 <LoopForever+0xe>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce0:	e002      	b.n	8001ce8 <LoopCopyDataInit>

08001ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce6:	3304      	adds	r3, #4

08001ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cec:	d3f9      	bcc.n	8001ce2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8001d1c <LoopForever+0x16>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf4:	e001      	b.n	8001cfa <LoopFillZerobss>

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf8:	3204      	adds	r2, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cfe:	f002 fa73 	bl	80041e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d02:	f7ff f939 	bl	8000f78 <main>

08001d06 <LoopForever>:

LoopForever:
  b LoopForever
 8001d06:	e7fe      	b.n	8001d06 <LoopForever>
  ldr   r0, =_estack
 8001d08:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d10:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001d14:	08008158 	.word	0x08008158
  ldr r2, =_sbss
 8001d18:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001d1c:	2000076c 	.word	0x2000076c

08001d20 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d20:	e7fe      	b.n	8001d20 <ADC1_IRQHandler>
	...

08001d24 <HAL_Init>:
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	1dfb      	adds	r3, r7, #7
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_Init+0x3c>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <HAL_Init+0x3c>)
 8001d36:	2180      	movs	r1, #128	@ 0x80
 8001d38:	0049      	lsls	r1, r1, #1
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f000 f810 	bl	8001d64 <HAL_InitTick>
 8001d44:	1e03      	subs	r3, r0, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_Init+0x2c>
 8001d48:	1dfb      	adds	r3, r7, #7
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	e001      	b.n	8001d54 <HAL_Init+0x30>
 8001d50:	f7ff fe8c 	bl	8001a6c <HAL_MspInit>
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40022000 	.word	0x40022000

08001d64 <HAL_InitTick>:
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <HAL_InitTick+0x88>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d02b      	beq.n	8001dd4 <HAL_InitTick+0x70>
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001df0 <HAL_InitTick+0x8c>)
 8001d7e:	681c      	ldr	r4, [r3, #0]
 8001d80:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <HAL_InitTick+0x88>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	0019      	movs	r1, r3
 8001d86:	23fa      	movs	r3, #250	@ 0xfa
 8001d88:	0098      	lsls	r0, r3, #2
 8001d8a:	f7fe f9c3 	bl	8000114 <__udivsi3>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	0019      	movs	r1, r3
 8001d92:	0020      	movs	r0, r4
 8001d94:	f7fe f9be 	bl	8000114 <__udivsi3>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 f93d 	bl	800201a <HAL_SYSTICK_Config>
 8001da0:	1e03      	subs	r3, r0, #0
 8001da2:	d112      	bne.n	8001dca <HAL_InitTick+0x66>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d80a      	bhi.n	8001dc0 <HAL_InitTick+0x5c>
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	2301      	movs	r3, #1
 8001dae:	425b      	negs	r3, r3
 8001db0:	2200      	movs	r2, #0
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 f90c 	bl	8001fd0 <HAL_NVIC_SetPriority>
 8001db8:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <HAL_InitTick+0x90>)
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	e00d      	b.n	8001ddc <HAL_InitTick+0x78>
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e008      	b.n	8001ddc <HAL_InitTick+0x78>
 8001dca:	230f      	movs	r3, #15
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e003      	b.n	8001ddc <HAL_InitTick+0x78>
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	230f      	movs	r3, #15
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	0018      	movs	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b005      	add	sp, #20
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	2000001c 	.word	0x2000001c
 8001df0:	20000014 	.word	0x20000014
 8001df4:	20000018 	.word	0x20000018

08001df8 <HAL_IncTick>:
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <HAL_IncTick+0x1c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	001a      	movs	r2, r3
 8001e02:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_IncTick+0x20>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	18d2      	adds	r2, r2, r3
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_IncTick+0x20>)
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	46c0      	nop			@ (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	2000001c 	.word	0x2000001c
 8001e18:	20000604 	.word	0x20000604

08001e1c <HAL_GetTick>:
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4b02      	ldr	r3, [pc, #8]	@ (8001e2c <HAL_GetTick+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	20000604 	.word	0x20000604

08001e30 <HAL_Delay>:
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	f7ff fff0 	bl	8001e1c <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3301      	adds	r3, #1
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <HAL_Delay+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	001a      	movs	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	189b      	adds	r3, r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	46c0      	nop			@ (mov r8, r8)
 8001e58:	f7ff ffe0 	bl	8001e1c <HAL_GetTick>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
 8001e68:	46c0      	nop			@ (mov r8, r8)
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	2000001c 	.word	0x2000001c

08001e78 <__NVIC_EnableIRQ>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	0002      	movs	r2, r0
 8001e80:	1dfb      	adds	r3, r7, #7
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e8a:	d809      	bhi.n	8001ea0 <__NVIC_EnableIRQ+0x28>
 8001e8c:	1dfb      	adds	r3, r7, #7
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	001a      	movs	r2, r3
 8001e92:	231f      	movs	r3, #31
 8001e94:	401a      	ands	r2, r3
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <__NVIC_EnableIRQ+0x30>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4091      	lsls	r1, r2
 8001e9c:	000a      	movs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	46c0      	nop			@ (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	e000e100 	.word	0xe000e100

08001eac <__NVIC_SetPriority>:
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	6039      	str	r1, [r7, #0]
 8001eb6:	1dfb      	adds	r3, r7, #7
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ec0:	d828      	bhi.n	8001f14 <__NVIC_SetPriority+0x68>
 8001ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f80 <__NVIC_SetPriority+0xd4>)
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b25b      	sxtb	r3, r3
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	33c0      	adds	r3, #192	@ 0xc0
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	589b      	ldr	r3, [r3, r2]
 8001ed2:	1dfa      	adds	r2, r7, #7
 8001ed4:	7812      	ldrb	r2, [r2, #0]
 8001ed6:	0011      	movs	r1, r2
 8001ed8:	2203      	movs	r2, #3
 8001eda:	400a      	ands	r2, r1
 8001edc:	00d2      	lsls	r2, r2, #3
 8001ede:	21ff      	movs	r1, #255	@ 0xff
 8001ee0:	4091      	lsls	r1, r2
 8001ee2:	000a      	movs	r2, r1
 8001ee4:	43d2      	mvns	r2, r2
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	0011      	movs	r1, r2
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	019b      	lsls	r3, r3, #6
 8001eee:	22ff      	movs	r2, #255	@ 0xff
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	1dfb      	adds	r3, r7, #7
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	2303      	movs	r3, #3
 8001efa:	4003      	ands	r3, r0
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	409a      	lsls	r2, r3
 8001f00:	481f      	ldr	r0, [pc, #124]	@ (8001f80 <__NVIC_SetPriority+0xd4>)
 8001f02:	1dfb      	adds	r3, r7, #7
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b25b      	sxtb	r3, r3
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	33c0      	adds	r3, #192	@ 0xc0
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	501a      	str	r2, [r3, r0]
 8001f12:	e031      	b.n	8001f78 <__NVIC_SetPriority+0xcc>
 8001f14:	4a1b      	ldr	r2, [pc, #108]	@ (8001f84 <__NVIC_SetPriority+0xd8>)
 8001f16:	1dfb      	adds	r3, r7, #7
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	400b      	ands	r3, r1
 8001f20:	3b08      	subs	r3, #8
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3306      	adds	r3, #6
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	18d3      	adds	r3, r2, r3
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1dfa      	adds	r2, r7, #7
 8001f30:	7812      	ldrb	r2, [r2, #0]
 8001f32:	0011      	movs	r1, r2
 8001f34:	2203      	movs	r2, #3
 8001f36:	400a      	ands	r2, r1
 8001f38:	00d2      	lsls	r2, r2, #3
 8001f3a:	21ff      	movs	r1, #255	@ 0xff
 8001f3c:	4091      	lsls	r1, r2
 8001f3e:	000a      	movs	r2, r1
 8001f40:	43d2      	mvns	r2, r2
 8001f42:	401a      	ands	r2, r3
 8001f44:	0011      	movs	r1, r2
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	019b      	lsls	r3, r3, #6
 8001f4a:	22ff      	movs	r2, #255	@ 0xff
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	1dfb      	adds	r3, r7, #7
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	0018      	movs	r0, r3
 8001f54:	2303      	movs	r3, #3
 8001f56:	4003      	ands	r3, r0
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	4809      	ldr	r0, [pc, #36]	@ (8001f84 <__NVIC_SetPriority+0xd8>)
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	001c      	movs	r4, r3
 8001f64:	230f      	movs	r3, #15
 8001f66:	4023      	ands	r3, r4
 8001f68:	3b08      	subs	r3, #8
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	3306      	adds	r3, #6
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	18c3      	adds	r3, r0, r3
 8001f74:	3304      	adds	r3, #4
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	46c0      	nop			@ (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b003      	add	sp, #12
 8001f7e:	bd90      	pop	{r4, r7, pc}
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <SysTick_Config>:
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	1e5a      	subs	r2, r3, #1
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	045b      	lsls	r3, r3, #17
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d301      	bcc.n	8001fa0 <SysTick_Config+0x18>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e010      	b.n	8001fc2 <SysTick_Config+0x3a>
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <SysTick_Config+0x44>)
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	3a01      	subs	r2, #1
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	2301      	movs	r3, #1
 8001faa:	425b      	negs	r3, r3
 8001fac:	2103      	movs	r1, #3
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff ff7c 	bl	8001eac <__NVIC_SetPriority>
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <SysTick_Config+0x44>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <SysTick_Config+0x44>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriority>:
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	210f      	movs	r1, #15
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	1c02      	adds	r2, r0, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	0011      	movs	r1, r2
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff ff5d 	bl	8001eac <__NVIC_SetPriority>
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b004      	add	sp, #16
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	0002      	movs	r2, r0
 8002002:	1dfb      	adds	r3, r7, #7
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b25b      	sxtb	r3, r3
 800200c:	0018      	movs	r0, r3
 800200e:	f7ff ff33 	bl	8001e78 <__NVIC_EnableIRQ>
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b002      	add	sp, #8
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_SYSTICK_Config>:
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	0018      	movs	r0, r3
 8002026:	f7ff ffaf 	bl	8001f88 <SysTick_Config>
 800202a:	0003      	movs	r3, r0
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_FLASH_Program>:
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	603a      	str	r2, [r7, #0]
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <HAL_FLASH_Program+0x94>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_FLASH_Program+0x1a>
 800204a:	2302      	movs	r3, #2
 800204c:	e038      	b.n	80020c0 <HAL_FLASH_Program+0x8c>
 800204e:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <HAL_FLASH_Program+0x94>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <HAL_FLASH_Program+0x94>)
 8002056:	2200      	movs	r2, #0
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	2517      	movs	r5, #23
 800205c:	197c      	adds	r4, r7, r5
 800205e:	23fa      	movs	r3, #250	@ 0xfa
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f87a 	bl	800215c <FLASH_WaitForLastOperation>
 8002068:	0003      	movs	r3, r0
 800206a:	7023      	strb	r3, [r4, #0]
 800206c:	197b      	adds	r3, r7, r5
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d11f      	bne.n	80020b4 <HAL_FLASH_Program+0x80>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d106      	bne.n	8002088 <HAL_FLASH_Program+0x54>
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68b9      	ldr	r1, [r7, #8]
 8002080:	0008      	movs	r0, r1
 8002082:	f000 f8b9 	bl	80021f8 <FLASH_Program_DoubleWord>
 8002086:	e005      	b.n	8002094 <HAL_FLASH_Program+0x60>
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	0011      	movs	r1, r2
 800208e:	0018      	movs	r0, r3
 8002090:	f002 fd26 	bl	8004ae0 <__FLASH_Program_Fast_veneer>
 8002094:	2317      	movs	r3, #23
 8002096:	18fc      	adds	r4, r7, r3
 8002098:	23fa      	movs	r3, #250	@ 0xfa
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	0018      	movs	r0, r3
 800209e:	f000 f85d 	bl	800215c <FLASH_WaitForLastOperation>
 80020a2:	0003      	movs	r3, r0
 80020a4:	7023      	strb	r3, [r4, #0]
 80020a6:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <HAL_FLASH_Program+0x98>)
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43d9      	mvns	r1, r3
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <HAL_FLASH_Program+0x98>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	615a      	str	r2, [r3, #20]
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <HAL_FLASH_Program+0x94>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	2317      	movs	r3, #23
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b006      	add	sp, #24
 80020c6:	bdb0      	pop	{r4, r5, r7, pc}
 80020c8:	20000608 	.word	0x20000608
 80020cc:	40022000 	.word	0x40022000

080020d0 <HAL_FLASH_Unlock>:
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_FLASH_Unlock+0x3c>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	da0c      	bge.n	80020fe <HAL_FLASH_Unlock+0x2e>
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <HAL_FLASH_Unlock+0x3c>)
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <HAL_FLASH_Unlock+0x40>)
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <HAL_FLASH_Unlock+0x3c>)
 80020ec:	4a09      	ldr	r2, [pc, #36]	@ (8002114 <HAL_FLASH_Unlock+0x44>)
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_FLASH_Unlock+0x3c>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	da02      	bge.n	80020fe <HAL_FLASH_Unlock+0x2e>
 80020f8:	1dfb      	adds	r3, r7, #7
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	0018      	movs	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	b002      	add	sp, #8
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	40022000 	.word	0x40022000
 8002110:	45670123 	.word	0x45670123
 8002114:	cdef89ab 	.word	0xcdef89ab

08002118 <HAL_FLASH_Lock>:
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	23fa      	movs	r3, #250	@ 0xfa
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	0018      	movs	r0, r3
 800212a:	f000 f817 	bl	800215c <FLASH_WaitForLastOperation>
 800212e:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <HAL_FLASH_Lock+0x40>)
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <HAL_FLASH_Lock+0x40>)
 8002134:	2180      	movs	r1, #128	@ 0x80
 8002136:	0609      	lsls	r1, r1, #24
 8002138:	430a      	orrs	r2, r1
 800213a:	615a      	str	r2, [r3, #20]
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_FLASH_Lock+0x40>)
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	da02      	bge.n	800214a <HAL_FLASH_Lock+0x32>
 8002144:	1dfb      	adds	r3, r7, #7
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	1dfb      	adds	r3, r7, #7
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	0018      	movs	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	b002      	add	sp, #8
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	40022000 	.word	0x40022000

0800215c <FLASH_WaitForLastOperation>:
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	f7ff fe5a 	bl	8001e1c <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	e00c      	b.n	800218e <FLASH_WaitForLastOperation+0x32>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3301      	adds	r3, #1
 8002178:	d009      	beq.n	800218e <FLASH_WaitForLastOperation+0x32>
 800217a:	f7ff fe4f 	bl	8001e1c <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d801      	bhi.n	800218e <FLASH_WaitForLastOperation+0x32>
 800218a:	2303      	movs	r3, #3
 800218c:	e028      	b.n	80021e0 <FLASH_WaitForLastOperation+0x84>
 800218e:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <FLASH_WaitForLastOperation+0x8c>)
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	4013      	ands	r3, r2
 8002196:	d1ed      	bne.n	8002174 <FLASH_WaitForLastOperation+0x18>
 8002198:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <FLASH_WaitForLastOperation+0x8c>)
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	4a13      	ldr	r2, [pc, #76]	@ (80021ec <FLASH_WaitForLastOperation+0x90>)
 800219e:	4013      	ands	r3, r2
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <FLASH_WaitForLastOperation+0x8c>)
 80021a4:	4a12      	ldr	r2, [pc, #72]	@ (80021f0 <FLASH_WaitForLastOperation+0x94>)
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d011      	beq.n	80021d2 <FLASH_WaitForLastOperation+0x76>
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <FLASH_WaitForLastOperation+0x98>)
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	2301      	movs	r3, #1
 80021b6:	e013      	b.n	80021e0 <FLASH_WaitForLastOperation+0x84>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3301      	adds	r3, #1
 80021bc:	d009      	beq.n	80021d2 <FLASH_WaitForLastOperation+0x76>
 80021be:	f7ff fe2d 	bl	8001e1c <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d801      	bhi.n	80021d2 <FLASH_WaitForLastOperation+0x76>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e006      	b.n	80021e0 <FLASH_WaitForLastOperation+0x84>
 80021d2:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <FLASH_WaitForLastOperation+0x8c>)
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	02db      	lsls	r3, r3, #11
 80021da:	4013      	ands	r3, r2
 80021dc:	d1ec      	bne.n	80021b8 <FLASH_WaitForLastOperation+0x5c>
 80021de:	2300      	movs	r3, #0
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b004      	add	sp, #16
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40022000 	.word	0x40022000
 80021ec:	000083fa 	.word	0x000083fa
 80021f0:	000083fb 	.word	0x000083fb
 80021f4:	20000608 	.word	0x20000608

080021f8 <FLASH_Program_DoubleWord>:
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	603a      	str	r2, [r7, #0]
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <FLASH_Program_DoubleWord+0x3c>)
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <FLASH_Program_DoubleWord+0x3c>)
 800220a:	2101      	movs	r1, #1
 800220c:	430a      	orrs	r2, r1
 800220e:	615a      	str	r2, [r3, #20]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	001c      	movs	r4, r3
 8002220:	2300      	movs	r3, #0
 8002222:	001d      	movs	r5, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3304      	adds	r3, #4
 8002228:	0022      	movs	r2, r4
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	46c0      	nop			@ (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b004      	add	sp, #16
 8002232:	bdb0      	pop	{r4, r5, r7, pc}
 8002234:	40022000 	.word	0x40022000

08002238 <HAL_FLASHEx_Erase>:
 8002238:	b5b0      	push	{r4, r5, r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	4b35      	ldr	r3, [pc, #212]	@ (8002318 <HAL_FLASHEx_Erase+0xe0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_FLASHEx_Erase+0x16>
 800224a:	2302      	movs	r3, #2
 800224c:	e05f      	b.n	800230e <HAL_FLASHEx_Erase+0xd6>
 800224e:	4b32      	ldr	r3, [pc, #200]	@ (8002318 <HAL_FLASHEx_Erase+0xe0>)
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	4b30      	ldr	r3, [pc, #192]	@ (8002318 <HAL_FLASHEx_Erase+0xe0>)
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	250f      	movs	r5, #15
 800225c:	197c      	adds	r4, r7, r5
 800225e:	23fa      	movs	r3, #250	@ 0xfa
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	0018      	movs	r0, r3
 8002264:	f7ff ff7a 	bl	800215c <FLASH_WaitForLastOperation>
 8002268:	0003      	movs	r3, r0
 800226a:	7023      	strb	r3, [r4, #0]
 800226c:	002c      	movs	r4, r5
 800226e:	193b      	adds	r3, r7, r4
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d145      	bne.n	8002302 <HAL_FLASHEx_Erase+0xca>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2204      	movs	r2, #4
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d10d      	bne.n	80022a0 <HAL_FLASHEx_Erase+0x68>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 f849 	bl	8002320 <FLASH_MassErase>
 800228e:	193c      	adds	r4, r7, r4
 8002290:	23fa      	movs	r3, #250	@ 0xfa
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff ff61 	bl	800215c <FLASH_WaitForLastOperation>
 800229a:	0003      	movs	r3, r0
 800229c:	7023      	strb	r3, [r4, #0]
 800229e:	e030      	b.n	8002302 <HAL_FLASHEx_Erase+0xca>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2201      	movs	r2, #1
 80022a4:	4252      	negs	r2, r2
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	e01a      	b.n	80022e6 <HAL_FLASHEx_Erase+0xae>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	0011      	movs	r1, r2
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 f845 	bl	8002348 <FLASH_PageErase>
 80022be:	250f      	movs	r5, #15
 80022c0:	197c      	adds	r4, r7, r5
 80022c2:	23fa      	movs	r3, #250	@ 0xfa
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff ff48 	bl	800215c <FLASH_WaitForLastOperation>
 80022cc:	0003      	movs	r3, r0
 80022ce:	7023      	strb	r3, [r4, #0]
 80022d0:	197b      	adds	r3, r7, r5
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_FLASHEx_Erase+0xa8>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e00a      	b.n	80022f6 <HAL_FLASHEx_Erase+0xbe>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	18d3      	adds	r3, r2, r3
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d3dc      	bcc.n	80022b0 <HAL_FLASHEx_Erase+0x78>
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_FLASHEx_Erase+0xe4>)
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	4b08      	ldr	r3, [pc, #32]	@ (800231c <HAL_FLASHEx_Erase+0xe4>)
 80022fc:	2102      	movs	r1, #2
 80022fe:	438a      	bics	r2, r1
 8002300:	615a      	str	r2, [r3, #20]
 8002302:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_FLASHEx_Erase+0xe0>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	230f      	movs	r3, #15
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bdb0      	pop	{r4, r5, r7, pc}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	20000608 	.word	0x20000608
 800231c:	40022000 	.word	0x40022000

08002320 <FLASH_MassErase>:
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <FLASH_MassErase+0x24>)
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	431a      	orrs	r2, r3
 8002330:	4b04      	ldr	r3, [pc, #16]	@ (8002344 <FLASH_MassErase+0x24>)
 8002332:	2180      	movs	r1, #128	@ 0x80
 8002334:	0249      	lsls	r1, r1, #9
 8002336:	430a      	orrs	r2, r1
 8002338:	615a      	str	r2, [r3, #20]
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			@ (mov r8, r8)
 8002344:	40022000 	.word	0x40022000

08002348 <FLASH_PageErase>:
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <FLASH_PageErase+0x2c>)
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	4a08      	ldr	r2, [pc, #32]	@ (8002378 <FLASH_PageErase+0x30>)
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	00da      	lsls	r2, r3, #3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	431a      	orrs	r2, r3
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <FLASH_PageErase+0x2c>)
 8002366:	4905      	ldr	r1, [pc, #20]	@ (800237c <FLASH_PageErase+0x34>)
 8002368:	430a      	orrs	r2, r1
 800236a:	615a      	str	r2, [r3, #20]
 800236c:	46c0      	nop			@ (mov r8, r8)
 800236e:	46bd      	mov	sp, r7
 8002370:	b004      	add	sp, #16
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40022000 	.word	0x40022000
 8002378:	ffffe007 	.word	0xffffe007
 800237c:	00010002 	.word	0x00010002

08002380 <HAL_GPIO_Init>:
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e147      	b.n	8002620 <HAL_GPIO_Init+0x2a0>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2101      	movs	r1, #1
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4091      	lsls	r1, r2
 800239a:	000a      	movs	r2, r1
 800239c:	4013      	ands	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d100      	bne.n	80023a8 <HAL_GPIO_Init+0x28>
 80023a6:	e138      	b.n	800261a <HAL_GPIO_Init+0x29a>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2203      	movs	r2, #3
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d005      	beq.n	80023c0 <HAL_GPIO_Init+0x40>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2203      	movs	r2, #3
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d130      	bne.n	8002422 <HAL_GPIO_Init+0xa2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	409a      	lsls	r2, r3
 80023ce:	0013      	movs	r3, r2
 80023d0:	43da      	mvns	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	409a      	lsls	r2, r3
 80023e2:	0013      	movs	r3, r2
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	2201      	movs	r2, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	409a      	lsls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	43da      	mvns	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	2201      	movs	r2, #1
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
 8002414:	0013      	movs	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2203      	movs	r2, #3
 8002428:	4013      	ands	r3, r2
 800242a:	2b03      	cmp	r3, #3
 800242c:	d017      	beq.n	800245e <HAL_GPIO_Init+0xde>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	43da      	mvns	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	409a      	lsls	r2, r3
 8002450:	0013      	movs	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2203      	movs	r2, #3
 8002464:	4013      	ands	r3, r2
 8002466:	2b02      	cmp	r3, #2
 8002468:	d123      	bne.n	80024b2 <HAL_GPIO_Init+0x132>
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	08da      	lsrs	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3208      	adds	r2, #8
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	58d3      	ldr	r3, [r2, r3]
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2207      	movs	r2, #7
 800247c:	4013      	ands	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	409a      	lsls	r2, r3
 8002484:	0013      	movs	r3, r2
 8002486:	43da      	mvns	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2107      	movs	r1, #7
 8002496:	400b      	ands	r3, r1
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	409a      	lsls	r2, r3
 800249c:	0013      	movs	r3, r2
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	08da      	lsrs	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3208      	adds	r2, #8
 80024ac:	0092      	lsls	r2, r2, #2
 80024ae:	6939      	ldr	r1, [r7, #16]
 80024b0:	50d1      	str	r1, [r2, r3]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	409a      	lsls	r2, r3
 80024c0:	0013      	movs	r3, r2
 80024c2:	43da      	mvns	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	401a      	ands	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	409a      	lsls	r2, r3
 80024d8:	0013      	movs	r3, r2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	23c0      	movs	r3, #192	@ 0xc0
 80024ec:	029b      	lsls	r3, r3, #10
 80024ee:	4013      	ands	r3, r2
 80024f0:	d100      	bne.n	80024f4 <HAL_GPIO_Init+0x174>
 80024f2:	e092      	b.n	800261a <HAL_GPIO_Init+0x29a>
 80024f4:	4a50      	ldr	r2, [pc, #320]	@ (8002638 <HAL_GPIO_Init+0x2b8>)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3318      	adds	r3, #24
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	589b      	ldr	r3, [r3, r2]
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2203      	movs	r2, #3
 8002506:	4013      	ands	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	220f      	movs	r2, #15
 800250c:	409a      	lsls	r2, r3
 800250e:	0013      	movs	r3, r2
 8002510:	43da      	mvns	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	23a0      	movs	r3, #160	@ 0xa0
 800251c:	05db      	lsls	r3, r3, #23
 800251e:	429a      	cmp	r2, r3
 8002520:	d013      	beq.n	800254a <HAL_GPIO_Init+0x1ca>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a45      	ldr	r2, [pc, #276]	@ (800263c <HAL_GPIO_Init+0x2bc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00d      	beq.n	8002546 <HAL_GPIO_Init+0x1c6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a44      	ldr	r2, [pc, #272]	@ (8002640 <HAL_GPIO_Init+0x2c0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d007      	beq.n	8002542 <HAL_GPIO_Init+0x1c2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a43      	ldr	r2, [pc, #268]	@ (8002644 <HAL_GPIO_Init+0x2c4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_GPIO_Init+0x1be>
 800253a:	2303      	movs	r3, #3
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x1cc>
 800253e:	2305      	movs	r3, #5
 8002540:	e004      	b.n	800254c <HAL_GPIO_Init+0x1cc>
 8002542:	2302      	movs	r3, #2
 8002544:	e002      	b.n	800254c <HAL_GPIO_Init+0x1cc>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_GPIO_Init+0x1cc>
 800254a:	2300      	movs	r3, #0
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	2103      	movs	r1, #3
 8002550:	400a      	ands	r2, r1
 8002552:	00d2      	lsls	r2, r2, #3
 8002554:	4093      	lsls	r3, r2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	4936      	ldr	r1, [pc, #216]	@ (8002638 <HAL_GPIO_Init+0x2b8>)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3318      	adds	r3, #24
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	505a      	str	r2, [r3, r1]
 800256a:	4b33      	ldr	r3, [pc, #204]	@ (8002638 <HAL_GPIO_Init+0x2b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43da      	mvns	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	035b      	lsls	r3, r3, #13
 8002582:	4013      	ands	r3, r2
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x20e>
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <HAL_GPIO_Init+0x2b8>)
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	4b28      	ldr	r3, [pc, #160]	@ (8002638 <HAL_GPIO_Init+0x2b8>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43da      	mvns	r2, r3
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	039b      	lsls	r3, r3, #14
 80025ac:	4013      	ands	r3, r2
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x238>
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002638 <HAL_GPIO_Init+0x2b8>)
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	4a1e      	ldr	r2, [pc, #120]	@ (8002638 <HAL_GPIO_Init+0x2b8>)
 80025c0:	2384      	movs	r3, #132	@ 0x84
 80025c2:	58d3      	ldr	r3, [r2, r3]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	43da      	mvns	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	029b      	lsls	r3, r3, #10
 80025d8:	4013      	ands	r3, r2
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x264>
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	4914      	ldr	r1, [pc, #80]	@ (8002638 <HAL_GPIO_Init+0x2b8>)
 80025e6:	2284      	movs	r2, #132	@ 0x84
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	508b      	str	r3, [r1, r2]
 80025ec:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <HAL_GPIO_Init+0x2b8>)
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	58d3      	ldr	r3, [r2, r3]
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43da      	mvns	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	2380      	movs	r3, #128	@ 0x80
 8002604:	025b      	lsls	r3, r3, #9
 8002606:	4013      	ands	r3, r2
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x292>
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	4909      	ldr	r1, [pc, #36]	@ (8002638 <HAL_GPIO_Init+0x2b8>)
 8002614:	2280      	movs	r2, #128	@ 0x80
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	508b      	str	r3, [r1, r2]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	3301      	adds	r3, #1
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	40da      	lsrs	r2, r3
 8002628:	1e13      	subs	r3, r2, #0
 800262a:	d000      	beq.n	800262e <HAL_GPIO_Init+0x2ae>
 800262c:	e6b0      	b.n	8002390 <HAL_GPIO_Init+0x10>
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b006      	add	sp, #24
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021800 	.word	0x40021800
 800263c:	50000400 	.word	0x50000400
 8002640:	50000800 	.word	0x50000800
 8002644:	50000c00 	.word	0x50000c00

08002648 <HAL_GPIO_ReadPin>:
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	000a      	movs	r2, r1
 8002652:	1cbb      	adds	r3, r7, #2
 8002654:	801a      	strh	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	1cba      	adds	r2, r7, #2
 800265c:	8812      	ldrh	r2, [r2, #0]
 800265e:	4013      	ands	r3, r2
 8002660:	d004      	beq.n	800266c <HAL_GPIO_ReadPin+0x24>
 8002662:	230f      	movs	r3, #15
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e003      	b.n	8002674 <HAL_GPIO_ReadPin+0x2c>
 800266c:	230f      	movs	r3, #15
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	230f      	movs	r3, #15
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b004      	add	sp, #16
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_GPIO_WritePin>:
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	0008      	movs	r0, r1
 800268c:	0011      	movs	r1, r2
 800268e:	1cbb      	adds	r3, r7, #2
 8002690:	1c02      	adds	r2, r0, #0
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	1c7b      	adds	r3, r7, #1
 8002696:	1c0a      	adds	r2, r1, #0
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	1c7b      	adds	r3, r7, #1
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <HAL_GPIO_WritePin+0x2a>
 80026a2:	1cbb      	adds	r3, r7, #2
 80026a4:	881a      	ldrh	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	619a      	str	r2, [r3, #24]
 80026aa:	e003      	b.n	80026b4 <HAL_GPIO_WritePin+0x32>
 80026ac:	1cbb      	adds	r3, r7, #2
 80026ae:	881a      	ldrh	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80026b4:	46c0      	nop			@ (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b002      	add	sp, #8
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_I2C_Init>:
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_I2C_Init+0x12>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e08f      	b.n	80027ee <HAL_I2C_Init+0x132>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2241      	movs	r2, #65	@ 0x41
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d107      	bne.n	80026ea <HAL_I2C_Init+0x2e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2240      	movs	r2, #64	@ 0x40
 80026de:	2100      	movs	r1, #0
 80026e0:	5499      	strb	r1, [r3, r2]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7ff f9e5 	bl	8001ab4 <HAL_I2C_MspInit>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2241      	movs	r2, #65	@ 0x41
 80026ee:	2124      	movs	r1, #36	@ 0x24
 80026f0:	5499      	strb	r1, [r3, r2]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2101      	movs	r1, #1
 80026fe:	438a      	bics	r2, r1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	493b      	ldr	r1, [pc, #236]	@ (80027f8 <HAL_I2C_Init+0x13c>)
 800270c:	400a      	ands	r2, r1
 800270e:	611a      	str	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4938      	ldr	r1, [pc, #224]	@ (80027fc <HAL_I2C_Init+0x140>)
 800271c:	400a      	ands	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d108      	bne.n	800273a <HAL_I2C_Init+0x7e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2180      	movs	r1, #128	@ 0x80
 8002732:	0209      	lsls	r1, r1, #8
 8002734:	430a      	orrs	r2, r1
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e007      	b.n	800274a <HAL_I2C_Init+0x8e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2184      	movs	r1, #132	@ 0x84
 8002744:	0209      	lsls	r1, r1, #8
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d109      	bne.n	8002766 <HAL_I2C_Init+0xaa>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2180      	movs	r1, #128	@ 0x80
 800275e:	0109      	lsls	r1, r1, #4
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	e007      	b.n	8002776 <HAL_I2C_Init+0xba>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4923      	ldr	r1, [pc, #140]	@ (8002800 <HAL_I2C_Init+0x144>)
 8002772:	400a      	ands	r2, r1
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4920      	ldr	r1, [pc, #128]	@ (8002804 <HAL_I2C_Init+0x148>)
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	491a      	ldr	r1, [pc, #104]	@ (80027fc <HAL_I2C_Init+0x140>)
 8002792:	400a      	ands	r2, r1
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	431a      	orrs	r2, r3
 80027a0:	0011      	movs	r1, r2
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	021a      	lsls	r2, r3, #8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69d9      	ldr	r1, [r3, #28]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1a      	ldr	r2, [r3, #32]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2101      	movs	r1, #1
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2241      	movs	r2, #65	@ 0x41
 80027da:	2120      	movs	r1, #32
 80027dc:	5499      	strb	r1, [r3, r2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2242      	movs	r2, #66	@ 0x42
 80027e8:	2100      	movs	r1, #0
 80027ea:	5499      	strb	r1, [r3, r2]
 80027ec:	2300      	movs	r3, #0
 80027ee:	0018      	movs	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	f0ffffff 	.word	0xf0ffffff
 80027fc:	ffff7fff 	.word	0xffff7fff
 8002800:	fffff7ff 	.word	0xfffff7ff
 8002804:	02008000 	.word	0x02008000

08002808 <HAL_I2C_Mem_Write>:
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	000c      	movs	r4, r1
 8002812:	0010      	movs	r0, r2
 8002814:	0019      	movs	r1, r3
 8002816:	230a      	movs	r3, #10
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	1c22      	adds	r2, r4, #0
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	2308      	movs	r3, #8
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	1c02      	adds	r2, r0, #0
 8002824:	801a      	strh	r2, [r3, #0]
 8002826:	1dbb      	adds	r3, r7, #6
 8002828:	1c0a      	adds	r2, r1, #0
 800282a:	801a      	strh	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2241      	movs	r2, #65	@ 0x41
 8002830:	5c9b      	ldrb	r3, [r3, r2]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b20      	cmp	r3, #32
 8002836:	d000      	beq.n	800283a <HAL_I2C_Mem_Write+0x32>
 8002838:	e10c      	b.n	8002a54 <HAL_I2C_Mem_Write+0x24c>
 800283a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <HAL_I2C_Mem_Write+0x42>
 8002840:	232c      	movs	r3, #44	@ 0x2c
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <HAL_I2C_Mem_Write+0x4e>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2280      	movs	r2, #128	@ 0x80
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	645a      	str	r2, [r3, #68]	@ 0x44
 8002852:	2301      	movs	r3, #1
 8002854:	e0ff      	b.n	8002a56 <HAL_I2C_Mem_Write+0x24e>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2240      	movs	r2, #64	@ 0x40
 800285a:	5c9b      	ldrb	r3, [r3, r2]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_I2C_Mem_Write+0x5c>
 8002860:	2302      	movs	r3, #2
 8002862:	e0f8      	b.n	8002a56 <HAL_I2C_Mem_Write+0x24e>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	@ 0x40
 8002868:	2101      	movs	r1, #1
 800286a:	5499      	strb	r1, [r3, r2]
 800286c:	f7ff fad6 	bl	8001e1c <HAL_GetTick>
 8002870:	0003      	movs	r3, r0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	0219      	lsls	r1, r3, #8
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2319      	movs	r3, #25
 8002880:	2201      	movs	r2, #1
 8002882:	f000 f975 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Mem_Write+0x86>
 800288a:	2301      	movs	r3, #1
 800288c:	e0e3      	b.n	8002a56 <HAL_I2C_Mem_Write+0x24e>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2241      	movs	r2, #65	@ 0x41
 8002892:	2121      	movs	r1, #33	@ 0x21
 8002894:	5499      	strb	r1, [r3, r2]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2242      	movs	r2, #66	@ 0x42
 800289a:	2140      	movs	r1, #64	@ 0x40
 800289c:	5499      	strb	r1, [r3, r2]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	222c      	movs	r2, #44	@ 0x2c
 80028ae:	18ba      	adds	r2, r7, r2
 80028b0:	8812      	ldrh	r2, [r2, #0]
 80028b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80028ba:	1dbb      	adds	r3, r7, #6
 80028bc:	881c      	ldrh	r4, [r3, #0]
 80028be:	2308      	movs	r3, #8
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	881a      	ldrh	r2, [r3, #0]
 80028c4:	230a      	movs	r3, #10
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	8819      	ldrh	r1, [r3, #0]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	0023      	movs	r3, r4
 80028d6:	f000 f8c5 	bl	8002a64 <I2C_RequestMemoryWrite>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d005      	beq.n	80028ea <HAL_I2C_Mem_Write+0xe2>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2240      	movs	r2, #64	@ 0x40
 80028e2:	2100      	movs	r1, #0
 80028e4:	5499      	strb	r1, [r3, r2]
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0b5      	b.n	8002a56 <HAL_I2C_Mem_Write+0x24e>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2bff      	cmp	r3, #255	@ 0xff
 80028f2:	d911      	bls.n	8002918 <HAL_I2C_Mem_Write+0x110>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	22ff      	movs	r2, #255	@ 0xff
 80028f8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	045c      	lsls	r4, r3, #17
 8002904:	230a      	movs	r3, #10
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	8819      	ldrh	r1, [r3, #0]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	2300      	movs	r3, #0
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	0023      	movs	r3, r4
 8002912:	f000 fb07 	bl	8002f24 <I2C_TransferConfig>
 8002916:	e012      	b.n	800293e <HAL_I2C_Mem_Write+0x136>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	b2da      	uxtb	r2, r3
 8002928:	2380      	movs	r3, #128	@ 0x80
 800292a:	049c      	lsls	r4, r3, #18
 800292c:	230a      	movs	r3, #10
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	8819      	ldrh	r1, [r3, #0]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	2300      	movs	r3, #0
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	0023      	movs	r3, r4
 800293a:	f000 faf3 	bl	8002f24 <I2C_TransferConfig>
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	0018      	movs	r0, r3
 8002946:	f000 f96b 	bl	8002c20 <I2C_WaitOnTXISFlagUntilTimeout>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Mem_Write+0x14a>
 800294e:	2301      	movs	r3, #1
 8002950:	e081      	b.n	8002a56 <HAL_I2C_Mem_Write+0x24e>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	629a      	str	r2, [r3, #40]	@ 0x28
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	625a      	str	r2, [r3, #36]	@ 0x24
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d03a      	beq.n	8002a02 <HAL_I2C_Mem_Write+0x1fa>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002990:	2b00      	cmp	r3, #0
 8002992:	d136      	bne.n	8002a02 <HAL_I2C_Mem_Write+0x1fa>
 8002994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	0013      	movs	r3, r2
 800299e:	2200      	movs	r2, #0
 80029a0:	2180      	movs	r1, #128	@ 0x80
 80029a2:	f000 f8e5 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80029a6:	1e03      	subs	r3, r0, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Mem_Write+0x1a6>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e053      	b.n	8002a56 <HAL_I2C_Mem_Write+0x24e>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2bff      	cmp	r3, #255	@ 0xff
 80029b6:	d911      	bls.n	80029dc <HAL_I2C_Mem_Write+0x1d4>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	22ff      	movs	r2, #255	@ 0xff
 80029bc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	045c      	lsls	r4, r3, #17
 80029c8:	230a      	movs	r3, #10
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	8819      	ldrh	r1, [r3, #0]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	2300      	movs	r3, #0
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	0023      	movs	r3, r4
 80029d6:	f000 faa5 	bl	8002f24 <I2C_TransferConfig>
 80029da:	e012      	b.n	8002a02 <HAL_I2C_Mem_Write+0x1fa>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	049c      	lsls	r4, r3, #18
 80029f0:	230a      	movs	r3, #10
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	8819      	ldrh	r1, [r3, #0]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	2300      	movs	r3, #0
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	0023      	movs	r3, r4
 80029fe:	f000 fa91 	bl	8002f24 <I2C_TransferConfig>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d198      	bne.n	800293e <HAL_I2C_Mem_Write+0x136>
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f94a 	bl	8002cac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_Mem_Write+0x218>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e01a      	b.n	8002a56 <HAL_I2C_Mem_Write+0x24e>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2220      	movs	r2, #32
 8002a26:	61da      	str	r2, [r3, #28]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	490b      	ldr	r1, [pc, #44]	@ (8002a60 <HAL_I2C_Mem_Write+0x258>)
 8002a34:	400a      	ands	r2, r1
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2241      	movs	r2, #65	@ 0x41
 8002a3c:	2120      	movs	r1, #32
 8002a3e:	5499      	strb	r1, [r3, r2]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2242      	movs	r2, #66	@ 0x42
 8002a44:	2100      	movs	r1, #0
 8002a46:	5499      	strb	r1, [r3, r2]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2240      	movs	r2, #64	@ 0x40
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	5499      	strb	r1, [r3, r2]
 8002a50:	2300      	movs	r3, #0
 8002a52:	e000      	b.n	8002a56 <HAL_I2C_Mem_Write+0x24e>
 8002a54:	2302      	movs	r3, #2
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b007      	add	sp, #28
 8002a5c:	bd90      	pop	{r4, r7, pc}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	fe00e800 	.word	0xfe00e800

08002a64 <I2C_RequestMemoryWrite>:
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	000c      	movs	r4, r1
 8002a6e:	0010      	movs	r0, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	250a      	movs	r5, #10
 8002a74:	197b      	adds	r3, r7, r5
 8002a76:	1c22      	adds	r2, r4, #0
 8002a78:	801a      	strh	r2, [r3, #0]
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	1c02      	adds	r2, r0, #0
 8002a80:	801a      	strh	r2, [r3, #0]
 8002a82:	1dbb      	adds	r3, r7, #6
 8002a84:	1c0a      	adds	r2, r1, #0
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	1dbb      	adds	r3, r7, #6
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	2380      	movs	r3, #128	@ 0x80
 8002a90:	045c      	lsls	r4, r3, #17
 8002a92:	197b      	adds	r3, r7, r5
 8002a94:	8819      	ldrh	r1, [r3, #0]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	4b23      	ldr	r3, [pc, #140]	@ (8002b28 <I2C_RequestMemoryWrite+0xc4>)
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	0023      	movs	r3, r4
 8002a9e:	f000 fa41 	bl	8002f24 <I2C_TransferConfig>
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa4:	6a39      	ldr	r1, [r7, #32]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 f8b9 	bl	8002c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_RequestMemoryWrite+0x52>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e033      	b.n	8002b1e <I2C_RequestMemoryWrite+0xba>
 8002ab6:	1dbb      	adds	r3, r7, #6
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <I2C_RequestMemoryWrite+0x6a>
 8002abe:	2308      	movs	r3, #8
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28
 8002acc:	e019      	b.n	8002b02 <I2C_RequestMemoryWrite+0x9e>
 8002ace:	2308      	movs	r3, #8
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae2:	6a39      	ldr	r1, [r7, #32]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 f89a 	bl	8002c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_RequestMemoryWrite+0x90>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e014      	b.n	8002b1e <I2C_RequestMemoryWrite+0xba>
 8002af4:	2308      	movs	r3, #8
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b02:	6a3a      	ldr	r2, [r7, #32]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	0013      	movs	r3, r2
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2180      	movs	r1, #128	@ 0x80
 8002b10:	f000 f82e 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002b14:	1e03      	subs	r3, r0, #0
 8002b16:	d001      	beq.n	8002b1c <I2C_RequestMemoryWrite+0xb8>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <I2C_RequestMemoryWrite+0xba>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bdb0      	pop	{r4, r5, r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	80002000 	.word	0x80002000

08002b2c <I2C_Flush_TXDR>:
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d103      	bne.n	8002b4a <I2C_Flush_TXDR+0x1e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2200      	movs	r2, #0
 8002b48:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2201      	movs	r2, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d007      	beq.n	8002b68 <I2C_Flush_TXDR+0x3c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2101      	movs	r1, #1
 8002b64:	430a      	orrs	r2, r1
 8002b66:	619a      	str	r2, [r3, #24]
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b002      	add	sp, #8
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2C_WaitOnFlagUntilTimeout>:
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e03a      	b.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f8d3 	bl	8002d34 <I2C_IsErrorOccurred>
 8002b8e:	1e03      	subs	r3, r0, #0
 8002b90:	d001      	beq.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x26>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e040      	b.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0xa8>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	d02d      	beq.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
 8002b9c:	f7ff f93e 	bl	8001e1c <HAL_GetTick>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d302      	bcc.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d122      	bne.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	425a      	negs	r2, r3
 8002bc2:	4153      	adcs	r3, r2
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d113      	bne.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	645a      	str	r2, [r3, #68]	@ 0x44
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2241      	movs	r2, #65	@ 0x41
 8002be0:	2120      	movs	r1, #32
 8002be2:	5499      	strb	r1, [r3, r2]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2242      	movs	r2, #66	@ 0x42
 8002be8:	2100      	movs	r1, #0
 8002bea:	5499      	strb	r1, [r3, r2]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2240      	movs	r2, #64	@ 0x40
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	5499      	strb	r1, [r3, r2]
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e00f      	b.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0xa8>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	4013      	ands	r3, r2
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	425a      	negs	r2, r3
 8002c08:	4153      	adcs	r3, r2
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	1dfb      	adds	r3, r7, #7
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d0b5      	beq.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x12>
 8002c16:	2300      	movs	r3, #0
 8002c18:	0018      	movs	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b004      	add	sp, #16
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <I2C_WaitOnTXISFlagUntilTimeout>:
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	e032      	b.n	8002c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 f87d 	bl	8002d34 <I2C_IsErrorOccurred>
 8002c3a:	1e03      	subs	r3, r0, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e030      	b.n	8002ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3301      	adds	r3, #1
 8002c46:	d025      	beq.n	8002c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
 8002c48:	f7ff f8e8 	bl	8001e1c <HAL_GetTick>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d302      	bcc.n	8002c5e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11a      	bne.n	8002c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2202      	movs	r2, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d013      	beq.n	8002c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c70:	2220      	movs	r2, #32
 8002c72:	431a      	orrs	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2241      	movs	r2, #65	@ 0x41
 8002c7c:	2120      	movs	r1, #32
 8002c7e:	5499      	strb	r1, [r3, r2]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2242      	movs	r2, #66	@ 0x42
 8002c84:	2100      	movs	r1, #0
 8002c86:	5499      	strb	r1, [r3, r2]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2240      	movs	r2, #64	@ 0x40
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	5499      	strb	r1, [r3, r2]
 8002c90:	2301      	movs	r3, #1
 8002c92:	e007      	b.n	8002ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d1c5      	bne.n	8002c2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b004      	add	sp, #16
 8002caa:	bd80      	pop	{r7, pc}

08002cac <I2C_WaitOnSTOPFlagUntilTimeout>:
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	e02f      	b.n	8002d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 f837 	bl	8002d34 <I2C_IsErrorOccurred>
 8002cc6:	1e03      	subs	r3, r0, #0
 8002cc8:	d001      	beq.n	8002cce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e02d      	b.n	8002d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8002cce:	f7ff f8a5 	bl	8001e1c <HAL_GetTick>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11a      	bne.n	8002d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2220      	movs	r2, #32
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d013      	beq.n	8002d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2241      	movs	r2, #65	@ 0x41
 8002d02:	2120      	movs	r1, #32
 8002d04:	5499      	strb	r1, [r3, r2]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2242      	movs	r2, #66	@ 0x42
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5499      	strb	r1, [r3, r2]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2240      	movs	r2, #64	@ 0x40
 8002d12:	2100      	movs	r1, #0
 8002d14:	5499      	strb	r1, [r3, r2]
 8002d16:	2301      	movs	r3, #1
 8002d18:	e007      	b.n	8002d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2220      	movs	r2, #32
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d1c8      	bne.n	8002cba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b004      	add	sp, #16
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <I2C_IsErrorOccurred>:
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	@ 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	2327      	movs	r3, #39	@ 0x27
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2210      	movs	r2, #16
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d100      	bne.n	8002d62 <I2C_IsErrorOccurred+0x2e>
 8002d60:	e079      	b.n	8002e56 <I2C_IsErrorOccurred+0x122>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2210      	movs	r2, #16
 8002d68:	61da      	str	r2, [r3, #28]
 8002d6a:	e057      	b.n	8002e1c <I2C_IsErrorOccurred+0xe8>
 8002d6c:	2227      	movs	r2, #39	@ 0x27
 8002d6e:	18bb      	adds	r3, r7, r2
 8002d70:	18ba      	adds	r2, r7, r2
 8002d72:	7812      	ldrb	r2, [r2, #0]
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	d04f      	beq.n	8002e1c <I2C_IsErrorOccurred+0xe8>
 8002d7c:	f7ff f84e 	bl	8001e1c <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d302      	bcc.n	8002d92 <I2C_IsErrorOccurred+0x5e>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d144      	bne.n	8002e1c <I2C_IsErrorOccurred+0xe8>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	2380      	movs	r3, #128	@ 0x80
 8002d9a:	01db      	lsls	r3, r3, #7
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	2013      	movs	r0, #19
 8002da2:	183b      	adds	r3, r7, r0
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	2142      	movs	r1, #66	@ 0x42
 8002da8:	5c52      	ldrb	r2, [r2, r1]
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	401a      	ands	r2, r3
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d126      	bne.n	8002e0e <I2C_IsErrorOccurred+0xda>
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	2380      	movs	r3, #128	@ 0x80
 8002dc4:	01db      	lsls	r3, r3, #7
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d021      	beq.n	8002e0e <I2C_IsErrorOccurred+0xda>
 8002dca:	183b      	adds	r3, r7, r0
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d01d      	beq.n	8002e0e <I2C_IsErrorOccurred+0xda>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2180      	movs	r1, #128	@ 0x80
 8002dde:	01c9      	lsls	r1, r1, #7
 8002de0:	430a      	orrs	r2, r1
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	f7ff f81a 	bl	8001e1c <HAL_GetTick>
 8002de8:	0003      	movs	r3, r0
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	e00f      	b.n	8002e0e <I2C_IsErrorOccurred+0xda>
 8002dee:	f7ff f815 	bl	8001e1c <HAL_GetTick>
 8002df2:	0002      	movs	r2, r0
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b19      	cmp	r3, #25
 8002dfa:	d908      	bls.n	8002e0e <I2C_IsErrorOccurred+0xda>
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	4313      	orrs	r3, r2
 8002e02:	623b      	str	r3, [r7, #32]
 8002e04:	2327      	movs	r3, #39	@ 0x27
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	e006      	b.n	8002e1c <I2C_IsErrorOccurred+0xe8>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2220      	movs	r2, #32
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d1e8      	bne.n	8002dee <I2C_IsErrorOccurred+0xba>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2220      	movs	r2, #32
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d004      	beq.n	8002e34 <I2C_IsErrorOccurred+0x100>
 8002e2a:	2327      	movs	r3, #39	@ 0x27
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d09b      	beq.n	8002d6c <I2C_IsErrorOccurred+0x38>
 8002e34:	2327      	movs	r3, #39	@ 0x27
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <I2C_IsErrorOccurred+0x112>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2220      	movs	r2, #32
 8002e44:	61da      	str	r2, [r3, #28]
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	2327      	movs	r3, #39	@ 0x27
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	2380      	movs	r3, #128	@ 0x80
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4013      	ands	r3, r2
 8002e66:	d00c      	beq.n	8002e82 <I2C_IsErrorOccurred+0x14e>
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	623b      	str	r3, [r7, #32]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2280      	movs	r2, #128	@ 0x80
 8002e76:	0052      	lsls	r2, r2, #1
 8002e78:	61da      	str	r2, [r3, #28]
 8002e7a:	2327      	movs	r3, #39	@ 0x27
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d00c      	beq.n	8002ea6 <I2C_IsErrorOccurred+0x172>
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	2208      	movs	r2, #8
 8002e90:	4313      	orrs	r3, r2
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2280      	movs	r2, #128	@ 0x80
 8002e9a:	00d2      	lsls	r2, r2, #3
 8002e9c:	61da      	str	r2, [r3, #28]
 8002e9e:	2327      	movs	r3, #39	@ 0x27
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	2380      	movs	r3, #128	@ 0x80
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4013      	ands	r3, r2
 8002eae:	d00c      	beq.n	8002eca <I2C_IsErrorOccurred+0x196>
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2280      	movs	r2, #128	@ 0x80
 8002ebe:	0092      	lsls	r2, r2, #2
 8002ec0:	61da      	str	r2, [r3, #28]
 8002ec2:	2327      	movs	r3, #39	@ 0x27
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	2327      	movs	r3, #39	@ 0x27
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01d      	beq.n	8002f10 <I2C_IsErrorOccurred+0x1dc>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff fe28 	bl	8002b2c <I2C_Flush_TXDR>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	490e      	ldr	r1, [pc, #56]	@ (8002f20 <I2C_IsErrorOccurred+0x1ec>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2241      	movs	r2, #65	@ 0x41
 8002efc:	2120      	movs	r1, #32
 8002efe:	5499      	strb	r1, [r3, r2]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2242      	movs	r2, #66	@ 0x42
 8002f04:	2100      	movs	r1, #0
 8002f06:	5499      	strb	r1, [r3, r2]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2240      	movs	r2, #64	@ 0x40
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5499      	strb	r1, [r3, r2]
 8002f10:	2327      	movs	r3, #39	@ 0x27
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b00a      	add	sp, #40	@ 0x28
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	fe00e800 	.word	0xfe00e800

08002f24 <I2C_TransferConfig>:
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	0008      	movs	r0, r1
 8002f2e:	0011      	movs	r1, r2
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	240a      	movs	r4, #10
 8002f34:	193b      	adds	r3, r7, r4
 8002f36:	1c02      	adds	r2, r0, #0
 8002f38:	801a      	strh	r2, [r3, #0]
 8002f3a:	2009      	movs	r0, #9
 8002f3c:	183b      	adds	r3, r7, r0
 8002f3e:	1c0a      	adds	r2, r1, #0
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	193b      	adds	r3, r7, r4
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	059b      	lsls	r3, r3, #22
 8002f48:	0d9a      	lsrs	r2, r3, #22
 8002f4a:	183b      	adds	r3, r7, r0
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	0419      	lsls	r1, r3, #16
 8002f50:	23ff      	movs	r3, #255	@ 0xff
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	400b      	ands	r3, r1
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f6e:	0d51      	lsrs	r1, r2, #21
 8002f70:	2280      	movs	r2, #128	@ 0x80
 8002f72:	00d2      	lsls	r2, r2, #3
 8002f74:	400a      	ands	r2, r1
 8002f76:	4907      	ldr	r1, [pc, #28]	@ (8002f94 <I2C_TransferConfig+0x70>)
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	43d2      	mvns	r2, r2
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	0011      	movs	r1, r2
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b007      	add	sp, #28
 8002f90:	bd90      	pop	{r4, r7, pc}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	03ff63ff 	.word	0x03ff63ff

08002f98 <HAL_I2CEx_ConfigAnalogFilter>:
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2241      	movs	r2, #65	@ 0x41
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d138      	bne.n	8003020 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2240      	movs	r2, #64	@ 0x40
 8002fb2:	5c9b      	ldrb	r3, [r3, r2]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e032      	b.n	8003022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2240      	movs	r2, #64	@ 0x40
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	5499      	strb	r1, [r3, r2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2241      	movs	r2, #65	@ 0x41
 8002fc8:	2124      	movs	r1, #36	@ 0x24
 8002fca:	5499      	strb	r1, [r3, r2]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	438a      	bics	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4911      	ldr	r1, [pc, #68]	@ (800302c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002fe8:	400a      	ands	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2101      	movs	r1, #1
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2241      	movs	r2, #65	@ 0x41
 8003010:	2120      	movs	r1, #32
 8003012:	5499      	strb	r1, [r3, r2]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	2100      	movs	r1, #0
 800301a:	5499      	strb	r1, [r3, r2]
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003020:	2302      	movs	r3, #2
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b002      	add	sp, #8
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	ffffefff 	.word	0xffffefff

08003030 <HAL_I2CEx_ConfigDigitalFilter>:
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2241      	movs	r2, #65	@ 0x41
 800303e:	5c9b      	ldrb	r3, [r3, r2]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b20      	cmp	r3, #32
 8003044:	d139      	bne.n	80030ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2240      	movs	r2, #64	@ 0x40
 800304a:	5c9b      	ldrb	r3, [r3, r2]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003050:	2302      	movs	r3, #2
 8003052:	e033      	b.n	80030bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2240      	movs	r2, #64	@ 0x40
 8003058:	2101      	movs	r1, #1
 800305a:	5499      	strb	r1, [r3, r2]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2241      	movs	r2, #65	@ 0x41
 8003060:	2124      	movs	r1, #36	@ 0x24
 8003062:	5499      	strb	r1, [r3, r2]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2101      	movs	r1, #1
 8003070:	438a      	bics	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a11      	ldr	r2, [pc, #68]	@ (80030c4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003080:	4013      	ands	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2241      	movs	r2, #65	@ 0x41
 80030aa:	2120      	movs	r1, #32
 80030ac:	5499      	strb	r1, [r3, r2]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2240      	movs	r2, #64	@ 0x40
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]
 80030b6:	2300      	movs	r3, #0
 80030b8:	e000      	b.n	80030bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030ba:	2302      	movs	r3, #2
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b004      	add	sp, #16
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	fffff0ff 	.word	0xfffff0ff

080030c8 <HAL_PWREx_ControlVoltageScaling>:
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a19      	ldr	r2, [pc, #100]	@ (800313c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	2380      	movs	r3, #128	@ 0x80
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d11f      	bne.n	800312c <HAL_PWREx_ControlVoltageScaling+0x64>
 80030ec:	4b14      	ldr	r3, [pc, #80]	@ (8003140 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	0013      	movs	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	189b      	adds	r3, r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4912      	ldr	r1, [pc, #72]	@ (8003144 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80030fa:	0018      	movs	r0, r3
 80030fc:	f7fd f80a 	bl	8000114 <__udivsi3>
 8003100:	0003      	movs	r3, r0
 8003102:	3301      	adds	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e008      	b.n	800311a <HAL_PWREx_ControlVoltageScaling+0x52>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_PWREx_ControlVoltageScaling+0x4e>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3b01      	subs	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e001      	b.n	800311a <HAL_PWREx_ControlVoltageScaling+0x52>
 8003116:	2303      	movs	r3, #3
 8003118:	e009      	b.n	800312e <HAL_PWREx_ControlVoltageScaling+0x66>
 800311a:	4b07      	ldr	r3, [pc, #28]	@ (8003138 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	2380      	movs	r3, #128	@ 0x80
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	401a      	ands	r2, r3
 8003124:	2380      	movs	r3, #128	@ 0x80
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	429a      	cmp	r2, r3
 800312a:	d0ed      	beq.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x40>
 800312c:	2300      	movs	r3, #0
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	40007000 	.word	0x40007000
 800313c:	fffff9ff 	.word	0xfffff9ff
 8003140:	20000014 	.word	0x20000014
 8003144:	000f4240 	.word	0x000f4240

08003148 <HAL_RCC_OscConfig>:
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_OscConfig+0x12>
 8003156:	2301      	movs	r3, #1
 8003158:	e2f3      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2201      	movs	r2, #1
 8003160:	4013      	ands	r3, r2
 8003162:	d100      	bne.n	8003166 <HAL_RCC_OscConfig+0x1e>
 8003164:	e07c      	b.n	8003260 <HAL_RCC_OscConfig+0x118>
 8003166:	4bc3      	ldr	r3, [pc, #780]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2238      	movs	r2, #56	@ 0x38
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	4bc0      	ldr	r3, [pc, #768]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2203      	movs	r2, #3
 8003176:	4013      	ands	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b10      	cmp	r3, #16
 800317e:	d102      	bne.n	8003186 <HAL_RCC_OscConfig+0x3e>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b03      	cmp	r3, #3
 8003184:	d002      	beq.n	800318c <HAL_RCC_OscConfig+0x44>
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d10b      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5c>
 800318c:	4bb9      	ldr	r3, [pc, #740]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	029b      	lsls	r3, r3, #10
 8003194:	4013      	ands	r3, r2
 8003196:	d062      	beq.n	800325e <HAL_RCC_OscConfig+0x116>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d15e      	bne.n	800325e <HAL_RCC_OscConfig+0x116>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e2ce      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	025b      	lsls	r3, r3, #9
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_OscConfig+0x78>
 80031b0:	4bb0      	ldr	r3, [pc, #704]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4baf      	ldr	r3, [pc, #700]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80031b6:	2180      	movs	r1, #128	@ 0x80
 80031b8:	0249      	lsls	r1, r1, #9
 80031ba:	430a      	orrs	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e020      	b.n	8003202 <HAL_RCC_OscConfig+0xba>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	23a0      	movs	r3, #160	@ 0xa0
 80031c6:	02db      	lsls	r3, r3, #11
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d10e      	bne.n	80031ea <HAL_RCC_OscConfig+0xa2>
 80031cc:	4ba9      	ldr	r3, [pc, #676]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4ba8      	ldr	r3, [pc, #672]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80031d2:	2180      	movs	r1, #128	@ 0x80
 80031d4:	02c9      	lsls	r1, r1, #11
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	4ba6      	ldr	r3, [pc, #664]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4ba5      	ldr	r3, [pc, #660]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80031e0:	2180      	movs	r1, #128	@ 0x80
 80031e2:	0249      	lsls	r1, r1, #9
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e00b      	b.n	8003202 <HAL_RCC_OscConfig+0xba>
 80031ea:	4ba2      	ldr	r3, [pc, #648]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4ba1      	ldr	r3, [pc, #644]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80031f0:	49a1      	ldr	r1, [pc, #644]	@ (8003478 <HAL_RCC_OscConfig+0x330>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	4b9f      	ldr	r3, [pc, #636]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b9e      	ldr	r3, [pc, #632]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80031fc:	499f      	ldr	r1, [pc, #636]	@ (800347c <HAL_RCC_OscConfig+0x334>)
 80031fe:	400a      	ands	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d014      	beq.n	8003234 <HAL_RCC_OscConfig+0xec>
 800320a:	f7fe fe07 	bl	8001e1c <HAL_GetTick>
 800320e:	0003      	movs	r3, r0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0xde>
 8003214:	f7fe fe02 	bl	8001e1c <HAL_GetTick>
 8003218:	0002      	movs	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	@ 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xde>
 8003222:	2303      	movs	r3, #3
 8003224:	e28d      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 8003226:	4b93      	ldr	r3, [pc, #588]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	029b      	lsls	r3, r3, #10
 800322e:	4013      	ands	r3, r2
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0xcc>
 8003232:	e015      	b.n	8003260 <HAL_RCC_OscConfig+0x118>
 8003234:	f7fe fdf2 	bl	8001e1c <HAL_GetTick>
 8003238:	0003      	movs	r3, r0
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x108>
 800323e:	f7fe fded 	bl	8001e1c <HAL_GetTick>
 8003242:	0002      	movs	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b64      	cmp	r3, #100	@ 0x64
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x108>
 800324c:	2303      	movs	r3, #3
 800324e:	e278      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 8003250:	4b88      	ldr	r3, [pc, #544]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	029b      	lsls	r3, r3, #10
 8003258:	4013      	ands	r3, r2
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0xf6>
 800325c:	e000      	b.n	8003260 <HAL_RCC_OscConfig+0x118>
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2202      	movs	r2, #2
 8003266:	4013      	ands	r3, r2
 8003268:	d100      	bne.n	800326c <HAL_RCC_OscConfig+0x124>
 800326a:	e099      	b.n	80033a0 <HAL_RCC_OscConfig+0x258>
 800326c:	4b81      	ldr	r3, [pc, #516]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2238      	movs	r2, #56	@ 0x38
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	4b7f      	ldr	r3, [pc, #508]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2203      	movs	r2, #3
 800327c:	4013      	ands	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b10      	cmp	r3, #16
 8003284:	d102      	bne.n	800328c <HAL_RCC_OscConfig+0x144>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d002      	beq.n	8003292 <HAL_RCC_OscConfig+0x14a>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d135      	bne.n	80032fe <HAL_RCC_OscConfig+0x1b6>
 8003292:	4b78      	ldr	r3, [pc, #480]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	2380      	movs	r3, #128	@ 0x80
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4013      	ands	r3, r2
 800329c:	d005      	beq.n	80032aa <HAL_RCC_OscConfig+0x162>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_OscConfig+0x162>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e24b      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 80032aa:	4b72      	ldr	r3, [pc, #456]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4a74      	ldr	r2, [pc, #464]	@ (8003480 <HAL_RCC_OscConfig+0x338>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	021a      	lsls	r2, r3, #8
 80032ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80032bc:	430a      	orrs	r2, r1
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d112      	bne.n	80032ec <HAL_RCC_OscConfig+0x1a4>
 80032c6:	4b6b      	ldr	r3, [pc, #428]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003484 <HAL_RCC_OscConfig+0x33c>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	0019      	movs	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	4b67      	ldr	r3, [pc, #412]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	4b66      	ldr	r3, [pc, #408]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0adb      	lsrs	r3, r3, #11
 80032e0:	2207      	movs	r2, #7
 80032e2:	4013      	ands	r3, r2
 80032e4:	4a68      	ldr	r2, [pc, #416]	@ (8003488 <HAL_RCC_OscConfig+0x340>)
 80032e6:	40da      	lsrs	r2, r3
 80032e8:	4b68      	ldr	r3, [pc, #416]	@ (800348c <HAL_RCC_OscConfig+0x344>)
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	4b68      	ldr	r3, [pc, #416]	@ (8003490 <HAL_RCC_OscConfig+0x348>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7fe fd37 	bl	8001d64 <HAL_InitTick>
 80032f6:	1e03      	subs	r3, r0, #0
 80032f8:	d051      	beq.n	800339e <HAL_RCC_OscConfig+0x256>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e221      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d030      	beq.n	8003368 <HAL_RCC_OscConfig+0x220>
 8003306:	4b5b      	ldr	r3, [pc, #364]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a5e      	ldr	r2, [pc, #376]	@ (8003484 <HAL_RCC_OscConfig+0x33c>)
 800330c:	4013      	ands	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	4b57      	ldr	r3, [pc, #348]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	4b56      	ldr	r3, [pc, #344]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4b55      	ldr	r3, [pc, #340]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003320:	2180      	movs	r1, #128	@ 0x80
 8003322:	0049      	lsls	r1, r1, #1
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f7fe fd78 	bl	8001e1c <HAL_GetTick>
 800332c:	0003      	movs	r3, r0
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x1fc>
 8003332:	f7fe fd73 	bl	8001e1c <HAL_GetTick>
 8003336:	0002      	movs	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x1fc>
 8003340:	2303      	movs	r3, #3
 8003342:	e1fe      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 8003344:	4b4b      	ldr	r3, [pc, #300]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4013      	ands	r3, r2
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x1ea>
 8003350:	4b48      	ldr	r3, [pc, #288]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a4a      	ldr	r2, [pc, #296]	@ (8003480 <HAL_RCC_OscConfig+0x338>)
 8003356:	4013      	ands	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	021a      	lsls	r2, r3, #8
 8003360:	4b44      	ldr	r3, [pc, #272]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	e01b      	b.n	80033a0 <HAL_RCC_OscConfig+0x258>
 8003368:	4b42      	ldr	r3, [pc, #264]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b41      	ldr	r3, [pc, #260]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 800336e:	4949      	ldr	r1, [pc, #292]	@ (8003494 <HAL_RCC_OscConfig+0x34c>)
 8003370:	400a      	ands	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	f7fe fd52 	bl	8001e1c <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x248>
 800337e:	f7fe fd4d 	bl	8001e1c <HAL_GetTick>
 8003382:	0002      	movs	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x248>
 800338c:	2303      	movs	r3, #3
 800338e:	e1d8      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 8003390:	4b38      	ldr	r3, [pc, #224]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2380      	movs	r3, #128	@ 0x80
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4013      	ands	r3, r2
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x236>
 800339c:	e000      	b.n	80033a0 <HAL_RCC_OscConfig+0x258>
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2208      	movs	r2, #8
 80033a6:	4013      	ands	r3, r2
 80033a8:	d047      	beq.n	800343a <HAL_RCC_OscConfig+0x2f2>
 80033aa:	4b32      	ldr	r3, [pc, #200]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2238      	movs	r2, #56	@ 0x38
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b18      	cmp	r3, #24
 80033b4:	d10a      	bne.n	80033cc <HAL_RCC_OscConfig+0x284>
 80033b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80033b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ba:	2202      	movs	r2, #2
 80033bc:	4013      	ands	r3, r2
 80033be:	d03c      	beq.n	800343a <HAL_RCC_OscConfig+0x2f2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d138      	bne.n	800343a <HAL_RCC_OscConfig+0x2f2>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e1ba      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d019      	beq.n	8003408 <HAL_RCC_OscConfig+0x2c0>
 80033d4:	4b27      	ldr	r3, [pc, #156]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80033d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033d8:	4b26      	ldr	r3, [pc, #152]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80033da:	2101      	movs	r1, #1
 80033dc:	430a      	orrs	r2, r1
 80033de:	661a      	str	r2, [r3, #96]	@ 0x60
 80033e0:	f7fe fd1c 	bl	8001e1c <HAL_GetTick>
 80033e4:	0003      	movs	r3, r0
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2b4>
 80033ea:	f7fe fd17 	bl	8001e1c <HAL_GetTick>
 80033ee:	0002      	movs	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2b4>
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1a2      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 80033fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003400:	2202      	movs	r2, #2
 8003402:	4013      	ands	r3, r2
 8003404:	d0f1      	beq.n	80033ea <HAL_RCC_OscConfig+0x2a2>
 8003406:	e018      	b.n	800343a <HAL_RCC_OscConfig+0x2f2>
 8003408:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 800340a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800340c:	4b19      	ldr	r3, [pc, #100]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 800340e:	2101      	movs	r1, #1
 8003410:	438a      	bics	r2, r1
 8003412:	661a      	str	r2, [r3, #96]	@ 0x60
 8003414:	f7fe fd02 	bl	8001e1c <HAL_GetTick>
 8003418:	0003      	movs	r3, r0
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x2e8>
 800341e:	f7fe fcfd 	bl	8001e1c <HAL_GetTick>
 8003422:	0002      	movs	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x2e8>
 800342c:	2303      	movs	r3, #3
 800342e:	e188      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 8003430:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003434:	2202      	movs	r2, #2
 8003436:	4013      	ands	r3, r2
 8003438:	d1f1      	bne.n	800341e <HAL_RCC_OscConfig+0x2d6>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2204      	movs	r2, #4
 8003440:	4013      	ands	r3, r2
 8003442:	d100      	bne.n	8003446 <HAL_RCC_OscConfig+0x2fe>
 8003444:	e0c6      	b.n	80035d4 <HAL_RCC_OscConfig+0x48c>
 8003446:	231f      	movs	r3, #31
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2238      	movs	r2, #56	@ 0x38
 8003454:	4013      	ands	r3, r2
 8003456:	2b20      	cmp	r3, #32
 8003458:	d11e      	bne.n	8003498 <HAL_RCC_OscConfig+0x350>
 800345a:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_RCC_OscConfig+0x32c>)
 800345c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345e:	2202      	movs	r2, #2
 8003460:	4013      	ands	r3, r2
 8003462:	d100      	bne.n	8003466 <HAL_RCC_OscConfig+0x31e>
 8003464:	e0b6      	b.n	80035d4 <HAL_RCC_OscConfig+0x48c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d000      	beq.n	8003470 <HAL_RCC_OscConfig+0x328>
 800346e:	e0b1      	b.n	80035d4 <HAL_RCC_OscConfig+0x48c>
 8003470:	2301      	movs	r3, #1
 8003472:	e166      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 8003474:	40021000 	.word	0x40021000
 8003478:	fffeffff 	.word	0xfffeffff
 800347c:	fffbffff 	.word	0xfffbffff
 8003480:	ffff80ff 	.word	0xffff80ff
 8003484:	ffffc7ff 	.word	0xffffc7ff
 8003488:	00f42400 	.word	0x00f42400
 800348c:	20000014 	.word	0x20000014
 8003490:	20000018 	.word	0x20000018
 8003494:	fffffeff 	.word	0xfffffeff
 8003498:	4bac      	ldr	r3, [pc, #688]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 800349a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	055b      	lsls	r3, r3, #21
 80034a0:	4013      	ands	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_OscConfig+0x360>
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x362>
 80034a8:	2300      	movs	r3, #0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d011      	beq.n	80034d2 <HAL_RCC_OscConfig+0x38a>
 80034ae:	4ba7      	ldr	r3, [pc, #668]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80034b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034b2:	4ba6      	ldr	r3, [pc, #664]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80034b4:	2180      	movs	r1, #128	@ 0x80
 80034b6:	0549      	lsls	r1, r1, #21
 80034b8:	430a      	orrs	r2, r1
 80034ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034bc:	4ba3      	ldr	r3, [pc, #652]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80034be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034c0:	2380      	movs	r3, #128	@ 0x80
 80034c2:	055b      	lsls	r3, r3, #21
 80034c4:	4013      	ands	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	231f      	movs	r3, #31
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	4b9f      	ldr	r3, [pc, #636]	@ (8003750 <HAL_RCC_OscConfig+0x608>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4013      	ands	r3, r2
 80034dc:	d11a      	bne.n	8003514 <HAL_RCC_OscConfig+0x3cc>
 80034de:	4b9c      	ldr	r3, [pc, #624]	@ (8003750 <HAL_RCC_OscConfig+0x608>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4b9b      	ldr	r3, [pc, #620]	@ (8003750 <HAL_RCC_OscConfig+0x608>)
 80034e4:	2180      	movs	r1, #128	@ 0x80
 80034e6:	0049      	lsls	r1, r1, #1
 80034e8:	430a      	orrs	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f7fe fc96 	bl	8001e1c <HAL_GetTick>
 80034f0:	0003      	movs	r3, r0
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x3c0>
 80034f6:	f7fe fc91 	bl	8001e1c <HAL_GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x3c0>
 8003504:	2303      	movs	r3, #3
 8003506:	e11c      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 8003508:	4b91      	ldr	r3, [pc, #580]	@ (8003750 <HAL_RCC_OscConfig+0x608>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4013      	ands	r3, r2
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x3ae>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x3e2>
 800351c:	4b8b      	ldr	r3, [pc, #556]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 800351e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003520:	4b8a      	ldr	r3, [pc, #552]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 8003522:	2101      	movs	r1, #1
 8003524:	430a      	orrs	r2, r1
 8003526:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003528:	e01c      	b.n	8003564 <HAL_RCC_OscConfig+0x41c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b05      	cmp	r3, #5
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x404>
 8003532:	4b86      	ldr	r3, [pc, #536]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 8003534:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003536:	4b85      	ldr	r3, [pc, #532]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 8003538:	2104      	movs	r1, #4
 800353a:	430a      	orrs	r2, r1
 800353c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800353e:	4b83      	ldr	r3, [pc, #524]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 8003540:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003542:	4b82      	ldr	r3, [pc, #520]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 8003544:	2101      	movs	r1, #1
 8003546:	430a      	orrs	r2, r1
 8003548:	65da      	str	r2, [r3, #92]	@ 0x5c
 800354a:	e00b      	b.n	8003564 <HAL_RCC_OscConfig+0x41c>
 800354c:	4b7f      	ldr	r3, [pc, #508]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 800354e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003550:	4b7e      	ldr	r3, [pc, #504]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 8003552:	2101      	movs	r1, #1
 8003554:	438a      	bics	r2, r1
 8003556:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003558:	4b7c      	ldr	r3, [pc, #496]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 800355a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800355c:	4b7b      	ldr	r3, [pc, #492]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 800355e:	2104      	movs	r1, #4
 8003560:	438a      	bics	r2, r1
 8003562:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d014      	beq.n	8003596 <HAL_RCC_OscConfig+0x44e>
 800356c:	f7fe fc56 	bl	8001e1c <HAL_GetTick>
 8003570:	0003      	movs	r3, r0
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	e009      	b.n	800358a <HAL_RCC_OscConfig+0x442>
 8003576:	f7fe fc51 	bl	8001e1c <HAL_GetTick>
 800357a:	0002      	movs	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	4a74      	ldr	r2, [pc, #464]	@ (8003754 <HAL_RCC_OscConfig+0x60c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x442>
 8003586:	2303      	movs	r3, #3
 8003588:	e0db      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 800358a:	4b70      	ldr	r3, [pc, #448]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 800358c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358e:	2202      	movs	r2, #2
 8003590:	4013      	ands	r3, r2
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x42e>
 8003594:	e013      	b.n	80035be <HAL_RCC_OscConfig+0x476>
 8003596:	f7fe fc41 	bl	8001e1c <HAL_GetTick>
 800359a:	0003      	movs	r3, r0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	e009      	b.n	80035b4 <HAL_RCC_OscConfig+0x46c>
 80035a0:	f7fe fc3c 	bl	8001e1c <HAL_GetTick>
 80035a4:	0002      	movs	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	4a6a      	ldr	r2, [pc, #424]	@ (8003754 <HAL_RCC_OscConfig+0x60c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x46c>
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0c6      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 80035b4:	4b65      	ldr	r3, [pc, #404]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80035b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b8:	2202      	movs	r2, #2
 80035ba:	4013      	ands	r3, r2
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x458>
 80035be:	231f      	movs	r3, #31
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <HAL_RCC_OscConfig+0x48c>
 80035c8:	4b60      	ldr	r3, [pc, #384]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80035ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035cc:	4b5f      	ldr	r3, [pc, #380]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80035ce:	4962      	ldr	r1, [pc, #392]	@ (8003758 <HAL_RCC_OscConfig+0x610>)
 80035d0:	400a      	ands	r2, r1
 80035d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d100      	bne.n	80035de <HAL_RCC_OscConfig+0x496>
 80035dc:	e0b0      	b.n	8003740 <HAL_RCC_OscConfig+0x5f8>
 80035de:	4b5b      	ldr	r3, [pc, #364]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2238      	movs	r2, #56	@ 0x38
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d100      	bne.n	80035ec <HAL_RCC_OscConfig+0x4a4>
 80035ea:	e078      	b.n	80036de <HAL_RCC_OscConfig+0x596>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d153      	bne.n	800369c <HAL_RCC_OscConfig+0x554>
 80035f4:	4b55      	ldr	r3, [pc, #340]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b54      	ldr	r3, [pc, #336]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80035fa:	4958      	ldr	r1, [pc, #352]	@ (800375c <HAL_RCC_OscConfig+0x614>)
 80035fc:	400a      	ands	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f7fe fc0c 	bl	8001e1c <HAL_GetTick>
 8003604:	0003      	movs	r3, r0
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x4d4>
 800360a:	f7fe fc07 	bl	8001e1c <HAL_GetTick>
 800360e:	0002      	movs	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x4d4>
 8003618:	2303      	movs	r3, #3
 800361a:	e092      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 800361c:	4b4b      	ldr	r3, [pc, #300]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2380      	movs	r3, #128	@ 0x80
 8003622:	049b      	lsls	r3, r3, #18
 8003624:	4013      	ands	r3, r2
 8003626:	d1f0      	bne.n	800360a <HAL_RCC_OscConfig+0x4c2>
 8003628:	4b48      	ldr	r3, [pc, #288]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a4c      	ldr	r2, [pc, #304]	@ (8003760 <HAL_RCC_OscConfig+0x618>)
 800362e:	4013      	ands	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1a      	ldr	r2, [r3, #32]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	431a      	orrs	r2, r3
 8003650:	4b3e      	ldr	r3, [pc, #248]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 8003652:	430a      	orrs	r2, r1
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	4b3d      	ldr	r3, [pc, #244]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b3c      	ldr	r3, [pc, #240]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 800365c:	2180      	movs	r1, #128	@ 0x80
 800365e:	0449      	lsls	r1, r1, #17
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	4b39      	ldr	r3, [pc, #228]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	4b38      	ldr	r3, [pc, #224]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 800366a:	2180      	movs	r1, #128	@ 0x80
 800366c:	0549      	lsls	r1, r1, #21
 800366e:	430a      	orrs	r2, r1
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	f7fe fbd3 	bl	8001e1c <HAL_GetTick>
 8003676:	0003      	movs	r3, r0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x546>
 800367c:	f7fe fbce 	bl	8001e1c <HAL_GetTick>
 8003680:	0002      	movs	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x546>
 800368a:	2303      	movs	r3, #3
 800368c:	e059      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 800368e:	4b2f      	ldr	r3, [pc, #188]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	2380      	movs	r3, #128	@ 0x80
 8003694:	049b      	lsls	r3, r3, #18
 8003696:	4013      	ands	r3, r2
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x534>
 800369a:	e051      	b.n	8003740 <HAL_RCC_OscConfig+0x5f8>
 800369c:	4b2b      	ldr	r3, [pc, #172]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b2a      	ldr	r3, [pc, #168]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80036a2:	492e      	ldr	r1, [pc, #184]	@ (800375c <HAL_RCC_OscConfig+0x614>)
 80036a4:	400a      	ands	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	f7fe fbb8 	bl	8001e1c <HAL_GetTick>
 80036ac:	0003      	movs	r3, r0
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x57c>
 80036b2:	f7fe fbb3 	bl	8001e1c <HAL_GetTick>
 80036b6:	0002      	movs	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x57c>
 80036c0:	2303      	movs	r3, #3
 80036c2:	e03e      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 80036c4:	4b21      	ldr	r3, [pc, #132]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	049b      	lsls	r3, r3, #18
 80036cc:	4013      	ands	r3, r2
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x56a>
 80036d0:	4b1e      	ldr	r3, [pc, #120]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	4b1d      	ldr	r3, [pc, #116]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80036d6:	4923      	ldr	r1, [pc, #140]	@ (8003764 <HAL_RCC_OscConfig+0x61c>)
 80036d8:	400a      	ands	r2, r1
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	e030      	b.n	8003740 <HAL_RCC_OscConfig+0x5f8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_OscConfig+0x5a2>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e02b      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 80036ea:	4b18      	ldr	r3, [pc, #96]	@ (800374c <HAL_RCC_OscConfig+0x604>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2203      	movs	r2, #3
 80036f4:	401a      	ands	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d11e      	bne.n	800373c <HAL_RCC_OscConfig+0x5f4>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2270      	movs	r2, #112	@ 0x70
 8003702:	401a      	ands	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	429a      	cmp	r2, r3
 800370a:	d117      	bne.n	800373c <HAL_RCC_OscConfig+0x5f4>
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	23fe      	movs	r3, #254	@ 0xfe
 8003710:	01db      	lsls	r3, r3, #7
 8003712:	401a      	ands	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	429a      	cmp	r2, r3
 800371c:	d10e      	bne.n	800373c <HAL_RCC_OscConfig+0x5f4>
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	23f8      	movs	r3, #248	@ 0xf8
 8003722:	039b      	lsls	r3, r3, #14
 8003724:	401a      	ands	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	429a      	cmp	r2, r3
 800372c:	d106      	bne.n	800373c <HAL_RCC_OscConfig+0x5f4>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	0f5b      	lsrs	r3, r3, #29
 8003732:	075a      	lsls	r2, r3, #29
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_OscConfig+0x5f8>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x5fa>
 8003740:	2300      	movs	r3, #0
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b008      	add	sp, #32
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	40021000 	.word	0x40021000
 8003750:	40007000 	.word	0x40007000
 8003754:	00001388 	.word	0x00001388
 8003758:	efffffff 	.word	0xefffffff
 800375c:	feffffff 	.word	0xfeffffff
 8003760:	1fc1808c 	.word	0x1fc1808c
 8003764:	effefffc 	.word	0xeffefffc

08003768 <HAL_RCC_ClockConfig>:
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_ClockConfig+0x14>
 8003778:	2301      	movs	r3, #1
 800377a:	e0e9      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e8>
 800377c:	4b76      	ldr	r3, [pc, #472]	@ (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2207      	movs	r2, #7
 8003782:	4013      	ands	r3, r2
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d91e      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x60>
 800378a:	4b73      	ldr	r3, [pc, #460]	@ (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2207      	movs	r2, #7
 8003790:	4393      	bics	r3, r2
 8003792:	0019      	movs	r1, r3
 8003794:	4b70      	ldr	r3, [pc, #448]	@ (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	f7fe fb3e 	bl	8001e1c <HAL_GetTick>
 80037a0:	0003      	movs	r3, r0
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e009      	b.n	80037ba <HAL_RCC_ClockConfig+0x52>
 80037a6:	f7fe fb39 	bl	8001e1c <HAL_GetTick>
 80037aa:	0002      	movs	r2, r0
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	4a6a      	ldr	r2, [pc, #424]	@ (800395c <HAL_RCC_ClockConfig+0x1f4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x52>
 80037b6:	2303      	movs	r3, #3
 80037b8:	e0ca      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e8>
 80037ba:	4b67      	ldr	r3, [pc, #412]	@ (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2207      	movs	r2, #7
 80037c0:	4013      	ands	r3, r2
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1ee      	bne.n	80037a6 <HAL_RCC_ClockConfig+0x3e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2202      	movs	r2, #2
 80037ce:	4013      	ands	r3, r2
 80037d0:	d015      	beq.n	80037fe <HAL_RCC_ClockConfig+0x96>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2204      	movs	r2, #4
 80037d8:	4013      	ands	r3, r2
 80037da:	d006      	beq.n	80037ea <HAL_RCC_ClockConfig+0x82>
 80037dc:	4b60      	ldr	r3, [pc, #384]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	4b5f      	ldr	r3, [pc, #380]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 80037e2:	21e0      	movs	r1, #224	@ 0xe0
 80037e4:	01c9      	lsls	r1, r1, #7
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
 80037ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	4a5d      	ldr	r2, [pc, #372]	@ (8003964 <HAL_RCC_ClockConfig+0x1fc>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	4b59      	ldr	r3, [pc, #356]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	4013      	ands	r3, r2
 8003806:	d057      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x150>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d107      	bne.n	8003820 <HAL_RCC_ClockConfig+0xb8>
 8003810:	4b53      	ldr	r3, [pc, #332]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	2380      	movs	r3, #128	@ 0x80
 8003816:	029b      	lsls	r3, r3, #10
 8003818:	4013      	ands	r3, r2
 800381a:	d12b      	bne.n	8003874 <HAL_RCC_ClockConfig+0x10c>
 800381c:	2301      	movs	r3, #1
 800381e:	e097      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d107      	bne.n	8003838 <HAL_RCC_ClockConfig+0xd0>
 8003828:	4b4d      	ldr	r3, [pc, #308]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2380      	movs	r3, #128	@ 0x80
 800382e:	049b      	lsls	r3, r3, #18
 8003830:	4013      	ands	r3, r2
 8003832:	d11f      	bne.n	8003874 <HAL_RCC_ClockConfig+0x10c>
 8003834:	2301      	movs	r3, #1
 8003836:	e08b      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d107      	bne.n	8003850 <HAL_RCC_ClockConfig+0xe8>
 8003840:	4b47      	ldr	r3, [pc, #284]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4013      	ands	r3, r2
 800384a:	d113      	bne.n	8003874 <HAL_RCC_ClockConfig+0x10c>
 800384c:	2301      	movs	r3, #1
 800384e:	e07f      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d106      	bne.n	8003866 <HAL_RCC_ClockConfig+0xfe>
 8003858:	4b41      	ldr	r3, [pc, #260]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 800385a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385c:	2202      	movs	r2, #2
 800385e:	4013      	ands	r3, r2
 8003860:	d108      	bne.n	8003874 <HAL_RCC_ClockConfig+0x10c>
 8003862:	2301      	movs	r3, #1
 8003864:	e074      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e8>
 8003866:	4b3e      	ldr	r3, [pc, #248]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 8003868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386a:	2202      	movs	r2, #2
 800386c:	4013      	ands	r3, r2
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x10c>
 8003870:	2301      	movs	r3, #1
 8003872:	e06d      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e8>
 8003874:	4b3a      	ldr	r3, [pc, #232]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2207      	movs	r2, #7
 800387a:	4393      	bics	r3, r2
 800387c:	0019      	movs	r1, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	4b37      	ldr	r3, [pc, #220]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	f7fe fac8 	bl	8001e1c <HAL_GetTick>
 800388c:	0003      	movs	r3, r0
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	e009      	b.n	80038a6 <HAL_RCC_ClockConfig+0x13e>
 8003892:	f7fe fac3 	bl	8001e1c <HAL_GetTick>
 8003896:	0002      	movs	r2, r0
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	4a2f      	ldr	r2, [pc, #188]	@ (800395c <HAL_RCC_ClockConfig+0x1f4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x13e>
 80038a2:	2303      	movs	r3, #3
 80038a4:	e054      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e8>
 80038a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2238      	movs	r2, #56	@ 0x38
 80038ac:	401a      	ands	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1ec      	bne.n	8003892 <HAL_RCC_ClockConfig+0x12a>
 80038b8:	4b27      	ldr	r3, [pc, #156]	@ (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2207      	movs	r2, #7
 80038be:	4013      	ands	r3, r2
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d21e      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x19c>
 80038c6:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2207      	movs	r2, #7
 80038cc:	4393      	bics	r3, r2
 80038ce:	0019      	movs	r1, r3
 80038d0:	4b21      	ldr	r3, [pc, #132]	@ (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f7fe faa0 	bl	8001e1c <HAL_GetTick>
 80038dc:	0003      	movs	r3, r0
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e009      	b.n	80038f6 <HAL_RCC_ClockConfig+0x18e>
 80038e2:	f7fe fa9b 	bl	8001e1c <HAL_GetTick>
 80038e6:	0002      	movs	r2, r0
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <HAL_RCC_ClockConfig+0x1f4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x18e>
 80038f2:	2303      	movs	r3, #3
 80038f4:	e02c      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e8>
 80038f6:	4b18      	ldr	r3, [pc, #96]	@ (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2207      	movs	r2, #7
 80038fc:	4013      	ands	r3, r2
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d1ee      	bne.n	80038e2 <HAL_RCC_ClockConfig+0x17a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2204      	movs	r2, #4
 800390a:	4013      	ands	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_RCC_ClockConfig+0x1ba>
 800390e:	4b14      	ldr	r3, [pc, #80]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	4a15      	ldr	r2, [pc, #84]	@ (8003968 <HAL_RCC_ClockConfig+0x200>)
 8003914:	4013      	ands	r3, r2
 8003916:	0019      	movs	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	4b10      	ldr	r3, [pc, #64]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 800391e:	430a      	orrs	r2, r1
 8003920:	609a      	str	r2, [r3, #8]
 8003922:	f000 f829 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8003926:	0001      	movs	r1, r0
 8003928:	4b0d      	ldr	r3, [pc, #52]	@ (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	0a1b      	lsrs	r3, r3, #8
 800392e:	220f      	movs	r2, #15
 8003930:	401a      	ands	r2, r3
 8003932:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <HAL_RCC_ClockConfig+0x204>)
 8003934:	0092      	lsls	r2, r2, #2
 8003936:	58d3      	ldr	r3, [r2, r3]
 8003938:	221f      	movs	r2, #31
 800393a:	4013      	ands	r3, r2
 800393c:	000a      	movs	r2, r1
 800393e:	40da      	lsrs	r2, r3
 8003940:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <HAL_RCC_ClockConfig+0x208>)
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	4b0b      	ldr	r3, [pc, #44]	@ (8003974 <HAL_RCC_ClockConfig+0x20c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0018      	movs	r0, r3
 800394a:	f7fe fa0b 	bl	8001d64 <HAL_InitTick>
 800394e:	0003      	movs	r3, r0
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	b004      	add	sp, #16
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40022000 	.word	0x40022000
 800395c:	00001388 	.word	0x00001388
 8003960:	40021000 	.word	0x40021000
 8003964:	fffff0ff 	.word	0xfffff0ff
 8003968:	ffff8fff 	.word	0xffff8fff
 800396c:	080080dc 	.word	0x080080dc
 8003970:	20000014 	.word	0x20000014
 8003974:	20000018 	.word	0x20000018

08003978 <HAL_RCC_GetSysClockFreq>:
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2238      	movs	r2, #56	@ 0x38
 8003984:	4013      	ands	r3, r2
 8003986:	d10f      	bne.n	80039a8 <HAL_RCC_GetSysClockFreq+0x30>
 8003988:	4b39      	ldr	r3, [pc, #228]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0adb      	lsrs	r3, r3, #11
 800398e:	2207      	movs	r2, #7
 8003990:	4013      	ands	r3, r2
 8003992:	2201      	movs	r2, #1
 8003994:	409a      	lsls	r2, r3
 8003996:	0013      	movs	r3, r2
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	6839      	ldr	r1, [r7, #0]
 800399c:	4835      	ldr	r0, [pc, #212]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0xfc>)
 800399e:	f7fc fbb9 	bl	8000114 <__udivsi3>
 80039a2:	0003      	movs	r3, r0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e05d      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xec>
 80039a8:	4b31      	ldr	r3, [pc, #196]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2238      	movs	r2, #56	@ 0x38
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d102      	bne.n	80039ba <HAL_RCC_GetSysClockFreq+0x42>
 80039b4:	4b30      	ldr	r3, [pc, #192]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x100>)
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	e054      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xec>
 80039ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2238      	movs	r2, #56	@ 0x38
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d138      	bne.n	8003a38 <HAL_RCC_GetSysClockFreq+0xc0>
 80039c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2203      	movs	r2, #3
 80039cc:	4013      	ands	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	4b27      	ldr	r3, [pc, #156]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	2207      	movs	r2, #7
 80039d8:	4013      	ands	r3, r2
 80039da:	3301      	adds	r3, #1
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d10d      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0x88>
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	4824      	ldr	r0, [pc, #144]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x100>)
 80039e8:	f7fc fb94 	bl	8000114 <__udivsi3>
 80039ec:	0003      	movs	r3, r0
 80039ee:	0019      	movs	r1, r3
 80039f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	227f      	movs	r2, #127	@ 0x7f
 80039f8:	4013      	ands	r3, r2
 80039fa:	434b      	muls	r3, r1
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e00d      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0xa4>
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	481c      	ldr	r0, [pc, #112]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a04:	f7fc fb86 	bl	8000114 <__udivsi3>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	4b18      	ldr	r3, [pc, #96]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	227f      	movs	r2, #127	@ 0x7f
 8003a14:	4013      	ands	r3, r2
 8003a16:	434b      	muls	r3, r1
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	4b14      	ldr	r3, [pc, #80]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0f5b      	lsrs	r3, r3, #29
 8003a22:	2207      	movs	r2, #7
 8003a24:	4013      	ands	r3, r2
 8003a26:	3301      	adds	r3, #1
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	6978      	ldr	r0, [r7, #20]
 8003a2e:	f7fc fb71 	bl	8000114 <__udivsi3>
 8003a32:	0003      	movs	r3, r0
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	e015      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xec>
 8003a38:	4b0d      	ldr	r3, [pc, #52]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2238      	movs	r2, #56	@ 0x38
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d103      	bne.n	8003a4c <HAL_RCC_GetSysClockFreq+0xd4>
 8003a44:	2380      	movs	r3, #128	@ 0x80
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xec>
 8003a4c:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2238      	movs	r2, #56	@ 0x38
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b18      	cmp	r3, #24
 8003a56:	d103      	bne.n	8003a60 <HAL_RCC_GetSysClockFreq+0xe8>
 8003a58:	23fa      	movs	r3, #250	@ 0xfa
 8003a5a:	01db      	lsls	r3, r3, #7
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	e001      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xec>
 8003a60:	2300      	movs	r3, #0
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b006      	add	sp, #24
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			@ (mov r8, r8)
 8003a70:	40021000 	.word	0x40021000
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	007a1200 	.word	0x007a1200

08003a7c <HAL_RCCEx_PeriphCLKConfig>:
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	2313      	movs	r3, #19
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	2312      	movs	r3, #18
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2380      	movs	r3, #128	@ 0x80
 8003a9a:	029b      	lsls	r3, r3, #10
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d100      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003aa0:	e0a3      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003aa2:	2011      	movs	r0, #17
 8003aa4:	183b      	adds	r3, r7, r0
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003aac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	055b      	lsls	r3, r3, #21
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d110      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ab8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aba:	4b7b      	ldr	r3, [pc, #492]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003abc:	2180      	movs	r1, #128	@ 0x80
 8003abe:	0549      	lsls	r1, r1, #21
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ac4:	4b78      	ldr	r3, [pc, #480]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ac6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	055b      	lsls	r3, r3, #21
 8003acc:	4013      	ands	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	183b      	adds	r3, r7, r0
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	4b74      	ldr	r3, [pc, #464]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b73      	ldr	r3, [pc, #460]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ade:	2180      	movs	r1, #128	@ 0x80
 8003ae0:	0049      	lsls	r1, r1, #1
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	f7fe f999 	bl	8001e1c <HAL_GetTick>
 8003aea:	0003      	movs	r3, r0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	e00b      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8003af0:	f7fe f994 	bl	8001e1c <HAL_GetTick>
 8003af4:	0002      	movs	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d904      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8003afe:	2313      	movs	r3, #19
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	2203      	movs	r2, #3
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e005      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003b08:	4b68      	ldr	r3, [pc, #416]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	2380      	movs	r3, #128	@ 0x80
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4013      	ands	r3, r2
 8003b12:	d0ed      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b14:	2313      	movs	r3, #19
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d154      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003b1e:	4b62      	ldr	r3, [pc, #392]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b22:	23c0      	movs	r3, #192	@ 0xc0
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4013      	ands	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d019      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d014      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	4b58      	ldr	r3, [pc, #352]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b48:	4b57      	ldr	r3, [pc, #348]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b4a:	2180      	movs	r1, #128	@ 0x80
 8003b4c:	0249      	lsls	r1, r1, #9
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b52:	4b55      	ldr	r3, [pc, #340]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b56:	4b54      	ldr	r3, [pc, #336]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b58:	4956      	ldr	r1, [pc, #344]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003b5a:	400a      	ands	r2, r1
 8003b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b5e:	4b52      	ldr	r3, [pc, #328]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2201      	movs	r2, #1
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d016      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8003b6c:	f7fe f956 	bl	8001e1c <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e00c      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003b76:	f7fe f951 	bl	8001e1c <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	4a4d      	ldr	r2, [pc, #308]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d904      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003b86:	2313      	movs	r3, #19
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	e004      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8003b90:	4b45      	ldr	r3, [pc, #276]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b94:	2202      	movs	r2, #2
 8003b96:	4013      	ands	r3, r2
 8003b98:	d0ed      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003b9a:	2313      	movs	r3, #19
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8003ba4:	4b40      	ldr	r3, [pc, #256]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	4a41      	ldr	r2, [pc, #260]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	0019      	movs	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bb8:	e00c      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003bba:	2312      	movs	r3, #18
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	2213      	movs	r2, #19
 8003bc0:	18ba      	adds	r2, r7, r2
 8003bc2:	7812      	ldrb	r2, [r2, #0]
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e005      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003bc8:	2312      	movs	r3, #18
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	2213      	movs	r2, #19
 8003bce:	18ba      	adds	r2, r7, r2
 8003bd0:	7812      	ldrb	r2, [r2, #0]
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	2311      	movs	r3, #17
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003bde:	4b32      	ldr	r3, [pc, #200]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003be2:	4b31      	ldr	r3, [pc, #196]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003be4:	4935      	ldr	r1, [pc, #212]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003be6:	400a      	ands	r2, r1
 8003be8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d009      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	4393      	bics	r3, r2
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	4b29      	ldr	r3, [pc, #164]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c04:	430a      	orrs	r2, r1
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c12:	4b25      	ldr	r3, [pc, #148]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c16:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	4b21      	ldr	r3, [pc, #132]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c22:	430a      	orrs	r2, r1
 8003c24:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	2380      	movs	r3, #128	@ 0x80
 8003c2c:	01db      	lsls	r3, r3, #7
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d015      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c32:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	0899      	lsrs	r1, r3, #2
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c40:	430a      	orrs	r2, r1
 8003c42:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	05db      	lsls	r3, r3, #23
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c50:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c56:	2180      	movs	r1, #128	@ 0x80
 8003c58:	0249      	lsls	r1, r1, #9
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	2380      	movs	r3, #128	@ 0x80
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	4013      	ands	r3, r2
 8003c68:	d016      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6e:	4a15      	ldr	r2, [pc, #84]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	0019      	movs	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	2380      	movs	r3, #128	@ 0x80
 8003c84:	01db      	lsls	r3, r3, #7
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d106      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003c8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c90:	2180      	movs	r1, #128	@ 0x80
 8003c92:	0249      	lsls	r1, r1, #9
 8003c94:	430a      	orrs	r2, r1
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	2312      	movs	r3, #18
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b006      	add	sp, #24
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	fffffcff 	.word	0xfffffcff
 8003cb4:	fffeffff 	.word	0xfffeffff
 8003cb8:	00001388 	.word	0x00001388
 8003cbc:	efffffff 	.word	0xefffffff
 8003cc0:	ffffcfff 	.word	0xffffcfff
 8003cc4:	ffff3fff 	.word	0xffff3fff

08003cc8 <HAL_TIM_Base_Init>:
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_Base_Init+0x12>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e04a      	b.n	8003d70 <HAL_TIM_Base_Init+0xa8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	223d      	movs	r2, #61	@ 0x3d
 8003cde:	5c9b      	ldrb	r3, [r3, r2]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d107      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x2e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	223c      	movs	r2, #60	@ 0x3c
 8003cea:	2100      	movs	r1, #0
 8003cec:	5499      	strb	r1, [r3, r2]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7fd ff67 	bl	8001bc4 <HAL_TIM_Base_MspInit>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	223d      	movs	r2, #61	@ 0x3d
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	5499      	strb	r1, [r3, r2]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	0019      	movs	r1, r3
 8003d08:	0010      	movs	r0, r2
 8003d0a:	f000 f9ab 	bl	8004064 <TIM_Base_SetConfig>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2248      	movs	r2, #72	@ 0x48
 8003d12:	2101      	movs	r1, #1
 8003d14:	5499      	strb	r1, [r3, r2]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	223e      	movs	r2, #62	@ 0x3e
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	223f      	movs	r2, #63	@ 0x3f
 8003d22:	2101      	movs	r1, #1
 8003d24:	5499      	strb	r1, [r3, r2]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2240      	movs	r2, #64	@ 0x40
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	5499      	strb	r1, [r3, r2]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2241      	movs	r2, #65	@ 0x41
 8003d32:	2101      	movs	r1, #1
 8003d34:	5499      	strb	r1, [r3, r2]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2242      	movs	r2, #66	@ 0x42
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	5499      	strb	r1, [r3, r2]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2243      	movs	r2, #67	@ 0x43
 8003d42:	2101      	movs	r1, #1
 8003d44:	5499      	strb	r1, [r3, r2]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2244      	movs	r2, #68	@ 0x44
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	5499      	strb	r1, [r3, r2]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2245      	movs	r2, #69	@ 0x45
 8003d52:	2101      	movs	r1, #1
 8003d54:	5499      	strb	r1, [r3, r2]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2246      	movs	r2, #70	@ 0x46
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	5499      	strb	r1, [r3, r2]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2247      	movs	r2, #71	@ 0x47
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	223d      	movs	r2, #61	@ 0x3d
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	0018      	movs	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_Base_Start_IT>:
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	223d      	movs	r2, #61	@ 0x3d
 8003d84:	5c9b      	ldrb	r3, [r3, r2]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <HAL_TIM_Base_Start_IT+0x18>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e037      	b.n	8003e00 <HAL_TIM_Base_Start_IT+0x88>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	223d      	movs	r2, #61	@ 0x3d
 8003d94:	2102      	movs	r1, #2
 8003d96:	5499      	strb	r1, [r3, r2]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2101      	movs	r1, #1
 8003da4:	430a      	orrs	r2, r1
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a16      	ldr	r2, [pc, #88]	@ (8003e08 <HAL_TIM_Base_Start_IT+0x90>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_TIM_Base_Start_IT+0x44>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a15      	ldr	r2, [pc, #84]	@ (8003e0c <HAL_TIM_Base_Start_IT+0x94>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d116      	bne.n	8003dea <HAL_TIM_Base_Start_IT+0x72>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	4a13      	ldr	r2, [pc, #76]	@ (8003e10 <HAL_TIM_Base_Start_IT+0x98>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b06      	cmp	r3, #6
 8003dcc:	d016      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x84>
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	2380      	movs	r3, #128	@ 0x80
 8003dd2:	025b      	lsls	r3, r3, #9
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d011      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x84>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2101      	movs	r1, #1
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e008      	b.n	8003dfc <HAL_TIM_Base_Start_IT+0x84>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2101      	movs	r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	e000      	b.n	8003dfe <HAL_TIM_Base_Start_IT+0x86>
 8003dfc:	46c0      	nop			@ (mov r8, r8)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b004      	add	sp, #16
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	00010007 	.word	0x00010007

08003e14 <HAL_TIM_IRQHandler>:
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	4013      	ands	r3, r2
 8003e32:	d021      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x64>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2202      	movs	r2, #2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d01d      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x64>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2203      	movs	r2, #3
 8003e42:	4252      	negs	r2, r2
 8003e44:	611a      	str	r2, [r3, #16]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	771a      	strb	r2, [r3, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2203      	movs	r2, #3
 8003e54:	4013      	ands	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x4e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f000 f8ea 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003e60:	e007      	b.n	8003e72 <HAL_TIM_IRQHandler+0x5e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f000 f8dd 	bl	8004024 <HAL_TIM_OC_DelayElapsedCallback>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f000 f8e9 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d022      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0xb2>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2204      	movs	r2, #4
 8003e84:	4013      	ands	r3, r2
 8003e86:	d01e      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0xb2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2205      	movs	r2, #5
 8003e8e:	4252      	negs	r2, r2
 8003e90:	611a      	str	r2, [r3, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	771a      	strb	r2, [r3, #28]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	23c0      	movs	r3, #192	@ 0xc0
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d004      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x9c>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f000 f8c3 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003eae:	e007      	b.n	8003ec0 <HAL_TIM_IRQHandler+0xac>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f000 f8b6 	bl	8004024 <HAL_TIM_OC_DelayElapsedCallback>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f000 f8c2 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	771a      	strb	r2, [r3, #28]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2208      	movs	r2, #8
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d021      	beq.n	8003f12 <HAL_TIM_IRQHandler+0xfe>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d01d      	beq.n	8003f12 <HAL_TIM_IRQHandler+0xfe>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2209      	movs	r2, #9
 8003edc:	4252      	negs	r2, r2
 8003ede:	611a      	str	r2, [r3, #16]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	771a      	strb	r2, [r3, #28]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	2203      	movs	r2, #3
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_IRQHandler+0xe8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f000 f89d 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003efa:	e007      	b.n	8003f0c <HAL_TIM_IRQHandler+0xf8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 f890 	bl	8004024 <HAL_TIM_OC_DelayElapsedCallback>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 f89c 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	771a      	strb	r2, [r3, #28]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2210      	movs	r2, #16
 8003f16:	4013      	ands	r3, r2
 8003f18:	d022      	beq.n	8003f60 <HAL_TIM_IRQHandler+0x14c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d01e      	beq.n	8003f60 <HAL_TIM_IRQHandler+0x14c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2211      	movs	r2, #17
 8003f28:	4252      	negs	r2, r2
 8003f2a:	611a      	str	r2, [r3, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2208      	movs	r2, #8
 8003f30:	771a      	strb	r2, [r3, #28]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	23c0      	movs	r3, #192	@ 0xc0
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x136>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f876 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003f48:	e007      	b.n	8003f5a <HAL_TIM_IRQHandler+0x146>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f000 f869 	bl	8004024 <HAL_TIM_OC_DelayElapsedCallback>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f000 f875 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2201      	movs	r2, #1
 8003f64:	4013      	ands	r3, r2
 8003f66:	d00c      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x16e>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d008      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x16e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2202      	movs	r2, #2
 8003f76:	4252      	negs	r2, r2
 8003f78:	611a      	str	r2, [r3, #16]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7fc ffeb 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2280      	movs	r2, #128	@ 0x80
 8003f86:	4013      	ands	r3, r2
 8003f88:	d104      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x180>
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	019b      	lsls	r3, r3, #6
 8003f90:	4013      	ands	r3, r2
 8003f92:	d00b      	beq.n	8003fac <HAL_TIM_IRQHandler+0x198>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2280      	movs	r2, #128	@ 0x80
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d007      	beq.n	8003fac <HAL_TIM_IRQHandler+0x198>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800401c <HAL_TIM_IRQHandler+0x208>)
 8003fa2:	611a      	str	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f000 f8de 	bl	8004168 <HAL_TIMEx_BreakCallback>
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	2380      	movs	r3, #128	@ 0x80
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d00b      	beq.n	8003fce <HAL_TIM_IRQHandler+0x1ba>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2280      	movs	r2, #128	@ 0x80
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d007      	beq.n	8003fce <HAL_TIM_IRQHandler+0x1ba>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a17      	ldr	r2, [pc, #92]	@ (8004020 <HAL_TIM_IRQHandler+0x20c>)
 8003fc4:	611a      	str	r2, [r3, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f000 f8d5 	bl	8004178 <HAL_TIMEx_Break2Callback>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2240      	movs	r2, #64	@ 0x40
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0x1dc>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2240      	movs	r2, #64	@ 0x40
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d008      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0x1dc>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2241      	movs	r2, #65	@ 0x41
 8003fe4:	4252      	negs	r2, r2
 8003fe6:	611a      	str	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 f832 	bl	8004054 <HAL_TIM_TriggerCallback>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d00c      	beq.n	8004012 <HAL_TIM_IRQHandler+0x1fe>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d008      	beq.n	8004012 <HAL_TIM_IRQHandler+0x1fe>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2221      	movs	r2, #33	@ 0x21
 8004006:	4252      	negs	r2, r2
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0018      	movs	r0, r3
 800400e:	f000 f8a3 	bl	8004158 <HAL_TIMEx_CommutCallback>
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b004      	add	sp, #16
 8004018:	bd80      	pop	{r7, pc}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	ffffdf7f 	.word	0xffffdf7f
 8004020:	fffffeff 	.word	0xfffffeff

08004024 <HAL_TIM_OC_DelayElapsedCallback>:
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	46c0      	nop			@ (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b002      	add	sp, #8
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_TIM_IC_CaptureCallback>:
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	46c0      	nop			@ (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b002      	add	sp, #8
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	46c0      	nop			@ (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	b002      	add	sp, #8
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_TIM_TriggerCallback>:
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	b002      	add	sp, #8
 8004062:	bd80      	pop	{r7, pc}

08004064 <TIM_Base_SetConfig>:
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a32      	ldr	r2, [pc, #200]	@ (8004140 <TIM_Base_SetConfig+0xdc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_Base_SetConfig+0x20>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a31      	ldr	r2, [pc, #196]	@ (8004144 <TIM_Base_SetConfig+0xe0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d108      	bne.n	8004096 <TIM_Base_SetConfig+0x32>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2270      	movs	r2, #112	@ 0x70
 8004088:	4393      	bics	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a29      	ldr	r2, [pc, #164]	@ (8004140 <TIM_Base_SetConfig+0xdc>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <TIM_Base_SetConfig+0x5a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a28      	ldr	r2, [pc, #160]	@ (8004144 <TIM_Base_SetConfig+0xe0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_Base_SetConfig+0x5a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a27      	ldr	r2, [pc, #156]	@ (8004148 <TIM_Base_SetConfig+0xe4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_Base_SetConfig+0x5a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a26      	ldr	r2, [pc, #152]	@ (800414c <TIM_Base_SetConfig+0xe8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_Base_SetConfig+0x5a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a25      	ldr	r2, [pc, #148]	@ (8004150 <TIM_Base_SetConfig+0xec>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <TIM_Base_SetConfig+0x6c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a24      	ldr	r2, [pc, #144]	@ (8004154 <TIM_Base_SetConfig+0xf0>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2280      	movs	r2, #128	@ 0x80
 80040d4:	4393      	bics	r3, r2
 80040d6:	001a      	movs	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <TIM_Base_SetConfig+0xdc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <TIM_Base_SetConfig+0xaa>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a12      	ldr	r2, [pc, #72]	@ (800414c <TIM_Base_SetConfig+0xe8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_Base_SetConfig+0xaa>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a11      	ldr	r2, [pc, #68]	@ (8004150 <TIM_Base_SetConfig+0xec>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d103      	bne.n	8004116 <TIM_Base_SetConfig+0xb2>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	615a      	str	r2, [r3, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2201      	movs	r2, #1
 8004122:	4013      	ands	r3, r2
 8004124:	2b01      	cmp	r3, #1
 8004126:	d106      	bne.n	8004136 <TIM_Base_SetConfig+0xd2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2201      	movs	r2, #1
 800412e:	4393      	bics	r3, r2
 8004130:	001a      	movs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	611a      	str	r2, [r3, #16]
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	b004      	add	sp, #16
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40000400 	.word	0x40000400
 8004148:	40002000 	.word	0x40002000
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800
 8004154:	fffffcff 	.word	0xfffffcff

08004158 <HAL_TIMEx_CommutCallback>:
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	46c0      	nop			@ (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b002      	add	sp, #8
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_TIMEx_BreakCallback>:
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	46c0      	nop			@ (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	b002      	add	sp, #8
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_TIMEx_Break2Callback>:
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	46c0      	nop			@ (mov r8, r8)
 8004182:	46bd      	mov	sp, r7
 8004184:	b002      	add	sp, #8
 8004186:	bd80      	pop	{r7, pc}

08004188 <siprintf>:
 8004188:	b40e      	push	{r1, r2, r3}
 800418a:	b510      	push	{r4, lr}
 800418c:	2400      	movs	r4, #0
 800418e:	490c      	ldr	r1, [pc, #48]	@ (80041c0 <siprintf+0x38>)
 8004190:	b09d      	sub	sp, #116	@ 0x74
 8004192:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004194:	9002      	str	r0, [sp, #8]
 8004196:	9006      	str	r0, [sp, #24]
 8004198:	9107      	str	r1, [sp, #28]
 800419a:	9104      	str	r1, [sp, #16]
 800419c:	4809      	ldr	r0, [pc, #36]	@ (80041c4 <siprintf+0x3c>)
 800419e:	490a      	ldr	r1, [pc, #40]	@ (80041c8 <siprintf+0x40>)
 80041a0:	cb04      	ldmia	r3!, {r2}
 80041a2:	9105      	str	r1, [sp, #20]
 80041a4:	6800      	ldr	r0, [r0, #0]
 80041a6:	a902      	add	r1, sp, #8
 80041a8:	9301      	str	r3, [sp, #4]
 80041aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80041ac:	f000 f9a8 	bl	8004500 <_svfiprintf_r>
 80041b0:	9b02      	ldr	r3, [sp, #8]
 80041b2:	701c      	strb	r4, [r3, #0]
 80041b4:	b01d      	add	sp, #116	@ 0x74
 80041b6:	bc10      	pop	{r4}
 80041b8:	bc08      	pop	{r3}
 80041ba:	b003      	add	sp, #12
 80041bc:	4718      	bx	r3
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	7fffffff 	.word	0x7fffffff
 80041c4:	20000020 	.word	0x20000020
 80041c8:	ffff0208 	.word	0xffff0208

080041cc <memset>:
 80041cc:	0003      	movs	r3, r0
 80041ce:	1882      	adds	r2, r0, r2
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memset+0xa>
 80041d4:	4770      	bx	lr
 80041d6:	7019      	strb	r1, [r3, #0]
 80041d8:	3301      	adds	r3, #1
 80041da:	e7f9      	b.n	80041d0 <memset+0x4>

080041dc <__errno>:
 80041dc:	4b01      	ldr	r3, [pc, #4]	@ (80041e4 <__errno+0x8>)
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	4770      	bx	lr
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	20000020 	.word	0x20000020

080041e8 <__libc_init_array>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	2600      	movs	r6, #0
 80041ec:	4c0c      	ldr	r4, [pc, #48]	@ (8004220 <__libc_init_array+0x38>)
 80041ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004224 <__libc_init_array+0x3c>)
 80041f0:	1b64      	subs	r4, r4, r5
 80041f2:	10a4      	asrs	r4, r4, #2
 80041f4:	42a6      	cmp	r6, r4
 80041f6:	d109      	bne.n	800420c <__libc_init_array+0x24>
 80041f8:	2600      	movs	r6, #0
 80041fa:	f000 fc63 	bl	8004ac4 <_init>
 80041fe:	4c0a      	ldr	r4, [pc, #40]	@ (8004228 <__libc_init_array+0x40>)
 8004200:	4d0a      	ldr	r5, [pc, #40]	@ (800422c <__libc_init_array+0x44>)
 8004202:	1b64      	subs	r4, r4, r5
 8004204:	10a4      	asrs	r4, r4, #2
 8004206:	42a6      	cmp	r6, r4
 8004208:	d105      	bne.n	8004216 <__libc_init_array+0x2e>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	00b3      	lsls	r3, r6, #2
 800420e:	58eb      	ldr	r3, [r5, r3]
 8004210:	4798      	blx	r3
 8004212:	3601      	adds	r6, #1
 8004214:	e7ee      	b.n	80041f4 <__libc_init_array+0xc>
 8004216:	00b3      	lsls	r3, r6, #2
 8004218:	58eb      	ldr	r3, [r5, r3]
 800421a:	4798      	blx	r3
 800421c:	3601      	adds	r6, #1
 800421e:	e7f2      	b.n	8004206 <__libc_init_array+0x1e>
 8004220:	08008150 	.word	0x08008150
 8004224:	08008150 	.word	0x08008150
 8004228:	08008154 	.word	0x08008154
 800422c:	08008150 	.word	0x08008150

08004230 <__retarget_lock_acquire_recursive>:
 8004230:	4770      	bx	lr

08004232 <__retarget_lock_release_recursive>:
 8004232:	4770      	bx	lr

08004234 <memcpy>:
 8004234:	2300      	movs	r3, #0
 8004236:	b510      	push	{r4, lr}
 8004238:	429a      	cmp	r2, r3
 800423a:	d100      	bne.n	800423e <memcpy+0xa>
 800423c:	bd10      	pop	{r4, pc}
 800423e:	5ccc      	ldrb	r4, [r1, r3]
 8004240:	54c4      	strb	r4, [r0, r3]
 8004242:	3301      	adds	r3, #1
 8004244:	e7f8      	b.n	8004238 <memcpy+0x4>
	...

08004248 <_free_r>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	0005      	movs	r5, r0
 800424c:	1e0c      	subs	r4, r1, #0
 800424e:	d010      	beq.n	8004272 <_free_r+0x2a>
 8004250:	3c04      	subs	r4, #4
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	da00      	bge.n	800425a <_free_r+0x12>
 8004258:	18e4      	adds	r4, r4, r3
 800425a:	0028      	movs	r0, r5
 800425c:	f000 f8e0 	bl	8004420 <__malloc_lock>
 8004260:	4a1d      	ldr	r2, [pc, #116]	@ (80042d8 <_free_r+0x90>)
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <_free_r+0x2c>
 8004268:	6063      	str	r3, [r4, #4]
 800426a:	6014      	str	r4, [r2, #0]
 800426c:	0028      	movs	r0, r5
 800426e:	f000 f8df 	bl	8004430 <__malloc_unlock>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	42a3      	cmp	r3, r4
 8004276:	d908      	bls.n	800428a <_free_r+0x42>
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	1821      	adds	r1, r4, r0
 800427c:	428b      	cmp	r3, r1
 800427e:	d1f3      	bne.n	8004268 <_free_r+0x20>
 8004280:	6819      	ldr	r1, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	1809      	adds	r1, r1, r0
 8004286:	6021      	str	r1, [r4, #0]
 8004288:	e7ee      	b.n	8004268 <_free_r+0x20>
 800428a:	001a      	movs	r2, r3
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <_free_r+0x4e>
 8004292:	42a3      	cmp	r3, r4
 8004294:	d9f9      	bls.n	800428a <_free_r+0x42>
 8004296:	6811      	ldr	r1, [r2, #0]
 8004298:	1850      	adds	r0, r2, r1
 800429a:	42a0      	cmp	r0, r4
 800429c:	d10b      	bne.n	80042b6 <_free_r+0x6e>
 800429e:	6820      	ldr	r0, [r4, #0]
 80042a0:	1809      	adds	r1, r1, r0
 80042a2:	1850      	adds	r0, r2, r1
 80042a4:	6011      	str	r1, [r2, #0]
 80042a6:	4283      	cmp	r3, r0
 80042a8:	d1e0      	bne.n	800426c <_free_r+0x24>
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	1841      	adds	r1, r0, r1
 80042b0:	6011      	str	r1, [r2, #0]
 80042b2:	6053      	str	r3, [r2, #4]
 80042b4:	e7da      	b.n	800426c <_free_r+0x24>
 80042b6:	42a0      	cmp	r0, r4
 80042b8:	d902      	bls.n	80042c0 <_free_r+0x78>
 80042ba:	230c      	movs	r3, #12
 80042bc:	602b      	str	r3, [r5, #0]
 80042be:	e7d5      	b.n	800426c <_free_r+0x24>
 80042c0:	6820      	ldr	r0, [r4, #0]
 80042c2:	1821      	adds	r1, r4, r0
 80042c4:	428b      	cmp	r3, r1
 80042c6:	d103      	bne.n	80042d0 <_free_r+0x88>
 80042c8:	6819      	ldr	r1, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	1809      	adds	r1, r1, r0
 80042ce:	6021      	str	r1, [r4, #0]
 80042d0:	6063      	str	r3, [r4, #4]
 80042d2:	6054      	str	r4, [r2, #4]
 80042d4:	e7ca      	b.n	800426c <_free_r+0x24>
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	20000768 	.word	0x20000768

080042dc <sbrk_aligned>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	4e0f      	ldr	r6, [pc, #60]	@ (800431c <sbrk_aligned+0x40>)
 80042e0:	000d      	movs	r5, r1
 80042e2:	6831      	ldr	r1, [r6, #0]
 80042e4:	0004      	movs	r4, r0
 80042e6:	2900      	cmp	r1, #0
 80042e8:	d102      	bne.n	80042f0 <sbrk_aligned+0x14>
 80042ea:	f000 fb95 	bl	8004a18 <_sbrk_r>
 80042ee:	6030      	str	r0, [r6, #0]
 80042f0:	0029      	movs	r1, r5
 80042f2:	0020      	movs	r0, r4
 80042f4:	f000 fb90 	bl	8004a18 <_sbrk_r>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	d103      	bne.n	8004304 <sbrk_aligned+0x28>
 80042fc:	2501      	movs	r5, #1
 80042fe:	426d      	negs	r5, r5
 8004300:	0028      	movs	r0, r5
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	2303      	movs	r3, #3
 8004306:	1cc5      	adds	r5, r0, #3
 8004308:	439d      	bics	r5, r3
 800430a:	42a8      	cmp	r0, r5
 800430c:	d0f8      	beq.n	8004300 <sbrk_aligned+0x24>
 800430e:	1a29      	subs	r1, r5, r0
 8004310:	0020      	movs	r0, r4
 8004312:	f000 fb81 	bl	8004a18 <_sbrk_r>
 8004316:	3001      	adds	r0, #1
 8004318:	d1f2      	bne.n	8004300 <sbrk_aligned+0x24>
 800431a:	e7ef      	b.n	80042fc <sbrk_aligned+0x20>
 800431c:	20000764 	.word	0x20000764

08004320 <_malloc_r>:
 8004320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004322:	2203      	movs	r2, #3
 8004324:	1ccb      	adds	r3, r1, #3
 8004326:	4393      	bics	r3, r2
 8004328:	3308      	adds	r3, #8
 800432a:	0005      	movs	r5, r0
 800432c:	001f      	movs	r7, r3
 800432e:	2b0c      	cmp	r3, #12
 8004330:	d234      	bcs.n	800439c <_malloc_r+0x7c>
 8004332:	270c      	movs	r7, #12
 8004334:	42b9      	cmp	r1, r7
 8004336:	d833      	bhi.n	80043a0 <_malloc_r+0x80>
 8004338:	0028      	movs	r0, r5
 800433a:	f000 f871 	bl	8004420 <__malloc_lock>
 800433e:	4e37      	ldr	r6, [pc, #220]	@ (800441c <_malloc_r+0xfc>)
 8004340:	6833      	ldr	r3, [r6, #0]
 8004342:	001c      	movs	r4, r3
 8004344:	2c00      	cmp	r4, #0
 8004346:	d12f      	bne.n	80043a8 <_malloc_r+0x88>
 8004348:	0039      	movs	r1, r7
 800434a:	0028      	movs	r0, r5
 800434c:	f7ff ffc6 	bl	80042dc <sbrk_aligned>
 8004350:	0004      	movs	r4, r0
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	d15f      	bne.n	8004416 <_malloc_r+0xf6>
 8004356:	6834      	ldr	r4, [r6, #0]
 8004358:	9400      	str	r4, [sp, #0]
 800435a:	9b00      	ldr	r3, [sp, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d14a      	bne.n	80043f6 <_malloc_r+0xd6>
 8004360:	2c00      	cmp	r4, #0
 8004362:	d052      	beq.n	800440a <_malloc_r+0xea>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	0028      	movs	r0, r5
 8004368:	18e3      	adds	r3, r4, r3
 800436a:	9900      	ldr	r1, [sp, #0]
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	f000 fb53 	bl	8004a18 <_sbrk_r>
 8004372:	9b01      	ldr	r3, [sp, #4]
 8004374:	4283      	cmp	r3, r0
 8004376:	d148      	bne.n	800440a <_malloc_r+0xea>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	0028      	movs	r0, r5
 800437c:	1aff      	subs	r7, r7, r3
 800437e:	0039      	movs	r1, r7
 8004380:	f7ff ffac 	bl	80042dc <sbrk_aligned>
 8004384:	3001      	adds	r0, #1
 8004386:	d040      	beq.n	800440a <_malloc_r+0xea>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	19db      	adds	r3, r3, r7
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	6833      	ldr	r3, [r6, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	2a00      	cmp	r2, #0
 8004394:	d133      	bne.n	80043fe <_malloc_r+0xde>
 8004396:	9b00      	ldr	r3, [sp, #0]
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	e019      	b.n	80043d0 <_malloc_r+0xb0>
 800439c:	2b00      	cmp	r3, #0
 800439e:	dac9      	bge.n	8004334 <_malloc_r+0x14>
 80043a0:	230c      	movs	r3, #12
 80043a2:	602b      	str	r3, [r5, #0]
 80043a4:	2000      	movs	r0, #0
 80043a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043a8:	6821      	ldr	r1, [r4, #0]
 80043aa:	1bc9      	subs	r1, r1, r7
 80043ac:	d420      	bmi.n	80043f0 <_malloc_r+0xd0>
 80043ae:	290b      	cmp	r1, #11
 80043b0:	d90a      	bls.n	80043c8 <_malloc_r+0xa8>
 80043b2:	19e2      	adds	r2, r4, r7
 80043b4:	6027      	str	r7, [r4, #0]
 80043b6:	42a3      	cmp	r3, r4
 80043b8:	d104      	bne.n	80043c4 <_malloc_r+0xa4>
 80043ba:	6032      	str	r2, [r6, #0]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	6011      	str	r1, [r2, #0]
 80043c0:	6053      	str	r3, [r2, #4]
 80043c2:	e005      	b.n	80043d0 <_malloc_r+0xb0>
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	e7f9      	b.n	80043bc <_malloc_r+0x9c>
 80043c8:	6862      	ldr	r2, [r4, #4]
 80043ca:	42a3      	cmp	r3, r4
 80043cc:	d10e      	bne.n	80043ec <_malloc_r+0xcc>
 80043ce:	6032      	str	r2, [r6, #0]
 80043d0:	0028      	movs	r0, r5
 80043d2:	f000 f82d 	bl	8004430 <__malloc_unlock>
 80043d6:	0020      	movs	r0, r4
 80043d8:	2207      	movs	r2, #7
 80043da:	300b      	adds	r0, #11
 80043dc:	1d23      	adds	r3, r4, #4
 80043de:	4390      	bics	r0, r2
 80043e0:	1ac2      	subs	r2, r0, r3
 80043e2:	4298      	cmp	r0, r3
 80043e4:	d0df      	beq.n	80043a6 <_malloc_r+0x86>
 80043e6:	1a1b      	subs	r3, r3, r0
 80043e8:	50a3      	str	r3, [r4, r2]
 80043ea:	e7dc      	b.n	80043a6 <_malloc_r+0x86>
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	e7ef      	b.n	80043d0 <_malloc_r+0xb0>
 80043f0:	0023      	movs	r3, r4
 80043f2:	6864      	ldr	r4, [r4, #4]
 80043f4:	e7a6      	b.n	8004344 <_malloc_r+0x24>
 80043f6:	9c00      	ldr	r4, [sp, #0]
 80043f8:	6863      	ldr	r3, [r4, #4]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	e7ad      	b.n	800435a <_malloc_r+0x3a>
 80043fe:	001a      	movs	r2, r3
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	42a3      	cmp	r3, r4
 8004404:	d1fb      	bne.n	80043fe <_malloc_r+0xde>
 8004406:	2300      	movs	r3, #0
 8004408:	e7da      	b.n	80043c0 <_malloc_r+0xa0>
 800440a:	230c      	movs	r3, #12
 800440c:	0028      	movs	r0, r5
 800440e:	602b      	str	r3, [r5, #0]
 8004410:	f000 f80e 	bl	8004430 <__malloc_unlock>
 8004414:	e7c6      	b.n	80043a4 <_malloc_r+0x84>
 8004416:	6007      	str	r7, [r0, #0]
 8004418:	e7da      	b.n	80043d0 <_malloc_r+0xb0>
 800441a:	46c0      	nop			@ (mov r8, r8)
 800441c:	20000768 	.word	0x20000768

08004420 <__malloc_lock>:
 8004420:	b510      	push	{r4, lr}
 8004422:	4802      	ldr	r0, [pc, #8]	@ (800442c <__malloc_lock+0xc>)
 8004424:	f7ff ff04 	bl	8004230 <__retarget_lock_acquire_recursive>
 8004428:	bd10      	pop	{r4, pc}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	20000760 	.word	0x20000760

08004430 <__malloc_unlock>:
 8004430:	b510      	push	{r4, lr}
 8004432:	4802      	ldr	r0, [pc, #8]	@ (800443c <__malloc_unlock+0xc>)
 8004434:	f7ff fefd 	bl	8004232 <__retarget_lock_release_recursive>
 8004438:	bd10      	pop	{r4, pc}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	20000760 	.word	0x20000760

08004440 <__ssputs_r>:
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	688e      	ldr	r6, [r1, #8]
 8004444:	b085      	sub	sp, #20
 8004446:	001f      	movs	r7, r3
 8004448:	000c      	movs	r4, r1
 800444a:	680b      	ldr	r3, [r1, #0]
 800444c:	9002      	str	r0, [sp, #8]
 800444e:	9203      	str	r2, [sp, #12]
 8004450:	42be      	cmp	r6, r7
 8004452:	d830      	bhi.n	80044b6 <__ssputs_r+0x76>
 8004454:	210c      	movs	r1, #12
 8004456:	5e62      	ldrsh	r2, [r4, r1]
 8004458:	2190      	movs	r1, #144	@ 0x90
 800445a:	00c9      	lsls	r1, r1, #3
 800445c:	420a      	tst	r2, r1
 800445e:	d028      	beq.n	80044b2 <__ssputs_r+0x72>
 8004460:	2003      	movs	r0, #3
 8004462:	6921      	ldr	r1, [r4, #16]
 8004464:	1a5b      	subs	r3, r3, r1
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	6963      	ldr	r3, [r4, #20]
 800446a:	4343      	muls	r3, r0
 800446c:	9801      	ldr	r0, [sp, #4]
 800446e:	0fdd      	lsrs	r5, r3, #31
 8004470:	18ed      	adds	r5, r5, r3
 8004472:	1c7b      	adds	r3, r7, #1
 8004474:	181b      	adds	r3, r3, r0
 8004476:	106d      	asrs	r5, r5, #1
 8004478:	42ab      	cmp	r3, r5
 800447a:	d900      	bls.n	800447e <__ssputs_r+0x3e>
 800447c:	001d      	movs	r5, r3
 800447e:	0552      	lsls	r2, r2, #21
 8004480:	d528      	bpl.n	80044d4 <__ssputs_r+0x94>
 8004482:	0029      	movs	r1, r5
 8004484:	9802      	ldr	r0, [sp, #8]
 8004486:	f7ff ff4b 	bl	8004320 <_malloc_r>
 800448a:	1e06      	subs	r6, r0, #0
 800448c:	d02c      	beq.n	80044e8 <__ssputs_r+0xa8>
 800448e:	9a01      	ldr	r2, [sp, #4]
 8004490:	6921      	ldr	r1, [r4, #16]
 8004492:	f7ff fecf 	bl	8004234 <memcpy>
 8004496:	89a2      	ldrh	r2, [r4, #12]
 8004498:	4b18      	ldr	r3, [pc, #96]	@ (80044fc <__ssputs_r+0xbc>)
 800449a:	401a      	ands	r2, r3
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	4313      	orrs	r3, r2
 80044a0:	81a3      	strh	r3, [r4, #12]
 80044a2:	9b01      	ldr	r3, [sp, #4]
 80044a4:	6126      	str	r6, [r4, #16]
 80044a6:	18f6      	adds	r6, r6, r3
 80044a8:	6026      	str	r6, [r4, #0]
 80044aa:	003e      	movs	r6, r7
 80044ac:	6165      	str	r5, [r4, #20]
 80044ae:	1aed      	subs	r5, r5, r3
 80044b0:	60a5      	str	r5, [r4, #8]
 80044b2:	42be      	cmp	r6, r7
 80044b4:	d900      	bls.n	80044b8 <__ssputs_r+0x78>
 80044b6:	003e      	movs	r6, r7
 80044b8:	0032      	movs	r2, r6
 80044ba:	9903      	ldr	r1, [sp, #12]
 80044bc:	6820      	ldr	r0, [r4, #0]
 80044be:	f000 fa99 	bl	80049f4 <memmove>
 80044c2:	2000      	movs	r0, #0
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	1b9b      	subs	r3, r3, r6
 80044c8:	60a3      	str	r3, [r4, #8]
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	199b      	adds	r3, r3, r6
 80044ce:	6023      	str	r3, [r4, #0]
 80044d0:	b005      	add	sp, #20
 80044d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d4:	002a      	movs	r2, r5
 80044d6:	9802      	ldr	r0, [sp, #8]
 80044d8:	f000 fabb 	bl	8004a52 <_realloc_r>
 80044dc:	1e06      	subs	r6, r0, #0
 80044de:	d1e0      	bne.n	80044a2 <__ssputs_r+0x62>
 80044e0:	6921      	ldr	r1, [r4, #16]
 80044e2:	9802      	ldr	r0, [sp, #8]
 80044e4:	f7ff feb0 	bl	8004248 <_free_r>
 80044e8:	230c      	movs	r3, #12
 80044ea:	2001      	movs	r0, #1
 80044ec:	9a02      	ldr	r2, [sp, #8]
 80044ee:	4240      	negs	r0, r0
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	89a2      	ldrh	r2, [r4, #12]
 80044f4:	3334      	adds	r3, #52	@ 0x34
 80044f6:	4313      	orrs	r3, r2
 80044f8:	81a3      	strh	r3, [r4, #12]
 80044fa:	e7e9      	b.n	80044d0 <__ssputs_r+0x90>
 80044fc:	fffffb7f 	.word	0xfffffb7f

08004500 <_svfiprintf_r>:
 8004500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004502:	b0a1      	sub	sp, #132	@ 0x84
 8004504:	9003      	str	r0, [sp, #12]
 8004506:	001d      	movs	r5, r3
 8004508:	898b      	ldrh	r3, [r1, #12]
 800450a:	000f      	movs	r7, r1
 800450c:	0016      	movs	r6, r2
 800450e:	061b      	lsls	r3, r3, #24
 8004510:	d511      	bpl.n	8004536 <_svfiprintf_r+0x36>
 8004512:	690b      	ldr	r3, [r1, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10e      	bne.n	8004536 <_svfiprintf_r+0x36>
 8004518:	2140      	movs	r1, #64	@ 0x40
 800451a:	f7ff ff01 	bl	8004320 <_malloc_r>
 800451e:	6038      	str	r0, [r7, #0]
 8004520:	6138      	str	r0, [r7, #16]
 8004522:	2800      	cmp	r0, #0
 8004524:	d105      	bne.n	8004532 <_svfiprintf_r+0x32>
 8004526:	230c      	movs	r3, #12
 8004528:	9a03      	ldr	r2, [sp, #12]
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	2001      	movs	r0, #1
 800452e:	4240      	negs	r0, r0
 8004530:	e0cf      	b.n	80046d2 <_svfiprintf_r+0x1d2>
 8004532:	2340      	movs	r3, #64	@ 0x40
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	2300      	movs	r3, #0
 8004538:	ac08      	add	r4, sp, #32
 800453a:	6163      	str	r3, [r4, #20]
 800453c:	3320      	adds	r3, #32
 800453e:	7663      	strb	r3, [r4, #25]
 8004540:	3310      	adds	r3, #16
 8004542:	76a3      	strb	r3, [r4, #26]
 8004544:	9507      	str	r5, [sp, #28]
 8004546:	0035      	movs	r5, r6
 8004548:	782b      	ldrb	r3, [r5, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <_svfiprintf_r+0x52>
 800454e:	2b25      	cmp	r3, #37	@ 0x25
 8004550:	d148      	bne.n	80045e4 <_svfiprintf_r+0xe4>
 8004552:	1bab      	subs	r3, r5, r6
 8004554:	9305      	str	r3, [sp, #20]
 8004556:	42b5      	cmp	r5, r6
 8004558:	d00b      	beq.n	8004572 <_svfiprintf_r+0x72>
 800455a:	0032      	movs	r2, r6
 800455c:	0039      	movs	r1, r7
 800455e:	9803      	ldr	r0, [sp, #12]
 8004560:	f7ff ff6e 	bl	8004440 <__ssputs_r>
 8004564:	3001      	adds	r0, #1
 8004566:	d100      	bne.n	800456a <_svfiprintf_r+0x6a>
 8004568:	e0ae      	b.n	80046c8 <_svfiprintf_r+0x1c8>
 800456a:	6963      	ldr	r3, [r4, #20]
 800456c:	9a05      	ldr	r2, [sp, #20]
 800456e:	189b      	adds	r3, r3, r2
 8004570:	6163      	str	r3, [r4, #20]
 8004572:	782b      	ldrb	r3, [r5, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d100      	bne.n	800457a <_svfiprintf_r+0x7a>
 8004578:	e0a6      	b.n	80046c8 <_svfiprintf_r+0x1c8>
 800457a:	2201      	movs	r2, #1
 800457c:	2300      	movs	r3, #0
 800457e:	4252      	negs	r2, r2
 8004580:	6062      	str	r2, [r4, #4]
 8004582:	a904      	add	r1, sp, #16
 8004584:	3254      	adds	r2, #84	@ 0x54
 8004586:	1852      	adds	r2, r2, r1
 8004588:	1c6e      	adds	r6, r5, #1
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	60e3      	str	r3, [r4, #12]
 800458e:	60a3      	str	r3, [r4, #8]
 8004590:	7013      	strb	r3, [r2, #0]
 8004592:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004594:	4b54      	ldr	r3, [pc, #336]	@ (80046e8 <_svfiprintf_r+0x1e8>)
 8004596:	2205      	movs	r2, #5
 8004598:	0018      	movs	r0, r3
 800459a:	7831      	ldrb	r1, [r6, #0]
 800459c:	9305      	str	r3, [sp, #20]
 800459e:	f000 fa4d 	bl	8004a3c <memchr>
 80045a2:	1c75      	adds	r5, r6, #1
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d11f      	bne.n	80045e8 <_svfiprintf_r+0xe8>
 80045a8:	6822      	ldr	r2, [r4, #0]
 80045aa:	06d3      	lsls	r3, r2, #27
 80045ac:	d504      	bpl.n	80045b8 <_svfiprintf_r+0xb8>
 80045ae:	2353      	movs	r3, #83	@ 0x53
 80045b0:	a904      	add	r1, sp, #16
 80045b2:	185b      	adds	r3, r3, r1
 80045b4:	2120      	movs	r1, #32
 80045b6:	7019      	strb	r1, [r3, #0]
 80045b8:	0713      	lsls	r3, r2, #28
 80045ba:	d504      	bpl.n	80045c6 <_svfiprintf_r+0xc6>
 80045bc:	2353      	movs	r3, #83	@ 0x53
 80045be:	a904      	add	r1, sp, #16
 80045c0:	185b      	adds	r3, r3, r1
 80045c2:	212b      	movs	r1, #43	@ 0x2b
 80045c4:	7019      	strb	r1, [r3, #0]
 80045c6:	7833      	ldrb	r3, [r6, #0]
 80045c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ca:	d016      	beq.n	80045fa <_svfiprintf_r+0xfa>
 80045cc:	0035      	movs	r5, r6
 80045ce:	2100      	movs	r1, #0
 80045d0:	200a      	movs	r0, #10
 80045d2:	68e3      	ldr	r3, [r4, #12]
 80045d4:	782a      	ldrb	r2, [r5, #0]
 80045d6:	1c6e      	adds	r6, r5, #1
 80045d8:	3a30      	subs	r2, #48	@ 0x30
 80045da:	2a09      	cmp	r2, #9
 80045dc:	d950      	bls.n	8004680 <_svfiprintf_r+0x180>
 80045de:	2900      	cmp	r1, #0
 80045e0:	d111      	bne.n	8004606 <_svfiprintf_r+0x106>
 80045e2:	e017      	b.n	8004614 <_svfiprintf_r+0x114>
 80045e4:	3501      	adds	r5, #1
 80045e6:	e7af      	b.n	8004548 <_svfiprintf_r+0x48>
 80045e8:	9b05      	ldr	r3, [sp, #20]
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	1ac0      	subs	r0, r0, r3
 80045ee:	2301      	movs	r3, #1
 80045f0:	4083      	lsls	r3, r0
 80045f2:	4313      	orrs	r3, r2
 80045f4:	002e      	movs	r6, r5
 80045f6:	6023      	str	r3, [r4, #0]
 80045f8:	e7cc      	b.n	8004594 <_svfiprintf_r+0x94>
 80045fa:	9b07      	ldr	r3, [sp, #28]
 80045fc:	1d19      	adds	r1, r3, #4
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	9107      	str	r1, [sp, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	db01      	blt.n	800460a <_svfiprintf_r+0x10a>
 8004606:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004608:	e004      	b.n	8004614 <_svfiprintf_r+0x114>
 800460a:	425b      	negs	r3, r3
 800460c:	60e3      	str	r3, [r4, #12]
 800460e:	2302      	movs	r3, #2
 8004610:	4313      	orrs	r3, r2
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	782b      	ldrb	r3, [r5, #0]
 8004616:	2b2e      	cmp	r3, #46	@ 0x2e
 8004618:	d10c      	bne.n	8004634 <_svfiprintf_r+0x134>
 800461a:	786b      	ldrb	r3, [r5, #1]
 800461c:	2b2a      	cmp	r3, #42	@ 0x2a
 800461e:	d134      	bne.n	800468a <_svfiprintf_r+0x18a>
 8004620:	9b07      	ldr	r3, [sp, #28]
 8004622:	3502      	adds	r5, #2
 8004624:	1d1a      	adds	r2, r3, #4
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	9207      	str	r2, [sp, #28]
 800462a:	2b00      	cmp	r3, #0
 800462c:	da01      	bge.n	8004632 <_svfiprintf_r+0x132>
 800462e:	2301      	movs	r3, #1
 8004630:	425b      	negs	r3, r3
 8004632:	9309      	str	r3, [sp, #36]	@ 0x24
 8004634:	4e2d      	ldr	r6, [pc, #180]	@ (80046ec <_svfiprintf_r+0x1ec>)
 8004636:	2203      	movs	r2, #3
 8004638:	0030      	movs	r0, r6
 800463a:	7829      	ldrb	r1, [r5, #0]
 800463c:	f000 f9fe 	bl	8004a3c <memchr>
 8004640:	2800      	cmp	r0, #0
 8004642:	d006      	beq.n	8004652 <_svfiprintf_r+0x152>
 8004644:	2340      	movs	r3, #64	@ 0x40
 8004646:	1b80      	subs	r0, r0, r6
 8004648:	4083      	lsls	r3, r0
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	3501      	adds	r5, #1
 800464e:	4313      	orrs	r3, r2
 8004650:	6023      	str	r3, [r4, #0]
 8004652:	7829      	ldrb	r1, [r5, #0]
 8004654:	2206      	movs	r2, #6
 8004656:	4826      	ldr	r0, [pc, #152]	@ (80046f0 <_svfiprintf_r+0x1f0>)
 8004658:	1c6e      	adds	r6, r5, #1
 800465a:	7621      	strb	r1, [r4, #24]
 800465c:	f000 f9ee 	bl	8004a3c <memchr>
 8004660:	2800      	cmp	r0, #0
 8004662:	d038      	beq.n	80046d6 <_svfiprintf_r+0x1d6>
 8004664:	4b23      	ldr	r3, [pc, #140]	@ (80046f4 <_svfiprintf_r+0x1f4>)
 8004666:	2b00      	cmp	r3, #0
 8004668:	d122      	bne.n	80046b0 <_svfiprintf_r+0x1b0>
 800466a:	2207      	movs	r2, #7
 800466c:	9b07      	ldr	r3, [sp, #28]
 800466e:	3307      	adds	r3, #7
 8004670:	4393      	bics	r3, r2
 8004672:	3308      	adds	r3, #8
 8004674:	9307      	str	r3, [sp, #28]
 8004676:	6963      	ldr	r3, [r4, #20]
 8004678:	9a04      	ldr	r2, [sp, #16]
 800467a:	189b      	adds	r3, r3, r2
 800467c:	6163      	str	r3, [r4, #20]
 800467e:	e762      	b.n	8004546 <_svfiprintf_r+0x46>
 8004680:	4343      	muls	r3, r0
 8004682:	0035      	movs	r5, r6
 8004684:	2101      	movs	r1, #1
 8004686:	189b      	adds	r3, r3, r2
 8004688:	e7a4      	b.n	80045d4 <_svfiprintf_r+0xd4>
 800468a:	2300      	movs	r3, #0
 800468c:	200a      	movs	r0, #10
 800468e:	0019      	movs	r1, r3
 8004690:	3501      	adds	r5, #1
 8004692:	6063      	str	r3, [r4, #4]
 8004694:	782a      	ldrb	r2, [r5, #0]
 8004696:	1c6e      	adds	r6, r5, #1
 8004698:	3a30      	subs	r2, #48	@ 0x30
 800469a:	2a09      	cmp	r2, #9
 800469c:	d903      	bls.n	80046a6 <_svfiprintf_r+0x1a6>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0c8      	beq.n	8004634 <_svfiprintf_r+0x134>
 80046a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80046a4:	e7c6      	b.n	8004634 <_svfiprintf_r+0x134>
 80046a6:	4341      	muls	r1, r0
 80046a8:	0035      	movs	r5, r6
 80046aa:	2301      	movs	r3, #1
 80046ac:	1889      	adds	r1, r1, r2
 80046ae:	e7f1      	b.n	8004694 <_svfiprintf_r+0x194>
 80046b0:	aa07      	add	r2, sp, #28
 80046b2:	9200      	str	r2, [sp, #0]
 80046b4:	0021      	movs	r1, r4
 80046b6:	003a      	movs	r2, r7
 80046b8:	4b0f      	ldr	r3, [pc, #60]	@ (80046f8 <_svfiprintf_r+0x1f8>)
 80046ba:	9803      	ldr	r0, [sp, #12]
 80046bc:	e000      	b.n	80046c0 <_svfiprintf_r+0x1c0>
 80046be:	bf00      	nop
 80046c0:	9004      	str	r0, [sp, #16]
 80046c2:	9b04      	ldr	r3, [sp, #16]
 80046c4:	3301      	adds	r3, #1
 80046c6:	d1d6      	bne.n	8004676 <_svfiprintf_r+0x176>
 80046c8:	89bb      	ldrh	r3, [r7, #12]
 80046ca:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80046cc:	065b      	lsls	r3, r3, #25
 80046ce:	d500      	bpl.n	80046d2 <_svfiprintf_r+0x1d2>
 80046d0:	e72c      	b.n	800452c <_svfiprintf_r+0x2c>
 80046d2:	b021      	add	sp, #132	@ 0x84
 80046d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d6:	aa07      	add	r2, sp, #28
 80046d8:	9200      	str	r2, [sp, #0]
 80046da:	0021      	movs	r1, r4
 80046dc:	003a      	movs	r2, r7
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <_svfiprintf_r+0x1f8>)
 80046e0:	9803      	ldr	r0, [sp, #12]
 80046e2:	f000 f87b 	bl	80047dc <_printf_i>
 80046e6:	e7eb      	b.n	80046c0 <_svfiprintf_r+0x1c0>
 80046e8:	0800811c 	.word	0x0800811c
 80046ec:	08008122 	.word	0x08008122
 80046f0:	08008126 	.word	0x08008126
 80046f4:	00000000 	.word	0x00000000
 80046f8:	08004441 	.word	0x08004441

080046fc <_printf_common>:
 80046fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046fe:	0016      	movs	r6, r2
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	688a      	ldr	r2, [r1, #8]
 8004704:	690b      	ldr	r3, [r1, #16]
 8004706:	000c      	movs	r4, r1
 8004708:	9000      	str	r0, [sp, #0]
 800470a:	4293      	cmp	r3, r2
 800470c:	da00      	bge.n	8004710 <_printf_common+0x14>
 800470e:	0013      	movs	r3, r2
 8004710:	0022      	movs	r2, r4
 8004712:	6033      	str	r3, [r6, #0]
 8004714:	3243      	adds	r2, #67	@ 0x43
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	2a00      	cmp	r2, #0
 800471a:	d001      	beq.n	8004720 <_printf_common+0x24>
 800471c:	3301      	adds	r3, #1
 800471e:	6033      	str	r3, [r6, #0]
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	069b      	lsls	r3, r3, #26
 8004724:	d502      	bpl.n	800472c <_printf_common+0x30>
 8004726:	6833      	ldr	r3, [r6, #0]
 8004728:	3302      	adds	r3, #2
 800472a:	6033      	str	r3, [r6, #0]
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	2306      	movs	r3, #6
 8004730:	0015      	movs	r5, r2
 8004732:	401d      	ands	r5, r3
 8004734:	421a      	tst	r2, r3
 8004736:	d027      	beq.n	8004788 <_printf_common+0x8c>
 8004738:	0023      	movs	r3, r4
 800473a:	3343      	adds	r3, #67	@ 0x43
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	1e5a      	subs	r2, r3, #1
 8004740:	4193      	sbcs	r3, r2
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	0692      	lsls	r2, r2, #26
 8004746:	d430      	bmi.n	80047aa <_printf_common+0xae>
 8004748:	0022      	movs	r2, r4
 800474a:	9901      	ldr	r1, [sp, #4]
 800474c:	9800      	ldr	r0, [sp, #0]
 800474e:	9d08      	ldr	r5, [sp, #32]
 8004750:	3243      	adds	r2, #67	@ 0x43
 8004752:	47a8      	blx	r5
 8004754:	3001      	adds	r0, #1
 8004756:	d025      	beq.n	80047a4 <_printf_common+0xa8>
 8004758:	2206      	movs	r2, #6
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	2500      	movs	r5, #0
 800475e:	4013      	ands	r3, r2
 8004760:	2b04      	cmp	r3, #4
 8004762:	d105      	bne.n	8004770 <_printf_common+0x74>
 8004764:	6833      	ldr	r3, [r6, #0]
 8004766:	68e5      	ldr	r5, [r4, #12]
 8004768:	1aed      	subs	r5, r5, r3
 800476a:	43eb      	mvns	r3, r5
 800476c:	17db      	asrs	r3, r3, #31
 800476e:	401d      	ands	r5, r3
 8004770:	68a3      	ldr	r3, [r4, #8]
 8004772:	6922      	ldr	r2, [r4, #16]
 8004774:	4293      	cmp	r3, r2
 8004776:	dd01      	ble.n	800477c <_printf_common+0x80>
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	18ed      	adds	r5, r5, r3
 800477c:	2600      	movs	r6, #0
 800477e:	42b5      	cmp	r5, r6
 8004780:	d120      	bne.n	80047c4 <_printf_common+0xc8>
 8004782:	2000      	movs	r0, #0
 8004784:	e010      	b.n	80047a8 <_printf_common+0xac>
 8004786:	3501      	adds	r5, #1
 8004788:	68e3      	ldr	r3, [r4, #12]
 800478a:	6832      	ldr	r2, [r6, #0]
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	42ab      	cmp	r3, r5
 8004790:	ddd2      	ble.n	8004738 <_printf_common+0x3c>
 8004792:	0022      	movs	r2, r4
 8004794:	2301      	movs	r3, #1
 8004796:	9901      	ldr	r1, [sp, #4]
 8004798:	9800      	ldr	r0, [sp, #0]
 800479a:	9f08      	ldr	r7, [sp, #32]
 800479c:	3219      	adds	r2, #25
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	d1f0      	bne.n	8004786 <_printf_common+0x8a>
 80047a4:	2001      	movs	r0, #1
 80047a6:	4240      	negs	r0, r0
 80047a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047aa:	2030      	movs	r0, #48	@ 0x30
 80047ac:	18e1      	adds	r1, r4, r3
 80047ae:	3143      	adds	r1, #67	@ 0x43
 80047b0:	7008      	strb	r0, [r1, #0]
 80047b2:	0021      	movs	r1, r4
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	3145      	adds	r1, #69	@ 0x45
 80047b8:	7809      	ldrb	r1, [r1, #0]
 80047ba:	18a2      	adds	r2, r4, r2
 80047bc:	3243      	adds	r2, #67	@ 0x43
 80047be:	3302      	adds	r3, #2
 80047c0:	7011      	strb	r1, [r2, #0]
 80047c2:	e7c1      	b.n	8004748 <_printf_common+0x4c>
 80047c4:	0022      	movs	r2, r4
 80047c6:	2301      	movs	r3, #1
 80047c8:	9901      	ldr	r1, [sp, #4]
 80047ca:	9800      	ldr	r0, [sp, #0]
 80047cc:	9f08      	ldr	r7, [sp, #32]
 80047ce:	321a      	adds	r2, #26
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	d0e6      	beq.n	80047a4 <_printf_common+0xa8>
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7d1      	b.n	800477e <_printf_common+0x82>
	...

080047dc <_printf_i>:
 80047dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047de:	b08b      	sub	sp, #44	@ 0x2c
 80047e0:	9206      	str	r2, [sp, #24]
 80047e2:	000a      	movs	r2, r1
 80047e4:	3243      	adds	r2, #67	@ 0x43
 80047e6:	9307      	str	r3, [sp, #28]
 80047e8:	9005      	str	r0, [sp, #20]
 80047ea:	9203      	str	r2, [sp, #12]
 80047ec:	7e0a      	ldrb	r2, [r1, #24]
 80047ee:	000c      	movs	r4, r1
 80047f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80047f2:	2a78      	cmp	r2, #120	@ 0x78
 80047f4:	d809      	bhi.n	800480a <_printf_i+0x2e>
 80047f6:	2a62      	cmp	r2, #98	@ 0x62
 80047f8:	d80b      	bhi.n	8004812 <_printf_i+0x36>
 80047fa:	2a00      	cmp	r2, #0
 80047fc:	d100      	bne.n	8004800 <_printf_i+0x24>
 80047fe:	e0ba      	b.n	8004976 <_printf_i+0x19a>
 8004800:	497a      	ldr	r1, [pc, #488]	@ (80049ec <_printf_i+0x210>)
 8004802:	9104      	str	r1, [sp, #16]
 8004804:	2a58      	cmp	r2, #88	@ 0x58
 8004806:	d100      	bne.n	800480a <_printf_i+0x2e>
 8004808:	e08e      	b.n	8004928 <_printf_i+0x14c>
 800480a:	0025      	movs	r5, r4
 800480c:	3542      	adds	r5, #66	@ 0x42
 800480e:	702a      	strb	r2, [r5, #0]
 8004810:	e022      	b.n	8004858 <_printf_i+0x7c>
 8004812:	0010      	movs	r0, r2
 8004814:	3863      	subs	r0, #99	@ 0x63
 8004816:	2815      	cmp	r0, #21
 8004818:	d8f7      	bhi.n	800480a <_printf_i+0x2e>
 800481a:	f7fb fc71 	bl	8000100 <__gnu_thumb1_case_shi>
 800481e:	0016      	.short	0x0016
 8004820:	fff6001f 	.word	0xfff6001f
 8004824:	fff6fff6 	.word	0xfff6fff6
 8004828:	001ffff6 	.word	0x001ffff6
 800482c:	fff6fff6 	.word	0xfff6fff6
 8004830:	fff6fff6 	.word	0xfff6fff6
 8004834:	0036009f 	.word	0x0036009f
 8004838:	fff6007e 	.word	0xfff6007e
 800483c:	00b0fff6 	.word	0x00b0fff6
 8004840:	0036fff6 	.word	0x0036fff6
 8004844:	fff6fff6 	.word	0xfff6fff6
 8004848:	0082      	.short	0x0082
 800484a:	0025      	movs	r5, r4
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	3542      	adds	r5, #66	@ 0x42
 8004850:	1d11      	adds	r1, r2, #4
 8004852:	6019      	str	r1, [r3, #0]
 8004854:	6813      	ldr	r3, [r2, #0]
 8004856:	702b      	strb	r3, [r5, #0]
 8004858:	2301      	movs	r3, #1
 800485a:	e09e      	b.n	800499a <_printf_i+0x1be>
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	6809      	ldr	r1, [r1, #0]
 8004860:	1d02      	adds	r2, r0, #4
 8004862:	060d      	lsls	r5, r1, #24
 8004864:	d50b      	bpl.n	800487e <_printf_i+0xa2>
 8004866:	6806      	ldr	r6, [r0, #0]
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	2e00      	cmp	r6, #0
 800486c:	da03      	bge.n	8004876 <_printf_i+0x9a>
 800486e:	232d      	movs	r3, #45	@ 0x2d
 8004870:	9a03      	ldr	r2, [sp, #12]
 8004872:	4276      	negs	r6, r6
 8004874:	7013      	strb	r3, [r2, #0]
 8004876:	4b5d      	ldr	r3, [pc, #372]	@ (80049ec <_printf_i+0x210>)
 8004878:	270a      	movs	r7, #10
 800487a:	9304      	str	r3, [sp, #16]
 800487c:	e018      	b.n	80048b0 <_printf_i+0xd4>
 800487e:	6806      	ldr	r6, [r0, #0]
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	0649      	lsls	r1, r1, #25
 8004884:	d5f1      	bpl.n	800486a <_printf_i+0x8e>
 8004886:	b236      	sxth	r6, r6
 8004888:	e7ef      	b.n	800486a <_printf_i+0x8e>
 800488a:	6808      	ldr	r0, [r1, #0]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	c940      	ldmia	r1!, {r6}
 8004890:	0605      	lsls	r5, r0, #24
 8004892:	d402      	bmi.n	800489a <_printf_i+0xbe>
 8004894:	0640      	lsls	r0, r0, #25
 8004896:	d500      	bpl.n	800489a <_printf_i+0xbe>
 8004898:	b2b6      	uxth	r6, r6
 800489a:	6019      	str	r1, [r3, #0]
 800489c:	4b53      	ldr	r3, [pc, #332]	@ (80049ec <_printf_i+0x210>)
 800489e:	270a      	movs	r7, #10
 80048a0:	9304      	str	r3, [sp, #16]
 80048a2:	2a6f      	cmp	r2, #111	@ 0x6f
 80048a4:	d100      	bne.n	80048a8 <_printf_i+0xcc>
 80048a6:	3f02      	subs	r7, #2
 80048a8:	0023      	movs	r3, r4
 80048aa:	2200      	movs	r2, #0
 80048ac:	3343      	adds	r3, #67	@ 0x43
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	6863      	ldr	r3, [r4, #4]
 80048b2:	60a3      	str	r3, [r4, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	db06      	blt.n	80048c6 <_printf_i+0xea>
 80048b8:	2104      	movs	r1, #4
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	9d03      	ldr	r5, [sp, #12]
 80048be:	438a      	bics	r2, r1
 80048c0:	6022      	str	r2, [r4, #0]
 80048c2:	4333      	orrs	r3, r6
 80048c4:	d00c      	beq.n	80048e0 <_printf_i+0x104>
 80048c6:	9d03      	ldr	r5, [sp, #12]
 80048c8:	0030      	movs	r0, r6
 80048ca:	0039      	movs	r1, r7
 80048cc:	f7fb fca8 	bl	8000220 <__aeabi_uidivmod>
 80048d0:	9b04      	ldr	r3, [sp, #16]
 80048d2:	3d01      	subs	r5, #1
 80048d4:	5c5b      	ldrb	r3, [r3, r1]
 80048d6:	702b      	strb	r3, [r5, #0]
 80048d8:	0033      	movs	r3, r6
 80048da:	0006      	movs	r6, r0
 80048dc:	429f      	cmp	r7, r3
 80048de:	d9f3      	bls.n	80048c8 <_printf_i+0xec>
 80048e0:	2f08      	cmp	r7, #8
 80048e2:	d109      	bne.n	80048f8 <_printf_i+0x11c>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	07db      	lsls	r3, r3, #31
 80048e8:	d506      	bpl.n	80048f8 <_printf_i+0x11c>
 80048ea:	6862      	ldr	r2, [r4, #4]
 80048ec:	6923      	ldr	r3, [r4, #16]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	dc02      	bgt.n	80048f8 <_printf_i+0x11c>
 80048f2:	2330      	movs	r3, #48	@ 0x30
 80048f4:	3d01      	subs	r5, #1
 80048f6:	702b      	strb	r3, [r5, #0]
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	1b5b      	subs	r3, r3, r5
 80048fc:	6123      	str	r3, [r4, #16]
 80048fe:	9b07      	ldr	r3, [sp, #28]
 8004900:	0021      	movs	r1, r4
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	9805      	ldr	r0, [sp, #20]
 8004906:	9b06      	ldr	r3, [sp, #24]
 8004908:	aa09      	add	r2, sp, #36	@ 0x24
 800490a:	f7ff fef7 	bl	80046fc <_printf_common>
 800490e:	3001      	adds	r0, #1
 8004910:	d148      	bne.n	80049a4 <_printf_i+0x1c8>
 8004912:	2001      	movs	r0, #1
 8004914:	4240      	negs	r0, r0
 8004916:	b00b      	add	sp, #44	@ 0x2c
 8004918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800491a:	2220      	movs	r2, #32
 800491c:	6809      	ldr	r1, [r1, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	6022      	str	r2, [r4, #0]
 8004922:	2278      	movs	r2, #120	@ 0x78
 8004924:	4932      	ldr	r1, [pc, #200]	@ (80049f0 <_printf_i+0x214>)
 8004926:	9104      	str	r1, [sp, #16]
 8004928:	0021      	movs	r1, r4
 800492a:	3145      	adds	r1, #69	@ 0x45
 800492c:	700a      	strb	r2, [r1, #0]
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	6822      	ldr	r2, [r4, #0]
 8004932:	c940      	ldmia	r1!, {r6}
 8004934:	0610      	lsls	r0, r2, #24
 8004936:	d402      	bmi.n	800493e <_printf_i+0x162>
 8004938:	0650      	lsls	r0, r2, #25
 800493a:	d500      	bpl.n	800493e <_printf_i+0x162>
 800493c:	b2b6      	uxth	r6, r6
 800493e:	6019      	str	r1, [r3, #0]
 8004940:	07d3      	lsls	r3, r2, #31
 8004942:	d502      	bpl.n	800494a <_printf_i+0x16e>
 8004944:	2320      	movs	r3, #32
 8004946:	4313      	orrs	r3, r2
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	2e00      	cmp	r6, #0
 800494c:	d001      	beq.n	8004952 <_printf_i+0x176>
 800494e:	2710      	movs	r7, #16
 8004950:	e7aa      	b.n	80048a8 <_printf_i+0xcc>
 8004952:	2220      	movs	r2, #32
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	4393      	bics	r3, r2
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	e7f8      	b.n	800494e <_printf_i+0x172>
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	680d      	ldr	r5, [r1, #0]
 8004960:	1d10      	adds	r0, r2, #4
 8004962:	6949      	ldr	r1, [r1, #20]
 8004964:	6018      	str	r0, [r3, #0]
 8004966:	6813      	ldr	r3, [r2, #0]
 8004968:	062e      	lsls	r6, r5, #24
 800496a:	d501      	bpl.n	8004970 <_printf_i+0x194>
 800496c:	6019      	str	r1, [r3, #0]
 800496e:	e002      	b.n	8004976 <_printf_i+0x19a>
 8004970:	066d      	lsls	r5, r5, #25
 8004972:	d5fb      	bpl.n	800496c <_printf_i+0x190>
 8004974:	8019      	strh	r1, [r3, #0]
 8004976:	2300      	movs	r3, #0
 8004978:	9d03      	ldr	r5, [sp, #12]
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	e7bf      	b.n	80048fe <_printf_i+0x122>
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	1d11      	adds	r1, r2, #4
 8004982:	6019      	str	r1, [r3, #0]
 8004984:	6815      	ldr	r5, [r2, #0]
 8004986:	2100      	movs	r1, #0
 8004988:	0028      	movs	r0, r5
 800498a:	6862      	ldr	r2, [r4, #4]
 800498c:	f000 f856 	bl	8004a3c <memchr>
 8004990:	2800      	cmp	r0, #0
 8004992:	d001      	beq.n	8004998 <_printf_i+0x1bc>
 8004994:	1b40      	subs	r0, r0, r5
 8004996:	6060      	str	r0, [r4, #4]
 8004998:	6863      	ldr	r3, [r4, #4]
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	2300      	movs	r3, #0
 800499e:	9a03      	ldr	r2, [sp, #12]
 80049a0:	7013      	strb	r3, [r2, #0]
 80049a2:	e7ac      	b.n	80048fe <_printf_i+0x122>
 80049a4:	002a      	movs	r2, r5
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	9906      	ldr	r1, [sp, #24]
 80049aa:	9805      	ldr	r0, [sp, #20]
 80049ac:	9d07      	ldr	r5, [sp, #28]
 80049ae:	47a8      	blx	r5
 80049b0:	3001      	adds	r0, #1
 80049b2:	d0ae      	beq.n	8004912 <_printf_i+0x136>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	079b      	lsls	r3, r3, #30
 80049b8:	d415      	bmi.n	80049e6 <_printf_i+0x20a>
 80049ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049bc:	68e0      	ldr	r0, [r4, #12]
 80049be:	4298      	cmp	r0, r3
 80049c0:	daa9      	bge.n	8004916 <_printf_i+0x13a>
 80049c2:	0018      	movs	r0, r3
 80049c4:	e7a7      	b.n	8004916 <_printf_i+0x13a>
 80049c6:	0022      	movs	r2, r4
 80049c8:	2301      	movs	r3, #1
 80049ca:	9906      	ldr	r1, [sp, #24]
 80049cc:	9805      	ldr	r0, [sp, #20]
 80049ce:	9e07      	ldr	r6, [sp, #28]
 80049d0:	3219      	adds	r2, #25
 80049d2:	47b0      	blx	r6
 80049d4:	3001      	adds	r0, #1
 80049d6:	d09c      	beq.n	8004912 <_printf_i+0x136>
 80049d8:	3501      	adds	r5, #1
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	dcf0      	bgt.n	80049c6 <_printf_i+0x1ea>
 80049e4:	e7e9      	b.n	80049ba <_printf_i+0x1de>
 80049e6:	2500      	movs	r5, #0
 80049e8:	e7f7      	b.n	80049da <_printf_i+0x1fe>
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	0800812d 	.word	0x0800812d
 80049f0:	0800813e 	.word	0x0800813e

080049f4 <memmove>:
 80049f4:	b510      	push	{r4, lr}
 80049f6:	4288      	cmp	r0, r1
 80049f8:	d902      	bls.n	8004a00 <memmove+0xc>
 80049fa:	188b      	adds	r3, r1, r2
 80049fc:	4298      	cmp	r0, r3
 80049fe:	d308      	bcc.n	8004a12 <memmove+0x1e>
 8004a00:	2300      	movs	r3, #0
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d007      	beq.n	8004a16 <memmove+0x22>
 8004a06:	5ccc      	ldrb	r4, [r1, r3]
 8004a08:	54c4      	strb	r4, [r0, r3]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	e7f9      	b.n	8004a02 <memmove+0xe>
 8004a0e:	5c8b      	ldrb	r3, [r1, r2]
 8004a10:	5483      	strb	r3, [r0, r2]
 8004a12:	3a01      	subs	r2, #1
 8004a14:	d2fb      	bcs.n	8004a0e <memmove+0x1a>
 8004a16:	bd10      	pop	{r4, pc}

08004a18 <_sbrk_r>:
 8004a18:	2300      	movs	r3, #0
 8004a1a:	b570      	push	{r4, r5, r6, lr}
 8004a1c:	4d06      	ldr	r5, [pc, #24]	@ (8004a38 <_sbrk_r+0x20>)
 8004a1e:	0004      	movs	r4, r0
 8004a20:	0008      	movs	r0, r1
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	f7fd f918 	bl	8001c58 <_sbrk>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d103      	bne.n	8004a34 <_sbrk_r+0x1c>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d000      	beq.n	8004a34 <_sbrk_r+0x1c>
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	bd70      	pop	{r4, r5, r6, pc}
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	2000075c 	.word	0x2000075c

08004a3c <memchr>:
 8004a3c:	b2c9      	uxtb	r1, r1
 8004a3e:	1882      	adds	r2, r0, r2
 8004a40:	4290      	cmp	r0, r2
 8004a42:	d101      	bne.n	8004a48 <memchr+0xc>
 8004a44:	2000      	movs	r0, #0
 8004a46:	4770      	bx	lr
 8004a48:	7803      	ldrb	r3, [r0, #0]
 8004a4a:	428b      	cmp	r3, r1
 8004a4c:	d0fb      	beq.n	8004a46 <memchr+0xa>
 8004a4e:	3001      	adds	r0, #1
 8004a50:	e7f6      	b.n	8004a40 <memchr+0x4>

08004a52 <_realloc_r>:
 8004a52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a54:	0006      	movs	r6, r0
 8004a56:	000c      	movs	r4, r1
 8004a58:	0015      	movs	r5, r2
 8004a5a:	2900      	cmp	r1, #0
 8004a5c:	d105      	bne.n	8004a6a <_realloc_r+0x18>
 8004a5e:	0011      	movs	r1, r2
 8004a60:	f7ff fc5e 	bl	8004320 <_malloc_r>
 8004a64:	0004      	movs	r4, r0
 8004a66:	0020      	movs	r0, r4
 8004a68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a6a:	2a00      	cmp	r2, #0
 8004a6c:	d103      	bne.n	8004a76 <_realloc_r+0x24>
 8004a6e:	f7ff fbeb 	bl	8004248 <_free_r>
 8004a72:	002c      	movs	r4, r5
 8004a74:	e7f7      	b.n	8004a66 <_realloc_r+0x14>
 8004a76:	f000 f81c 	bl	8004ab2 <_malloc_usable_size_r>
 8004a7a:	0007      	movs	r7, r0
 8004a7c:	4285      	cmp	r5, r0
 8004a7e:	d802      	bhi.n	8004a86 <_realloc_r+0x34>
 8004a80:	0843      	lsrs	r3, r0, #1
 8004a82:	42ab      	cmp	r3, r5
 8004a84:	d3ef      	bcc.n	8004a66 <_realloc_r+0x14>
 8004a86:	0029      	movs	r1, r5
 8004a88:	0030      	movs	r0, r6
 8004a8a:	f7ff fc49 	bl	8004320 <_malloc_r>
 8004a8e:	9001      	str	r0, [sp, #4]
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d101      	bne.n	8004a98 <_realloc_r+0x46>
 8004a94:	9c01      	ldr	r4, [sp, #4]
 8004a96:	e7e6      	b.n	8004a66 <_realloc_r+0x14>
 8004a98:	002a      	movs	r2, r5
 8004a9a:	42bd      	cmp	r5, r7
 8004a9c:	d900      	bls.n	8004aa0 <_realloc_r+0x4e>
 8004a9e:	003a      	movs	r2, r7
 8004aa0:	0021      	movs	r1, r4
 8004aa2:	9801      	ldr	r0, [sp, #4]
 8004aa4:	f7ff fbc6 	bl	8004234 <memcpy>
 8004aa8:	0021      	movs	r1, r4
 8004aaa:	0030      	movs	r0, r6
 8004aac:	f7ff fbcc 	bl	8004248 <_free_r>
 8004ab0:	e7f0      	b.n	8004a94 <_realloc_r+0x42>

08004ab2 <_malloc_usable_size_r>:
 8004ab2:	1f0b      	subs	r3, r1, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	1f18      	subs	r0, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	da01      	bge.n	8004ac0 <_malloc_usable_size_r+0xe>
 8004abc:	580b      	ldr	r3, [r1, r0]
 8004abe:	18c0      	adds	r0, r0, r3
 8004ac0:	4770      	bx	lr
	...

08004ac4 <_init>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr

08004ad0 <_fini>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr
 8004adc:	0000      	movs	r0, r0
	...

08004ae0 <__FLASH_Program_Fast_veneer>:
 8004ae0:	b401      	push	{r0}
 8004ae2:	4802      	ldr	r0, [pc, #8]	@ (8004aec <__FLASH_Program_Fast_veneer+0xc>)
 8004ae4:	4684      	mov	ip, r0
 8004ae6:	bc01      	pop	{r0}
 8004ae8:	4760      	bx	ip
 8004aea:	bf00      	nop
 8004aec:	20000071 	.word	0x20000071

Disassembly of section .data:

20000000 <ani_idle>:
20000000:	08004f88 08005388 08005788 08005b88     .O...S...W...[..
20000010:	08005f88                                ._..

20000014 <SystemCoreClock>:
20000014:	00f42400                                .$..

20000018 <uwTickPrio>:
20000018:	00000004                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <_impure_ptr>:
20000020:	20000024                                $.. 

20000024 <_impure_data>:
20000024:	00000000 20000624 2000068c 200006f4     ....$.. ... ... 
	...

20000070 <FLASH_Program_Fast>:
20000070:	b580      	push	{r7, lr}
20000072:	b088      	sub	sp, #32
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
20000078:	6039      	str	r1, [r7, #0]
2000007a:	231f      	movs	r3, #31
2000007c:	18fb      	adds	r3, r7, r3
2000007e:	2200      	movs	r2, #0
20000080:	701a      	strb	r2, [r3, #0]
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	61bb      	str	r3, [r7, #24]
20000086:	683b      	ldr	r3, [r7, #0]
20000088:	617b      	str	r3, [r7, #20]
2000008a:	4b1a      	ldr	r3, [pc, #104]	@ (200000f4 <FLASH_Program_Fast+0x84>)
2000008c:	695a      	ldr	r2, [r3, #20]
2000008e:	4b19      	ldr	r3, [pc, #100]	@ (200000f4 <FLASH_Program_Fast+0x84>)
20000090:	2180      	movs	r1, #128	@ 0x80
20000092:	02c9      	lsls	r1, r1, #11
20000094:	430a      	orrs	r2, r1
20000096:	615a      	str	r2, [r3, #20]
20000098:	f3ef 8310 	mrs	r3, PRIMASK
2000009c:	60fb      	str	r3, [r7, #12]
2000009e:	68fb      	ldr	r3, [r7, #12]
200000a0:	613b      	str	r3, [r7, #16]
200000a2:	b672      	cpsid	i
200000a4:	46c0      	nop			@ (mov r8, r8)
200000a6:	e00f      	b.n	200000c8 <FLASH_Program_Fast+0x58>
200000a8:	697a      	ldr	r2, [r7, #20]
200000aa:	69bb      	ldr	r3, [r7, #24]
200000ac:	6812      	ldr	r2, [r2, #0]
200000ae:	601a      	str	r2, [r3, #0]
200000b0:	697b      	ldr	r3, [r7, #20]
200000b2:	3304      	adds	r3, #4
200000b4:	617b      	str	r3, [r7, #20]
200000b6:	69bb      	ldr	r3, [r7, #24]
200000b8:	3304      	adds	r3, #4
200000ba:	61bb      	str	r3, [r7, #24]
200000bc:	211f      	movs	r1, #31
200000be:	187b      	adds	r3, r7, r1
200000c0:	781a      	ldrb	r2, [r3, #0]
200000c2:	187b      	adds	r3, r7, r1
200000c4:	3201      	adds	r2, #1
200000c6:	701a      	strb	r2, [r3, #0]
200000c8:	231f      	movs	r3, #31
200000ca:	18fb      	adds	r3, r7, r3
200000cc:	781b      	ldrb	r3, [r3, #0]
200000ce:	2b3f      	cmp	r3, #63	@ 0x3f
200000d0:	d9ea      	bls.n	200000a8 <FLASH_Program_Fast+0x38>
200000d2:	46c0      	nop			@ (mov r8, r8)
200000d4:	4b07      	ldr	r3, [pc, #28]	@ (200000f4 <FLASH_Program_Fast+0x84>)
200000d6:	691a      	ldr	r2, [r3, #16]
200000d8:	2380      	movs	r3, #128	@ 0x80
200000da:	025b      	lsls	r3, r3, #9
200000dc:	4013      	ands	r3, r2
200000de:	d1f9      	bne.n	200000d4 <FLASH_Program_Fast+0x64>
200000e0:	693b      	ldr	r3, [r7, #16]
200000e2:	60bb      	str	r3, [r7, #8]
200000e4:	68bb      	ldr	r3, [r7, #8]
200000e6:	f383 8810 	msr	PRIMASK, r3
200000ea:	46c0      	nop			@ (mov r8, r8)
200000ec:	46c0      	nop			@ (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	b008      	add	sp, #32
200000f2:	bd80      	pop	{r7, pc}
200000f4:	40022000 	.word	0x40022000
